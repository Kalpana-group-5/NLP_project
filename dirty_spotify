,repo,language,readme_contents
0,zmb3/spotify,Go,"
Spotify
=======

[![GoDoc](https://godoc.org/github.com/zmb3/spotify?status.svg)](http://godoc.org/github.com/zmb3/spotify)

This is a Go wrapper for working with Spotify's
[Web API](https://developer.spotify.com/web-api/).

It aims to support every task listed in the Web API Endpoint Reference,
located [here](https://developer.spotify.com/web-api/endpoint-reference/).

By using this library you agree to Spotify's
[Developer Terms of Use](https://developer.spotify.com/developer-terms-of-use/).

## Installation

To install the library, simply

`go get github.com/zmb3/spotify/v2`

## Authentication

Spotify uses OAuth2 for authentication and authorization.  
As of May 29, 2017 _all_ Web API endpoints require an access token.

You can authenticate using a client credentials flow, but this does not provide
any authorization to access a user's private data.  For most use cases, you'll
want to use the authorization code flow.  This package includes an `Authenticator`
type to handle the details for you.

Start by registering your application at the following page:

https://developer.spotify.com/my-applications/.

You'll get a __client ID__ and __secret key__ for your application.  An easy way to
provide this data to your application is to set the SPOTIFY_ID and SPOTIFY_SECRET
environment variables.  If you choose not to use environment variables, you can
provide this data manually.


````Go
// the redirect URL must be an exact match of a URL you've registered for your application
// scopes determine which permissions the user is prompted to authorize
auth := spotifyauth.New(spotifyauth.WithRedirectURL(redirectURL), spotifyauth.WithScopes(spotifyauth.ScopeUserReadPrivate))

// get the user to this URL - how you do that is up to you
// you should specify a unique state string to identify the session
url := auth.AuthURL(state)

// the user will eventually be redirected back to your redirect URL
// typically you'll have a handler set up like the following:
func redirectHandler(w http.ResponseWriter, r *http.Request) {
      // use the same state string here that you used to generate the URL
      token, err := auth.Token(r.Context(), state, r)
      if err != nil {
            http.Error(w, ""Couldn't get token"", http.StatusNotFound)
            return
      }
      // create a client using the specified token
      client := spotify.New(auth.Client(r.Context(), token))

      // the client can now be used to make authenticated requests
}
````

You may find the following resources useful:

1. Spotify's Web API Authorization Guide:
https://developer.spotify.com/web-api/authorization-guide/

2. Go's OAuth2 package:
https://godoc.org/golang.org/x/oauth2/google


## Helpful Hints

### Automatic Retries

The API will throttle your requests if you are sending them too rapidly.
The client can be configured to wait and re-attempt the request.
To enable this, set the `AutoRetry` field on the `Client` struct to `true`.

For more information, see Spotify [rate-limits](https://developer.spotify.com/web-api/user-guide/#rate-limiting).

## API Examples

Examples of the API can be found in the [examples](examples) directory.

You may find tools such as [Spotify's Web API Console](https://developer.spotify.com/web-api/console/)
or [Rapid API](https://rapidapi.com/package/SpotifyPublicAPI/functions?utm_source=SpotifyGitHub&utm_medium=button&utm_content=Vendor_GitHub)
valuable for experimenting with the API.

### Missing data in responses

It's extremely common that when there is no market information available in your
request, that the Spotify API will simply return null for details about a track
or episode.

This typically occurs when you are just using an application's auth token, and
aren't impersonating a user via oauth. As when you are using a token associated
with a user, the user's market seems to be extracted from their profile and
used when producing the response.
"
1,spotDL/spotify-downloader,Python,"<!--- mdformat-toc start --slug=github --->

<!--- 
!!! IF EDITING THE README, ENSURE TO COPY THE WHOLE FILE TO index.md in `/docs/`
--->

<div align=""center"">

# spotDL v4

Download your Spotify playlists and songs along with album art and metadata

[![MIT License](https://img.shields.io/apm/l/atomic-design-ui.svg?style=flat-square&color=44CC11)](https://github.com/spotDL/spotify-downloader/blob/master/LICENSE)
[![PyPI version](https://img.shields.io/pypi/pyversions/spotDL?color=%2344CC11&style=flat-square)](https://pypi.org/project/spotdl/)
![GitHub commits since latest release (by date)](https://img.shields.io/github/commits-since/spotDL/spotify-downloader/latest?color=44CC11&style=flat-square)
[![PyPi downloads](https://img.shields.io/pypi/dw/spotDL?label=downloads@pypi&color=344CC11&style=flat-square)](https://pypi.org/project/spotdl/)
![Contributors](https://img.shields.io/github/contributors/spotDL/spotify-downloader?style=flat-square)
[![Discord](https://img.shields.io/discord/771628785447337985?label=discord&logo=discord&style=flat-square)](https://discord.gg/xCa23pwJWY)

</div>

> A new and improved version of spotDL: still the fastest, easiest and most accurate command-line music downloader

# Release Candidate Phase

Please note that v4 is still being worked on, is **not yet fully stable** and unreleased.

To install v4's latest release candidate run `pip install -U --force spotdl==4.0.0rc3`
> This is correct, the below commands will not install v4.

To install v3 or downgrade to it, run `pip install -U --force spotdl==3.9.6`
The documentation/instructions for v3 can be found [here](https://github.com/spotDL/spotify-downloader/blob/v3/README.md)

---

**[Read the documentation on ReadTheDocs!](http://spotdl.rtfd.io/)**

---

## Prerequisites

- [Visual C++ 2019 redistributable](https://docs.microsoft.com/pl-pl/cpp/windows/latest-supported-vc-redist?view=msvc-170#visual-studio-2015-2017-2019-and-2022) **(on Windows)**
- Python 3.7 or above (added to PATH)

> **_YouTube Music must be available in your country for spotDL to work. This is because we use YouTube Music to filter search results. You can check if YouTube Music is available in your country, by visiting [YouTube Music](https://music.youtube.com)._**

## Installation

Refer to our [Installation Guide](https://spotdl.rtfd.io/en/latest/installation/) for more details


- Python (**Recommended**)
  - _spotDL_ can be installed by running `pip install spotdl`.
  > On some systems you might have to change `pip` to `pip3`.

### Other options

- Prebuilt Executable
  - You can download the latest version from the [Releases Tab](https://github.com/spotDL/spotify-downloader/releases)
- On Termux
  - `curl -L https://raw.githubusercontent.com/spotDL/spotify-downloader/master/scripts/termux.sh | sh`
- Arch
  - There is an Arch User Repository (AUR) package for [spotDL](https://aur.archlinux.org/packages/python-spotdl/).
- Docker
  - Build image:

    ```bash
    docker build -t spotdl .
    ```

  - Launch container with spotDL parameters (see section below). You need to create mapped volume to access song files

    ```bash
    docker run --rm -v $(pwd):/music spotdl download [trackUrl]
    ```


### Installing FFmpeg

If using FFmpeg only for spotDL, you can install FFmpeg to your local directory.  
`spotdl --download-ffmpeg` will download FFmpeg to your spotDL installation directory.

We recommend the above option, but if you want to install FFmpeg system-wide,

- [Windows Tutorial](https://windowsloop.com/install-ffmpeg-windows-10/)
- OSX - `brew install ffmpeg`
- Linux - `sudo apt install ffmpeg` or use your distro's package manager

## Usage

To get started right away:

```sh
spotdl download [urls]
```

To start the Web UI:

```sh
spotdl web
```

You can run _spotDL_ as a package if running it as a script doesn't work:

```sh
python -m spotdl [urls]
```

---

### Further information can be found in our documentation

**[Read the documentation on ReadTheDocs!](http://spotdl.rtfd.io/)**

---

## Contributing

Interested in contributing? Check out our [CONTRIBUTING.md](docs/CONTRIBUTING.md) to find
resources around contributing along with a guide on how to set up a development environment.

## License

This project is Licensed under the [MIT](/LICENSE) License.
"
2,Spotifyd/spotifyd,Rust,"# Spotifyd <!-- omit in toc -->
<!-- ALL-CONTRIBUTORS-BADGE:START - Do not remove or modify this section -->
[![All Contributors](https://img.shields.io/badge/all_contributors-83-orange.svg?style=flat-square)](#contributors-)
<!-- ALL-CONTRIBUTORS-BADGE:END -->

[![Cargo Downloads](https://img.shields.io/crates/d/spotifyd)](https://crates.io/crates/spotifyd)
[![Dependabot Status][dependabot-badge]](https://dependabot.com)
[![Github Actions - CD][cd-badge]][github-actions]
[![Github Actions - CI][ci-badge]][github-actions]

> An open source Spotify client running as a UNIX daemon.

Spotifyd streams music just like the official client, but is more lightweight and supports more platforms. Spotifyd also supports the Spotify Connect protocol, which makes it show up as a device that can be controlled from the official clients.

> __Note:__ Spotifyd requires a Spotify Premium account.

__To read about how to install and configure Spotifyd, take a look at our [wiki][wiki]!__

- [Common issues](#common-issues)
- [Contributing](#contributing)
- [Credits](#credits)

## Common issues

- Spotifyd will not work without Spotify Premium
- The device name cannot contain spaces

## Contributing

We always appreciate help during the development of `spotifyd`! If you are new to programming, open source or Rust in general, take a look at issues tagged with [`good first issue`][good-first-issues]. These normally are easy to resolve and don't take much time to implement.

## Credits

This project would not have been possible without the amazing reverse engineering work done in [librespot](https://github.com/librespot-org/librespot), mostly by [plietar](https://github.com/plietar).

<!-- This section contains all links used within the document. This prevents cluttering and makes reading the raw markdown a lot easier -->
[github-actions]: https://github.com/Spotifyd/spotifyd/actions
[good-first-issues]: https://github.com/Spotifyd/spotifyd/issues?q=is%3Aissue+is%3Aopen+label%3A%22good+first+issue%22
[cd-badge]: https://github.com/Spotifyd/spotifyd/workflows/Continuous%20Deployment/badge.svg
[ci-badge]: https://github.com/Spotifyd/spotifyd/workflows/Continuous%20Integration/badge.svg
[dependabot-badge]: https://api.dependabot.com/badges/status?host=github&repo=Spotifyd/spotifyd
[wiki]: https://spotifyd.github.io/spotifyd/
"
3,Rigellute/spotify-tui,Rust,"# Spotify TUI

![Continuous Integration](https://github.com/Rigellute/spotify-tui/workflows/Continuous%20Integration/badge.svg?branch=master&event=push)
![](https://img.shields.io/badge/license-MIT-blueviolet.svg)
![](https://tokei.rs/b1/github/Rigellute/spotify-tui?category=code)
[![Crates.io](https://img.shields.io/crates/v/spotify-tui.svg)](https://crates.io/crates/spotify-tui)
![](https://img.shields.io/github/v/release/Rigellute/spotify-tui?color=%23c694ff)

<!-- ALL-CONTRIBUTORS-BADGE:START - Do not remove or modify this section -->
[![All Contributors](https://img.shields.io/badge/all_contributors-94-orange.svg?style=flat-square)](#contributors-)
<!-- ALL-CONTRIBUTORS-BADGE:END -->

[![Follow Alexander Keliris (Rigellute)](https://img.shields.io/twitter/follow/AlexKeliris?label=Follow%20Alexander%20Keliris%20%28Rigellute%29&style=social)](https://twitter.com/intent/follow?screen_name=AlexKeliris)

A Spotify client for the terminal written in Rust.

![Demo](https://user-images.githubusercontent.com/12150276/75177190-91d4ab00-572d-11ea-80bd-c5e28c7b17ad.gif)

The terminal in the demo above is using the [Rigel theme](https://rigel.netlify.com/).

- [Spotify TUI](#spotify-tui)
  - [Installation](#installation)
    - [Homebrew](#homebrew)
    - [Snap](#snap)
    - [AUR](#aur)
    - [Nix](#nix)
    - [Void Linux](#void-linux)
    - [Fedora/CentOS](#fedora-centos)
    - [Cargo](#cargo)
      - [Note on Linux](#note-on-linux)
    - [Windows](#windows-10)
      - [Scoop installer](#scoop-installer)
    - [Manual](#manual)
  - [Connecting to Spotify’s API](#connecting-to-spotifys-api)
  - [Usage](#usage)
- [Configuration](#configuration)
  - [Limitations](#limitations)
  - [Using with spotifyd](#using-with-spotifyd)
  - [Libraries used](#libraries-used)
  - [Development](#development)
    - [Windows Subsystem for Linux](#windows-subsystem-for-linux)
  - [Contributors](#contributors)
  - [Roadmap](#roadmap)
    - [High-level requirements yet to be implemented](#high-level-requirements-yet-to-be-implemented)

## Installation

The binary executable is `spt`.

### Homebrew

For both macOS and Linux

```bash
brew install spotify-tui
```

To update, run

```bash
brew upgrade spotify-tui
```

### Snap

For a system with Snap installed, run

```bash
snap install spt
```

The stable version will be installed for you automatically.

If you want to install the nightly build, run

```bash
snap install spt --edge
```

### AUR

For those on Arch Linux you can find the package on AUR [here](https://aur.archlinux.org/packages/spotify-tui/). If however you're using an AUR helper you can install directly from that, for example (in the case of [yay](https://github.com/Jguer/yay)), run

```bash
yay -S spotify-tui
```

### Nix

Available as the package `spotify-tui`. To install run:

```bash
nix-env -iA nixpkgs.spotify-tui
```

Where `nixpkgs` is the channel name in your configuration. For a more up-to-date installation, use the unstable channel.
It is also possible to add the package to `environment.systemPackages` (for NixOS), or `home.packages` when using [home-manager](https://github.com/rycee/home-manager).

### Void Linux

Available on the official repositories. To install, run

```bash
sudo xbps-install -Su spotify-tui
```

### Fedora/CentOS

Available on the [Copr](https://copr.fedorainfracloud.org/coprs/atim/spotify-tui/) repositories. To install, run

```bash
sudo dnf copr enable atim/spotify-tui -y && sudo dnf install spotify-tui
```

### Cargo

Use this option if your architecture is not supported by the pre-built binaries found on the [releases page](https://github.com/Rigellute/spotify-tui/releases).

First, install [Rust](https://www.rust-lang.org/tools/install) (using the recommended `rustup` installation method) and then

```bash
cargo install spotify-tui
```

This method will build the binary from source.

To update, run the same command again.

#### Note on Linux

For compilation on Linux the development packages for `libssl` are required.
For basic installation instructions, see [install OpenSSL](https://docs.rs/openssl/0.10.25/openssl/#automatic).
In order to locate dependencies, the compilation also requires `pkg-config` to be installed.

If you are using the Windows Subsystem for Linux, you'll need to [install additional dependencies](#windows-subsystem-for-linux).

### Windows 10

#### Scoop installer

First, make sure scoop installer is on your windows box, for instruction please visit [scoop.sh](https://scoop.sh)

Then open powershell and run following two commands:

```bash
scoop bucket add scoop-bucket https://github.com/Rigellute/scoop-bucket
scoop install spotify-tui
```

After that program is available as: `spt` or `spt.exe`

### Manual

1. Download the latest [binary](https://github.com/Rigellute/spotify-tui/releases) for your OS.
1. `cd` to the file you just downloaded and unzip
1. `cd` to `spotify-tui` and run with `./spt`

## Connecting to Spotify’s API

`spotify-tui` needs to connect to Spotify’s API in order to find music by
name, play tracks etc.

Instructions on how to set this up will be shown when you first run the app.

But here they are again:

1. Go to the [Spotify dashboard](https://developer.spotify.com/dashboard/applications)
1. Click `Create an app`
    - You now can see your `Client ID` and `Client Secret`
1. Now click `Edit Settings`
1. Add `http://localhost:8888/callback` to the Redirect URIs
1. Scroll down and click `Save`
1. You are now ready to authenticate with Spotify!
1. Go back to the terminal
1. Run `spt`
1. Enter your `Client ID`
1. Enter your `Client Secret`
1. Press enter to confirm the default port (8888) or enter a custom port
1. You will be redirected to an official Spotify webpage to ask you for permissions.
1. After accepting the permissions, you'll be redirected to localhost. If all goes well, the redirect URL will be parsed automatically and now you're done. If the local webserver fails for some reason you'll be redirected to a blank webpage that might say something like ""Connection Refused"" since no server is running. Regardless, copy the URL and paste into the prompt in the terminal.

And now you are ready to use the `spotify-tui` 🎉

You can edit the config at anytime at `${HOME}/.config/spotify-tui/client.yml`. (for snap `${HOME}/snap/spt/current/.config/spotify-tui/client.yml`)

## Usage

The binary is named `spt`.

Running `spt` with no arguments will bring up the UI. Press `?` to bring up a help menu that shows currently implemented key events and their actions.
There is also a CLI that is able to do most of the stuff the UI does. Use `spt --help` to learn more.

Here are some example to get you excited.
```
spt --completions zsh # Prints shell completions for zsh to stdout (bash, power-shell and more are supported)

spt play --name ""Your Playlist"" --playlist --random # Plays a random song from ""Your Playlist""
spt play --name ""A cool song"" --track # Plays 'A cool song'

spt playback --like --shuffle # Likes the current song and toggles shuffle mode
spt playback --toggle # Plays/pauses the current playback

spt list --liked --limit 50 # See your liked songs (50 is the max limit)

# Looks for 'An even cooler song' and gives you the '{name} from {album}' of up to 30 matches
spt search ""An even cooler song"" --tracks --format ""%t from %b"" --limit 30
```

# Configuration

A configuration file is located at `${HOME}/.config/spotify-tui/config.yml`, for snap `${HOME}/snap/spt/current/.config/spotify-tui/config.yml`
(not to be confused with client.yml which handles spotify authentication)

The following is a sample config.yml file:

```yaml
# Sample config file

# The theme colours can be an rgb string of the form ""255, 255, 255"" or a string that references the colours from your terminal theme: Reset, Black, Red, Green, Yellow, Blue, Magenta, Cyan, Gray, DarkGray, LightRed, LightGreen, LightYellow, LightBlue, LightMagenta, LightCyan, White.
theme:
  active: Cyan # current playing song in list
  banner: LightCyan # the ""spotify-tui"" banner on launch
  error_border: Red # error dialog border
  error_text: LightRed # error message text (e.g. ""Spotify API reported error 404"")
  hint: Yellow # hint text in errors
  hovered: Magenta # hovered pane border
  inactive: Gray # borders of inactive panes
  playbar_background: Black # background of progress bar
  playbar_progress: LightCyan # filled-in part of the progress bar
  playbar_progress_text: Cyan # song length and time played/left indicator in the progress bar
  playbar_text: White # artist name in player pane
  selected: LightCyan # a) selected pane border, b) hovered item in list, & c) track title in player
  text: ""255, 255, 255"" # text in panes
  header: White # header text in panes (e.g. 'Title', 'Artist', etc.)

behavior:
  seek_milliseconds: 5000
  volume_increment: 10
  # The lower the number the higher the ""frames per second"". You can decrease this number so that the audio visualisation is smoother but this can be expensive!
  tick_rate_milliseconds: 250
  # Enable text emphasis (typically italic/bold text styling). Disabling this might be important if the terminal config is otherwise restricted and rendering text escapes interferes with the UI.
  enable_text_emphasis: true
  # Controls whether to show a loading indicator in the top right of the UI whenever communicating with Spotify API
  show_loading_indicator: true
  # Disables the responsive layout that makes the search bar smaller on bigger
  # screens and enforces a wide search bar
  enforce_wide_search_bar: false
  # Determines the text icon to display next to ""liked"" Spotify items, such as
  # liked songs and albums, or followed artists. Can be any length string.
  # These icons require a patched nerd font.
  liked_icon: ♥
  shuffle_icon: 🔀
  repeat_track_icon: 🔂
  repeat_context_icon: 🔁
  playing_icon: ▶
  paused_icon: ⏸
  # Sets the window title to ""spt - Spotify TUI"" via ANSI escape code.
  set_window_title: true

keybindings:
  # Key stroke can be used if it only uses two keys:
  # ctrl-q works,
  # ctrl-alt-q doesn't.
  back: ""ctrl-q""

  jump_to_album: ""a""

  # Shift modifiers use a capital letter (also applies with other modifier keys
  # like ctrl-A)
  jump_to_artist_album: ""A""

  manage_devices: ""d""
  decrease_volume: ""-""
  increase_volume: ""+""
  toggle_playback: "" ""
  seek_backwards: ""<""
  seek_forwards: "">""
  next_track: ""n""
  previous_track: ""p""
  copy_song_url: ""c""
  copy_album_url: ""C""
  help: ""?""
  shuffle: ""ctrl-s""
  repeat: ""r""
  search: ""/""
  audio_analysis: ""v""
  jump_to_context: ""o""
  basic_view: ""B""
  add_item_to_queue: ""z""
```

## Limitations

This app uses the [Web API](https://developer.spotify.com/documentation/web-api/) from Spotify, which doesn't handle streaming itself. So you'll need either an official Spotify client open or a lighter weight alternative such as [spotifyd](https://github.com/Spotifyd/spotifyd).

If you want to play tracks, Spotify requires that you have a Premium account.

## Using with [spotifyd](https://github.com/Spotifyd/spotifyd)

Follow the spotifyd documentation to get set up.

After that there is not much to it.

1. Start running the spotifyd daemon.
1. Start up `spt`
1. Press `d` to go to the device selection menu and the spotifyd ""device"" should be there - if not check [these docs](https://github.com/Spotifyd/spotifyd#logging)

## Libraries used

- [tui-rs](https://github.com/fdehau/tui-rs)
- [rspotify](https://github.com/ramsayleung/rspotify)

## Development

1. [Install OpenSSL](https://docs.rs/openssl/0.10.25/openssl/#automatic)
1. [Install Rust](https://www.rust-lang.org/tools/install)
1. [Install `xorg-dev`](https://github.com/aweinstock314/rust-clipboard#prerequisites) (required for clipboard support)
1. Clone or fork this repo and `cd` to it
1. And then `cargo run`

### Windows Subsystem for Linux

You might get a linking error. If so, you'll probably need to install additional dependencies required by the clipboard package

```bash
sudo apt-get install -y -qq pkg-config libssl-dev libxcb1-dev libxcb-render0-dev libxcb-shape0-dev libxcb-xfixes0-dev
```

## Contributors

Thanks goes to these wonderful people ([emoji key](https://allcontributors.org/docs/en/emoji-key)):

<!-- ALL-CONTRIBUTORS-LIST:START - Do not remove or modify this section -->
<!-- prettier-ignore-start -->
<!-- markdownlint-disable -->
<table>
  <tr>
    <td align=""center""><a href=""https://keliris.dev/""><img src=""https://avatars2.githubusercontent.com/u/12150276?v=4?s=100"" width=""100px;"" alt=""""/><br /><sub><b>Alexander Keliris</b></sub></a><br /><a href=""https://github.com/Rigellute/spotify-tui/commits?author=Rigellute"" title=""Code"">💻</a> <a href=""https://github.com/Rigellute/spotify-tui/commits?author=Rigellute"" title=""Documentation"">📖</a> <a href=""#design-Rigellute"" title=""Design"">🎨</a> <a href=""#blog-Rigellute"" title=""Blogposts"">📝</a> <a href=""#ideas-Rigellute"" title=""Ideas, Planning, & Feedback"">🤔</a> <a href=""#infra-Rigellute"" title=""Infrastructure (Hosting, Build-Tools, etc)"">🚇</a> <a href=""#maintenance-Rigellute"" title=""Maintenance"">🚧</a> <a href=""#platform-Rigellute"" title=""Packaging/porting to new platform"">📦</a> <a href=""https://github.com/Rigellute/spotify-tui/pulls?q=is%3Apr+reviewed-by%3ARigellute"" title=""Reviewed Pull Requests"">👀</a></td>
    <td align=""center""><a href=""https://github.com/mikepombal""><img src=""https://avatars3.githubusercontent.com/u/6864231?v=4?s=100"" width=""100px;"" alt=""""/><br /><sub><b>Mickael Marques</b></sub></a><br /><a href=""#financial-mikepombal"" title=""Financial"">💵</a></td>
    <td align=""center""><a href=""https://github.com/HakierGrzonzo""><img src=""https://avatars0.githubusercontent.com/u/36668331?v=4?s=100"" width=""100px;"" alt=""""/><br /><sub><b>Grzegorz Koperwas</b></sub></a><br /><a href=""https://github.com/Rigellute/spotify-tui/commits?author=HakierGrzonzo"" title=""Documentation"">📖</a></td>
    <td align=""center""><a href=""https://github.com/amgassert""><img src=""https://avatars2.githubusercontent.com/u/22896005?v=4?s=100"" width=""100px;"" alt=""""/><br /><sub><b>Austin Gassert</b></sub></a><br /><a href=""https://github.com/Rigellute/spotify-tui/commits?author=amgassert"" title=""Code"">💻</a></td>
    <td align=""center""><a href=""https://robinette.dev""><img src=""https://avatars2.githubusercontent.com/u/30757528?v=4?s=100"" width=""100px;"" alt=""""/><br /><sub><b>Calen Robinette</b></sub></a><br /><a href=""https://github.com/Rigellute/spotify-tui/commits?author=calenrobinette"" title=""Code"">💻</a></td>
    <td align=""center""><a href=""https://mcofficer.me""><img src=""https://avatars0.githubusercontent.com/u/22377202?v=4?s=100"" width=""100px;"" alt=""""/><br /><sub><b>M*C*O</b></sub></a><br /><a href=""#infra-MCOfficer"" title=""Infrastructure (Hosting, Build-Tools, etc)"">🚇</a></td>
    <td align=""center""><a href=""https://github.com/eminence""><img src=""https://avatars0.githubusercontent.com/u/402454?v=4?s=100"" width=""100px;"" alt=""""/><br /><sub><b>Andrew Chin</b></sub></a><br /><a href=""https://github.com/Rigellute/spotify-tui/commits?author=eminence"" title=""Code"">💻</a></td>
  </tr>
  <tr>
    <td align=""center""><a href=""https://www.samnaser.com/""><img src=""https://avatars0.githubusercontent.com/u/4377348?v=4?s=100"" width=""100px;"" alt=""""/><br /><sub><b>Sam Naser</b></sub></a><br /><a href=""https://github.com/Rigellute/spotify-tui/commits?author=Monkeyanator"" title=""Code"">💻</a></td>
    <td align=""center""><a href=""https://github.com/radogost""><img src=""https://avatars0.githubusercontent.com/u/15713820?v=4?s=100"" width=""100px;"" alt=""""/><br /><sub><b>Micha</b></sub></a><br /><a href=""https://github.com/Rigellute/spotify-tui/commits?author=radogost"" title=""Code"">💻</a></td>
    <td align=""center""><a href=""https://github.com/neriglissar""><img src=""https://avatars2.githubusercontent.com/u/53038761?v=4?s=100"" width=""100px;"" alt=""""/><br /><sub><b>neriglissar</b></sub></a><br /><a href=""https://github.com/Rigellute/spotify-tui/commits?author=neriglissar"" title=""Code"">💻</a></td>
    <td align=""center""><a href=""https://github.com/TimonPost""><img src=""https://avatars3.githubusercontent.com/u/19969910?v=4?s=100"" width=""100px;"" alt=""""/><br /><sub><b>Timon</b></sub></a><br /><a href=""https://github.com/Rigellute/spotify-tui/commits?author=TimonPost"" title=""Code"">💻</a></td>
    <td align=""center""><a href=""https://github.com/echoSayonara""><img src=""https://avatars2.githubusercontent.com/u/54503126?v=4?s=100"" width=""100px;"" alt=""""/><br /><sub><b>echoSayonara</b></sub></a><br /><a href=""https://github.com/Rigellute/spotify-tui/commits?author=echoSayonara"" title=""Code"">💻</a></td>
    <td align=""center""><a href=""https://github.com/D-Nice""><img src=""https://avatars1.githubusercontent.com/u/2888248?v=4?s=100"" width=""100px;"" alt=""""/><br /><sub><b>D-Nice</b></sub></a><br /><a href=""https://github.com/Rigellute/spotify-tui/commits?author=D-Nice"" title=""Documentation"">📖</a> <a href=""#infra-D-Nice"" title=""Infrastructure (Hosting, Build-Tools, etc)"">🚇</a></td>
    <td align=""center""><a href=""http://gpawlik.com""><img src=""https://avatars3.githubusercontent.com/u/6296883?v=4?s=100"" width=""100px;"" alt=""""/><br /><sub><b>Grzegorz Pawlik</b></sub></a><br /><a href=""https://github.com/Rigellute/spotify-tui/commits?author=gpawlik"" title=""Code"">💻</a></td>
  </tr>
  <tr>
    <td align=""center""><a href=""http://lenny.ninja""><img src=""https://avatars1.githubusercontent.com/u/4027243?v=4?s=100"" width=""100px;"" alt=""""/><br /><sub><b>Lennart Bernhardt</b></sub></a><br /><a href=""https://github.com/Rigellute/spotify-tui/commits?author=LennyPenny"" title=""Code"">💻</a></td>
    <td align=""center""><a href=""https://github.com/BlackYoup""><img src=""https://avatars3.githubusercontent.com/u/6098160?v=4?s=100"" width=""100px;"" alt=""""/><br /><sub><b>Arnaud Lefebvre</b></sub></a><br /><a href=""https://github.com/Rigellute/spotify-tui/commits?author=BlackYoup"" title=""Code"">💻</a></td>
    <td align=""center""><a href=""https://github.com/tem1029""><img src=""https://avatars3.githubusercontent.com/u/57712713?v=4?s=100"" width=""100px;"" alt=""""/><br /><sub><b>tem1029</b></sub></a><br /><a href=""https://github.com/Rigellute/spotify-tui/commits?author=tem1029"" title=""Code"">💻</a></td>
    <td align=""center""><a href=""http://peter.moss.dk""><img src=""https://avatars2.githubusercontent.com/u/12544579?v=4?s=100"" width=""100px;"" alt=""""/><br /><sub><b>Peter K. Moss</b></sub></a><br /><a href=""https://github.com/Rigellute/spotify-tui/commits?author=Peterkmoss"" title=""Code"">💻</a></td>
    <td align=""center""><a href=""http://www.zephyrizing.net/""><img src=""https://avatars1.githubusercontent.com/u/113102?v=4?s=100"" width=""100px;"" alt=""""/><br /><sub><b>Geoff Shannon</b></sub></a><br /><a href=""https://github.com/Rigellute/spotify-tui/commits?author=RadicalZephyr"" title=""Code"">💻</a></td>
    <td align=""center""><a href=""http://zacklukem.info""><img src=""https://avatars0.githubusercontent.com/u/8787486?v=4?s=100"" width=""100px;"" alt=""""/><br /><sub><b>Zachary Mayhew</b></sub></a><br /><a href=""https://github.com/Rigellute/spotify-tui/commits?author=zacklukem"" title=""Code"">💻</a></td>
    <td align=""center""><a href=""http://jfaltis.de""><img src=""https://avatars2.githubusercontent.com/u/45465572?v=4?s=100"" width=""100px;"" alt=""""/><br /><sub><b>jfaltis</b></sub></a><br /><a href=""https://github.com/Rigellute/spotify-tui/commits?author=jfaltis"" title=""Code"">💻</a></td>
  </tr>
  <tr>
    <td align=""center""><a href=""https://marcelschr.me""><img src=""https://avatars3.githubusercontent.com/u/19377618?v=4?s=100"" width=""100px;"" alt=""""/><br /><sub><b>Marcel Schramm</b></sub></a><br /><a href=""https://github.com/Rigellute/spotify-tui/commits?author=Bios-Marcel"" title=""Documentation"">📖</a></td>
    <td align=""center""><a href=""https://github.com/fangyi-zhou""><img src=""https://avatars3.githubusercontent.com/u/7815439?v=4?s=100"" width=""100px;"" alt=""""/><br /><sub><b>Fangyi Zhou</b></sub></a><br /><a href=""https://github.com/Rigellute/spotify-tui/commits?author=fangyi-zhou"" title=""Code"">💻</a></td>
    <td align=""center""><a href=""https://github.com/synth-ruiner""><img src=""https://avatars1.githubusercontent.com/u/8642013?v=4?s=100"" width=""100px;"" alt=""""/><br /><sub><b>Max</b></sub></a><br /><a href=""https://github.com/Rigellute/spotify-tui/commits?author=synth-ruiner"" title=""Code"">💻</a></td>
    <td align=""center""><a href=""https://github.com/svenvNL""><img src=""https://avatars1.githubusercontent.com/u/13982006?v=4?s=100"" width=""100px;"" alt=""""/><br /><sub><b>Sven van der Vlist</b></sub></a><br /><a href=""https://github.com/Rigellute/spotify-tui/commits?author=svenvNL"" title=""Code"">💻</a></td>
    <td align=""center""><a href=""https://github.com/jacobchrismarsh""><img src=""https://avatars2.githubusercontent.com/u/15932179?v=4?s=100"" width=""100px;"" alt=""""/><br /><sub><b>jacobchrismarsh</b></sub></a><br /><a href=""https://github.com/Rigellute/spotify-tui/commits?author=jacobchrismarsh"" title=""Code"">💻</a></td>
    <td align=""center""><a href=""https://github.com/TheWalkingLeek""><img src=""https://avatars2.githubusercontent.com/u/36076343?v=4?s=100"" width=""100px;"" alt=""""/><br /><sub><b>Nils Rauch</b></sub></a><br /><a href=""https://github.com/Rigellute/spotify-tui/commits?author=TheWalkingLeek"" title=""Code"">💻</a></td>
    <td align=""center""><a href=""https://github.com/sputnick1124""><img src=""https://avatars1.githubusercontent.com/u/8843309?v=4?s=100"" width=""100px;"" alt=""""/><br /><sub><b>Nick Stockton</b></sub></a><br /><a href=""https://github.com/Rigellute/spotify-tui/commits?author=sputnick1124"" title=""Code"">💻</a> <a href=""https://github.com/Rigellute/spotify-tui/issues?q=author%3Asputnick1124"" title=""Bug reports"">🐛</a> <a href=""#maintenance-sputnick1124"" title=""Maintenance"">🚧</a> <a href=""#question-sputnick1124"" title=""Answering Questions"">💬</a> <a href=""https://github.com/Rigellute/spotify-tui/commits?author=sputnick1124"" title=""Documentation"">📖</a></td>
  </tr>
  <tr>
    <td align=""center""><a href=""http://stuarth.github.io""><img src=""https://avatars3.githubusercontent.com/u/7055?v=4?s=100"" width=""100px;"" alt=""""/><br /><sub><b>Stuart Hinson</b></sub></a><br /><a href=""https://github.com/Rigellute/spotify-tui/commits?author=stuarth"" title=""Code"">💻</a></td>
    <td align=""center""><a href=""https://github.com/samcal""><img src=""https://avatars3.githubusercontent.com/u/2117940?v=4?s=100"" width=""100px;"" alt=""""/><br /><sub><b>Sam Calvert</b></sub></a><br /><a href=""https://github.com/Rigellute/spotify-tui/commits?author=samcal"" title=""Code"">💻</a> <a href=""https://github.com/Rigellute/spotify-tui/commits?author=samcal"" title=""Documentation"">📖</a></td>
    <td align=""center""><a href=""https://github.com/jwijenbergh""><img src=""https://avatars0.githubusercontent.com/u/46386452?v=4?s=100"" width=""100px;"" alt=""""/><br /><sub><b>Jeroen Wijenbergh</b></sub></a><br /><a href=""https://github.com/Rigellute/spotify-tui/commits?author=jwijenbergh"" title=""Documentation"">📖</a></td>
    <td align=""center""><a href=""https://twitter.com/KimberleyCook91""><img src=""https://avatars3.githubusercontent.com/u/2683270?v=4?s=100"" width=""100px;"" alt=""""/><br /><sub><b>Kimberley Cook</b></sub></a><br /><a href=""https://github.com/Rigellute/spotify-tui/commits?author=KimberleyCook"" title=""Documentation"">📖</a></td>
    <td align=""center""><a href=""https://github.com/baxtea""><img src=""https://avatars0.githubusercontent.com/u/22502477?v=4?s=100"" width=""100px;"" alt=""""/><br /><sub><b>Audrey Baxter</b></sub></a><br /><a href=""https://github.com/Rigellute/spotify-tui/commits?author=baxtea"" title=""Code"">💻</a></td>
    <td align=""center""><a href=""https://koehr.in""><img src=""https://avatars2.githubusercontent.com/u/246402?v=4?s=100"" width=""100px;"" alt=""""/><br /><sub><b>Norman</b></sub></a><br /><a href=""https://github.com/Rigellute/spotify-tui/commits?author=nkoehring"" title=""Documentation"">📖</a></td>
    <td align=""center""><a href=""https://github.com/blackwolf12333""><img src=""https://avatars0.githubusercontent.com/u/1572975?v=4?s=100"" width=""100px;"" alt=""""/><br /><sub><b>Peter Maatman</b></sub></a><br /><a href=""https://github.com/Rigellute/spotify-tui/commits?author=blackwolf12333"" title=""Code"">💻</a></td>
  </tr>
  <tr>
    <td align=""center""><a href=""https://github.com/AlexandreSi""><img src=""https://avatars1.githubusercontent.com/u/32449369?v=4?s=100"" width=""100px;"" alt=""""/><br /><sub><b>AlexandreS</b></sub></a><br /><a href=""https://github.com/Rigellute/spotify-tui/commits?author=AlexandreSi"" title=""Code"">💻</a></td>
    <td align=""center""><a href=""https://github.com/fiinnnn""><img src=""https://avatars2.githubusercontent.com/u/5011796?v=4?s=100"" width=""100px;"" alt=""""/><br /><sub><b>Finn Vos</b></sub></a><br /><a href=""https://github.com/Rigellute/spotify-tui/commits?author=fiinnnn"" title=""Code"">💻</a></td>
    <td align=""center""><a href=""https://github.com/hurricanehrndz""><img src=""https://avatars0.githubusercontent.com/u/5804237?v=4?s=100"" width=""100px;"" alt=""""/><br /><sub><b>Carlos Hernandez</b></sub></a><br /><a href=""#platform-hurricanehrndz"" title=""Packaging/porting to new platform"">📦</a></td>
    <td align=""center""><a href=""https://github.com/pedrohva""><img src=""https://avatars3.githubusercontent.com/u/33297928?v=4?s=100"" width=""100px;"" alt=""""/><br /><sub><b>Pedro Alves</b></sub></a><br /><a href=""https://github.com/Rigellute/spotify-tui/commits?author=pedrohva"" title=""Code"">💻</a></td>
    <td align=""center""><a href=""https://gitlab.com/jtagcat/""><img src=""https://avatars1.githubusercontent.com/u/38327267?v=4?s=100"" width=""100px;"" alt=""""/><br /><sub><b>jtagcat</b></sub></a><br /><a href=""https://github.com/Rigellute/spotify-tui/commits?author=jtagcat"" title=""Documentation"">📖</a></td>
    <td align=""center""><a href=""https://github.com/BKitor""><img src=""https://avatars0.githubusercontent.com/u/16880850?v=4?s=100"" width=""100px;"" alt=""""/><br /><sub><b>Benjamin Kitor</b></sub></a><br /><a href=""https://github.com/Rigellute/spotify-tui/commits?author=BKitor"" title=""Code"">💻</a></td>
    <td align=""center""><a href=""https://ales.rocks""><img src=""https://avatars0.githubusercontent.com/u/544082?v=4?s=100"" width=""100px;"" alt=""""/><br /><sub><b>Aleš Najmann</b></sub></a><br /><a href=""https://github.com/Rigellute/spotify-tui/commits?author=littleli"" title=""Documentation"">📖</a> <a href=""#platform-littleli"" title=""Packaging/porting to new platform"">📦</a></td>
  </tr>
  <tr>
    <td align=""center""><a href=""https://github.com/jeremystucki""><img src=""https://avatars3.githubusercontent.com/u/7629727?v=4?s=100"" width=""100px;"" alt=""""/><br /><sub><b>Jeremy Stucki</b></sub></a><br /><a href=""https://github.com/Rigellute/spotify-tui/commits?author=jeremystucki"" title=""Code"">💻</a></td>
    <td align=""center""><a href=""http://pt2121.github.io""><img src=""https://avatars0.githubusercontent.com/u/616399?v=4?s=100"" width=""100px;"" alt=""""/><br /><sub><b>(´⌣`ʃƪ)</b></sub></a><br /><a href=""https://github.com/Rigellute/spotify-tui/commits?author=pt2121"" title=""Code"">💻</a></td>
    <td align=""center""><a href=""https://github.com/tim77""><img src=""https://avatars0.githubusercontent.com/u/5614476?v=4?s=100"" width=""100px;"" alt=""""/><br /><sub><b>Artem Polishchuk</b></sub></a><br /><a href=""#platform-tim77"" title=""Packaging/porting to new platform"">📦</a></td>
    <td align=""center""><a href=""https://github.com/slumber""><img src=""https://avatars2.githubusercontent.com/u/48099298?v=4?s=100"" width=""100px;"" alt=""""/><br /><sub><b>Chris Sosnin</b></sub></a><br /><a href=""https://github.com/Rigellute/spotify-tui/commits?author=slumber"" title=""Code"">💻</a></td>
    <td align=""center""><a href=""http://www.benbuhse.com""><img src=""https://avatars1.githubusercontent.com/u/21225303?v=4?s=100"" width=""100px;"" alt=""""/><br /><sub><b>Ben Buhse</b></sub></a><br /><a href=""https://github.com/Rigellute/spotify-tui/commits?author=bwbuhse"" title=""Documentation"">📖</a></td>
    <td align=""center""><a href=""https://github.com/ilnaes""><img src=""https://avatars1.githubusercontent.com/u/20805499?v=4?s=100"" width=""100px;"" alt=""""/><br /><sub><b>Sean Li</b></sub></a><br /><a href=""https://github.com/Rigellute/spotify-tui/commits?author=ilnaes"" title=""Code"">💻</a></td>
    <td align=""center""><a href=""https://github.com/TimotheeGerber""><img src=""https://avatars3.githubusercontent.com/u/37541513?v=4?s=100"" width=""100px;"" alt=""""/><br /><sub><b>TimotheeGerber</b></sub></a><br /><a href=""https://github.com/Rigellute/spotify-tui/commits?author=TimotheeGerber"" title=""Code"">💻</a> <a href=""https://github.com/Rigellute/spotify-tui/commits?author=TimotheeGerber"" title=""Documentation"">📖</a></td>
  </tr>
  <tr>
    <td align=""center""><a href=""https://github.com/fratajczak""><img src=""https://avatars2.githubusercontent.com/u/33835579?v=4?s=100"" width=""100px;"" alt=""""/><br /><sub><b>Ferdinand Ratajczak</b></sub></a><br /><a href=""https://github.com/Rigellute/spotify-tui/commits?author=fratajczak"" title=""Code"">💻</a></td>
    <td align=""center""><a href=""https://github.com/sheelc""><img src=""https://avatars0.githubusercontent.com/u/1355710?v=4?s=100"" width=""100px;"" alt=""""/><br /><sub><b>Sheel Choksi</b></sub></a><br /><a href=""https://github.com/Rigellute/spotify-tui/commits?author=sheelc"" title=""Code"">💻</a></td>
    <td align=""center""><a href=""http://fnanp.in-ulm.de/microblog/""><img src=""https://avatars1.githubusercontent.com/u/414112?v=4?s=100"" width=""100px;"" alt=""""/><br /><sub><b>Michael Hellwig</b></sub></a><br /><a href=""https://github.com/Rigellute/spotify-tui/commits?author=mhellwig"" title=""Documentation"">📖</a></td>
    <td align=""center""><a href=""https://github.com/oliver-daniel""><img src=""https://avatars2.githubusercontent.com/u/17235417?v=4?s=100"" width=""100px;"" alt=""""/><br /><sub><b>Oliver Daniel</b></sub></a><br /><a href=""https://github.com/Rigellute/spotify-tui/commits?author=oliver-daniel"" title=""Code"">💻</a></td>
    <td align=""center""><a href=""https://github.com/Drewsapple""><img src=""https://avatars2.githubusercontent.com/u/4532572?v=4?s=100"" width=""100px;"" alt=""""/><br /><sub><b>Drew Fisher</b></sub></a><br /><a href=""https://github.com/Rigellute/spotify-tui/commits?author=Drewsapple"" title=""Code"">💻</a></td>
    <td align=""center""><a href=""https://github.com/ncoder-1""><img src=""https://avatars0.githubusercontent.com/u/7622286?v=4?s=100"" width=""100px;"" alt=""""/><br /><sub><b>ncoder-1</b></sub></a><br /><a href=""https://github.com/Rigellute/spotify-tui/commits?author=ncoder-1"" title=""Documentation"">📖</a></td>
    <td align=""center""><a href=""http://macguire.me""><img src=""https://avatars3.githubusercontent.com/u/18323154?v=4?s=100"" width=""100px;"" alt=""""/><br /><sub><b>Macguire Rintoul</b></sub></a><br /><a href=""https://github.com/Rigellute/spotify-tui/commits?author=macguirerintoul"" title=""Documentation"">📖</a></td>
  </tr>
  <tr>
    <td align=""center""><a href=""http://ricardohe97.github.io""><img src=""https://avatars3.githubusercontent.com/u/28399979?v=4?s=100"" width=""100px;"" alt=""""/><br /><sub><b>Ricardo Holguin</b></sub></a><br /><a href=""https://github.com/Rigellute/spotify-tui/commits?author=RicardoHE97"" title=""Code"">💻</a></td>
    <td align=""center""><a href=""https://ksk.netlify.com""><img src=""https://avatars3.githubusercontent.com/u/13160198?v=4?s=100"" width=""100px;"" alt=""""/><br /><sub><b>Keisuke Toyota</b></sub></a><br /><a href=""https://github.com/Rigellute/spotify-tui/commits?author=ksk001100"" title=""Code"">💻</a></td>
    <td align=""center""><a href=""https://jackson15j.github.io""><img src=""https://avatars1.githubusercontent.com/u/3226988?v=4?s=100"" width=""100px;"" alt=""""/><br /><sub><b>Craig Astill</b></sub></a><br /><a href=""https://github.com/Rigellute/spotify-tui/commits?author=jackson15j"" title=""Code"">💻</a></td>
    <td align=""center""><a href=""https://github.com/onielfa""><img src=""https://avatars0.githubusercontent.com/u/4358172?v=4?s=100"" width=""100px;"" alt=""""/><br /><sub><b>Onielfa</b></sub></a><br /><a href=""https://github.com/Rigellute/spotify-tui/commits?author=onielfa"" title=""Code"">💻</a></td>
    <td align=""center""><a href=""https://usrme.xyz""><img src=""https://avatars3.githubusercontent.com/u/5902545?v=4?s=100"" width=""100px;"" alt=""""/><br /><sub><b>usrme</b></sub></a><br /><a href=""https://github.com/Rigellute/spotify-tui/commits?author=usrme"" title=""Documentation"">📖</a></td>
    <td align=""center""><a href=""https://github.com/murlakatamenka""><img src=""https://avatars2.githubusercontent.com/u/7361274?v=4?s=100"" width=""100px;"" alt=""""/><br /><sub><b>Sergey A.</b></sub></a><br /><a href=""https://github.com/Rigellute/spotify-tui/commits?author=murlakatamenka"" title=""Code"">💻</a></td>
    <td align=""center""><a href=""https://github.com/elcih17""><img src=""https://avatars3.githubusercontent.com/u/17084445?v=4?s=100"" width=""100px;"" alt=""""/><br /><sub><b>Hideyuki Okada</b></sub></a><br /><a href=""https://github.com/Rigellute/spotify-tui/commits?author=elcih17"" title=""Code"">💻</a></td>
  </tr>
  <tr>
    <td align=""center""><a href=""https://github.com/kepae""><img src=""https://avatars2.githubusercontent.com/u/4238598?v=4?s=100"" width=""100px;"" alt=""""/><br /><sub><b>kepae</b></sub></a><br /><a href=""https://github.com/Rigellute/spotify-tui/commits?author=kepae"" title=""Code"">💻</a> <a href=""https://github.com/Rigellute/spotify-tui/commits?author=kepae"" title=""Documentation"">📖</a></td>
    <td align=""center""><a href=""https://github.com/ericonr""><img src=""https://avatars0.githubusercontent.com/u/34201958?v=4?s=100"" width=""100px;"" alt=""""/><br /><sub><b>Érico Nogueira Rolim</b></sub></a><br /><a href=""https://github.com/Rigellute/spotify-tui/commits?author=ericonr"" title=""Code"">💻</a></td>
    <td align=""center""><a href=""https://github.com/BeneCollyridam""><img src=""https://avatars2.githubusercontent.com/u/15802915?v=4?s=100"" width=""100px;"" alt=""""/><br /><sub><b>Alexander Meinhardt Scheurer</b></sub></a><br /><a href=""https://github.com/Rigellute/spotify-tui/commits?author=BeneCollyridam"" title=""Code"">💻</a></td>
    <td align=""center""><a href=""https://github.com/Toaster192""><img src=""https://avatars0.githubusercontent.com/u/14369229?v=4?s=100"" width=""100px;"" alt=""""/><br /><sub><b>Ondřej Kinšt</b></sub></a><br /><a href=""https://github.com/Rigellute/spotify-tui/commits?author=Toaster192"" title=""Code"">💻</a></td>
    <td align=""center""><a href=""https://github.com/Kryan90""><img src=""https://avatars3.githubusercontent.com/u/18740821?v=4?s=100"" width=""100px;"" alt=""""/><br /><sub><b>Kryan90</b></sub></a><br /><a href=""https://github.com/Rigellute/spotify-tui/commits?author=Kryan90"" title=""Documentation"">📖</a></td>
    <td align=""center""><a href=""https://github.com/n-ivanov""><img src=""https://avatars3.githubusercontent.com/u/11470871?v=4?s=100"" width=""100px;"" alt=""""/><br /><sub><b>n-ivanov</b></sub></a><br /><a href=""https://github.com/Rigellute/spotify-tui/commits?author=n-ivanov"" title=""Code"">💻</a></td>
    <td align=""center""><a href=""http://matthewbilyeu.com/resume/""><img src=""https://avatars3.githubusercontent.com/u/1185129?v=4?s=100"" width=""100px;"" alt=""""/><br /><sub><b>bi1yeu</b></sub></a><br /><a href=""https://github.com/Rigellute/spotify-tui/commits?author=bi1yeu"" title=""Code"">💻</a> <a href=""https://github.com/Rigellute/spotify-tui/commits?author=bi1yeu"" title=""Documentation"">📖</a></td>
  </tr>
  <tr>
    <td align=""center""><a href=""https://github.com/Utagai""><img src=""https://avatars2.githubusercontent.com/u/10730394?v=4?s=100"" width=""100px;"" alt=""""/><br /><sub><b>May</b></sub></a><br /><a href=""https://github.com/Rigellute/spotify-tui/commits?author=Utagai"" title=""Code"">💻</a></td>
    <td align=""center""><a href=""https://mucinoab.github.io/""><img src=""https://avatars1.githubusercontent.com/u/28630268?v=4?s=100"" width=""100px;"" alt=""""/><br /><sub><b>Bruno A. Muciño</b></sub></a><br /><a href=""https://github.com/Rigellute/spotify-tui/commits?author=mucinoab"" title=""Code"">💻</a></td>
    <td align=""center""><a href=""https://github.com/OrangeFran""><img src=""https://avatars2.githubusercontent.com/u/55061632?v=4?s=100"" width=""100px;"" alt=""""/><br /><sub><b>Finn Hediger</b></sub></a><br /><a href=""https://github.com/Rigellute/spotify-tui/commits?author=OrangeFran"" title=""Code"">💻</a></td>
    <td align=""center""><a href=""https://github.com/dp304""><img src=""https://avatars1.githubusercontent.com/u/34493835?v=4?s=100"" width=""100px;"" alt=""""/><br /><sub><b>dp304</b></sub></a><br /><a href=""https://github.com/Rigellute/spotify-tui/commits?author=dp304"" title=""Code"">💻</a></td>
    <td align=""center""><a href=""http://marcomicera.github.io""><img src=""https://avatars0.githubusercontent.com/u/13918587?v=4?s=100"" width=""100px;"" alt=""""/><br /><sub><b>Marco Micera</b></sub></a><br /><a href=""https://github.com/Rigellute/spotify-tui/commits?author=marcomicera"" title=""Documentation"">📖</a></td>
    <td align=""center""><a href=""http://marcoieni.com""><img src=""https://avatars3.githubusercontent.com/u/11428655?v=4?s=100"" width=""100px;"" alt=""""/><br /><sub><b>Marco Ieni</b></sub></a><br /><a href=""#infra-MarcoIeni"" title=""Infrastructure (Hosting, Build-Tools, etc)"">🚇</a></td>
    <td align=""center""><a href=""https://github.com/ArturKovacs""><img src=""https://avatars3.githubusercontent.com/u/8320264?v=4?s=100"" width=""100px;"" alt=""""/><br /><sub><b>Artúr Kovács</b></sub></a><br /><a href=""https://github.com/Rigellute/spotify-tui/commits?author=ArturKovacs"" title=""Code"">💻</a></td>
  </tr>
  <tr>
    <td align=""center""><a href=""https://github.com/aokellermann""><img src=""https://avatars.githubusercontent.com/u/26678747?v=4?s=100"" width=""100px;"" alt=""""/><br /><sub><b>Antony Kellermann</b></sub></a><br /><a href=""https://github.com/Rigellute/spotify-tui/commits?author=aokellermann"" title=""Code"">💻</a></td>
    <td align=""center""><a href=""https://github.com/rasmuspeders1""><img src=""https://avatars.githubusercontent.com/u/1898960?v=4?s=100"" width=""100px;"" alt=""""/><br /><sub><b>Rasmus Pedersen</b></sub></a><br /><a href=""https://github.com/Rigellute/spotify-tui/commits?author=rasmuspeders1"" title=""Code"">💻</a></td>
    <td align=""center""><a href=""https://github.com/noir-Z""><img src=""https://avatars.githubusercontent.com/u/45096516?v=4?s=100"" width=""100px;"" alt=""""/><br /><sub><b>noir-Z</b></sub></a><br /><a href=""https://github.com/Rigellute/spotify-tui/commits?author=noir-Z"" title=""Documentation"">📖</a></td>
    <td align=""center""><a href=""https://davidbailey.codes/""><img src=""https://avatars.githubusercontent.com/u/4248177?v=4?s=100"" width=""100px;"" alt=""""/><br /><sub><b>David Bailey</b></sub></a><br /><a href=""https://github.com/Rigellute/spotify-tui/commits?author=davidbailey00"" title=""Documentation"">📖</a></td>
    <td align=""center""><a href=""https://github.com/sheepwall""><img src=""https://avatars.githubusercontent.com/u/22132993?v=4?s=100"" width=""100px;"" alt=""""/><br /><sub><b>sheepwall</b></sub></a><br /><a href=""https://github.com/Rigellute/spotify-tui/commits?author=sheepwall"" title=""Code"">💻</a></td>
    <td align=""center""><a href=""https://github.com/Hwatwasthat""><img src=""https://avatars.githubusercontent.com/u/29790143?v=4?s=100"" width=""100px;"" alt=""""/><br /><sub><b>Hwatwasthat</b></sub></a><br /><a href=""https://github.com/Rigellute/spotify-tui/commits?author=Hwatwasthat"" title=""Code"">💻</a></td>
    <td align=""center""><a href=""https://github.com/Jesse-Bakker""><img src=""https://avatars.githubusercontent.com/u/22473248?v=4?s=100"" width=""100px;"" alt=""""/><br /><sub><b>Jesse</b></sub></a><br /><a href=""https://github.com/Rigellute/spotify-tui/commits?author=Jesse-Bakker"" title=""Code"">💻</a></td>
  </tr>
  <tr>
    <td align=""center""><a href=""https://github.com/hantatsang""><img src=""https://avatars.githubusercontent.com/u/11912225?v=4?s=100"" width=""100px;"" alt=""""/><br /><sub><b>Sang</b></sub></a><br /><a href=""https://github.com/Rigellute/spotify-tui/commits?author=hantatsang"" title=""Documentation"">📖</a></td>
    <td align=""center""><a href=""https://yktakaha4.github.io/""><img src=""https://avatars.githubusercontent.com/u/20282867?v=4?s=100"" width=""100px;"" alt=""""/><br /><sub><b>Yuuki Takahashi</b></sub></a><br /><a href=""https://github.com/Rigellute/spotify-tui/commits?author=yktakaha4"" title=""Documentation"">📖</a></td>
    <td align=""center""><a href=""https://alejandr0angul0.dev/""><img src=""https://avatars.githubusercontent.com/u/5242883?v=4?s=100"" width=""100px;"" alt=""""/><br /><sub><b>Alejandro Angulo</b></sub></a><br /><a href=""https://github.com/Rigellute/spotify-tui/commits?author=alejandro-angulo"" title=""Code"">💻</a></td>
    <td align=""center""><a href=""http://t.me/lego1as""><img src=""https://avatars.githubusercontent.com/u/11005780?v=4?s=100"" width=""100px;"" alt=""""/><br /><sub><b>Anton Kostin</b></sub></a><br /><a href=""https://github.com/Rigellute/spotify-tui/commits?author=masguit42"" title=""Documentation"">📖</a></td>
    <td align=""center""><a href=""https://justinsexton.net""><img src=""https://avatars.githubusercontent.com/u/20236003?v=4?s=100"" width=""100px;"" alt=""""/><br /><sub><b>Justin Sexton</b></sub></a><br /><a href=""https://github.com/Rigellute/spotify-tui/commits?author=JSextonn"" title=""Code"">💻</a></td>
    <td align=""center""><a href=""https://github.com/lejiati""><img src=""https://avatars.githubusercontent.com/u/6442124?v=4?s=100"" width=""100px;"" alt=""""/><br /><sub><b>Jiati Le</b></sub></a><br /><a href=""https://github.com/Rigellute/spotify-tui/commits?author=lejiati"" title=""Documentation"">📖</a></td>
    <td align=""center""><a href=""https://github.com/cobbinma""><img src=""https://avatars.githubusercontent.com/u/578718?v=4?s=100"" width=""100px;"" alt=""""/><br /><sub><b>Matthew Cobbing</b></sub></a><br /><a href=""https://github.com/Rigellute/spotify-tui/commits?author=cobbinma"" title=""Code"">💻</a></td>
  </tr>
  <tr>
    <td align=""center""><a href=""https://milo123459.vercel.app""><img src=""https://avatars.githubusercontent.com/u/50248166?v=4?s=100"" width=""100px;"" alt=""""/><br /><sub><b>Milo</b></sub></a><br /><a href=""#infra-Milo123459"" title=""Infrastructure (Hosting, Build-Tools, etc)"">🚇</a></td>
    <td align=""center""><a href=""https://www.diegoveralli.com""><img src=""https://avatars.githubusercontent.com/u/297206?v=4?s=100"" width=""100px;"" alt=""""/><br /><sub><b>Diego Veralli</b></sub></a><br /><a href=""https://github.com/Rigellute/spotify-tui/commits?author=diegov"" title=""Code"">💻</a></td>
    <td align=""center""><a href=""https://github.com/majabojarska""><img src=""https://avatars.githubusercontent.com/u/33836570?v=4?s=100"" width=""100px;"" alt=""""/><br /><sub><b>Maja Bojarska</b></sub></a><br /><a href=""https://github.com/Rigellute/spotify-tui/commits?author=majabojarska"" title=""Code"">💻</a></td>
  </tr>
</table>

<!-- markdownlint-restore -->
<!-- prettier-ignore-end -->

<!-- ALL-CONTRIBUTORS-LIST:END -->

This project follows the [all-contributors](https://github.com/all-contributors/all-contributors) specification. Contributions of any kind welcome!

## Roadmap

The goal is to eventually implement almost every Spotify feature.

### High-level requirements yet to be implemented

- Add songs to a playlist
- Be able to scroll through result pages in every view

This table shows all that is possible with the Spotify API, what is implemented already, and whether that is essential.

| API method                                        | Implemented yet? | Explanation                                                                                                                                                  | Essential? |
| ------------------------------------------------- | ---------------- | ------------------------------------------------------------------------------------------------------------------------------------------------------------ | ---------- |
| track                                             | No               | returns a single track given the track's ID, URI or URL                                                                                                      | No         |
| tracks                                            | No               | returns a list of tracks given a list of track IDs, URIs, or URLs                                                                                            | No         |
| artist                                            | No               | returns a single artist given the artist's ID, URI or URL                                                                                                    | Yes        |
| artists                                           | No               | returns a list of artists given the artist IDs, URIs, or URLs                                                                                                | No         |
| artist_albums                                     | Yes              | Get Spotify catalog information about an artist's albums                                                                                                     | Yes        |
| artist_top_tracks                                 | Yes              | Get Spotify catalog information about an artist's top 10 tracks by country.                                                                                  | Yes        |
| artist_related_artists                            | Yes              | Get Spotify catalog information about artists similar to an identified artist. Similarity is based on analysis of the Spotify community's listening history. | Yes        |
| album                                             | Yes              | returns a single album given the album's ID, URIs or URL                                                                                                     | Yes        |
| albums                                            | No               | returns a list of albums given the album IDs, URIs, or URLs                                                                                                  | No         |
| search_album                                      | Yes              | Search album based on query                                                                                                                                  | Yes        |
| search_artist                                     | Yes              | Search artist based on query                                                                                                                                 | Yes        |
| search_track                                      | Yes              | Search track based on query                                                                                                                                  | Yes        |
| search_playlist                                   | Yes              | Search playlist based on query                                                                                                                               | Yes        |
| album_track                                       | Yes              | Get Spotify catalog information about an album's tracks                                                                                                      | Yes        |
| user                                              | No               | Gets basic profile information about a Spotify User                                                                                                          | No         |
| playlist                                          | Yes              | Get full details about Spotify playlist                                                                                                                      | Yes        |
| current_user_playlists                            | Yes              | Get current user playlists without required getting his profile                                                                                              | Yes        |
| user_playlists                                    | No               | Gets playlists of a user                                                                                                                                     | No         |
| user_playlist                                     | No               | Gets playlist of a user                                                                                                                                      | No         |
| user_playlist_tracks                              | Yes              | Get full details of the tracks of a playlist owned by a user                                                                                                 | Yes        |
| user_playlist_create                              | No               | Creates a playlist for a user                                                                                                                                | Yes        |
| user_playlist_change_detail                       | No               | Changes a playlist's name and/or public/private state                                                                                                        | Yes        |
| user_playlist_unfollow                            | Yes              | Unfollows (deletes) a playlist for a user                                                                                                                    | Yes        |
| user_playlist_add_track                           | No               | Adds tracks to a playlist                                                                                                                                    | Yes        |
| user_playlist_replace_track                       | No               | Replace all tracks in a playlist                                                                                                                             | No         |
| user_playlist_recorder_tracks                     | No               | Reorder tracks in a playlist                                                                                                                                 | No         |
| user_playlist_remove_all_occurrences_of_track     | No               | Removes all occurrences of the given tracks from the given playlist                                                                                          | No         |
| user_playlist_remove_specific_occurrenes_of_track | No               | Removes all occurrences of the given tracks from the given playlist                                                                                          | No         |
| user_playlist_follow_playlist                     | Yes              | Add the current authenticated user as a follower of a playlist.                                                                                              | Yes        |
| user_playlist_check_follow                        | No               | Check to see if the given users are following the given playlist                                                                                             | Yes        |
| me                                                | No               | Get detailed profile information about the current user.                                                                                                     | Yes        |
| current_user                                      | No               | Alias for `me`                                                                                                                                               | Yes        |
| current_user_playing_track                        | Yes              | Get information about the current users currently playing track.                                                                                             | Yes        |
| current_user_saved_albums                         | Yes              | Gets a list of the albums saved in the current authorized user's ""Your Music"" library                                                                        | Yes        |
| current_user_saved_tracks                         | Yes              | Gets the user's saved tracks or ""Liked Songs""                                                                                                                | Yes        |
| current_user_followed_artists                     | Yes              | Gets a list of the artists followed by the current authorized user                                                                                           | Yes        |
| current_user_saved_tracks_delete                  | Yes              | Remove one or more tracks from the current user's ""Your Music"" library.                                                                                      | Yes        |
| current_user_saved_tracks_contain                 | No               | Check if one or more tracks is already saved in the current Spotify user’s “Your Music” library.                                                             | Yes        |
| current_user_saved_tracks_add                     | Yes              | Save one or more tracks to the current user's ""Your Music"" library.                                                                                          | Yes        |
| current_user_top_artists                          | No               | Get the current user's top artists                                                                                                                           | Yes        |
| current_user_top_tracks                           | No               | Get the current user's top tracks                                                                                                                            | Yes        |
| current_user_recently_played                      | Yes              | Get the current user's recently played tracks                                                                                                                | Yes        |
| current_user_saved_albums_add                     | Yes              | Add one or more albums to the current user's ""Your Music"" library.                                                                                           | Yes        |
| current_user_saved_albums_delete                  | Yes              | Remove one or more albums from the current user's ""Your Music"" library.                                                                                      | Yes        |
| user_follow_artists                               | Yes              | Follow one or more artists                                                                                                                                   | Yes        |
| user_unfollow_artists                             | Yes              | Unfollow one or more artists                                                                                                                                 | Yes        |
| user_follow_users                                 | No               | Follow one or more users                                                                                                                                     | No         |
| user_unfollow_users                               | No               | Unfollow one or more users                                                                                                                                   | No         |
| featured_playlists                                | No               | Get a list of Spotify featured playlists                                                                                                                     | Yes        |
| new_releases                                      | No               | Get a list of new album releases featured in Spotify                                                                                                         | Yes        |
| categories                                        | No               | Get a list of categories used to tag items in Spotify                                                                                                        | Yes        |
| recommendations                                   | Yes              | Get Recommendations Based on Seeds                                                                                                                           | Yes        |
| audio_features                                    | No               | Get audio features for a track                                                                                                                               | No         |
| audios_features                                   | No               | Get Audio Features for Several Tracks                                                                                                                        | No         |
| audio_analysis                                    | Yes              | Get Audio Analysis for a Track                                                                                                                               | Yes        |
| device                                            | Yes              | Get a User’s Available Devices                                                                                                                               | Yes        |
| current_playback                                  | Yes              | Get Information About The User’s Current Playback                                                                                                            | Yes        |
| current_playing                                   | No               | Get the User’s Currently Playing Track                                                                                                                       | No         |
| transfer_playback                                 | Yes              | Transfer a User’s Playback                                                                                                                                   | Yes        |
| start_playback                                    | Yes              | Start/Resume a User’s Playback                                                                                                                               | Yes        |
| pause_playback                                    | Yes              | Pause a User’s Playback                                                                                                                                      | Yes        |
| next_track                                        | Yes              | Skip User’s Playback To Next Track                                                                                                                           | Yes        |
| previous_track                                    | Yes              | Skip User’s Playback To Previous Track                                                                                                                       | Yes        |
| seek_track                                        | Yes              | Seek To Position In Currently Playing Track                                                                                                                  | Yes        |
| repeat                                            | Yes              | Set Repeat Mode On User’s Playback                                                                                                                           | Yes        |
| volume                                            | Yes              | Set Volume For User’s Playback                                                                                                                               | Yes        |
| shuffle                                           | Yes              | Toggle Shuffle For User’s Playback                                                                                                                           | Yes        |
"
4,JohnnyCrazy/SpotifyAPI-NET,C#,"
<h1 align=""center"">
  <p align=""center"">SpotifyAPI-NET</p>
  <a href=""https://johnnycrazy.github.io/SpotifyAPI-NET/"">
    <img
      height=""128""
      width=""128""
      src=""SpotifyAPI.Docs/static/img/logo.svg""
      alt=""SpotifyAPI-NET"">
  </a>
</h1>

![Build SpotifyAPI-NET](https://github.com/JohnnyCrazy/SpotifyAPI-NET/workflows/Build/Test/Release%20SpotifyAPI-NET/badge.svg)
[![License](https://img.shields.io/github/license/JohnnyCrazy/SpotifyAPI-NET?style=flat-square)](./LICENSE)
[![SpotifyAPI.Web NuGET](https://img.shields.io/nuget/vpre/SpotifyAPI.Web?label=SpotifyAPI.Web&style=flat-square)](https://www.nuget.org/packages/SpotifyAPI.Web/)
[![SpotifyAPI.Web.Auth NuGET](https://img.shields.io/nuget/vpre/SpotifyAPI.Web.Auth?label=SpotifyAPI.Web.Auth&style=flat-square)](https://www.nuget.org/packages/SpotifyAPI.Web.Auth/)

This open source library for the Spotify Web API provides an easy to use interface for .NET based languages, like C# and VisualBasic .NET. By using it you can query general spotify catalog information (tracks, albums and playlists), manage user-related content (""My Library"", create and edit playlists) and control the users music players (play, stop, transfer playback, play specific track).

### Features


* ✅ Typed responses and requests to over 74 endpoints. Complete and always up to date.
* ✅ Supports `.NET Standard 2.X`, which includes all major platforms, including mobile:
  * `.NET Framework`
  * `UWP`
  * `.NET Core`
  * `Xamarin.Forms`
* ✅ Included `HTTPClient`, but feel free to bring your own!
* ✅ Logging supported
* ✅ Retry Handlers supported
* ✅ Proxy support
* ✅ Pagination support
* ✅ All OAuth2 Authentications supported for use in `ASP .NET` **and** `CLI` apps
* ✅ Modular structure, for easy unit testing

### Example

```csharp
using System;
using SpotifyAPI.Web;

class Program
{
    static async Task Main()
    {
      var spotify = new SpotifyClient(""YourAccessToken"");

      var track = await spotify.Tracks.Get(""1s6ux0lNiTziSrd7iUAADH"");
      Console.WriteLine(track.Name);
    }
}
```

More examples can be found on [the website](https://johnnycrazy.github.io/SpotifyAPI-NET/docs/introduction) and in the `SpotifyAPI.Web.Examples` directory.


### Docs and Usage

More Information, Installation-Instructions, Examples, Guides can be found at [johnnycrazy.github.io/SpotifyAPI-NET/](http://johnnycrazy.github.io/SpotifyAPI-NET/)

### Installation

Installation Instructions can be found in the [Getting Started Guide](https://johnnycrazy.github.io/SpotifyAPI-NET/docs/getting_started)

### Donations

If you want to support this project or my work in general, you can donate a buck or two via the link below. However, this will be always optional!

[![Donate Link](./donate.svg)](https://paypal.me/JohnnyCrazy)
"
5,x0uid/SpotifyAdBlock,,"I will show you how to easily block the servers hosting Spotify ads on your Linux/Mac or Windows machine. 
This will allow you to listen all day long on a free account without hearing a single ad or being tracked by third party. This trick is very simple, legal and works great.  [![Twitter URL](https://img.shields.io/twitter/url/https/twitter.com/fold_left.svg?style=social&label=Follow%20%40Anis_Muslić)](https://twitter.com/0xUID)

![logo](https://i.imgur.com/F8ZZU7g.jpg)

In order to remove those pesky ads, all we need to do is setup out hosts file to override the DNS for Spotify's ad servers and redirect that traffic to our local machine.  

When the traffic hits out local machine the call will fail and the tracking third party advertising will be skipped.

Download & open [**hosts**](https://github.com/x0uid/SpotifyAdBlock/blob/master/hosts) file using your favorite text editor. 

**For Windows 10 & 8:**

*Press the Windows key.*
*Type Notepad in the search field.*
*In the search results, right-click Notepad and select Run as administrator.*
*From Notepad, open the following file: c:\Windows\System32\Drivers\etc\hosts*
*Make the necessary changes to the file. Click File > Save to save your changes.*

**For Linux:**

*Open a terminal window.*
*Open the hosts file in a text editor (you can use any text editor) by typing the following line:*

*sudo nano /etc/hosts*

**For Mac OS X 10.6 through 10.12:**

*Open Applications > Utilities > Terminal.*
*Open the hosts file by typing the following line in the terminal window:*

*sudo nano /private/etc/hosts*

*Type your domain user password when prompted.*
*Edit the hosts file.The file contains some comments (lines starting with the # symbol), and some default hostname mappings* (for example, 127.0.0.1 – local host). Add your new mappings after the default mappings.*
*Save the hosts file by pressing Control+x and answering y.*
*Make your changes take effect by flushing the DNS cache with the following command:*

*dscacheutil -flushcache*

*There you go, editing hosts file has taken effect.*


**Pi-hole compatible versions can be found here:**

Blocklist: https://github.com/x0uid/SpotifyAdBlock/blob/master/SpotifyBlocklist.txt  
Whitelist: https://gist.github.com/captainhook/9eb4132d6e58888e37c6bc6c73dd4e60  
Bash script to import whitelist: https://gist.github.com/captainhook/f4ccfc82dc6696270d62b54b13f871c4  
Credits to: [captainhook](https://github.com/captainhook)

## Buy me a coffee
I have maintained this ad-blocking list because I am passionate about this, and i think u have all the right to protect your privacy while enjoying music. 
Donations are one of the many ways to support what I do.

[![Donate](https://img.shields.io/badge/Donate-PayPal-green.svg)](https://www.paypal.com/cgi-bin/webscr?cmd=_s-xclick&hosted_button_id=C7CEG3BFRDPSN)
"
6,TheComeUpCode/SpotifyGeneratePlaylist,Python,"# SpotifyGeneratePlaylist
A simple script that takes your liked videos on Youtube, and generates a Spotify playlist based on the song in your liked videos.

## Table of Contents
* [Video](#Video)
* [Technologies](#Technologies)
* [Setup](#LocalSetup)
* [ToDo](#ToDo)
* [Troubleshooting](#Troubleshooting)

## Video
Check out the youtube video for a step by step walk through 
[Youtube Video]

## Technologies
* [Youtube Data API v3]
* [Spotify Web API]
* [Requests Library v 2.22.0]
* [Youtube_dl v 2020.01.24]

## LocalSetup
1) Install All Dependencies   
`pip3 install -r requirements.txt`

2) Collect You Spotify User ID and Oauth Token From Spotfiy and add it to secrets.py file
    * To Collect your User ID, Log into Spotify then go here: [Account Overview] and its your **Username**
    ![alt text](images/userid.png)
    * To Collect your Oauth Token, Visit this url here: [Get Oauth] and click the **Get Token** button
    ![alt text](images/spotify_token.png)

3) Enable Oauth For Youtube and download the client_secrets.json   
    * Ok this part is tricky but its worth it! Just follow the guide here [Set Up Youtube Oauth] ! 
    If you are having issues check this out [Oauth Setup 2] and this one too [Oauth Setup 3] 

4) Run the File  
`python3 create_playlist.py`   
    * you'll immediately see `Please visit this URL to authorize this application: <some long url>`
    * click on it and log into your Google Account to collect the `authorization code`


## ToDo
* Tests
* Add Error Handling

## Troubleshooting
* Spotify Oauth token expires very quickly, If you come across a `KeyError` this could
be caused by an expired token. So just refer back to step 3 in local setup, and generate a new
token!  


   [Youtube Data API v3]: <https://developers.google.com/youtube/v3>
   [Spotify Web API]: <https://developer.spotify.com/documentation/web-api/>
   [Requests Library v 2.22.0]: <https://requests.readthedocs.io/en/master/>
   [Account Overview]: <https://www.spotify.com/us/account/overview/>
   [Get Oauth]: <https://developer.spotify.com/console/post-playlists/>
   [Set Up Youtube Oauth]: <https://developers.google.com/youtube/v3/getting-started/>
   [Oauth Setup 2]:<https://stackoverflow.com/questions/11485271/google-oauth-2-authorization-error-redirect-uri-mismatch/>
   [Youtube Video]:<https://www.youtube.com/watch?v=7J_qcttfnJA/>
   [Youtube_dl v 2020.01.24]:<https://github.com/ytdl-org/youtube-dl/>
   [Oauth Setup 3]:<https://github.com/googleapis/google-api-python-client/blob/master/docs/client-secrets.md/>"
7,ironhack-labs/lab-css-spotify-clone,HTML,"![logo_ironhack_blue 7](https://user-images.githubusercontent.com/23629340/40541063-a07a0a8a-601a-11e8-91b5-2f13e4e6b441.png)

# LAB | HTML & CSS - Spotify Clone

## Introduction

Everybody likes music, right? Odds are, if you do, you have heard of **Spotify**.

In this lab, we will be building a simplified version of the Spotify landing page:

![Spotify image](https://i.imgur.com/xVD0bm6.jpg)

<br>

All of the necessary assets and images are already provided. You might also find it useful to resort to the **[full-length PDF version of the website](https://s3-eu-west-1.amazonaws.com/ih-materials/uploads/spotify-prototype.pdf)** as reference.

## Requirements

- Fork this repo
- Clone this repo

## Submission

Upon completion, run the following commands:

```shell
$ git add .
$ git commit -m ""done""
$ git push origin master
```

Create Pull Request so your TAs can check up your work.

## Instructions

You are provided with some assets - in the `images` folder, you will find the necessary images, and the text is ready for you in the `index.html` file. Write your HTML and CSS code in the `index.html` and `styles/style.css` files, respectively. Remember to follow the best practices.

The page is split into 4 sections, and we have generously cut it down into pieces!

In general, website designs don't just come out the wild, so you will most likely be having mockups/sketches that you will have to integrate. It is a good practice to help you out before coding to cut the website into pieces in order to help you out _**structuring**_ your HTML.

_**The last section isn't as detailed as the others ones, good luck**_ :smile:

:muscle: :muscle: :muscle:
<br>
![](https://res.cloudinary.com/ihwebdeb/image/upload/v1571085836/Ironhack/spotify-prototype_1x_ahk8ep.jpg)

Let's do this!

### Iteration 1: Navbar

- The navbar should be `position: fixed`.
- Align the logo to the left and the `ul` with the links to the right, either using `float` or `flex`.

### Iteration 2: Large image background with text

- Check out [this guide](https://css-tricks.com/centering-css-complete-guide/) on centering things.

### Iteration 3: What is on Spotify section

- It looks like the `div`s take up about a third of the container each. How can you represent this in code?

### Iteration 4: The green section

- It looks like we have 2 main sections, a containing element with the text flowing from top to bottom, and the image of the Spotify player on the right.
- Position the Spotify logo absolutely according to the _green_ `div`.

Happy coding! :heart:
"
8,librespot-org/librespot,Rust,"[![Build Status](https://github.com/librespot-org/librespot/workflows/test/badge.svg)](https://github.com/librespot-org/librespot/actions)
[![Gitter chat](https://badges.gitter.im/librespot-org/librespot.png)](https://gitter.im/librespot-org/spotify-connect-resources)
[![Crates.io](https://img.shields.io/crates/v/librespot.svg)](https://crates.io/crates/librespot)

Current maintainers are [listed on GitHub](https://github.com/orgs/librespot-org/people).

# librespot
*librespot* is an open source client library for Spotify. It enables applications to use Spotify's service to control and play music via various backends, and to act as a Spotify Connect receiver. It is an alternative to the official and [now deprecated](https://pyspotify.mopidy.com/en/latest/#libspotify-s-deprecation) closed-source `libspotify`. Additionally, it will provide extra features which are not available in the official library.

_Note: librespot only works with Spotify Premium. This will remain the case. We will not support any features to make librespot compatible with free accounts, such as limited skips and adverts._

## Quick start
We're available on [crates.io](https://crates.io/crates/librespot) as the _librespot_ package. Simply run `cargo install librespot` to install librespot on your system. Check the wiki for more info and possible [usage options](https://github.com/librespot-org/librespot/wiki/Options).

After installation, you can run librespot from the CLI using a command such as `librespot -n ""Librespot Speaker"" -b 160` to create a speaker called _Librespot Speaker_ serving 160 kbps audio.

## This fork
As the origin by [plietar](https://github.com/plietar/) is no longer actively maintained, this organisation and repository have been set up so that the project may be maintained and upgraded in the future.

# Documentation
Documentation is currently a work in progress, contributions are welcome!

There is some brief documentation on how the protocol works in the [docs](https://github.com/librespot-org/librespot/tree/master/docs) folder.

[COMPILING.md](https://github.com/librespot-org/librespot/blob/master/COMPILING.md) contains detailed instructions on setting up a development environment, and compiling librespot. More general usage and compilation information is available on the [wiki](https://github.com/librespot-org/librespot/wiki).
[CONTRIBUTING.md](https://github.com/librespot-org/librespot/blob/master/CONTRIBUTING.md) also contains our contributing guidelines.

If you wish to learn more about how librespot works overall, the best way is to simply read the code, and ask any questions you have in our [Gitter Room](https://gitter.im/librespot-org/spotify-connect-resources).

# Issues & Discussions
**We have recently started using Github discussions for general questions and feature requests, as they are a more natural medium for such cases, and allow for upvoting to prioritize feature development. Check them out [here](https://github.com/librespot-org/librespot/discussions). Bugs and issues with the underlying library should still be reported as issues.**

If you run into a bug when using librespot, please search the existing issues before opening a new one. Chances are, we've encountered it before, and have provided a resolution. If not, please open a new one, and where possible, include the backtrace librespot generates on crashing, along with anything we can use to reproduce the issue, e.g. the Spotify URI of the song that caused the crash.

# Building
A quick walkthrough of the build process is outlined below, while a detailed compilation guide can be found [here](https://github.com/librespot-org/librespot/blob/master/COMPILING.md).

## Additional Dependencies
We recently switched to using [Rodio](https://github.com/tomaka/rodio) for audio playback by default, hence for macOS and Windows, you should just be able to clone and build librespot (with the command below).
For Linux, you will need to run the additional commands below, depending on your distro.

On Debian/Ubuntu, the following command will install these dependencies:
```shell
sudo apt-get install build-essential libasound2-dev
```

On Fedora systems, the following command will install these dependencies:
```shell
sudo dnf install alsa-lib-devel make gcc
```

librespot currently offers the following selection of [audio backends](https://github.com/librespot-org/librespot/wiki/Audio-Backends):
```
Rodio (default)
ALSA
GStreamer
PortAudio
PulseAudio
JACK
JACK over Rodio
SDL
Pipe
Subprocess
```
Please check the corresponding [Compiling](https://github.com/librespot-org/librespot/wiki/Compiling#general-dependencies) entry on the wiki for backend specific dependencies.

Once you've installed the dependencies and cloned this repository you can build *librespot* with the default backend using Cargo.
```shell
cargo build --release
```

# Packages

librespot is also available via official package system on various operating systems such as Linux, FreeBSD, NetBSD. [Repology](https://repology.org/project/librespot/versions) offers a good overview.

[![Packaging status](https://repology.org/badge/vertical-allrepos/librespot.svg)](https://repology.org/project/librespot/versions)

## Usage
A sample program implementing a headless Spotify Connect receiver is provided.
Once you've built *librespot*, run it using :
```shell
target/release/librespot --name DEVICENAME
```

The above is a minimal example. Here is a more fully fledged one:
```shell
target/release/librespot -n ""Librespot"" -b 320 -c ./cache --enable-volume-normalisation --initial-volume 75 --device-type avr
```
The above command will create a receiver named ```Librespot```, with bitrate set to 320 kbps, initial volume at 75%, with volume normalisation enabled, and the device displayed in the app as an Audio/Video Receiver. A folder named ```cache``` will be created/used in the current directory, and be used to cache audio data and credentials.

A full list of runtime options is available [here](https://github.com/librespot-org/librespot/wiki/Options).

_Please Note: When using the cache feature, an authentication blob is stored for your account in the cache directory. For security purposes, we recommend that you set directory permissions on the cache directory to `700`._

## Contact
Come and hang out on gitter if you need help or want to offer some:
https://gitter.im/librespot-org/spotify-connect-resources

## Disclaimer
Using this code to connect to Spotify's API is probably forbidden by them.
Use at your own risk.

## License
Everything in this repository is licensed under the MIT license.

## Related Projects
This is a non exhaustive list of projects that either use or have modified librespot. If you'd like to include yours, submit a PR.

- [librespot-golang](https://github.com/librespot-org/librespot-golang) - A golang port of librespot.
- [plugin.audio.spotify](https://github.com/marcelveldt/plugin.audio.spotify) - A Kodi plugin for Spotify.
- [raspotify](https://github.com/dtcooper/raspotify) - A Spotify Connect client that mostly Just Works™
- [Spotifyd](https://github.com/Spotifyd/spotifyd) - A stripped down librespot UNIX daemon.
- [rpi-audio-receiver](https://github.com/nicokaiser/rpi-audio-receiver) - easy Raspbian install scripts for Spotifyd, Bluetooth, Shairport and other audio receivers
- [Spotcontrol](https://github.com/badfortrains/spotcontrol) - A golang implementation of a Spotify Connect controller. No playback
functionality.
- [librespot-java](https://github.com/devgianlu/librespot-java) - A Java port of librespot.
- [ncspot](https://github.com/hrkfdn/ncspot) - Cross-platform ncurses Spotify client.
- [ansible-role-librespot](https://github.com/xMordax/ansible-role-librespot/tree/master) - Ansible role that will build, install and configure Librespot.
- [Spot](https://github.com/xou816/spot) - Gtk/Rust native Spotify client for the GNOME desktop. 
- [Snapcast](https://github.com/badaix/snapcast) - synchronised multi-room audio player that uses librespot as its source for Spotify content
"
9,novatorem/novatorem,Python,"<table width=""100%""> 
  <tr>
  <td width=""50%"">

&nbsp; <br> [![Spotify](https://novatorem.vercel.app/api/spotify?background_color=0d1117&border_color=ffffff)](https://open.spotify.com/user/omnitenebris)

  </td>
  <td width=""50%"">

&nbsp;<p align=""center"">This repository is [unlicense](https://choosealicense.com/licenses/unlicense/)[d], feel free to fork!<br><br>
[![Linkedin](https://img.shields.io/badge/linked-in-369?style=flat-square&logo=linkedin&logoColor=white&color=blue)](https://www.linkedin.com/in/andrew-novac)
[![E-Mail](https://img.shields.io/badge/email-reveal-2a8?style=flat-square&logo=gmail&logoColor=white)](https://mail.novac.dev/)
[![Visits](https://komarev.com/ghpvc/?username=novatorem&logo=GitHub&label=github%20visits&color=336699&logoColor=white&style=flat-square)](https://github.com/novatorem)

  </p>
  </td>
</table>
"
10,ironhack-labs/lab-express-spotify,JavaScript,"![logo_ironhack_blue 7](https://user-images.githubusercontent.com/23629340/40541063-a07a0a8a-601a-11e8-91b5-2f13e4e6b441.png)

# Express Spotify Searcher

![](https://s3-eu-west-1.amazonaws.com/ih-materials/uploads/upload_eb6313ef8c1bd11e3732034ebd4edafa.png)

## Introduction

[Spotify](https://www.spotify.com/us/) is a super cool music streaming service that provides you access to tons of music without ever having to buy an album.

Today, we're going to build an Express app to search Spotify for artists, albums, and tracks. Also, we'll be able to play a preview of some of these songs.

<!-- To see the final product check out the deployed version: https://spotify-lab.herokuapp.com. -->

It may seem like a lot, but let's break it down into steps!

## Requirements

- Fork this repo
- Clone this repo

## Submission

- Upon completion, run the following commands:

```
$ git add .
$ git commit -m ""done""
$ git push origin master
```

- Create Pull Request so your TAs can check up your work.

## The key helper: `spotify-web-api-node` npm package

Spotify is great for streaming music from the app, but they also have a [Web Service](https://en.wikipedia.org/wiki/Web_service) for us developers to play with.

For the purpose of this exercise, we will be using the [`spotify-web-api-node` npm package](https://www.npmjs.com/package/spotify-web-api-node) (this is the link that will take you to the documentation so go ahead and open it). As we can find in the docs, this package gives us simple methods to make requests to Spotify, and give us back artists, albums, tracks, and more.

**In this lab, we have two main goals**:

- We are going to apply our knowledge of GET method and when and why to use `req.query` and `req.params`.
- We are going to practice how to **read the documentation** (of this npm package particularly) and how to use the examples provided by the docs to successfully finish all the iterations.

### Registering the app and getting the credentials

The **Spotify** API will need a `clientId` and `clientSecret` in order to give us permission to make requests and get some data back. To get `clientId` and `clientSecret`, we have to register our app on the official Spotify Developers web site (you won't be charged for this, and no credit card information will be required). Let's follow these steps:

1. Navigate to [Spotify Developers](https://developer.spotify.com/my-applications/#!/).
2. Click on the ""Log In"" button. If you do not have an account, you will be asked to create one, it´s free :wink:.
3. After logging in, click on the **Create an App** button.

The following screens might be out of date, since Spotify is constantly iterating on their interface, but that shouldn't stop you from completing these steps. You got this!

<!-- ![](https://s3-eu-west-1.amazonaws.com/ih-materials/uploads/upload_a3a19d215083c5526df1f53f3c1fdf6f.png) -->

4. Fill the fields and submit the form.

![](https://s3-eu-west-1.amazonaws.com/ih-materials/uploads/upload_db933b4f08d71ceff0b0d5d4ca124594.png)

5. We are ready to go! We have all the info we need :muscle: Let´s start!

![](https://s3-eu-west-1.amazonaws.com/ih-materials/uploads/upload_8859d022ca1d53adc9f9ec829ec3d17b.png)

## Iteration 1 | Spotify API Setup

In the next few steps, you'll create all of the files that you need. So far, you have some basic setup in `app.js`, but that's not quite enough. As you remember, to get some packages (including `express`) in our app, we have to have them in the `package.json` file. So let's start listing the steps:

1. Let's install all the dependencies we need to successfully run this app:
   `npm install express hbs spotify-web-api-node dotenv`.
2. `nodemon` is installed as a dev dependency (our app doesn't depend on it but it helps us in the development process), which means we can use nodemon to run the app with: **`npm run dev`**.

3. Inside of the `app.js` file, require `spotify-web-api-node`.

```js
const SpotifyWebApi = require('spotify-web-api-node');
```

4. Inside of the `app.js` file, you'll find the place where you should paste the following code:

```javascript
const spotifyApi = new SpotifyWebApi({
  clientId: process.env.CLIENT_ID,
  clientSecret: process.env.CLIENT_SECRET
});

// Retrieve an access token
spotifyApi
  .clientCredentialsGrant()
  .then(data => spotifyApi.setAccessToken(data.body['access_token']))
  .catch(error => console.log('Something went wrong when retrieving an access token', error));
```

5. See this above?

```js
const spotifyApi = new SpotifyWebApi({
  clientId: process.env.CLIENT_ID,
  clientSecret: process.env.CLIENT_SECRET
});
```

To avoid making our API keys public, we don't want to add and commit them. We'll use a package named `dotenv` for that.

This package is imported at the very beginning of `app.js`. All that is left to do is to add your keys in the `.env` file.
So go ahead and create a `.env` file and paste the following lines there, replacing the text with your credentials.

```
CLIENT_ID=your clientId goes here
CLIENT_SECRET=your clientSecret goes here
```

:zap: The `.env` is referred to in the `.gitignore` file so you're safe!

:fire: _Styling should be the last thing you focus on. Functionality first!_ 🙏🏻

## Iteration 2 | Express Setup

Now let's create a `views` folder and let's add the `layout.hbs` file in it.
At this moment we should have the following structure of folders and files:

```
lab-express-spotify
      ├── app.js
      ├── package.json
      ├── package-lock.json
      ├── public
      │    ├── images
      │    └── stylesheets
      │         └── style.css
      └── views
            └── layout.hbs
```

As we can see, in your _app.js_ we have required all the packages we need for now:

```javascript
const express = require('express');
const hbs = require('hbs');
const SpotifyWebApi = require('spotify-web-api-node');
```

We are good to go. Let's open the [spotify-web-api-node](https://www.npmjs.com/package/spotify-web-api-node) documentation and start our journey!

## Iteration 3 | Search for an Artist

**You can keep all your routes in the `app.js` after where it states: _// Our routes go here:_.**

### Step 1 | Create a Homepage

Create a route that renders a simple home page. You'll need a basic index route, that renders a home page. On this page, you should have a small search `form` that has an input field receiving an artist's name and a button that submits the request.

This form should direct its query to `/artist-search` (`action=""/artist-search"", method=""GET""`).
The result should be something along these lines but leave styling for the end.

![](https://i.imgur.com/YuTA0vQ.png=400x)

### Step 2 | Display results for artist search

Okay, our search form submitted to `/artist-search` route. We still don't have this route created so let's do it!
This route will receive the search term from the `query` string, and make a search request using one of the methods of the Spotify npm package. You have the documentation open :wink: but we will help you with your first step.

The method we will use from the npm package is: `spotifyApi.searchArtists()`. In this route, you should have something like this:

```javascript
spotifyApi
  .searchArtists(/*'HERE GOES THE QUERY ARTIST'*/)
  .then(data => {
    console.log('The received data from the API: ', data.body);
    // ----> 'HERE WHAT WE WANT TO DO AFTER RECEIVING THE DATA FROM THE API'
  })
  .catch(err => console.log('The error while searching artists occurred: ', err));
```

In order to display the found artists' information, create `artist-search-results.hbs` file inside `views` folder and display name, image, and button (or link) to show the albums for a particular artist on a new view (for now just create the button/link and we will take care of the rest in the next step). Again, styling is not your priority, so let's move to the next step.
<br><br>
![](https://s3-eu-west-1.amazonaws.com/ih-materials/uploads/upload_9dc721e76158df1836ef07565b5385c2.png)

## Iteration 4 | View Albums

On the `artist-search-results.hbs` page we created the `View albums` button/link. Users should be taken to _some other page_ after clicking on it and there be able to see all the albums of that particular artist. **Hint**: the URL should include artist's `id` 🤓 and should change dynamically.

```html
<a href=""/albums/someArtistIdGoesHere"">View Albums</a>
```

So let's create a new page - `albums.hbs` where all the results will be displayed. Make sure you show the _name_ and the _cover_ of each album and add a button/link to see the tracks (next iteration).

:zap: Check out the `.getArtistAlbums()` method in the [spotify-web-api-node](https://www.npmjs.com/package/spotify-web-api-node) documentation.

**Hint**:

Your route should look like the following:

```javascript
app.get('/albums/:artistId', (req, res, next) => {
  // .getArtistAlbums() code goes here
});
```

![](https://i.imgur.com/oaoqQMj.png)

This is going good so far, so let's finish up with our last iteration.

## Iteration 5 | View Tracks

Create the `View tracks` link on the albums page. This link should take you to a page with a list of all of the tracks on a particular album.

**Hint**: The link to the tracks page should have each album's _id_ in it. <br>
**Note**: :zap: Check out the `.getAlbumTracks()` method in the `spotify-web-api-node` documentation.

A track object comes with a `preview_url`, which is the source for a 30-second preview of a particular song. You can plug this into an HTML [`audio`](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/audio) tag, and it will play the preview.

![](https://i.imgur.com/XVKoeqg.png)

### The summary of requirements

- Total of five pages with (1)artist / (2)album / (3)track information (all populated from Spotify) + (4)layout + (5)home.
- Some styling, it doesn't have to look like the example.

Happy Coding! 💙
"
11,thelinmichael/spotify-web-api-node,JavaScript,"# Spotify Web API Node

[![Tests](https://travis-ci.org/thelinmichael/spotify-web-api-node.svg?branch=master)](https://travis-ci.org/thelinmichael/spotify-web-api-node)
[![Coverage Status](https://coveralls.io/repos/thelinmichael/spotify-web-api-node/badge.svg)](https://coveralls.io/r/thelinmichael/spotify-web-api-node)
[![npm bundle size (minified + gzip)](https://img.shields.io/bundlephobia/minzip/spotify-web-api-node.svg)](https://bundlephobia.com/result?p=spotify-web-api-node)

This is a universal wrapper/client for the [Spotify Web API](https://developer.spotify.com/web-api/) that runs on Node.JS and the browser, using [browserify](http://browserify.org/)/[webpack](https://webpack.github.io/)/[rollup](http://rollupjs.org/). A list of selected wrappers for different languages and environments is available at the Developer site's [Libraries page](https://developer.spotify.com/documentation/web-api/libraries/).

Project owners are [thelinmichael](https://github.com/thelinmichael) and [JMPerez](https://github.com/JMPerez), with help from [a lot of awesome contributors](https://github.com/thelinmichael/spotify-web-api-node/network/members).

## Version 5

> :warning: Since the last release (4.0.0, released over year ago) a lot of new functionality has been added by a lot of different contributors. **Thank you.** In order to implement some of the feature requests, some **breaking changes** had to be made. A list of them, along with a list of the new functionality, can be found in the [CHANGELOG](https://github.com/thelinmichael/spotify-web-api-node/blob/master/CHANGELOG.md). 

## Table of contents

* [Features](#features)
* [Installation](#installation)
* [Usage](#usage)
* [Development](#development)

## Features

The library includes helper functions to do the following:

#### Fetch music metadata

* Albums, artists, and tracks
* Audio features and analysis for tracks
* Albums for a specific artist
* Top tracks for a specific artist
* Artists similar to a specific artist

#### Profiles

* User's emails, product type, display name, birthdate, image

#### Search

* Albums, artists, tracks, and playlists

#### Playlist manipulation

* Get a user's playlists
* Create playlists
* Change playlist details
* Add tracks to a playlist
* Remove tracks from a playlist
* Replace tracks in a playlist
* Reorder tracks in a playlist

#### Your Music library

* Add, remove, and get tracks and albums that are in the signed in user's Your Music library
* Check if a track or album is in the signed in user's Your Music library 

#### Personalization

* Get a user’s top artists and tracks based on calculated affinity

#### Browse

* Get New Releases
* Get Featured Playlists
* Get a List of Categories
* Get a Category
* Get a Category's Playlists
* Get recommendations based on seeds
* Get available genre seeds

#### Player

* Get a User's Available Devices
* Get Information About The User's Current Playback State
* Get Current User's Recently Played Tracks
* Get the User's Currently Playing Track 
* Pause a User's Playback
* Seek To Position In Currently Playing Track
* Set Repeat Mode On User’s Playback
* Set Volume For User's Playback
* Skip User’s Playback To Next Track
* Skip User’s Playback To Previous Track 
* Start/Resume a User's Playback 
* Toggle Shuffle For User’s Playback
* Transfer a User's Playback

#### Follow

* Follow and unfollow users
* Follow and unfollow artists
* Check if the logged in user follows a user or artist
* Follow a playlist
* Unfollow a playlist
* Get followed artists
* Check if users are following a Playlist

#### Player

* Add an Item to the User's Playback Queue
* Get a user's available devices
* Get information about the user's current playback
* Get current user’s recently played tracks
* Transfer a user's playback
* Resume a user's playback
* Skip a user's playback to next track
* Skip a user's playback to previous track
* Set a user's shuffle mode
* Set a user's repeat mode
* Set volume
* Seek playback to a given position

#### Shows

* [Get a Show](https://developer.spotify.com/documentation/web-api/reference/shows/get-a-show/)

### Authentication

All methods require authentication, which can be done using these flows:

* [Client credentials flow](http://tools.ietf.org/html/rfc6749#section-4.4) (Application-only authentication)
* [Authorization code grant](http://tools.ietf.org/html/rfc6749#section-4.1) (Signed by user)
* [Implicit Grant Flow](https://tools.ietf.org/html/rfc6749#section-4.2) (Client-side Authentication)

##### Dependencies

This project depends on [superagent](https://github.com/visionmedia/superagent) to make HTTP requests.

## Installation

    $ npm install spotify-web-api-node --save

## Usage

First, instantiate the wrapper.

```javascript
var SpotifyWebApi = require('spotify-web-api-node');

// credentials are optional
var spotifyApi = new SpotifyWebApi({
  clientId: 'fcecfc72172e4cd267473117a17cbd4d',
  clientSecret: 'a6338157c9bb5ac9c71924cb2940e1a7',
  redirectUri: 'http://www.example.com/callback'
});
```

If you've got an access token and want to use it for all calls, simply use the API object's set method. Handling credentials is described in detail in the Authorization section.

```javascript
spotifyApi.setAccessToken('<your_access_token>');
```

Lastly, use the wrapper's helper methods to make the request to Spotify's Web API. The wrapper uses promises, so you need to provide a success callback as well as an error callback.

```javascript
// Get Elvis' albums
spotifyApi.getArtistAlbums('43ZHCT0cAZBISjO8DG9PnE').then(
  function(data) {
    console.log('Artist albums', data.body);
  },
  function(err) {
    console.error(err);
  }
);
```

If you dont wan't to use promises, you can provide a callback method instead.

```javascript
// Get Elvis' albums
spotifyApi.getArtistAlbums(
  '43ZHCT0cAZBISjO8DG9PnE',
  { limit: 10, offset: 20 },
  function(err, data) {
    if (err) {
      console.error('Something went wrong!');
    } else {
      console.log(data.body);
    }
  }
);
```

The functions that fetch data from the API also accept a JSON object with a set of options. For example, `limit` and `offset` can be used in functions that returns paginated results, such as search and retrieving an artist's albums.

Note that the **options** parameter is **required if you're using a callback method.**, even if it's empty.

```javascript
// Passing a callback - get Elvis' albums in range [20...29]
spotifyApi
  .getArtistAlbums('43ZHCT0cAZBISjO8DG9PnE', { limit: 10, offset: 20 })
  .then(
    function(data) {
      console.log('Album information', data.body);
    },
    function(err) {
      console.error(err);
    }
  );
```

### Responses and errors

This exposes the response headers, status code and body. 

```json
{
  ""body"" : {

  },
  ""headers"" : {

  },
  ""statusCode"" :
}
```

Errors have same fields, as well as a human readable `message`. This is especially useful since 
Spotify's Web API returns different types of error objects depending on the endpoint being called.

#### Example of a response

Retrieving a track's metadata in `spotify-web-api-node` version 1.4.0 and later:

```json
{
  ""body"": {
    ""name"": ""Golpe Maestro"",
    ""popularity"": 42,
    ""preview_url"":
      ""https://p.scdn.co/mp3-preview/4ac44a56e3a4b7b354c1273d7550bbad38c51f5d"",
    ""track_number"": 1,
    ""type"": ""track"",
    ""uri"": ""spotify:track:3Qm86XLflmIXVm1wcwkgDK""
  },
  ""headers"": {
    ""date"": ""Fri, 27 Feb 2015 09:25:48 GMT"",
    ""content-type"": ""application/json; charset=utf-8"",
    ""cache-control"": ""public, max-age=7200""
  },
  ""statusCode"": 200
}
```

### More examples

Below are examples for all helper functions. Longer examples of some requests can be found in the [examples folder](examples/). 

```javascript
var SpotifyWebApi = require('spotify-web-api-node');

var spotifyApi = new SpotifyWebApi();

/**
 * Get metadata of tracks, albums, artists, shows, and episodes
 */

// Get album
spotifyApi.getAlbum('5U4W9E5WsYb2jUQWePT8Xm')
  .then(function(data) {
    console.log('Album information', data.body);
  }, function(err) {
    console.error(err);
  });

// Get multiple albums
spotifyApi.getAlbums(['5U4W9E5WsYb2jUQWePT8Xm', '3KyVcddATClQKIdtaap4bV'])
  .then(function(data) {
    console.log('Albums information', data.body);
  }, function(err) {
    console.error(err);
  });

// Get an artist
spotifyApi.getArtist('2hazSY4Ef3aB9ATXW7F5w3')
  .then(function(data) {
    console.log('Artist information', data.body);
  }, function(err) {
    console.error(err);
  });

// Get multiple artists
spotifyApi.getArtists(['2hazSY4Ef3aB9ATXW7F5w3', '6J6yx1t3nwIDyPXk5xa7O8'])
  .then(function(data) {
    console.log('Artists information', data.body);
  }, function(err) {
    console.error(err);
  });

// Get albums by a certain artist
spotifyApi.getArtistAlbums('43ZHCT0cAZBISjO8DG9PnE')
  .then(function(data) {
    console.log('Artist albums', data.body);
  }, function(err) {
    console.error(err);
  });

// Search tracks whose name, album or artist contains 'Love'
spotifyApi.searchTracks('Love')
  .then(function(data) {
    console.log('Search by ""Love""', data.body);
  }, function(err) {
    console.error(err);
  });

// Search artists whose name contains 'Love'
spotifyApi.searchArtists('Love')
  .then(function(data) {
    console.log('Search artists by ""Love""', data.body);
  }, function(err) {
    console.error(err);
  });

// Search tracks whose artist's name contains 'Love'
spotifyApi.searchTracks('artist:Love')
  .then(function(data) {
    console.log('Search tracks by ""Love"" in the artist name', data.body);
  }, function(err) {
    console.log('Something went wrong!', err);
  });

// Search tracks whose artist's name contains 'Kendrick Lamar', and track name contains 'Alright'
spotifyApi.searchTracks('track:Alright artist:Kendrick Lamar')
  .then(function(data) {
    console.log('Search tracks by ""Alright"" in the track name and ""Kendrick Lamar"" in the artist name', data.body);
  }, function(err) {
    console.log('Something went wrong!', err);
  });


// Search playlists whose name or description contains 'workout'
spotifyApi.searchPlaylists('workout')
  .then(function(data) {
    console.log('Found playlists are', data.body);
  }, function(err) {
    console.log('Something went wrong!', err);
  });

// Get tracks in an album
spotifyApi.getAlbumTracks('41MnTivkwTO3UUJ8DrqEJJ', { limit : 5, offset : 1 })
  .then(function(data) {
    console.log(data.body);
  }, function(err) {
    console.log('Something went wrong!', err);
  });

// Get an artist's top tracks
spotifyApi.getArtistTopTracks('0oSGxfWSnnOXhD2fKuz2Gy', 'GB')
  .then(function(data) {
    console.log(data.body);
    }, function(err) {
    console.log('Something went wrong!', err);
  });

// Get artists related to an artist
spotifyApi.getArtistRelatedArtists('0qeei9KQnptjwb8MgkqEoy')
  .then(function(data) {
    console.log(data.body);
  }, function(err) {
    done(err);
  });

/* Get Audio Features for a Track */
spotifyApi.getAudioFeaturesForTrack('3Qm86XLflmIXVm1wcwkgDK')
  .then(function(data) {
    console.log(data.body);
  }, function(err) {
    done(err);
  });

/* Get Audio Analysis for a Track */
spotifyApi.getAudioAnalysisForTrack('3Qm86XLflmIXVm1wcwkgDK')
  .then(function(data) {
    console.log(data.body);
  }, function(err) {
    done(err);
  });

/* Get Audio Features for several tracks */
spotifyApi.getAudioFeaturesForTracks(['4iV5W9uYEdYUVa79Axb7Rh', '3Qm86XLflmIXVm1wcwkgDK'])
  .then(function(data) {
    console.log(data.body);
  }, function(err) {
    done(err);
  });


/*
 * User methods
 */

// Get a user
spotifyApi.getUser('petteralexis')
  .then(function(data) {
    console.log('Some information about this user', data.body);
  }, function(err) {
    console.log('Something went wrong!', err);
  });

// Get the authenticated user
spotifyApi.getMe()
  .then(function(data) {
    console.log('Some information about the authenticated user', data.body);
  }, function(err) {
    console.log('Something went wrong!', err);
  });

/*
 * Playlist methods
 */

// Get a playlist
spotifyApi.getPlaylist('5ieJqeLJjjI8iJWaxeBLuK')
  .then(function(data) {
    console.log('Some information about this playlist', data.body);
  }, function(err) {
    console.log('Something went wrong!', err);
  });

// Get a user's playlists
spotifyApi.getUserPlaylists('thelinmichael')
  .then(function(data) {
    console.log('Retrieved playlists', data.body);
  },function(err) {
    console.log('Something went wrong!', err);
  });

// Create a private playlist
spotifyApi.createPlaylist('My playlist', { 'description': 'My description', 'public': true })
  .then(function(data) {
    console.log('Created playlist!');
  }, function(err) {
    console.log('Something went wrong!', err);
  });

// Add tracks to a playlist
spotifyApi.addTracksToPlaylist('5ieJqeLJjjI8iJWaxeBLuK', [""spotify:track:4iV5W9uYEdYUVa79Axb7Rh"", ""spotify:track:1301WleyT98MSxVHPZCA6M""])
  .then(function(data) {
    console.log('Added tracks to playlist!');
  }, function(err) {
    console.log('Something went wrong!', err);
  });

// Add tracks to a specific position in a playlist
spotifyApi.addTracksToPlaylist('5ieJqeLJjjI8iJWaxeBLuK', [""spotify:track:4iV5W9uYEdYUVa79Axb7Rh"", ""spotify:track:1301WleyT98MSxVHPZCA6M""],
  {
    position : 5
  })
  .then(function(data) {
    console.log('Added tracks to playlist!');
  }, function(err) {
    console.log('Something went wrong!', err);
  });

// Remove tracks from a playlist at a specific position
spotifyApi.removeTracksFromPlaylistByPosition('5ieJqeLJjjI8iJWaxeBLuK', [0, 2, 130], ""0wD+DKCUxiSR/WY8lF3fiCTb7Z8X4ifTUtqn8rO82O4Mvi5wsX8BsLj7IbIpLVM9"")
  .then(function(data) {
    console.log('Tracks removed from playlist!');
  }, function(err) {
    console.log('Something went wrong!', err);
  });

// Remove all occurrence of a track
var tracks = [{ uri : ""spotify:track:4iV5W9uYEdYUVa79Axb7Rh"" }];
var playlistId = '5ieJqeLJjjI8iJWaxeBLuK';
var options = { snapshot_id : ""0wD+DKCUxiSR/WY8lF3fiCTb7Z8X4ifTUtqn8rO82O4Mvi5wsX8BsLj7IbIpLVM9"" };
spotifyApi.removeTracksFromPlaylist(playlistId, tracks, options)
  .then(function(data) {
    console.log('Tracks removed from playlist!');
  }, function(err) {
    console.log('Something went wrong!', err);
  });

// Reorder the first two tracks in a playlist to the place before the track at the 10th position
var options = { ""range_length"" : 2 };
spotifyApi.reorderTracksInPlaylist('5ieJqeLJjjI8iJWaxeBLuK', 0, 10, options)
  .then(function(data) {
    console.log('Tracks reordered in playlist!');
  }, function(err) {
    console.log('Something went wrong!', err);
  });

// Change playlist details
spotifyApi.changePlaylistDetails('5ieJqeLJjjI8iJWaxeBLuK',
  {
    name: 'This is a new name for my Cool Playlist, and will become private',
    'public' : false
  }).then(function(data) {
     console.log('Playlist is now private!');
  }, function(err) {
    console.log('Something went wrong!', err);
  });

// Upload a custom playlist cover image
spotifyApi.uploadCustomPlaylistCoverImage('5ieJqeLJjjI8iJWaxeBLuK','longbase64uri')
  .then(function(data) {
     console.log('Playlsit cover image uploaded!');
  }, function(err) {
    console.log('Something went wrong!', err);
  });

// Follow a playlist (privately)
spotifyApi.followPlaylist('5ieJqeLJjjI8iJWaxeBLuK',
  {
    'public' : false
  }).then(function(data) {
     console.log('Playlist successfully followed privately!');
  }, function(err) {
    console.log('Something went wrong!', err);
  });

// Unfollow a playlist
spotifyApi.unfollowPlaylist('5ieJqeLJjjI8iJWaxeBLuK')
  .then(function(data) {
     console.log('Playlist successfully unfollowed!');
  }, function(err) {
    console.log('Something went wrong!', err);
  });

// Check if Users are following a Playlist
spotifyApi.areFollowingPlaylist('5ieJqeLJjjI8iJWaxeBLuK', ['thelinmichael', 'ella'])
 .then(function(data) {
    data.body.forEach(function(isFollowing) {
      console.log(""User is following: "" + isFollowing);
    });
  }, function(err) {
    console.log('Something went wrong!', err);
  });

/*
 * Following Users and Artists methods
 */

/* Get followed artists */
spotifyApi.getFollowedArtists({ limit : 1 })
  .then(function(data) {
      // 'This user is following 1051 artists!'
     console.log('This user is following ', data.body.artists.total, ' artists!');
  }, function(err) {
    console.log('Something went wrong!', err);
  });

/* Follow a user */
spotifyApi.followUsers(['thelinmichael'])
  .then(function(data) {
     console.log(data);
  }, function(err) {
    console.log('Something went wrong!', err);
  });

/* Follow an artist */
spotifyApi.followArtists(['2hazSY4Ef3aB9ATXW7F5w3', '6J6yx1t3nwIDyPXk5xa7O8'])
  .then(function(data) {
     console.log(data);
  }, function(err) {
    console.log('Something went wrong!', err);
  });

/* Unfollow a user */
spotifyApi.unfollowUsers(['thelinmichael'])
  .then(function(data) {
     console.log(data);
  }, function(err) {
    console.log('Something went wrong!', err);
  });

/* Unfollow an artist */
spotifyApi.unfollowArtists(['2hazSY4Ef3aB9ATXW7F5w3', '6J6yx1t3nwIDyPXk5xa7O8'])
  .then(function(data) {
     console.log(data);
  }, function(err) {
    console.log('Something went wrong!', err);
  });

/* Check if a user is following a user */
let usersId = ['thelinmichael'];

spotifyApi.isFollowingUsers(usersId)
  .then(function(data) {
    let isFollowing = data.body;

    for (let index = 0; index < usersId.length; index++) {
      console.log(usersId[index] + ':' + isFollowing[index])
    }
  }, function(err) {
    console.log('Something went wrong!', err);
  });

/* Check if a user is following an artist */
let artistsId = ['6mfK6Q2tzLMEchAr0e9Uzu', '4DYFVNKZ1uixa6SQTvzQwJ'];

spotifyApi.isFollowingArtists(artistsId)
  .then(function(data) {
    let isFollowing = data.body;

    for (let index = 0; index < artistsId.length; index++) {
      console.log(artistsId[index] + ':' + isFollowing[index])
    }
  }, function(err) {
    console.log('Something went wrong!', err);
  });

/*
 * Your Music library methods
 */

/* Tracks */

// Get tracks in the signed in user's Your Music library
spotifyApi.getMySavedTracks({
    limit : 2,
    offset: 1
  })
  .then(function(data) {
    console.log('Done!');
  }, function(err) {
    console.log('Something went wrong!', err);
  });


// Check if tracks are in the signed in user's Your Music library
spotifyApi.containsMySavedTracks([""5ybJm6GczjQOgTqmJ0BomP""])
  .then(function(data) {

    // An array is returned, where the first element corresponds to the first track ID in the query
    var trackIsInYourMusic = data.body[0];

    if (trackIsInYourMusic) {
      console.log('Track was found in the user\'s Your Music library');
    } else {
      console.log('Track was not found.');
    }
  }, function(err) {
    console.log('Something went wrong!', err);
  });

// Remove tracks from the signed in user's Your Music library
spotifyApi.removeFromMySavedTracks([""3VNWq8rTnQG6fM1eldSpZ0""])
  .then(function(data) {
    console.log('Removed!');
  }, function(err) {
    console.log('Something went wrong!', err);
  });
});

// Add tracks to the signed in user's Your Music library
spotifyApi.addToMySavedTracks([""3VNWq8rTnQG6fM1eldSpZ0""])
  .then(function(data) {
    console.log('Added track!');
  }, function(err) {
    console.log('Something went wrong!', err);
  });
});

/* Albums */

// Get albums in the signed in user's Your Music library
spotifyApi.getMySavedAlbums({
    limit : 1,
    offset: 0
  })
  .then(function(data) {
    // Output items
    console.log(data.body.items);
  }, function(err) {
    console.log('Something went wrong!', err);
  });


// Check if albums are in the signed in user's Your Music library
spotifyApi.containsMySavedAlbums([""1H8AHEB8VSE8irHViGOIrF""])
  .then(function(data) {

    // An array is returned, where the first element corresponds to the first album ID in the query
    var albumIsInYourMusic = data.body[0];

    if (albumIsInYourMusic) {
      console.log('Album was found in the user\'s Your Music library');
    } else {
      console.log('Album was not found.');
    }
  }, function(err) {
    console.log('Something went wrong!', err);
  });

// Remove albums from the signed in user's Your Music library
spotifyApi.removeFromMySavedAlbums([""1H8AHEB8VSE8irHViGOIrF""])
  .then(function(data) {
    console.log('Removed!');
  }, function(err) {
    console.log('Something went wrong!', err);
  });
});

// Add albums to the signed in user's Your Music library
spotifyApi.addToMySavedAlbums([""1H8AHEB8VSE8irHViGOIrF""])
  .then(function(data) {
    console.log('Added album!');
  }, function(err) {
    console.log('Something went wrong!', err);
  });
});


/*
 * Browse methods
 */

  // Retrieve new releases
spotifyApi.getNewReleases({ limit : 5, offset: 0, country: 'SE' })
  .then(function(data) {
    console.log(data.body);
      done();
    }, function(err) {
       console.log(""Something went wrong!"", err);
    });
  });

//  Retrieve featured playlists
spotifyApi.getFeaturedPlaylists({ limit : 3, offset: 1, country: 'SE', locale: 'sv_SE', timestamp:'2014-10-23T09:00:00' })
  .then(function(data) {
    console.log(data.body);
  }, function(err) {
    console.log(""Something went wrong!"", err);
  });

// Get a List of Categories
spotifyApi.getCategories({
      limit : 5,
      offset: 0,
      country: 'SE',
      locale: 'sv_SE'
  })
  .then(function(data) {
    console.log(data.body);
  }, function(err) {
    console.log(""Something went wrong!"", err);
  });

// Get a Category (in Sweden)
spotifyApi.getCategory('party', {
      country: 'SE',
      locale: 'sv_SE'
  })
  .then(function(data) {
    console.log(data.body);
  }, function(err) {
    console.log(""Something went wrong!"", err);
  });

// Get Playlists for a Category (Party in Brazil)
spotifyApi.getPlaylistsForCategory('party', {
      country: 'BR',
      limit : 2,
      offset : 0
    })
  .then(function(data) {
    console.log(data.body);
  }, function(err) {
    console.log(""Something went wrong!"", err);
  });

// Get Recommendations Based on Seeds
spotifyApi.getRecommendations({
      min_energy: 0.4,
      seed_artists: ['6mfK6Q2tzLMEchAr0e9Uzu', '4DYFVNKZ1uixa6SQTvzQwJ'],
      min_popularity: 50
    })
  .then(function(data) {
    let recommendations = data.body;
    console.log(recommendations);
  }, function(err) {
    console.log(""Something went wrong!"", err);
  });

// Get available genre seeds
spotifyApi.getAvailableGenreSeeds()
  .then(function(data) {
    let genreSeeds = data.body;
    console.log(genreSeeds);
  }, function(err) {
    console.log('Something went wrong!', err);
  });

/* Player */

// Add an Item to the User's Playback Queue
// TBD

// Get a User's Available Devices
spotifyApi.getMyDevices()
  .then(function(data) {
    let availableDevices = data.body.devices;
    console.log(availableDevices);
  }, function(err) {
    console.log('Something went wrong!', err);
  });

// Get Information About The User's Current Playback State
spotifyApi.getMyCurrentPlaybackState()
  .then(function(data) {
    // Output items
    if (data.body && data.body.is_playing) {
      console.log(""User is currently playing something!"");
    } else {
      console.log(""User is not playing anything, or doing so in private."");
    }
  }, function(err) {
    console.log('Something went wrong!', err);
  });

// Get Current User's Recently Played Tracks
spotifyApi.getMyRecentlyPlayedTracks({
  limit : 20
}).then(function(data) {
    // Output items
    console.log(""Your 20 most recently played tracks are:"");
    data.body.items.forEach(item => console.log(item.track));
  }, function(err) {
    console.log('Something went wrong!', err);
  });

// Get the User's Currently Playing Track 
spotifyApi.getMyCurrentPlayingTrack()
  .then(function(data) {
    console.log('Now playing: ' + data.body.item.name);
  }, function(err) {
    console.log('Something went wrong!', err);
  });

// Pause a User's Playback
spotifyApi.pause()
  .then(function() {
    console.log('Playback paused');
  }, function(err) {
    //if the user making the request is non-premium, a 403 FORBIDDEN response code will be returned
    console.log('Something went wrong!', err);
  });

// Seek To Position In Currently Playing Track
spotifyApi.seek(positionMs)
  .then(function() {
    console.log('Seek to ' + positionMs);
  }, function(err) {
    //if the user making the request is non-premium, a 403 FORBIDDEN response code will be returned
    console.log('Something went wrong!', err);
  });

// Set Repeat Mode On User’s Playback
spotifyApi.setRepeat('track')
  .then(function () {
    console.log('Repeat track.');
    }, function(err) {
    //if the user making the request is non-premium, a 403 FORBIDDEN response code will be returned
    console.log('Something went wrong!', err);
  });

// Set Volume For User's Playback
spotifyApi.setVolume(50)
  .then(function () {
    console.log('Setting volume to 50.');
    }, function(err) {
    //if the user making the request is non-premium, a 403 FORBIDDEN response code will be returned
    console.log('Something went wrong!', err);
  });

// Skip User’s Playback To Next Track
spotifyApi.skipToNext()
  .then(function() {
    console.log('Skip to next');
  }, function(err) {
    //if the user making the request is non-premium, a 403 FORBIDDEN response code will be returned
    console.log('Something went wrong!', err);
  });

// Skip User’s Playback To Previous Track 
spotifyApi.skipToPrevious()
  .then(function() {
    console.log('Skip to previous');
  }, function(err) {
    //if the user making the request is non-premium, a 403 FORBIDDEN response code will be returned
    console.log('Something went wrong!', err);
  });

// Start/Resume a User's Playback 
spotifyApi.play()
  .then(function() {
    console.log('Playback started');
  }, function(err) {
    //if the user making the request is non-premium, a 403 FORBIDDEN response code will be returned
    console.log('Something went wrong!', err);
  });

// Toggle Shuffle For User’s Playback
spotifyApi.setShuffle(true)
  .then(function() {
    console.log('Shuffle is on.');
  }, function  (err) {
    //if the user making the request is non-premium, a 403 FORBIDDEN response code will be returned
    console.log('Something went wrong!', err);
  });

// Transfer a User's Playback
spotifyApi.transferMyPlayback(deviceIds)
  .then(function() {
    console.log('Transfering playback to ' + deviceIds);
  }, function(err) {
    //if the user making the request is non-premium, a 403 FORBIDDEN response code will be returned
    console.log('Something went wrong!', err);
  });


/**
 * Personalization Endpoints
 */

/* Get a User’s Top Artists*/
spotifyApi.getMyTopArtists()
  .then(function(data) {
    let topArtists = data.body.items;
    console.log(topArtists);
  }, function(err) {
    console.log('Something went wrong!', err);
  });

/* Get a User’s Top Tracks*/
spotifyApi.getMyTopTracks()
  .then(function(data) {
    let topTracks = data.body.items;
    console.log(topTracks);
  }, function(err) {
    console.log('Something went wrong!', err);
  });

```

### Chaining calls

```javascript
// track detail information for album tracks
spotifyApi
  .getAlbum('5U4W9E5WsYb2jUQWePT8Xm')
  .then(function(data) {
    return data.body.tracks.map(function(t) {
      return t.id;
    });
  })
  .then(function(trackIds) {
    return spotifyApi.getTracks(trackIds);
  })
  .then(function(data) {
    console.log(data.body);
  })
  .catch(function(error) {
    console.error(error);
  });

// album detail for the first 10 Elvis' albums
spotifyApi
  .getArtistAlbums('43ZHCT0cAZBISjO8DG9PnE', { limit: 10 })
  .then(function(data) {
    return data.body.albums.map(function(a) {
      return a.id;
    });
  })
  .then(function(albums) {
    return spotifyApi.getAlbums(albums);
  })
  .then(function(data) {
    console.log(data.body);
  });
```

### Authorization
Supplying an access token is required for all requests to the Spotify API. This wrapper supports three authorization flows - The Authorization Code flow (signed by a user), the Client Credentials flow (application authentication - the user isn't involved), and the Implicit Grant Flow (For completely clientside applications). See Spotify's [Authorization guide](https://developer.spotify.com/spotify-web-api/authorization-guide/) for detailed information on these flows.

**Important: If you are writing a universal/isomorphic web app using this library, you will not be able to use  methods that send a client secret to the Spotify authorization service. Client secrets should be kept server-side and not exposed to client browsers. Never include your client secret in the public JS served to the browser.**

The first thing you need to do is to [create an application](https://developer.spotify.com/my-applications/). A step-by-step tutorial is offered by Spotify in this [tutorial](https://developer.spotify.com/spotify-web-api/tutorial/).

#### Authorization code flow

With the application created and its redirect URI set, the only thing necessary for the application to retrieve an **authorization code** is the user's permission. Which permissions you're able to ask for is documented in Spotify's [Using Scopes section](https://developer.spotify.com/spotify-web-api/using-scopes/).

In order to get permissions, you need to direct the user to [Spotify's Accounts service](https://accounts.spotify.com). Generate the URL by using the wrapper's authorization URL method.

```javascript
var scopes = ['user-read-private', 'user-read-email'],
  redirectUri = 'https://example.com/callback',
  clientId = '5fe01282e44241328a84e7c5cc169165',
  state = 'some-state-of-my-choice';

// Setting credentials can be done in the wrapper's constructor, or using the API object's setters.
var spotifyApi = new SpotifyWebApi({
  redirectUri: redirectUri,
  clientId: clientId
});

// Create the authorization URL
var authorizeURL = spotifyApi.createAuthorizeURL(scopes, state);

// https://accounts.spotify.com:443/authorize?client_id=5fe01282e44241328a84e7c5cc169165&response_type=code&redirect_uri=https://example.com/callback&scope=user-read-private%20user-read-email&state=some-state-of-my-choice
console.log(authorizeURL);
```

The example below uses a hardcoded authorization code, retrieved from the Accounts service as described above.

```javascript
var credentials = {
  clientId: 'someClientId',
  clientSecret: 'someClientSecret',
  redirectUri: 'http://www.michaelthelin.se/test-callback'
};

var spotifyApi = new SpotifyWebApi(credentials);

// The code that's returned as a query parameter to the redirect URI
var code = 'MQCbtKe23z7YzzS44KzZzZgjQa621hgSzHN';

// Retrieve an access token and a refresh token
spotifyApi.authorizationCodeGrant(code).then(
  function(data) {
    console.log('The token expires in ' + data.body['expires_in']);
    console.log('The access token is ' + data.body['access_token']);
    console.log('The refresh token is ' + data.body['refresh_token']);

    // Set the access token on the API object to use it in later calls
    spotifyApi.setAccessToken(data.body['access_token']);
    spotifyApi.setRefreshToken(data.body['refresh_token']);
  },
  function(err) {
    console.log('Something went wrong!', err);
  }
);
```

Since the access token was set on the API object in the previous success callback, **it's going to be used in future calls**. As it was retrieved using the Authorization Code flow, it can also be refreshed.

```javascript
// clientId, clientSecret and refreshToken has been set on the api object previous to this call.
spotifyApi.refreshAccessToken().then(
  function(data) {
    console.log('The access token has been refreshed!');

    // Save the access token so that it's used in future calls
    spotifyApi.setAccessToken(data.body['access_token']);
  },
  function(err) {
    console.log('Could not refresh access token', err);
  }
);
```

#### Client Credential flow

The Client Credential flow doesn't require the user to give permissions, so it's suitable for requests where the application just needs to authenticate itself. This is the case with for example retrieving a playlist. However, note that the access token cannot be refreshed, and that it isn't connected to a specific user.

```javascript
var clientId = 'someClientId',
  clientSecret = 'someClientSecret';

// Create the api object with the credentials
var spotifyApi = new SpotifyWebApi({
  clientId: clientId,
  clientSecret: clientSecret
});

// Retrieve an access token.
spotifyApi.clientCredentialsGrant().then(
  function(data) {
    console.log('The access token expires in ' + data.body['expires_in']);
    console.log('The access token is ' + data.body['access_token']);

    // Save the access token so that it's used in future calls
    spotifyApi.setAccessToken(data.body['access_token']);
  },
  function(err) {
    console.log('Something went wrong when retrieving an access token', err);
  }
);
```

#### Implicit Grant flow

The Implicit Grant can be used to allow users to login to your completely client-side application. This method still requires a registered application, but won't expose your client secret.
This method of authentication won't return any refresh tokens, so you will need to fully reauthenticate the user everytime a token expires.

```javascript
var scopes = ['user-read-private', 'user-read-email'],
  redirectUri = 'https://example.com/callback',
  clientId = '5fe01282e44241328a84e7c5cc169165',
  state = 'some-state-of-my-choice',
  showDialog = true,
  responseType = 'token';

// Setting credentials can be done in the wrapper's constructor, or using the API object's setters.
var spotifyApi = new SpotifyWebApi({
  redirectUri: redirectUri,
  clientId: clientId
});

// Create the authorization URL
var authorizeURL = spotifyApi.createAuthorizeURL(
  scopes,
  state,
  showDialog,
  responseType
);

// https://accounts.spotify.com/authorize?client_id=5fe01282e44241328a84e7c5cc169165&response_type=token&redirect_uri=https://example.com/callback&scope=user-read-private%20user-read-email&state=some-state-of-my-choice&show_dialog=true
console.log(authorizeURL);
```

When the client returns, it will have a token we can directly pass to the library:

```javascript
// The code that's returned as a hash fragment query string parameter to the redirect URI
var code = 'MQCbtKe23z7YzzS44KzZzZgjQa621hgSzHN';
var credentials = {
  clientId: 'someClientId',
  clientSecret: 'someClientSecret',
  //Either here
  accessToken: code
};

var spotifyApi = new SpotifyWebApi(credentials);

//Or with a method
spotifyApi.setAccessToken(code);
```

#### Setting credentials

Credentials are either set when constructing the API object or set after the object has been created using setters. They can be set all at once or one at a time.

Using setters, getters and resetters.

```javascript
// Use setters to set all credentials one by one
var spotifyApi = new SpotifyWebApi();
spotifyApi.setAccessToken('myAccessToken');
spotifyApi.setRefreshToken('myRefreshToken');
spotifyApi.setRedirectURI('http://www.example.com/test-callback');
spotifyApi.setClientId('myOwnClientId');
spotifyApi.setClientSecret('someSuperSecretString');

// Set all credentials at the same time
spotifyApi.setCredentials({
  accessToken: 'myAccessToken',
  refreshToken: 'myRefreshToken',
  redirectUri: 'http://www.example.com/test-callback',
  'clientId ': 'myClientId',
  clientSecret: 'myClientSecret'
});

// Get the credentials one by one
console.log('The access token is ' + spotifyApi.getAccessToken());
console.log('The refresh token is ' + spotifyApi.getRefreshToken());
console.log('The redirectURI is ' + spotifyApi.getRedirectURI());
console.log('The client ID is ' + spotifyApi.getClientId());
console.log('The client secret is ' + spotifyApi.getClientSecret());

// Get all credentials
console.log('The credentials are ' + spotifyApi.getCredentials());

// Reset the credentials
spotifyApi.resetAccessToken();
spotifyApi.resetRefreshToken();
spotifyApi.resetRedirectURI();
spotifyApi.resetClientId();
spotifyApi.resetClientSecret();
spotifyApi.resetCode();

// Reset all credentials at the same time
spotifyApi.resetCredentials();
```

Using the constructor.

```javascript
// Set necessary parts of the credentials on the constructor
var spotifyApi = new SpotifyWebApi({
  clientId: 'myClientId',
  clientSecret: 'myClientSecret'
});

// Get an access token and 'save' it using a setter
spotifyApi.clientCredentialsGrant().then(
  function(data) {
    console.log('The access token is ' + data.body['access_token']);
    spotifyApi.setAccessToken(data.body['access_token']);
  },
  function(err) {
    console.log('Something went wrong!', err);
  }
);
```

```javascript
// Set the credentials when making the request
var spotifyApi = new SpotifyWebApi({
  accessToken: 'njd9wng4d0ycwnn3g4d1jm30yig4d27iom5lg4d3'
});

// Do search using the access token
spotifyApi.searchTracks('artist:Love').then(
  function(data) {
    console.log(data.body);
  },
  function(err) {
    console.log('Something went wrong!', err);
  }
);
```

```javascript
// Set the credentials when making the request
var spotifyApi = new SpotifyWebApi({
  accessToken: 'njd9wng4d0ycwnn3g4d1jm30yig4d27iom5lg4d3'
});

// Get tracks in a playlist
api
  .getPlaylistTracks('3ktAYNcRHpazJ9qecm3ptn', {
    offset: 1,
    limit: 5,
    fields: 'items'
  })
  .then(
    function(data) {
      console.log('The playlist contains these tracks', data.body);
    },
    function(err) {
      console.log('Something went wrong!', err);
    }
  );
```

## Development

See something you think can be improved? [Open an issue](https://github.com/thelinmichael/spotify-web-api-node/issues/new) or clone the project and send a pull request with your changes.

### Running tests

You can run the unit tests executing `npm test` and get a test coverage report running `npm test -- --coverage`.
"
12,trungk18/angular-spotify,TypeScript,"# Angular Spotify

[![Open in Visual Studio Code](https://open.vscode.dev/badges/open-in-vscode.svg)](https://open.vscode.dev/trungk18/angular-spotify)

A simple Spotify client built with Angular 12, Nx workspace, ngrx, TailwindCSS and ng-zorro.

> I have recently shared about #angularspotify at [AngularAir](https://angularair.com), you can watch the session here 👉 [youtu.be/uPB0KHKlrU8][02-air]

## Working application

Check out the **live application** -> https://spotify.trungk18.com

**Spotify premium** is required for the Web Playback SDK to play music. If you are using a free account, you can still browse the app, but it couldn't play the music. Sorry about that 🤣

![Angular Spotify Demo][demo]

![Angular Spotify Visualizer][visualizer]

![Angular Spotify Browse][angular-spotify-browse]

![Angular Spotify Blurry Background][album-art]

![Angular Spotify PWA][pwa]

![Angular Spotify Web Player][web-player]

## Support

If you like my work, feel free to:

- ⭐ this repository. And we will be happy together :)
- [![Tweet](https://img.shields.io/twitter/url/http/shields.io.svg?style=social)][tweet] about Angular Spotify
- <a title=""Thanks for your support!"" href=""https://www.buymeacoffee.com/tuantrungvo"" target=""_blank""><img src=""https://res.cloudinary.com/dvujyxh7e/image/upload/c_thumb,w_140,g_face/v1596378474/default-orange_uthxgz.jpg"" alt=""Buy Me A Coffee""></a>

Thanks a bunch for stopping by and supporting me!

[tweet]: https://twitter.com/intent/tweet?url=https://github.com/trungk18/angular-spotify&text=A%20cool%20Spotify%20client%20made%20with%20Angular%2012,%20Nx%20workspace,%20ngrx,%20TailwindCSS%20and%20ng-zorro%20%40tuantrungvo&hashtags=angularspotify,angular,nx,ngrx,ngzorro,typescript

## Who is it for 🤷‍♀️

I still remember Window Media Player on windows has the visualization when you start to play the music, and I wanted to have the same experience when listening to Spotify. That is the reason I started this project.

I found that there weren't many resources on building a proper real-world scale application, and that's my focus for sharing. I made a [Jira clone application][jira] as the first one for that purpose. [Nx workspace][nx] is getting more and more attention from the Angular community, but people are always confused about how to architect and set up an Nx project. I hope Angular Spotify will give you more insight on that even though it is my first project using Nx 🤣

---

You know I am one of the moderators of [Angular Vietnam][angularvn]. Recently, I also started [Angular Singapore][angularsg]. This piece of work is my other long-term plan to bring Angular knowledge to more people. I desire to advocate and grow the Angular developer community in Singapore and Vietnam :)

## Tech stack

![Tech logos][stack]

- [Angular 12][angular]
- [Nx Workspace][nx]
- [ngneat][] packages includes: `ngneat/svg-icon` and `ngneat/until-destroy`
- [ngrx][ngrx] and [ngrx/component-store][component-store]
- [ng-zorro][ng-zorro] UI component: `tooltip`, `modal`, `slider`, `switch` and more.
- [TailwindCSS][tailwind] - See this video [Everything you need to know about TailwindCSS and Angular applications](https://youtu.be/zSXdJqEPy9w) by [@nartc][nartc] for integration TailwindCSS with Angular
- [Netlify][netlify] for deployment

[angular]: https://angular.io/
[ngrx]: https://ngrx.io/
[component-store]: https://ngrx.io/guide/component-store
[tailwind]: https://tailwindcss.com/
[ng-zorro]: https://ng.ant.design/docs/introduce/en
[netlify]: http://netlify.com/
[ngneat]: https://github.com/ngneat

I experimented with the ngrx/component store for `AuthStore` and `UIStore`. It might not be a best practice, and I will refactor it very soon. Just FYI 🤣

## High-level design

See my original notes on [Nx workspace structure for NestJS and Angular][gist]

### Principles

All components are following:

- OnPush Change Detection and async pipes: all components use observable and async pipe for rendering data without any single manual subscribe. Only some places are calling subscribe for dispatching an action, which I will have a refactor live stream session with my friend [@nartc][nartc] to use the component store for a fully subscribe-less application.
- SCAMs (single component Angular modules) for tree-shakable components, meaning each component will have a respective module. For example, a RegisterComponent will have a corresponding RegisterModule. We won't declare RegisterComponent as part of AuthModule, for instance.
- Mostly, everything will stay in the `libs` folder. New modules, new models, new configurations, new components etc... are in libs. libs should be separated into different directories based on existing apps. We won't put them inside the apps folder. For example in an Angular, contains the `main.ts`, `app.component.ts` and `app.module.ts`

### Structure

I followed the structure recommended by my friend [@nartc][nartc]. Below is the simplified version of the application structure.

```
.
└── root
    ├── apps
    │   └── angular-spotify
    └── libs
        └── web (dir)
            ├── shell (dir)
            │   ├── feature (angular:lib) - for configure any forRoot modules
            │   └── ui
            │       └── layout (angular:lib)
            ├── settings (dir)
            │   ├── feature (angular:lib) - for configure and persist all settings
            │   └── data-access (workspace:lib) - store and services for settings module
            ├── playlist (dir)
            │   ├── data-access (angular:lib, service, state management)
            │   ├── features
            │   │   ├── list (angular:lib PlaylistsComponent)
            │   │   └── detail (angular:lib PlaylistDetailComopnent)
            │   └── ui (dir)
            │       └── playlist-track (angular:lib, SCAM for Component)
            ├── visualizer (dir)
            │   ├── data-access (angular:lib)
            │   ├── feature
            │   └── ui (angular:lib)
            ├── home (dir)
            │   ├── data-access (angular:lib)
            │   ├── feature (angular:lib)
            │   └── ui (dir)
            │       ├── featured-playlists (angular:lib, SCAM for Component)
            │       ├── greeting (angular:lib, SCAM for Component)
            │       └── recent-played (angular:lib, SCAM for Component)
            └── shared (dir)
                ├── app-config (injection token for environment)
                ├── data-access (angular:lib, API call, Service or State management to share across the Client app)
                ├── ui (dir)
                ├── pipes (dir)
                ├── directives (dir)
                └── utils (angular:lib, usually shared Guards, Interceptors, Validators...)
```

### Authentication Flow

I follow `Implicit Grant Flow` that Spotify recommended for client-side only applications and did not involve secret keys. The issued access tokens are short-lived, and there are no refresh tokens to extend them when they expire.

View the [Spotify Authorization Guide](https://developer.spotify.com/documentation/general/guides/authorization-guide/)

- Upon opening Angular Spotify, It will redirect you to Spotify to get access to your data. Angular Spotify only uses the data purely for displaying on the UI. We won't store your information anywhere else.
- Angular Spotify only keeps the access token in the browser memory without even storing it into browser local storage. If you do a hard refresh on the browser, It will ask for a new access token from Spotify. One access token is only valid for **one hour**.
- After having the token, I'll try to connect to the Web Playback SDK with a new player - `Angular Spotify Web Player`

![Angular Spotify Web Playback SDK flow][sdk-flow]

### Dependency Graph

Nx provides an [dependency graph][dep-graph-nx] out of the box. To view it on your browser, clone my repository and run:

```bash
npm run dep-graph
```

A simplified graph looks like the following. It gives you insightful information for your mono repo and is especially helpful when multiple projects depend on each other.

![Angular Spotify Dependency Graph][dep-graph]

### Nx Computation Cache

Having Nx Cloud configured shortens the deployment time quite a lot.

Nx Cloud pairs with Nx in order to enable you to build and test code more rapidly, by up to 10 times. Even teams that are new to Nx can connect to Nx Cloud and start saving time instantly. Visit [Nx Cloud](https://nx.app/) to learn more.

![Nx cloud][nx-cloud]

## Features and Roadmap

I set a tentative deadline for motivating myself to finish the work on time. Otherwise, It will take forever to complete :)

### 1.0 - Simple Spotify client

> March 01 - 28, 2021

- [x] Proven, scalable, and easy to understand the structure with Nx workspace
- [x] Play music using Spotify SDK
- [x] Load a maximum of 50 save playlists and top 100 songs per playlist.
- [x] Cool visualization

## Live stream

Let work on it together!

I scheduled a few live stream sessions to show you how I continue developing Angular Spotify. Follow [my twitter][twitter] for the latest updates. See the scheduled events.

| #   | Time                       | Description/Link                                                |
| --- | -------------------------- | --------------------------------------------------------------- |
| 1   | Sat, 3rd April 2021, 10AM  | [Structure your Angular application with Nx workspace][live-01] |
| 2   | Sat, 10th April 2021, 10AM | [Build the album list page][live-02]                            |
| 3   | Sat, 17th April 2021, 10AM | [Build the album detail page - part 1][live-03]                 |
| 4   | Sat, 24th April 2021, 10AM | [Build the album detail page - part 2][live-04]                 |
| 5   | Sat, 8th May 2021, 10AM    | [Build the artist detail page - part 1][live-05]                |
| 6   | Sat, 15th May 2021, 10AM   | [Build the artist detail page - part 2][live-06]                |
| 7   | Sat, 12th Jun 2021, 10AM   | [Build the track list page - part 1][live-07]                   |
| 8   | Sat, 19th Jun 2021, 10AM   | [Build the track list page - part 2][live-08]                   |
| 9   | Sun, 11th July 2021, 10AM  | [NgRx Component Store Unit Testing][live-09]                    |
| 10  | TBD                        | Config Nx build:affected with Github action                     |

I will also do some refactoring with [@nartc][nartc] for Angular Vietnam Office Hours. More detail is coming soon.

[live-01]: https://www.youtube.com/watch?v=9njo6MZWBN0
[live-02]: https://www.youtube.com/watch?v=vEIxjcrXcDc
[live-03]: https://youtu.be/c9-WTksAv-s
[live-04]: https://www.youtube.com/watch?v=8P3pB40JF2w
[live-05]: https://youtu.be/fNhdd-O5c9c
[live-06]: https://youtu.be/Tt51-pxm6Ko
[live-07]: https://youtu.be/Oj4yomnxfj4
[live-08]: https://youtu.be/1h5KKFSj9Es
[live-09]: https://youtu.be/owwRjxm0zs0

## Community

I have received some invitations to talk about Angular Spotify from the community. You can watch my talks below 🙂

[![BLS033](https://pbs.twimg.com/media/EzWVmV3UYAgjgY-?format=jpg&name=small)][01-beeman]

[![AngularAir](https://pbs.twimg.com/media/E0zEECXXMAQNpsA?format=jpg&name=medium)][02-air]

| #   | Time                 | Description/Link                                   |
| --- | -------------------- | -------------------------------------------------- |
| 1   | Wed, 21st April 2021 | [BLS SHOW & TELL - Angular Spotify][01-beeman]     |
| 2   | Fri, 08th May 2021   | [AngularAir - Another 1k stars repository][02-air] |

[01-beeman]: https://youtu.be/9zJcb6ZhBaI
[02-air]: https://youtu.be/uPB0KHKlrU8

## Time spending

It is a side project that I only spent time outside of the office hours to work on. I initially planned to complete the project within two weeks, but the first two weekends were not very productive, maybe because of the holiday mood from Lunar New Year :) But once the lego blocks are getting together, I feel the rhythm, and I know it has to be finished by the end of March.

I couldn't get the full-time report from waka time because it only shows me the latest two weeks. 🤣

I have spent approximately 50 hours working on this project, which is almost the same amount as the first version of [jira.trungk18.com][jira].

The visualizer was the most exciting feature, and I decided to start this project because of that single component.

![Angular Spotify - Time spending][time]

### Accessibility ♿

Not all components have properly defined [aria attributes](https://developer.mozilla.org/en-US/docs/Web/Accessibility/ARIA), visual focus indicators, etc.

## Setting up the development environment 🛠

- `git clone https://github.com/trungk18/angular-spotify.git`
- `cd angular-spotify`
- `npm start` for starting Angular web application
- The app should run on `http://localhost:4200/`

### Unit/Integration tests 🧪

I skipped writing test for this project.

## Compatibility

Web Playback SDK supports Chrome, Firefox, Edge, IE 11, or above running on Mac/Windows/Linux.

It **doesn't support** Safari or any mobile browser on **Android** or **iOS**

View [completed list of supported browsers](https://developer.spotify.com/documentation/web-playback-sdk/#supported-browsers)

## Author: Trung Vo ✍️

- A seasoned front-end engineer with seven years of passion in creating experience-driven products. I am proficient in Angular, React and TypeScript development.
- Personal blog: https://trungk18.com/
- Say hello: trungk18 [et] gmail [dot] com

## Contributing

If you have any ideas, just [open an issue][issues] and tell me what you think.

If you'd like to contribute, please fork the repository and make changes as you'd like. [Pull requests][pull] are warmly welcome.

## Credits and reference

Special thanks to my friend [@nartc][nartc], who helped me review the code early.

| Resource                                                               | Description                                                                                                           |
| ---------------------------------------------------------------------- | --------------------------------------------------------------------------------------------------------------------- |
| [@koel/koel][koel]                                                     | A cool player made by [@phanan][phanan], I reused the visualizer code from this repo with my additional customization |
| [beeman/component-store-playground][beeman/component-store-playground] | A nice example of using Nx with ngrx/component-store, I refer to the project structure from this repo                 |
| [Start using ngrx/effects for this][tim]                               | An excellent write up by [Tim Deschryver][tim-twitter]                                                                |

[koel]: https://github1s.com/koel/core/blob/master/js/utils/visualizer.ts
[phanan]: https://twitter.com/notphanan
[beeman/component-store-playground]: https://github.com/beeman/component-store-playground
[tim]: https://timdeschryver.dev/blog/start-using-ngrx-effects-for-this
[tim-twitter]: https://twitter.com/tim_deschryver

## License

Feel free to use my code on your project. Please put a reference to this repository.

[MIT](https://opensource.org/licenses/MIT)

[issues]: https://github.com/trungk18/angular-spotify/issues/new
[pull]: https://github.com/trungk18/angular-spotify/compare
[jira]: https://jira.trungk18.com/
[twitter]: https://twitter.com/tuantrungvo
[nx]: https://nx.dev/
[angularsg]: https://twitter.com/angularsg
[angularvn]: https://twitter.com/ngvnofficial
[nartc]: https://github.com/nartc
[gist]: https://gist.github.com/trungk18/7ef8766cafc05bc8fd87be22de6c5b12
[dep-graph-nx]: https://nx.dev/latest/angular/structure/dependency-graph
[stack]: /libs/web/shared/assets/src/assets/readme/angular-spotify-tech-stack.png
[time]: /libs/web/shared/assets/src/assets/readme/time-spending.png
[dep-graph]: /libs/web/shared/assets/src/assets/readme/dep-graph.png
[sdk-flow]: /libs/web/shared/assets/src/assets/readme/sdk-flow.png
[demo]: /libs/web/shared/assets/src/assets/readme/angular-spotify-demo-short.gif
[visualizer]: /libs/web/shared/assets/src/assets/readme/angular-spotify-visualization.gif
[angular-spotify-browse]: /libs/web/shared/assets/src/assets/readme/angular-spotify-browse.gif
[album-art]: /libs/web/shared/assets/src/assets/readme/angular-spotify-album-art.gif
[pwa]: /libs/web/shared/assets/src/assets/readme/angular-spotify-pwa.gif
[web-player]: /libs/web/shared/assets/src/assets/readme/angular-spotify-web-player.png
[nx-cloud]: /libs/web/shared/assets/src/assets/readme/nx-cloud.png
"
13,artyshko/smd,Python,"# Spotify Music Downloader (SMD) Desktop | **<a href=""https://t.me/SpotifyMusicDownloaderBot""><b>Telegram</b></a>**
# NEW DEV VERSION **<a href=""https://github.com/artyshko/smd/tree/dev_ea-0""><b>HERE</b></a>** (As the bot is down, you can use this CLI version)
# The SMD project is temporarily frozen due to having problems with a DMCA.
[![made-with-python](https://img.shields.io/badge/Made%20with-Python-1f425f.svg)](https://www.python.org/) [![Open Source Love svg1](https://badges.frapsoft.com/os/v1/open-source.svg?v=103)](https://github.com/ellerbrock/open-source-badges/) [![License: MIT](https://img.shields.io/badge/License-MIT-yellow.svg)](https://opensource.org/licenses/MIT) ![GitHub repo size in bytes](https://img.shields.io/github/repo-size/artyshko/smd.svg) ![GitHub Release Date](https://img.shields.io/github/release-date/artyshko/smd.svg) ![GitHub issues](https://img.shields.io/github/issues/artyshko/smd.svg) ![Beerpay](https://img.shields.io/beerpay/artyshko/smd.svg) [![Beerpay](https://beerpay.io/artyshko/smd/make-wish.svg?style=flat)](https://beerpay.io/artyshko/smd?focus=wish)

<img align=""center"" src=""https://raw.githubusercontent.com/artyshko/smd/telegram/Data/9.png""> 

<p align=""center"">
  <b><h1>Desktop version GUI<h1></b>
</p>
 <img align=""center"" src=""https://github.com/artyshko/smd/raw/master/Data/prev/1.png""> 
.
 <img align=""center"" src=""https://github.com/artyshko/smd/raw/master/Data/prev/2.png"">
<p align=""center"">
  <b><h1>Desktop version CLI<h1></b>
</p>
  <img align=""center"" src=""https://github.com/artyshko/smd/raw/master/Data/11.png"">
<p align=""center"">
  <h1>Telegram version</h1>
</p>

<img align=""center"" src=""https://raw.githubusercontent.com/artyshko/smd/master/Data/1.png""></br>

<img align=""center"" src=""https://raw.githubusercontent.com/artyshko/smd/master/Data/2.png""></br>

<img align=""center"" src=""https://raw.githubusercontent.com/artyshko/smd/master/Data/3.png""></br>

<img align=""center"" src=""https://raw.githubusercontent.com/artyshko/smd/master/Data/4.png""></br>

<img align=""center"" src=""https://raw.githubusercontent.com/artyshko/smd/master/Data/5.png""></br>

## Manual (Desktop version CLI)

```
./main.py [argument][value] - startup with arguments

 Arguments:

        -h,  --help                  Print a help message and exit.
        -p,  --path                  Set another directory.

        -ss, --spotify-song          Spotify song link or URI.
        -sa, --spotify-album         Spotify album link or URI.
        -sp, --spotify-playlist      Spotify playlist URI.

        -ds, --deezer-song           Deezer song link.
        -da, --deezer-album          Deezer album link.
        -dp, --deezer-playlist       Deezer playlist link.

        -ym, --youtube-music         YouTube Music link.
        -yv, --youtube-video         YouTube Video link.

        -a,  --apple                 Apple Music link.
        -q,  --query                 Search query.

```
## Installation

```
git clone https://github.com/artyshko/smd.git
```

### First you have to install all dependencies
```
pip3 install -r requirements.txt
pip3 install PyQtWebEngine
sudo apt-get install python3-pyqt5.qtwebengine
```

### Make file executable
```
chmod +x main.py
./main.py
```
### Or use
```
python3 main.py
```

### Spotify
Song:
```
./main.py -ss ""https://open.spotify.com/track/2QoDAlMnML5haTXvYRS86X?si=eMGX4dlwQd-7dyiG6OmUHQ""
```
Album:
```
./main.py -sa ""https://open.spotify.com/album/79dL7FLiJFOO0EoehUHQBv?si=lDnHRa2BR_uFUOnUOZPbUQ""
```
Playlist:
```
./main.py -sp ""https://open.spotify.com/playlist/37i9dQZF1DXcRXFNfZr7Tp?si=Yd3IJQ9ATWOdFulNa7ax5g""
```

### Deezer
Song:
```
./main.py -ds ""https://www.deezer.com/track/3787855""
```
Album:
```
./main.py -da ""https://www.deezer.com/album/1695172""
```
Playlist:
```
./main.py -dp ""https://www.deezer.com/playlist/1306931615""
```

### YouTube Music
Song:
```
./main.py -ym ""https://music.youtube.com/watch?v=HnXzzTIFu_U&list=RDAMVMHnXzzTIFu_U""
```

### YouTube Video
Video:
```
./main.py -yv ""https://www.youtube.com/watch?v=JHi-WGFGWek""
```

### Apple Music
Example:
```
./main.py -a ""https://itunes.apple.com/us/album/i-wanna-be-yours/663097964?i=663098065""
```

### Query mode
Example:
```
./main.py -q ""The XX - Intro""
```

### Choose another directory 
Example:
```
./main.py -q ""The XX - Intro"" -p ~/Music

./main.py -ss ""https://open.spotify.com/track/2QoDAlMnML5haTXvYRS86X"" -p ~/Desktop/Music/New
```
## Desktop version GUI
<img align=""center"" src=""https://github.com/artyshko/smd/raw/master/Data/prev/6.png""></br>

<img align=""center"" src=""https://github.com/artyshko/smd/raw/master/Data/prev/7.png""></br>

<img align=""center"" src=""https://github.com/artyshko/smd/raw/master/Data/prev/3.png""></br>

<img align=""center"" src=""https://github.com/artyshko/smd/raw/master/Data/prev/4.png""></br>

<img align=""center"" src=""https://github.com/artyshko/smd/raw/master/Data/prev/5.png""></br>

<img align=""center"" src=""https://github.com/artyshko/smd/raw/master/Data/prev/8.png""></br>

<img align=""center"" src=""https://github.com/artyshko/smd/raw/master/Data/prev/9.png""></br>

<img align=""center"" src=""https://github.com/artyshko/smd/raw/master/Data/prev/10.png""></br>
"
14,Pau1fitz/react-spotify,JavaScript,"# React-Spotify 🎺🎸🎻🎤

This is `React-Spotify`, a React front end client that communicates with the Spotify API.

See it in action [here](http://pau1fitz.github.io/react-spotify).

![alt text](https://github.com/Pau1fitz/react-spotify/blob/master/songs.png ""Song"")
![alt text](https://github.com/Pau1fitz/react-spotify/blob/master/browser.png ""Browse"")

If you wish to run the code locally run the following.

```
yarn
yarn start
visit http://localhost:3000
```

You can also run as an electron app by running `yarn run electron-start`.

Please note that the Spotify API only provides 30 second audio snippets. It may be possible to get the full track by using the [Web Playback SDK](https://beta.developer.spotify.com/documentation/web-playback-sdk/).



### License

Released under the MIT License. 

Check [LICENSE.md](https://github.com/Pau1fitz/react-spotify/blob/master/LICENSE) for more info.
"
15,CleverProgrammers/spotify-clone,JavaScript,"This project was bootstrapped with [Create React App](https://github.com/facebook/create-react-app).

## Available Scripts

In the project directory, you can run:

### `npm start`

Runs the app in the development mode.<br />
Open [http://localhost:3000](http://localhost:3000) to view it in the browser.

The page will reload if you make edits.<br />
You will also see any lint errors in the console.

### `npm test`

Launches the test runner in the interactive watch mode.<br />
See the section about [running tests](https://facebook.github.io/create-react-app/docs/running-tests) for more information.

### `npm run build`

Builds the app for production to the `build` folder.<br />
It correctly bundles React in production mode and optimizes the build for the best performance.

The build is minified and the filenames include the hashes.<br />
Your app is ready to be deployed!

See the section about [deployment](https://facebook.github.io/create-react-app/docs/deployment) for more information.

### `npm run eject`

**Note: this is a one-way operation. Once you `eject`, you can’t go back!**

If you aren’t satisfied with the build tool and configuration choices, you can `eject` at any time. This command will remove the single build dependency from your project.

Instead, it will copy all the configuration files and the transitive dependencies (webpack, Babel, ESLint, etc) right into your project so you have full control over them. All of the commands except `eject` will still work, but they will point to the copied scripts so you can tweak them. At this point you’re on your own.

You don’t have to ever use `eject`. The curated feature set is suitable for small and middle deployments, and you shouldn’t feel obligated to use this feature. However we understand that this tool wouldn’t be useful if you couldn’t customize it when you are ready for it.

## Learn More

You can learn more in the [Create React App documentation](https://facebook.github.io/create-react-app/docs/getting-started).

To learn React, check out the [React documentation](https://reactjs.org/).

### Code Splitting

This section has moved here: https://facebook.github.io/create-react-app/docs/code-splitting

### Analyzing the Bundle Size

This section has moved here: https://facebook.github.io/create-react-app/docs/analyzing-the-bundle-size

### Making a Progressive Web App

This section has moved here: https://facebook.github.io/create-react-app/docs/making-a-progressive-web-app

### Advanced Configuration

This section has moved here: https://facebook.github.io/create-react-app/docs/advanced-configuration

### Deployment

This section has moved here: https://facebook.github.io/create-react-app/docs/deployment

### `npm run build` fails to minify

This section has moved here: https://facebook.github.io/create-react-app/docs/troubleshooting#npm-run-build-fails-to-minify
"
16,master131/BlockTheSpot,C,"# BlockTheSpot

## Video, audio & banner adblock/skip for Spotify

### :warning: This repository is no longer maintained :warning:

Please see the below fork which is still being updated:

https://github.com/mrpond/BlockTheSpot

---

**Current Version:** 0.13

**Last updated:** 5th March 2019

**Last tested version:** 1.1.4.197.g92d52c4f

### Important Notice

If you are using Spotify 1.1.5.xxx or newer, please use run the automatic downgrade script [here](https://github.com/master131/BlockTheSpot/raw/master/downgrade.bat) which will downgrade to 1.1.4.197.g92d52c4f and also disable auto-update. Thanks @CHEF-KOCH.

#### How do I re-enable automatic updates?

Run Command Prompt as administrator and enter the following command:
```
icacls ""%localappdata%\Spotify\Update"" /reset /T
```

### Features:
* Windows only
* Set and forget
* Blocks all banner/video/audio ads within the app
* Retains friend, vertical video and radio functionality
* Unlocks the skip function for any track

:warning: This mod is for the [**Desktop release**](https://www.spotify.com/download/windows/) of Spotify on Windows and **not the Microsoft Store version**.

### Install/Uninstall:

#### Easy Installation:
[Download](https://github.com/master131/BlockTheSpot/raw/master/install.bat) and run install.bat. You don't need to download any other file. 

PS - It's not encrypted at all, it's a batch file with the mod embedded at the end (see the ""MZ"" header). You can always use the manual installation method.

#### Manual Installation:
[Download](https://github.com/master131/BlockTheSpot/raw/master/netutils.dll) and drop netutils.dll inside the Spotify installation folder (next to Spotify.exe).

The default Spotify installation location is: %APPDATA%/Spotify (copy and paste into Explorer address bar)

#### Uninstall:
To uninstall, simply delete netutils.dll from your Spotify installation (see above for the location).
"
17,SathyaBhat/spotify-dl,Python,"## spotify_dl

Downloads songs from any Spotify playlist, album or track.

[![PRs Welcome](https://img.shields.io/badge/PRs-welcome-brightgreen.svg?style=flat-square)](http://makeapullrequest.com)
[![PyPI download month](https://img.shields.io/pypi/dm/spotify_dl.svg)](https://pypi.python.org/pypi/spotify_dl/)
[![PyPI license](https://img.shields.io/pypi/l/spotify_dl.svg)](https://pypi.python.org/pypi/spotify_dl/)
[![PyPI pyversions](https://img.shields.io/pypi/pyversions/spotify_dl.svg)](https://pypi.python.org/pypi/spotify_dl/)
[![GitHub release](https://img.shields.io/github/release/SathyaBhat/spotify-dl.svg)](https://GitHub.com/SathyaBhat/spotify-dl/releases/)
[![GitHub stars](https://img.shields.io/github/stars/SathyaBhat/spotify-dl.svg?style=social&label=Star&maxAge=2592000)](https://GitHub.com/SathyaBhat/spotify-dl/stargazers/)
[![GitHub contributors](https://img.shields.io/github/contributors/SathyaBhat/spotify-dl.svg)](https://GitHub.com/SathyaBhat/spotify-dl/graphs/contributors/)

[![Awesome Badges](https://img.shields.io/badge/badges-awesome-green.svg)](https://github.com/Naereen/badges)

### Tell me more!

I wanted an easy way to grab the songs present in my library so I can download it & use it offline. I no longer use this, but continue to maintain this. spotify-dl doesn't download anything from Spotify. It picks up the metadata from Spotify API and then uses [yt-dlp](https://github.com/yt-dlp/yt-dlp) to download the song. 

### How do I get this thing running?

Install using pip

    pip3 install spotify_dl

Run the program

    spotify_dl -l spotify_playlist_link/s -o download_directory

For running in verbose mode, append `-V`

    spotify_dl -V -l spotify_playlist_link -o download_directory

For more details and other arguments, issue `-h`

    spotify_dl -h

See [the getting started guide](https://github.com/SathyaBhat/spotify-dl/blob/master/GETTING_STARTED.md) for more details.

### Demo 

[![asciicast](https://asciinema.org/a/488558.svg)](https://asciinema.org/a/488558)

### Contributing and Local development

Pull requests and any contributions are always welcome. Please open an issue with your proposal before you start with something.

#### Running tests

At the moment, there are barely any tests but PRs always welcome to improve this. Tests are setup and run with pytest, run

    make tests

to run the tests with [Make](https://www.gnu.org/software/make/)

### Thanks and Credits

Take a look at [CONTRIBUTORS](https://github.com/SathyaBhat/spotify-dl/graphs/contributors) for a list of all people who have helped and contributed to the project.

### Issues, Feedback, Contact details

Feel free to raise any bugs/issues under Github issues. Pull requests are also more than welcome.
"
18,JMPerez/spotify-web-api-js,TypeScript,"# Spotify Web API JS [![Build Status](https://travis-ci.org/JMPerez/spotify-web-api-js.svg?branch=master)](https://travis-ci.org/JMPerez/spotify-web-api-js) [![Coverage Status](https://coveralls.io/repos/JMPerez/spotify-web-api-js/badge.svg)](https://coveralls.io/r/JMPerez/spotify-web-api-js) [![Greenkeeper badge](https://badges.greenkeeper.io/JMPerez/spotify-web-api-js.svg)](https://greenkeeper.io/) <a href=""https://www.buymeacoffee.com/jmp""><img src=""https://img.buymeacoffee.com/button-api/?text=Buy me a coffee&emoji=&slug=jmp&button_colour=BD5FFF&font_colour=ffffff&font_family=Poppins&outline_colour=000000&coffee_colour=FFDD00"" height=""20""></a>

This is a lightweight wrapper for the [Spotify Web API](https://developer.spotify.com/web-api/) ([2.6kB gzipped + compressed](https://cost-of-modules.herokuapp.com/result?p=spotify-web-api-js)). It includes helper functions for **all Spotify's endpoints**, such as fetching metadata (search and look-up of albums, artists, tracks, playlists, new releases, podcasts) and user's information (follow users, artists and playlists, and saved tracks management).

It doesn't have any dependencies and supports callbacks and promises. It is intended to be run on a browser, but if you want to use Node.JS to make the requests, please check [spotify-web-api-node](https://github.com/thelinmichael/spotify-web-api-node).

A list of selected wrappers for different languages and environments is available on the Developer site's [Libraries page](https://developer.spotify.com/web-api/code-examples/).

The wrapper includes helper functions to do the following:

#### Music and Podcast metadata

- Albums, artists, tracks and playlists
- Audio features and audio analysis for tracks
- Albums for a specific artist
- Top tracks for a specific artist
- Artists similar to a specific artist
- Shows and episodes (podcasts)

#### Profiles

- User's emails, product type, display name, birthdate, image

#### Search

- Albums, artists, tracks, playlists, shows, and episodes

#### Playlist Management

- Get a user's playlists
- Create playlists
- Change playlist details
- Add tracks to a playlist
- Remove tracks from a playlist
- Replace tracks in a playlist
- Reorder tracks in a playlist
- Upload custom playlist cover image

#### User's Library

- Add, remove, and get tracks on a user's library
- Check if a track is in the signed in user's library
- Add, remove, and get shows (podcasts) on a user's library

#### Personalization

- Get a user’s top artists and tracks based on calculated affinity
- Get current user’s recently played tracks

#### Browse

- Get new releases
- Get featured playlists
- Get a list of categories
- Get a category
- Get a category's playlists
- Get recommendations based on seeds
- Get available genre seeds

#### Follow

- Follow and unfollow users
- Follow and unfollow artists
- Check if the logged in user follows a user or artist
- Follow a playlist
- Unfollow a playlist
- Get followed artists
- Check if users are following a Playlist

#### Player

- Get a user's available devices
- Get information about the user's current playback
- Get the user's currently playing track
- Transfer a user's playback
- Start/Resume a user's playback
- Pause a user's playback
- Skip user's playback to next track
- Skip user's playback to previous track
- Seek to position in currently playing track
- Set repeat mode on user's playback
- Set volume for user's playback
- Toggle shuffle for user's playback
- Queue a track or an episode

## Installation

Install via node (since the requests are made using XMLHttpRequest, you will need a tool like Browserify to run this on a browser):

    $ npm install -S spotify-web-api-js

Then, in your javascript file

```js
var Spotify = require('spotify-web-api-js');
var s = new Spotify();
//s.searchTracks()...
```

or by making a copy of the `src/spotify-web-api.js` file

## Usage

We recommend you have a look at the [documentation](https://jmperezperez.com/spotify-web-api-js/) to get an overview of the supported
.

The wrapper supports callback functions, as well as [Promises](http://www.html5rocks.com/en/tutorials/es6/promises/) (you can also use [a polyfill](https://github.com/jakearchibald/es6-promise)), and Promises/A+ libraries such as [Q](https://github.com/kriskowal/q) and [when](https://github.com/cujojs/when).

First, instantiate the wrapper.

```js
var spotifyApi = new SpotifyWebApi();
```

If you have an access token, you can set it doing:

```js
spotifyApi.setAccessToken('<here_your_access_token>');
```

When you set an access token, it will be used for signing your requests. An access token is required for all endpoints.

If you want to use a Promises/A+ library, you can set it:

```js
spotifyApi.setPromiseImplementation(Q);
```

Here you see how to get basic information using a function like `getArtistAlbums`:

```js
// get Elvis' albums, passing a callback. When a callback is passed, no Promise is returned
spotifyApi.getArtistAlbums('43ZHCT0cAZBISjO8DG9PnE', function (err, data) {
  if (err) console.error(err);
  else console.log('Artist albums', data);
});

// get Elvis' albums, using Promises through Promise, Q or when
spotifyApi.getArtistAlbums('43ZHCT0cAZBISjO8DG9PnE').then(
  function (data) {
    console.log('Artist albums', data);
  },
  function (err) {
    console.error(err);
  }
);
```

The promises also expose an `abort` method that aborts the XMLHttpRequest. This is useful to cancel
requests that were made earlier and could be resolved out-of-sync:

```js
var prev = null;

function onUserInput(queryTerm) {
  // abort previous request, if any
  if (prev !== null) {
    prev.abort();
  }

  // store the current promise in case we need to abort it
  prev = spotifyApi.searchTracks(queryTerm, { limit: 5 });
  prev.then(
    function (data) {
      // clean the promise so it doesn't call abort
      prev = null;

      // ...render list of search results...
    },
    function (err) {
      console.error(err);
    }
  );
}
```

The functions that fetch data from the API support also an optional JSON object with a set of options, such as the ones regarding pagination. These options will be sent as query parameters:

```js
// passing a callback - get Elvis' albums in range [20...29]
spotifyApi.getArtistAlbums(
  '43ZHCT0cAZBISjO8DG9PnE',
  { limit: 10, offset: 20 },
  function (err, data) {
    if (err) console.error(err);
    else console.log('Artist albums', data);
  }
);

// using Promises through Promise, Q or when - get Elvis' albums in range [20...29]
spotifyApi
  .getArtistAlbums('43ZHCT0cAZBISjO8DG9PnE', { limit: 10, offset: 20 })
  .then(
    function (data) {
      console.log('Album information', data);
    },
    function (err) {
      console.error(err);
    }
  );
```

### More examples

_Note: The following examples use Promises/Q/when as the return object._

Here you can see more examples of the usage of this wrapper:

```js
// get multiple albums
spotifyApi.getAlbums(['5U4W9E5WsYb2jUQWePT8Xm', '3KyVcddATClQKIdtaap4bV']).then(
  function (data) {
    console.log('Albums information', data);
  },
  function (err) {
    console.error(err);
  }
);

// get an artists
spotifyApi.getArtist('2hazSY4Ef3aB9ATXW7F5w3').then(
  function (data) {
    console.log('Artist information', data);
  },
  function (err) {
    console.error(err);
  }
);

// get multiple artists
spotifyApi
  .getArtists(['2hazSY4Ef3aB9ATXW7F5w3', '6J6yx1t3nwIDyPXk5xa7O8'])
  .then(
    function (data) {
      console.log('Artists information', data);
    },
    function (err) {
      console.error(err);
    }
  );

// get albums by a certain artist
spotifyApi.getArtistAlbums('43ZHCT0cAZBISjO8DG9PnE').then(
  function (data) {
    console.log('Artist albums', data);
  },
  function (err) {
    console.error(err);
  }
);

// search tracks whose name, album or artist contains 'Love'
spotifyApi.searchTracks('Love').then(
  function (data) {
    console.log('Search by ""Love""', data);
  },
  function (err) {
    console.error(err);
  }
);

// search artists whose name contains 'Love'
spotifyApi.searchArtists('Love').then(
  function (data) {
    console.log('Search artists by ""Love""', data);
  },
  function (err) {
    console.error(err);
  }
);

// search tracks whose artist's name contains 'Love'
spotifyApi.searchTracks('artist:Love').then(
  function (data) {
    console.log('Search tracks by ""Love"" in the artist name', data);
  },
  function (err) {
    console.error(err);
  }
);
```

### Nesting calls

When you need to make multiple calls to get some dataset, you can take advantage of the Promises to get a cleaner code:

```js
// track detail information for album tracks
spotifyApi
  .getAlbum('5U4W9E5WsYb2jUQWePT8Xm')
  .then(function (data) {
    return data.tracks.map(function (t) {
      return t.id;
    });
  })
  .then(function (trackIds) {
    return spotifyApi.getTracks(trackIds);
  })
  .then(function (tracksInfo) {
    console.log(tracksInfo);
  })
  .catch(function (error) {
    console.error(error);
  });

// album detail for the first 10 Elvis' albums
spotifyApi
  .getArtistAlbums('43ZHCT0cAZBISjO8DG9PnE', { limit: 10 })
  .then(function (data) {
    return data.albums.map(function (a) {
      return a.id;
    });
  })
  .then(function (albums) {
    return spotifyApi.getAlbums(albums);
  })
  .then(function (data) {
    console.log(data);
  });
```

### Getting user's information

In order to get user's information you need to request a user-signed access token, from either the Implicit Grant or Authorization Code flow. Say for instance you want to get user's playlists. Once you get an access token, set it and fetch the data:

```js
// get an access token
...

// set it in the wrapper
var spotifyApi = new SpotifyWebApi();
spotifyApi.setAccessToken('<here_your_access_token>');
spotifyApi.getUserPlaylists('jmperezperez')
  .then(function(data) {
    console.log('User playlists', data);
  }, function(err) {
    console.error(err);
  });

spotifyApi.getPlaylist('4vHIKV7j4QcZwgzGQcZg1x')
  .then(function(data) {
    console.log('User playlist', data);
  }, function(err) {
    console.error(err);
  });
```

Some functions don't need to receive the user's id as a parameter, and will use the
user's information from the access token:

```js
var spotifyApi = new SpotifyWebApi();
spotifyApi.setAccessToken('<here_your_access_token>');
spotifyApi
  .getUserPlaylists() // note that we don't pass a user id
  .then(
    function (data) {
      console.log('User playlists', data);
    },
    function (err) {
      console.error(err);
    }
  );
```

## Integrated Typescript Typings

Get great code completion for this package using the integrated typescript typings. It includes the complete typings of the Spotify Web Api too, so you'll know both how to the navigate the API as well as the response you are getting.

![Typings Example](https://raw.githubusercontent.com/JMPerez/spotify-web-api-js/master/typings-example.gif)

### When bundling the library

If you are bundling spotify-web-api-js using e.g. webpack you can include the library and the typings into a typescript file like this:

```typescript
import SpotifyWebApi from 'spotify-web-api-js';

let spotify = new SpotifyWebApi();
```

### When using the library globally

If you are using the library globally, for example including directly from index.html, include the typings in the top of your typescript file. Typescript will then assume the library is already present globally. Adjust the path to `node_modules`.

```typescript
/// <reference path=""../node_modules/spotify-web-api-js/src/typings/spotify-web-api.d.ts"" />

let spotify = new SpotifyWebApi();
```

## Running tests

In order to run the tests, run:

    $ npm test

If you want to check out the coverage, run:

    $ npm run test:coverage
"
19,spotify/ios-sdk,Objective-C,"# Spotify iOS SDK

## Overview

The Spotify iOS framework allows your application to interact with the Spotify app running in the background on a user's device. Capabilities include authorizing, getting metadata for the currently playing track and context, as well as issuing playback commands.

**Please Note:** By using Spotify developer tools you accept our [Developer Terms of Use](https://beta.developer.spotify.com/terms/).

The Spotify iOS SDK is a set of lightweight objects that connect with the Spotify app and let you control it while all the heavy lifting of playback is offloaded to the Spotify app itself. The Spotify app takes care of playback, networking, offline caching and OS music integration, leaving you to focus on your user experience.  Moving from your app to the Spotify app and vice versa is a streamlined experience where playback and metadata always stay in sync.

[Key Features](#key-features)

[Filing Bugs](#filing-bugs)

[Components](#components)

[How Do App Remote Calls Work?](#how-do-app-remote-calls-work)

[Terms of Use](#terms-of-use)

[Tutorial](#tutorial)

[Frequently Asked Questions](#frequently-asked-questions)

### Key Features

* Playback is always in sync with Spotify app
* Playback, networking, and caching is all accounted for by the Spotify app
* Works offline and online and does not require Web API calls to get metadata for player state
* Allows authentication through the Spotify app so users don't have to type in their credentials

### Filing Bugs

We love feedback from the developer community, so please feel free to file missing features or bugs over at our [issue tracker](https://github.com/spotify/ios-app-remote-sdk/issues).
Make sure you search existing issues before creating new ones.

[Open bug tickets](https://github.com/spotify/ios-app-remote-sdk/labels/bug) | [Open feature requests](https://github.com/spotify/ios-app-remote-sdk/labels/feature%20request)

### Requirements

The Spotify iOS framework requires a deployment target of iOS 9 or higher. The
following architectures are supported: `armv7`, `armv7s` and `arm64` for devices,
`i386` and `x86_64` for the iOS Simulator. Bitcode is also supported.

## Components

### Models

* `SPTAppRemoteAlbum`
* `SPTAppRemoteArtist`
* `SPTAppRemoteLibraryState`
* `SPTAppRemotePlaybackRestrictions`
* `SPTAppRemotePlaybackOptions`
* `SPTAppRemotePlayerState`
* `SPTAppRemoteTrack`
* `SPTAppRemoteContentItem`
* `SPTAppRemoteUserCapabilities`
* `SPTAppRemoteImageRepresentable`
* `SPTConfiguration`

### SPTAppRemote

The main entry point to connect to the Spotify app and retrieve API components. Use this to establish, monitor, and terminate the connection.

### SPTAppRemotePlayerAPI

Send playback related commands such as:

* Play track by URI
* Resume/pause playback
* Skip forwards and backwards
* Seek to position
* Set shuffle on/off
* Request player state
* Request player context
* Subscribe to player state

### SPTAppRemoteImagesAPI

Fetch an image for a `SPTAppRemoteImageRepresentable`

### SPTAppRemoteUserAPI

Fetch/subscribe/set user-related data such as:

* Fetch and/or subscribe to `SPTAppRemoteUserCapabilities`
* Determine if a user can play songs on demand (Premium vs Free)
* Add/remove/check if a song is in a user's library

### SPTAppRemoteContentAPI

Fetch recommended content for the user.

## How App Remote calls work

When you interact with any of the App Remote APIs you pass in a `SPTAppRemoteCallback` block that gets invoked with either the expected result item or an `NSError` if the operation failed. The block is triggered after the command was received by the Spotify app (or if the connection could not be made).

Here is an example using the `SPTRemotePlayerAPI` to skip a song:

```objective-c
[appRemote.playerAPI skipToNext:^(id  _Nullable result, NSError * _Nullable error) {
    if (error) {
        // Operation failed
    } else {
        // Operation succeeded
    }
}];
```

### Tutorial and Examples

We provide a few sample projects to help you get started with the iOS Framework in the DemoProjects folder. See the [Readme](DemoProjects/README.md) in the DemoProjects folder for more information on what each sample does.

### Authentication and Authorization

To communicate with the Spotify app your application will need to get a user's permission to control playback first by using built-in authorization for App Remote. To do that you will need to request authorization view when connecting to Spotify. The framework will automatically request the `app-remote-control` scope and show the auth view if user hasn't agreed to it yet.

## Terms of Use

Note that by using Spotify developer tools, you accept our [Developer Terms of Use](https://beta.developer.spotify.com/terms/).

### Included Open Source Libraries

* [MPMessagePack](https://github.com/gabriel/MPMessagePack)

## Tutorial

This tutorial leads you step-by-step through the creation of a simple app that uses the Spotify iOS SDK to play an audio track and subscribe to player state. It will walk through the authorization flow.

### Prepare Your Environment

Follow these steps to make sure you are prepared to start coding.

* Download the Spotify iOS framework from the ""Clone or download"" button at the top of this page, and unzip it.
* Install the latest version of Spotify from the App Store onto the device you will be using for development. Run the Spotify app and login or sign up.
**Note:** A **Spotify Premium** account will be required to play a track on-demand for a uri.
* [Register Your Application](https://beta.developer.spotify.com/documentation/general/guides/app-settings/#register-your-app). You will need to register your application at [My Applications](https://beta.developer.spotify.com/dashboard/) and obtain a client ID. When you register your app you will also need to whitelist a redirect URI that the Spotify app will use to callback to your app after authorization.

### Add Dependencies

1. Add the `SpotifyiOS.framework` or `SpotifyiOS.xcframework` to your Xcode project.

    ![Import SpotifyiOS.framework](img/import_sdk.png)

2. In your info.plist add your redirect URI you registered at [My Applications](https://beta.developer.spotify.com/dashboard/). You will need to add your redirect URI under ""URL types"" and ""URL Schemes"". Be sure to set a unique ""URL identifier"" as well. [More info on URL Schemes](https://developer.apple.com/library/content/documentation/iPhone/Conceptual/iPhoneOSProgrammingGuide/Inter-AppCommunication/Inter-AppCommunication.html#//apple_ref/doc/uid/TP40007072-CH6-SW1)

    ![Info.plist](img/info_plist.png)

3. Add `#import <SpotifyiOS/SpotifyiOS.h>` to your source files to import necessary headers.

### Check if Spotify is Active

If a user is already using Spotify, but has not authorized your application, you can use the following check to prompt them to
start the authorization process.

```objective-c
[SPTAppRemote checkIfSpotifyAppIsActive:^(BOOL active) {
    if (active) {
        // Prompt the user to connect Spotify here
    }
}];
```

### Authorize Your Application

To be able to use the playback control part of the SDK the user needs to authorize your application. If they haven't, the connection will fail with a `No token provided` error. To allow the user to authorize your app, you can use the built-in authorization flow.

1. Initialize `SPTConfiguration` with your client ID and redirect URI.

    ```objective-c
    SPTConfiguration *configuration =
        [[SPTConfiguration alloc] initWithClientID:@""your_client_id"" redirectURL:[NSURL urlWithString:@""your_redirect_uri""]];
    ```

2. Initialize `SPTAppRemote` with your `SPTConfiguration`

    ```objective-c
    self.appRemote = [[SPTAppRemote alloc] initWithConfiguration:configuration logLevel:SPTAppRemoteLogLevelDebug];
    ```

3. Initiate the authentication flow (for other ways to detect if Spotify is installed, as well as attributing installs, please see our [Content Linking Guide](https://beta.developer.spotify.com/documentation/general/guides/content-linking-guide/)).

    ```objective-c
    // Note: A blank string will play the user's last song or pick a random one.
    BOOL spotifyInstalled = [self.appRemote authorizeAndPlayURI:@""spotify:track:69bp2EbF7Q2rqc5N3ylezZ""];
    if (!spotifyInstalled) {
        /*
        * The Spotify app is not installed.
        * Use SKStoreProductViewController with [SPTAppRemote spotifyItunesItemIdentifier] to present the user
        * with a way to install the Spotify app.
        */
    }
    ```

4. Configure your `AppDelegate` to parse out the accessToken in `application:openURL:options:` and set it on the `SPTAppRemote` connectionParameters.

    ```objective-c
    - (BOOL)application:(UIApplication *)app openURL:(NSURL *)url options:(NSDictionary<UIApplicationOpenURLOptionsKey,id> *)options
    {
        NSDictionary *params = [self.appRemote authorizationParametersFromURL:url];
        NSString *token = params[SPTAppRemoteAccessTokenKey];
        if (token) {
            self.appRemote.connectionParameters.accessToken = token;
        } else if (params[SPTAppRemoteErrorDescriptionKey]) {
            NSLog(@""%@"", params[SPTAppRemoteErrorDescriptionKey]);
        }
        return YES;
    }
    ```

    If you are using UIScene then you need to use appropriate method in your scene delegate.

    ```swift
    func scene(_ scene: UIScene, openURLContexts URLContexts: Set<UIOpenURLContext>) {
        guard let url = URLContexts.first?.url else {
            return
        }

        let parameters = appRemote.authorizationParameters(from: url);

        if let access_token = parameters?[SPTAppRemoteAccessTokenKey] {
            appRemote.connectionParameters.accessToken = access_token
            self.accessToken = access_token
        } else if let error_description = parameters?[SPTAppRemoteErrorDescriptionKey] {
            // Show the error
        }
    }
    ```

### Connect and Subscribe to Player State

1. Set your connection delegate and attempt to connect.

    ```objective-c
    self.appRemote.delegate = self;
    [self.appRemote connect];
    ```

    ```objective-c

    - (void)appRemoteDidEstablishConnection:(SPTAppRemote *)appRemote
    {
        // Connection was successful, you can begin issuing commands
    }

    - (void)appRemote:(SPTAppRemote *)appRemote didFailConnectionAttemptWithError:(NSError *)error
    {
        // Connection failed
    }

    - (void)appRemote:(SPTAppRemote *)appRemote didDisconnectWithError:(nullable NSError *)error
    {
        // Connection disconnected
    }
    ```

2. Set a delegate and subscribe to player state:

    ```objective-c
    appRemote.playerAPI.delegate = self;

    [appRemote.playerAPI subscribeToPlayerState:^(id  _Nullable result, NSError * _Nullable error) {
        // Handle Errors
    }];
    ```

    ```objective-c
    - (void)playerStateDidChange:(id<SPTAppRemotePlayerState>)playerState
    {
        NSLog(@""Track name: %@"", playerState.track.name);
    }
    ```

## Frequently Asked Questions

**Why does music need to be playing to connect with `SPTAppRemote`?**

Music must be playing when you connect with `SPTAppRemote` to ensure the Spotify app is not suspended in the background. iOS applications can only stay active in the background for a few seconds unless they are actively doing something like navigation or playing music.

**Is SpotifyiOS.framework thread safe?**

No, the framework currently expects to be called from the main thread. It will offload most of its work to a background thread internally but callbacks to your code will also occur on the main thread.

**What if I need to authorize without starting playback?**

There is an alternative authorization method. You can find more information about that [here](docs/auth.md).
"
20,kittinan/spotify-github-profile,Python,"# spotify-github-profile

Create Spotify now playing card on your github profile

Running on Vercel serverless function, store data in Firebase (store only access_token, refresh_token, token_expired_timestamp)

## Connect & Grant Permission

- Click `Connect with Spotify` button below to grant permission

[<img src=""/img/btn-spotify.png"">](https://spotify-github-profile.vercel.app/api/login)

## Example

- Default theme

![spotify-github-profile](/img/default.svg)

- Compact theme

![spotify-github-profile](/img/compact.svg)

- Natemoo-re theme

![spotify-github-profile](/img/natemoo-re.svg)

- Novatorem theme

![spotify-github-profile](/img/novatorem.svg)

- Karaoke theme

![spotify-github-profile](/img/karaoke.svg)



## Running for development locally

To develop locally, you need:

- A fork of this project as your repository
- A Vercel project connected with the forked repository
- A Firebase project with Cloud Firestore setup
- A Spotify developer account

### Setting up Vercel

- [Create a new Vercel project by importing](https://vercel.com/import) the forked project on GitHub

### Setting up Firebase

- Create [a new Firebase project](https://console.firebase.google.com/u/0/)
- Create a new Cloud Firestore in the project
- Download configuration JSON file from _Project settings_ > _Service accounts_ > _Generate new private key_
- Convert private key content as BASE64
  - You can use Encode/Decode extension in VSCode to do so
  - This key will be used in step explained below

### Setting up Spotify dev

- Login to [developer.spotify.com](https://developer.spotify.com/dashboard/applications)
- Create a new project
- Edit settings to add _Redirect URIs_
  - add `http://localhost:3000/api/callback`

### Running locally

- Install [Vercel command line](https://vercel.com/download) with `npm i -g vercel`
- Create `.env` file at the root of the project and paste your keys in `SPOTIFY_CLIENT_ID`, `SPOTIFY_SECRET_ID`, and `FIREBASE`

```sh
BASE_URL='http://localhost:3000/api'
SPOTIFY_CLIENT_ID='____'
SPOTIFY_SECRET_ID='____'
FIREBASE='__BASE64_FIREBASE_JSON_FILE__'
```

- Run `vercel dev`

```sh
$ vercel dev
Vercel CLI 20.1.2 dev (beta) — https://vercel.com/feedback
> Ready! Available at http://localhost:3000
```

- Now try to access http://localhost:3000/api/login

## Credit

Inspired by https://github.com/natemoo-re
"
21,plietar/librespot,Rust,"# librespot
*librespot* is an open source client library for Spotify. It enables
applications to use Spotify's service, without using the official but
closed-source libspotify. Additionally, it will provide extra features
which are not available in the official library.

Note: librespot only works with Spotify Premium.

# Unmaintained
Unfortunately I am unable to maintain librespot anymore. It should still work,
but issues and Pull requests will be ignored. Feel free to fork it and continue
development there. If a fork gains traction I will happily point to it from the
README.

## Building
Rust 1.17.0 or later is required to build librespot.

**If you are building librespot on macOS, the homebrew provided rust may fail due to the way in which homebrew installs rust. In this case, uninstall the homebrew version of rust and use [rustup](https://www.rustup.rs/), and librespot should then build.** 

It also requires a C, with portaudio.

On debian / ubuntu, the following command will install these dependencies :
```shell
sudo apt-get install build-essential portaudio19-dev
```

On Fedora systems, the following command will install these dependencies :
```shell
sudo dnf install portaudio-devel make gcc
```

On macOS, using homebrew :
```shell
brew install portaudio
```

Once you've cloned this repository you can build *librespot* using `cargo`.
```shell
cargo build --release
```

## Usage
A sample program implementing a headless Spotify Connect receiver is provided.
Once you've built *librespot*, run it using :
```shell
target/release/librespot --username USERNAME --cache CACHEDIR --name DEVICENAME
```

## Discovery mode
*librespot* can be run in discovery mode, in which case no password is required at startup.
For that, simply omit the `--username` argument.

## Audio Backends
*librespot* supports various audio backends. Multiple backends can be enabled at compile time by enabling the
corresponding cargo feature. By default, only PortAudio is enabled.

A specific backend can selected at runtime using the `--backend` switch.

```shell
cargo build --features portaudio-backend
target/release/librespot [...] --backend portaudio
```

The following backends are currently available :
- ALSA
- PortAudio 
- PulseAudio

## Cross-compiling
A cross compilation environment is provided as a docker image.
Build the image from the root of the project with the following command :

```
$ docker build -t librespot-cross -f contrib/Dockerfile .
```

The resulting image can be used to build librespot for linux x86_64, armhf (compatible e. g. with Raspberry Pi 2 or 3, but not with Raspberry Pi 1 or Zero) and armel.
The compiled binaries will be located in /tmp/librespot-build

```
docker run -v /tmp/librespot-build:/build librespot-cross
```

If only one architecture is desired, cargo can be invoked directly with the appropriate options :
```shell
docker run -v /tmp/librespot-build:/build librespot-cross cargo build --release --no-default-features --features alsa-backend
docker run -v /tmp/librespot-build:/build librespot-cross cargo build --release --target arm-unknown-linux-gnueabihf --no-default-features --features alsa-backend
docker run -v /tmp/librespot-build:/build librespot-cross cargo build --release --target arm-unknown-linux-gnueabi --no-default-features --features alsa-backend
```

Don't forget to set the `with-tremor` feature flag if your target device does not have floating-point capabilities.

## Development
When developing *librespot*, it is preferable to use Rust nightly, and build it using the following :
```shell
cargo build --no-default-features --features ""nightly portaudio-backend""
```

This produces better compilation error messages than with the default configuration.

## Disclaimer
Using this code to connect to Spotify's API is probably forbidden by them.
Use at your own risk.

## Contact
Come and hang out on gitter if you need help or want to offer some.
https://gitter.im/sashahilton00/spotify-connect-resources

## License
Everything in this repository is licensed under the MIT license.

"
22,dronir/SpotifyControl,AppleScript,"# Control Spotify at OS X Terminal

An AppleScript for controlling Spotify through a terminal:

The scenario for which it was originally designed is controlling Spotify,
which is playing on a Mac, via ssh, while working on a Linux machine 
on the other side of the room.

Currently supported functions are: play/pause, next/previous 
track, jumping in time, toggling shuffle/repeat and changing volume.
This pretty much covers everything the AppleScript hooks of Spotify
allow.

### Tested Platforms

* OS X Big Sur (11.5), Spotify 1.1.66.580

* OS X El Capitan (10.11)
* OS X Yosemite (10.10)
* OS X Mavericks (10.9)
* OS X Mountain Lion (10.8)
* OS X Lion (10.7)

## Installation

The simplest way to install the script is to `clone` the repository, 
`cd` into repository's directory, and run the command below 
to make a symbolic link into `/usr/local/bin/`:

```bash
ln -s $(pwd)/SpotifyControl /usr/local/bin/spotify
```


## Usage

* To start Spotify playback, type `spotify start` or `spotify play`. 
If you do this locally and Spotify is not running, it will start. 
Remotely, Spotify will not start properly. Optionally, pass a Spotify URI as a second argument.
* To Search for track name and play, type `spotify play track [song name]`.
* To Search for artist name and play, type `spotify play artist [artist name]`.
* To Search for album name and play, type `spotify play album [album name]`.
* To pause Spotify playback, type `spotify stop` or `spotify pause`.
* To toggle playback, type `spotify play/pause`.
* To go to the next track, type `spotify next`.
* To go to the previous track, type `spotify previous` or `spotify 
prev`.
* To print information about the currently playing track, 
type `spotify info`
* To jump to a particular time in the track, type `spotify jump N`,
where N is the track position in seconds.
* To fast forward, type `spotify forward N` where N is the number of
seconds to jump ahead.
* To rewind, type `spotify rewind N` where N is the number of
seconds to jump backwards.
* To change volume, type `spotify volume N` where N is a number between
0 and 100.
* To increase volume by 10%, type `spotify volume up`.
* To decrease volume by 10%, type `spotify volume down`.
* Increase volume, type `spotify increasevolume N` where N is a number between
0 and 100 that you want to increment by.
* Decrease volume, type `spotify decreasevolume N` where N is a number between
0 and 100 that you want to decrement by.
* To toggle shuffle, type `spotify shuffle [on|off]`.
* To toggle repeat, type `spotify repeat [on|off]`.
* To show a list of these commands, just type `spotify`.

### Over SSH

To enable the SSH server on OS X, go to Sharing in the System Preferences
and enable Remote Login. The Sharing screen will also then tell you the
command to use to connect to your Mac in the local network.

## License

You may use, adapt, modify, and etc. Any way you want.
"
23,robbeofficial/spotifyripper,Python,"spotifyripper
=============

small ripper script for spotify (rips playlists to mp3 and includes ID3 tags)

note that stream ripping violates the ToC's of libspotify!

usage
-----
    ./jbripper.py [username] [password] [spotify_url]

examples
--------
    ""./jbripper.py user pass spotify:track:52xaypL0Kjzk0ngwv3oBPR"" creates ""Beat It.mp3"" file
    ""./jbripper.py user pass spotify:user:[user]:playlist:7HC9PMdSbwGBBn3EVTaCNx rips entire playlist

features
--------
* real-time VBR ripping from spotify PCM stream

* writes id3 tags (including album covers)

* creates files and directories based on the following structure artist/album/song.mp3

prerequisites:
--------------
* libspotify (download at https://developer.spotify.com/technologies/libspotify/)

* pyspotify (sudo pip install -U pyspotify, requires python-dev)

* spotify binary appkey (download at developer.spotify.com and copy to wd, requires premium!)

* lame (sudo apt-get install lame)

* eyeD3 (sudo pip install eyeD3 --allow-external eyeD3 --allow-unverified eyeD3)

TODO
----
- [ ] skip exisiting track (avoid / completed tracks / completed = successful id3)
- [ ] detect if other spotify instance is interrupting
- [ ] add album supprt : spotify:album:1UnRYaeCev9JVKEHWBEgHe
"
24,Xeroday/Spotify-Ad-Blocker,C#,"

EZBlocker
=========

EZBlocker is a Spotify Ad Blocker written in C# for Windows 7/8/10/11. The goal for EZBlocker is to be the most reliable ad blocker for Spotify.

When an advertisement is playing, EZBlocker will mute Spotify until it's over.

To download a pre-compiled binary of the latest version, click [here][1]. For more info, visit the [EZBlocker project page][2].

## Technical overview

The current version of EZBlocker hooks Spotify in three ways: window titles, audio sessions, and a reverse listener. 

**Window title**

The window title is used to grab the name of the currently playing song/artist/advertisement. EZBlocker also uses the window title to grab the Spotify process handle.

**Audio session**

Using lower level COM interfaces, EZBlocker is able to both find and extract information from Spotify's audio session. 

Firstly, if the Spotify window is hidden (in the tray), its window title cannot be used locate the correct Spotify process handle. In this case, EZBlocker falls back to searching through the audio sessions to find the correct process.

Secondly, the audio session is a somewhat reliable way to detect whether or not a song/advertisement is playing regardless of whether or not the Spotify window is hidden. It can be inaccurate at times, eg. when a song has a 3 second gap of no sound, but can automatically recover.

**Reverse Listener**

I've historically tried to avoid modifying the Spotify application, but since the shutdown of its unofficial local API (in mid July 2018), there was no reliable way to detect if an advertisement was playing.

Spotify is built with the Chromium Embedded Framework, which means many of its components are written in HTML/JS. EZBlocker patches one of them to attach a web worker that sends a signal to a local listener when an advertisement is playing.

More data could probably be extracted through the web worker, but I haven't had time to explore.


## Changelog (Major releases only):
- V 1.8 (Oct 31, 2021):
  - New muting logic, reduces false positives (podcasts no longer muted)
  - Cleanup and bugfixes
- V 1.7 (July 22, 2018):
  - Almost a complete re-write of the application (lighter, more performant, cleaner code)
  - New Spotify ad detection and muting logic after Spotify's shutdown of its local API
- V 1.6 (March 10, 2016):
  - Better handling of Spotify updates/restarts
  - Fix bugs caused by newer Spotify local API
  - Update dependencies
  - Now requires .NET Framework 4.5

## Translations
To better support non-English speakers, I've started an effort to translate EZBlocker. Please reach out if you are a native speaker of a non-English language. 

The following are contributors to this goal:
- Portuguese: Raí

  [1]: http://www.ericzhang.me/dl/?file=EZBlocker.php
  [2]: http://www.ericzhang.me/projects/spotify-ad-blocker-ezblocker/
"
25,jwallet/spy-spotify,C#,"[![Spytify Logo](https://user-images.githubusercontent.com/23088305/29906214-6daad21c-8de1-11e7-80f5-ef6791cc7825.png)](https://jwallet.github.io/spy-spotify/)

[![Build status](https://ci.appveyor.com/api/projects/status/s26ibv6ls9j56enr/branch/master?svg=true)](https://ci.appveyor.com/project/jwallet/spy-spotify/branch/master)
[![AppVeyor tests](https://img.shields.io/appveyor/tests/jwallet/spy-spotify/master?compact_message)](https://ci.appveyor.com/project/jwallet/spy-spotify/branch/master/tests)
[![Latest release](https://img.shields.io/github/tag/jwallet/spy-spotify.svg?label=version)](https://github.com/jwallet/spy-spotify/releases/latest)
[![Downloads](https://img.shields.io/github/downloads/jwallet/spy-spotify/total.svg?color=yellow&label=downloads)](https://github.com/jwallet/spy-spotify/releases/latest)
[![Sub Reddit](https://img.shields.io/reddit/subreddit-subscribers/spytify.svg?label=r%2Fspytify)](https://www.reddit.com/r/spytify)
[![Donate](https://img.shields.io/badge/support-donate-ff69b4)](https://jwallet.github.io/spy-spotify/donate.html)
[![Issuehunt](https://jwallet.github.io/spy-spotify/assets/images/isohunt_badge.svg)](https://issuehunt.io/r/jwallet/spy-spotify)

Spytify is a Spotify recorder for Windows which records Spotify audio without recording or playing ads, ensuring no loss in sound quality. It automatically splits songs into separate tracks and records to MP3 with media metadata, meaning you can easily start enjoying your music offline.

<p align=""center""><img alt=""Spotify Recorder logs"" src=""https://jwallet.github.io/spy-spotify/assets/images/ui_record.png"" /></p>

### [How does it work?](#how-does-it-work)

Spytify records what Spotify outputs, which is a longer process than downloading a Spotify playlist with a tool.

However, Spytify ensures that all tracks will be the official released one, all sound volume normalized and with media tags and album cover. Playlist Downloaders get mostly all tracks from YouTube which means that they can't guarantee the choosen track will fit 100% the one in your playlist and they will all be the same quality.

Spytify records the same quality that Spotify outputs ([Spotify Free 160kbps, Spotify Premium 320kbps](https://support.spotify.com/us/article/audio-quality/)), so the recorded copy will be indistinguishable from Spotify’s one.

### [How to install it?](#how-to-install-it)

Follow the steps shown in the F.A.Q section : [_How to install Spytify?_](https://jwallet.github.io/spy-spotify/faq.html#install-spytify)

### [How to use it?](#how-to-use-it)

A standard use is to start a recording session using your favorite playlist and let it record overnight, so you avoid waiting for it to end, because Spytify does not download but records. You will then get all your songs automatically split into separate tracks without ads and with metadata.

A recorder requires a good sound card to be able to record good quality, that's why Spytify comes with a Virtual Audio Cable device, if you have issues with your sound card (volume slider and other apps sound affects the recordings, or overall recorded sound quality is worst than Spotify) you can install this virtual device using the **Speakers+** icon in Spytify settings.

Don't forget to hit the [F.A.Q.](https://jwallet.github.io/spy-spotify/faq.html) for tips on:

- [_How to install Virtual Audio Cable device for better recording quality?_](https://jwallet.github.io/spy-spotify/faq.html#install-better-audio-endpoint-device)
- [_How to isolate Spytify and Spotify on a virtual audio device to avoid background noises?_](https://jwallet.github.io/spy-spotify/faq.html#isolate-spotify-audio-endpoint)
- [_How to reroute sound/output of a virtual audio device to my main audio device to listen to it?_](https://jwallet.github.io/spy-spotify/faq.html#listen-to-virtual-device)
- [_How to connect to Spotify API for more accurate media tags?_](https://jwallet.github.io/spy-spotify/faq.html#media-tags-not-found)


### [Features](#features)

Splits the recorded sound into individual tracks using the artist and track names as the title, like so:
> Artist - Track.mp3
  
Saves all recordings under the same path:
> ../My Music/
  
Automatically adds metadata from Last.fm (or [Spotify API](https://jwallet.github.io/spy-spotify/faq.html#media-tags-not-found)) to .mp3 file:

<p align=""center""><img alt=""Recorded songs with album cover and media tags in Windows Explorer"" src=""https://jwallet.github.io/spy-spotify/assets/images/saved_songs_list.png"" /></p>

### [Requirements](#requirements)

Spytify runs on Windows only.

- Microsoft Framework ([.NET 4.6.1](https://www.microsoft.com/en-ca/download/details.aspx?id=49981) or higher).
- Spotify Desktop application.

A **free Spotify account** will work, but Spotify restricts audio quality to 160 kbps. Having a Premium Spotify subscription will enable recording of up to 320 kbps audio.


## Need a feature quicker?

Spytify is supported by _IssueHunt_. [![Issuehunt](https://jwallet.github.io/spy-spotify/assets/images/isohunt_badge.svg)](https://issuehunt.io/r/jwallet/spy-spotify) 💰

That means you can have your issue (feature/improvement) prioritized, just open an [feature request](https://github.com/jwallet/spy-spotify/issues/new/choose) on this repository and go to our IssueHunt page and fund [your issue](https://issuehunt.io/r/jwallet/spy-spotify?tab=idle) to promote it. When the bounty will be interesting enough for someone to work on it, he will then submit a Pull Request with his code on this repo and link it to the IssueHunt page. Once the code is approved by the repo owner (it should not break the app architecture or basic purpose, it should not make it harder to maintain either), it will then be merged, and the bounty will be rewarded to the PR author if the requested feature was covered by the PR otherwise the funders can be refunded or we will wait for another PR. See a past example [here](https://issuehunt.io/r/jwallet/spy-spotify/issues/282)

## Support Spytify

😃 If you like Spytify, you can help me out for a [couple of beers](https://jwallet.github.io/spy-spotify/donate.html) 🍺.

## [Download](https://github.com/jwallet/spy-spotify/releases)
"
26,plamere/spotipy,Python,"# Spotipy

##### A light weight Python library for the Spotify Web API

![Tests](https://github.com/plamere/spotipy/workflows/Tests/badge.svg?branch=master) [![Documentation Status](https://readthedocs.org/projects/spotipy/badge/?version=latest)](https://spotipy.readthedocs.io/en/latest/?badge=latest)

## Documentation

Spotipy's full documentation is online at [Spotipy Documentation](http://spotipy.readthedocs.org/).

## Installation

```bash
pip install spotipy
```

or upgrade

```bash
pip install spotipy --upgrade
```

## Quick Start

A full set of examples can be found in the [online documentation](http://spotipy.readthedocs.org/) and in the [Spotipy examples directory](https://github.com/plamere/spotipy/tree/master/examples).

To get started, install spotipy and create an app on https://developers.spotify.com/.
Add your new ID and SECRET to your environment:

### Without user authentication

```python
import spotipy
from spotipy.oauth2 import SpotifyClientCredentials

sp = spotipy.Spotify(auth_manager=SpotifyClientCredentials(client_id=""YOUR_APP_CLIENT_ID"",
                                                           client_secret=""YOUR_APP_CLIENT_SECRET""))

results = sp.search(q='weezer', limit=20)
for idx, track in enumerate(results['tracks']['items']):
    print(idx, track['name'])
```

### With user authentication

```python
import spotipy
from spotipy.oauth2 import SpotifyOAuth

sp = spotipy.Spotify(auth_manager=SpotifyOAuth(client_id=""YOUR_APP_CLIENT_ID"",
                                               client_secret=""YOUR_APP_CLIENT_SECRET"",
                                               redirect_uri=""YOUR_APP_REDIRECT_URI"",
                                               scope=""user-library-read""))

results = sp.current_user_saved_tracks()
for idx, item in enumerate(results['items']):
    track = item['track']
    print(idx, track['artists'][0]['name'], "" – "", track['name'])
```

## Reporting Issues

For common questions please check our [FAQ](FAQ.md).

You can ask questions about Spotipy on
[Stack Overflow](http://stackoverflow.com/questions/ask).
Don’t forget to add the *Spotipy* tag, and any other relevant tags as well, before posting.

If you have suggestions, bugs or other issues specific to this library,
file them [here](https://github.com/plamere/spotipy/issues).
Or just send a pull request.
"
27,ThasianX/SpotifyRadar,Swift,"# Spotify Radar

Spotify Radar is an iOS application that allows users to pull in new song releases from their favorite artists and provides users with important metrics like their top tracks, top artists, and recently played tracks, queryable by time range.

**Architecture**: MVVM + Coordinator + RxSwift

## Getting Started

### Prerequisites

```
Pods have already been committed so no need to run 'pod install'
```

### Installing

Create a [spotify application](https://developer.spotify.com/dashboard/applications) and save your clientId and clientSecret to `SpotifyDaily_iOS/Services/Configuration.swift`. Of course, when you make a PR, don't include `Configuration.swift` in it.

```
Open xcworkspace and run
```

## Built With

* [Cocoapods](https://github.com/CocoaPods/CocoaPods) - Dependency Management
* [Swinject](https://github.com/Swinject/Swinject) - Dependency Injection
* [SideMenu](https://github.com/jonkykong/SideMenu) - Menu navigation
* [RxSwift](https://github.com/ReactiveX/RxSwift) - Swift version of [Rx](https://github.com/Reactive-Extensions/Rx.NET)

## Contributing
- If you find a bug, or would like to suggest a new feature or enhancement, it'd be nice if you could [search the issue tracker first](https://github.com/ThasianX/SpotifyDaily/issues); while we don't mind duplicates, keeping issues unique helps us save time and considates effort. If you can't find your issue, feel free to [file a new one](https://github.com/ThasianX/SpotifyDaily/issues/new/choose).
- Please read [CONTRIBUTING.md](CONTRIBUTING.md) for details on how to contribute–it has information on the process for handling contributions, and tips on how the code is structured to make your work easier, and the process for submitting pull requests to us.

## License

This project is licensed under the MIT License - see the [LICENSE](LICENSE) file for details

## Screenshots

<img src=""./App Images/setup.png"" height=""500""> <img src=""./App Images/sidemenu.png"" height=""500""> <img src=""./App Images/noartists.png"" height=""500""> <img src=""./App Images/addartists.png"" height=""500""> <img src=""./App Images/portfolio.png"" height=""500""> <img src=""./App Images/newreleases.png"" height=""500""> <img src=""./App Images/dashboard.png"" height=""500"">  <img src=""./App Images/topartists.png"" height=""500""> <img src=""./App Images/safari.png"" height=""500""> <img src=""./App Images/toptracks.png"" height=""500""> <img src=""./App Images/recentlyplayed.png"" height=""500""> <img src=""./App Images/settings.png"" height=""500""> 

"
28,spotify-web-api-java/spotify-web-api-java,Java,"| Android Developers |
| ------------------ |
| You **cannot** use this library for Android app development. Have a look at [adamint/spotify-web-api-kotlin](https://www.github.com/adamint/spotify-web-api-kotlin), [kaaes/spotify-web-api-android](https://www.github.com/kaaes/spotify-web-api-android) and [Spotify's Android SDK](https://developer.spotify.com/technologies/spotify-android-sdk/) and [see why](https://github.com/thelinmichael/spotify-web-api-java/issues/120#issuecomment-363266591). |

Spotify Web API Java [![build status](https://github.com/spotify-web-api-java/spotify-web-api-java/workflows/maven/badge.svg)](https://github.com/spotify-web-api-java/spotify-web-api-java/actions?query=workflow%3A%22maven%22 ""build status"") [![codecov](https://codecov.io/gh/spotify-web-api-java/spotify-web-api-java/branch/develop/graph/badge.svg)](https://codecov.io/gh/spotify-web-api-java/spotify-web-api-java) [![Language grade: Java](https://img.shields.io/lgtm/grade/java/g/spotify-web-api-java/spotify-web-api-java.svg?logo=lgtm&logoWidth=18)](https://lgtm.com/projects/g/spotify-web-api-java/spotify-web-api-java/context:java)
====================

This is a Java wrapper/client for the [Spotify Web API](https://developer.spotify.com/web-api/).

## Table of Contents
1. **[Installation](#Installation)**
    1. **[Jitpack](#Jitpack)**
2. **[Documentation](#Documentation)**
3. **[General Usage](#General-Usage)**
    1. **[Authorization](#Authorization)**
4. **[Examples](#Examples)**
5. **[Contributions](#Contributions)**
    1. **[Code Overview](#Code-Overview)**

## Installation

The artifact is available through
[Maven Central](https://mvnrepository.com/artifact/se.michaelthelin.spotify/spotify-web-api-java) via
[Sonatype](https://oss.sonatype.org/#nexus-search;quick~spotify-web-api-java).
Or to use a snapshot of the latest commit you can use [jitpack.io](https://jitpack.io/) as described [further down below](#Jitpack).

### Maven

Latest official release:
```XML
<dependency>
  <groupId>se.michaelthelin.spotify</groupId>
  <artifactId>spotify-web-api-java</artifactId>
  <version>7.2.0</version>
</dependency>
```

Latest snapshot:
```XML
<dependency>
  <groupId>com.github.thelinmichael</groupId>
  <artifactId>spotify-web-api-java</artifactId>
  <version>master-SNAPSHOT</version>
</dependency>
```

### Gradle

Latest official release:
```Gradle
implementation 'se.michaelthelin.spotify:spotify-web-api-java:7.2.0'
```

Latest snapshot:
```Gradle
implementation 'com.github.thelinmichael:spotify-web-api-java:master-SNAPSHOT'
```

---

### Jitpack

In order to use Jitpack you need to add their repository to your `pom.xml`:

#### Maven
```XML
<repositories>
    <repository>
        <id>jitpack.io</id>
        <url>https://jitpack.io</url>
    </repository>
</repositories>
```

#### Gradle
```Gradle
allprojects {
    repositories {
        maven { url 'https://jitpack.io' }
    }
}
```

## Documentation
See this project's **[Javadoc](https://spotify-web-api-java.github.io/spotify-web-api-java/)**.

*A huge thanks to [c-schuhmann](https://github.com/c-schuhmann) for his amazing work on the documentation!*

## General Usage
```Java
// For all requests an access token is needed
SpotifyApi spotifyApi = new SpotifyApi.Builder()
        .setAccessToken(""taHZ2SdB-bPA3FsK3D7ZN5npZS47cMy-IEySVEGttOhXmqaVAIo0ESvTCLjLBifhHOHOIuhFUKPW1WMDP7w6dj3MAZdWT8CLI2MkZaXbYLTeoDvXesf2eeiLYPBGdx8tIwQJKgV8XdnzH_DONk"")
        .build();

// Create a request object with the optional parameter ""market""
final GetSomethingRequest getSomethingRequest = spotifyApi.getSomething(""qKRpDADUKrFeKhFHDMdfcu"")
        .market(CountryCode.SE)
        .build();

void getSomething_Sync() {
  try {
    // Execute the request synchronous
    final Something something = getSomethingRequest.execute();

    // Print something's name
    System.out.println(""Name: "" + something.getName());
  } catch (Exception e) {
    System.out.println(""Something went wrong!\n"" + e.getMessage());
  }
}

void getSomething_Async() {
  try {
    // Execute the request asynchronous
    final Future<Something> somethingFuture = getSomethingRequest.executeAsync();

    // Do other things...

    // Wait for the request to complete
    final Something something = somethingFuture.get();

    // Print something's name
    System.out.println(""Name: "" + something.getName());
  } catch (Exception e) {
    System.out.println(""Something went wrong!\n"" + e.getMessage());
  }
}
```

### Authorization
**Please see [Spotify's Authorization Guide](https://developer.spotify.com/documentation/general/guides/authorization-guide/) too!**

For authorization requests the API object requires at least to have
[your application](https://developer.spotify.com/my-applications)'s client ID and client secret set as its properties.
When using the authorization code flow, the application's redirect URI is required too. Those properties will then be
automatically used by functions that depend on them.

```Java
SpotifyApi spotifyApi = new SpotifyApi.Builder()
  .setClientId(""<your_client_id>"")
  .setClientSecret(""<your_client_secret>"")
  .setRedirectUri(""<your_redirect_uri>"")
  .build();
```

There are three ways to retrieving an access token:

#### [Client Credentials Flow](http://tools.ietf.org/html/rfc6749#section-4.4)
Use the client credentials flow when the requests don't require permission from a specific user. This flow doesn't
return a refresh token and is useful for simple requests, like fetching albums or searching for tracks.

Example: [ClientCredentialsExample.java](examples/authorization/client_credentials/ClientCredentialsExample.java)

#### [Authorization Code Flow](http://tools.ietf.org/html/rfc6749#section-4.1)
Using the authorization code flow to retrieve an access token is necessary if the requests are bound to a specific user.
Using this flow returns a refresh token, which can be used to renew the access token before it expires. This is how it
works:

1. The authorization code flow requires a code, which is part of the `redirectUri`'s query parameters when the user has
opened a custom URL in a browser and authorized the application.

   Example: [AuthorizationCodeUriExample.java](examples/authorization/authorization_code/AuthorizationCodeUriExample.java)

2. When the code has been retrieved, it can be used in another request to get an access token as well as a refresh token.

   Example: [AuthorizationCodeExample.java](examples/authorization/authorization_code/AuthorizationCodeExample.java)

3. Now, the refresh token in turn can be used in a loop to retrieve new access and refresh tokens.

   Example: [AuthorizationCodeRefreshExample.java](examples/authorization/authorization_code/AuthorizationCodeRefreshExample.java)

---

When you've fetched an access and refresh token, you have to add them to your API properties for automatic usage in
requests. The implementer has to handle the access token's expiration.

```Java
spotifyApi
  .setAccessToken(""<your_access_token>"")
  .setRefreshToken(""<your_refresh_token>"")
  .build();
```

#### [Authorization Code Flow with Proof Key for Code Exchange (PKCE)](https://tools.ietf.org/html/rfc7636)
The authorization code flow with PKCE is quite like the Authorization Code Flow except that no client secret is necessary
(therefore, it is a good option for mobile and desktop applications). Instead, your application should generate a
**code verifier** and a **code challenge** before each authentication request.


The code verifier is a cryptographically random string between 43 and 128 characters in length. It can contain letters, digits, underscores, periods, hyphens, or tildes.
To generate the code challenge, your app should hash the code verifier using the SHA256 algorithm. Then, base64url encode the hash that you generated.


This flow provides your app with an access token which can be refreshed, too.
The steps are similar as above:

1. The authorization code flow with PKCE requires a code, which is part of the `redirectUri`'s query parameters when the user has
   opened a custom URL in a browser and authorized the application. The **code challenge** is supplied to this request as a query parameter.

   Example: [AuthorizationCodePKCEUriExample.java](examples/authorization/authorization_code/pkce/AuthorizationCodePKCEUriExample.java)

2. When the code has been retrieved, it can be used in another request to get an access token as well as a refresh token.
   The **code verifier** is supplied to this request a query parameter.

   Example: [AuthorizationCodePKCEExample.java](examples/authorization/authorization_code/pkce/AuthorizationCodePKCEExample.java)

3. Now, the refresh token in turn can be used in a loop to retrieve new access and refresh tokens.

   Example: [AuthorizationCodePKCERefreshExample.java](examples/authorization/authorization_code/pkce/AuthorizationCodePKCERefreshExample.java)

---

When you have fetched an access and refresh token, you have to add them to your API properties for automatic usage in
requests. The implementer must handle the access token's expiration. The refresh token can be exchanged for an
access token only once, after which it becomes invalid.



## Examples
- **Albums**
  - [Get an Album](examples/data/albums/GetAlbumExample.java)
  - [Get an Album's Tracks](examples/data/albums/GetAlbumsTracksExample.java)
  - [Get several Albums](examples/data/albums/GetSeveralAlbumsExample.java)


- **Artists**
  - [Get an Artist](examples/data/artists/GetArtistExample.java)
  - [Get an Artist's Albums](examples/data/artists/GetArtistsAlbumsExample.java)
  - [Get an Artist's Top Tracks](examples/data/artists/GetArtistsTopTracksExample.java)
  - [Get an Artist's Related Artists](examples/data/artists/GetArtistsRelatedArtistsExample.java)
  - [Get Several Artists](examples/data/artists/GetSeveralArtistsExample.java)


- **Browse**
  - Miscellaneous
    - [Get Available Genre Seeds](examples/data/browse/miscellaneous/GetAvailableGenreSeedsExample.java)
  - [Get a Category](examples/data/browse/GetCategoryExample.java)
  - [Get a Category's Playlists](examples/data/browse/GetCategorysPlaylistsExample.java)
  - [Get a List of Categories](examples/data/browse/GetListOfCategoriesExample.java)
  - [Get a List of Featured Playlists](examples/data/browse/GetListOfFeaturedPlaylistsExample.java)
  - [Get a List of New Releases](examples/data/browse/GetListOfNewReleasesExample.java)
  - [Get Recommendations](examples/data/browse/GetRecommendationsExample.java)


- **Episodes**
  - [Get an Episode](examples/data/episodes/GetEpisodeExample.java)
  - [Get several Episodes](examples/data/episodes/GetSeveralEpisodesExample.java)


- **Follow**
  - [Check if Current User Follows Artists or Users](examples/data/follow/CheckCurrentUserFollowsArtistsOrUsersExample.java)
  - [Check if Users Follow a Playlist](examples/data/follow/CheckUsersFollowPlaylistExample.java)
  - [Follow Artists or Users](examples/data/follow/FollowArtistsOrUsersExample.java)
  - [Follow a Playlist](examples/data/follow/FollowPlaylistExample.java)
  - [Get User's Followed Artists](examples/data/follow/GetUsersFollowedArtistsExample.java)
  - [Unfollow Artists or Users](examples/data/follow/UnfollowArtistsOrUsersExample.java)
  - [Unfollow a Playlist](examples/data/follow/UnfollowPlaylistExample.java)


- **Library**
  - [Check User's Saved Albums](examples/data/library/CheckUsersSavedAlbumsExample.java)
  - [Check User's Saved Shows](examples/data/library/CheckUsersSavedShowsExample.java)
  - [Check User's Saved Tracks](examples/data/library/CheckUsersSavedTracksExample.java)
  - [Get Current User's Saved Albums](examples/data/library/GetCurrentUsersSavedAlbumsExample.java)
  - [Get User's Saved Shows](examples/data/library/GetUsersSavedShowsExample.java)
  - [Get User's Saved Tracks](examples/data/library/GetUsersSavedTracksExample.java)
  - [Remove Albums for Current User](examples/data/library/RemoveAlbumsForCurrentUserExample.java)
  - [Remove User's Saved Shows](examples/data/library/RemoveUsersSavedShowsExample.java)
  - [Remove User's Saved Tracks](examples/data/library/RemoveUsersSavedTracksExample.java)
  - [Save Albums for Current User](examples/data/library/SaveAlbumsForCurrentUserExample.java)
  - [Save Shows for Current User](examples/data/library/SaveShowsForCurrentUserExample.java)
  - [Save Tracks for User](examples/data/library/SaveTracksForUserExample.java)


- **Personalization**
  - Simplified
    - [Get a User's Top Artists](examples/data/personalization/simplified/GetUsersTopArtistsExample.java)
    - [Get a User's Top Tracks](examples/data/personalization/simplified/GetUsersTopTracksExample.java)
  - [Get a User's Top Artists and Tracks](examples/data/personalization/GetUsersTopArtistsAndTracksExample.java)


- **Player**
  - [Add Item to User's Playback Queue](examples/data/player/AddItemToUsersPlaybackQueueExample.java)
  - [Get a User's Available Devices](examples/data/player/GetUsersAvailableDevicesExample.java)
  - [Get Information About The User's Current Playback](examples/data/player/GetInformationAboutUsersCurrentPlaybackExample.java)
  - [Get Current User's Recently Played Tracks](examples/data/player/GetCurrentUsersRecentlyPlayedTracksExample.java)
  - [Get the User's Currently Playing Track](examples/data/player/GetUsersCurrentlyPlayingTrackExample.java)
  - [Pause a User's Playback](examples/data/player/PauseUsersPlaybackExample.java)
  - [Seek To Position In Currently Playing Track](examples/data/player/SeekToPositionInCurrentlyPlayingTrackExample.java)
  - [Set Repeat Mode On User's Playback](examples/data/player/SetRepeatModeOnUsersPlaybackExample.java)
  - [Set Volume For User's Playback](examples/data/player/SetVolumeForUsersPlaybackExample.java)
  - [Skip User's Playback To Next Track](examples/data/player/SkipUsersPlaybackToNextTrackExample.java)
  - [Skip User's Playback To Previous Track](examples/data/player/SkipUsersPlaybackToPreviousTrackExample.java)
  - [Start/Resume a User's Playback](examples/data/player/StartResumeUsersPlaybackExample.java)
  - [Toggle Shuffle For User's Playback](examples/data/player/ToggleShuffleForUsersPlaybackExample.java)
  - [Transfer a User's Playback](examples/data/player/TransferUsersPlaybackExample.java)


- **Playlists**
  - [Add Items to a Playlist](examples/data/playlists/AddItemsToPlaylistExample.java)
  - [Change a Playlist's Details](examples/data/playlists/ChangePlaylistsDetailsExample.java)
  - [Create a Playlist](examples/data/playlists/CreatePlaylistExample.java)
  - [Get a List of Current User's Playlists](examples/data/playlists/GetListOfCurrentUsersPlaylistsExample.java)
  - [Get a List of a User's Playlists](examples/data/playlists/GetListOfUsersPlaylistsExample.java)
  - [Get a Playlist](examples/data/playlists/GetPlaylistExample.java)
  - [Get a Playlist Cover Image](examples/data/playlists/GetPlaylistCoverImageExample.java)
  - [Get a Playlist's Items](examples/data/playlists/GetPlaylistsItemsExample.java)
  - [Remove Items from a Playlist](examples/data/playlists/RemoveItemsFromPlaylistExample.java)
  - [Reorder a Playlist's Items](examples/data/playlists/ReorderPlaylistsItemsExample.java)
  - [Replace a Playlist's Items](examples/data/playlists/ReplacePlaylistsItemsExample.java)
  - [Upload a Custom Playlist Cover Image](examples/data/playlists/UploadCustomPlaylistCoverImageExample.java)


- **Search**
  - Simplified
    - [Search Albums](examples/data/search/simplified/SearchAlbumsExample.java)
    - [Search Artists](examples/data/search/simplified/SearchArtistsExample.java)
    - [Search Episodes](examples/data/search/simplified/SearchEpisodesExample.java)
    - [Search Playlists](examples/data/search/simplified/SearchPlaylistsExample.java)
    - [Search Shows](examples/data/search/simplified/SearchShowsExample.java)
    - [Search Tracks](examples/data/search/simplified/SearchTracksExample.java)
  - [Search Item](examples/data/search/SearchItemExample.java)


- **Shows**
  - [Get a Show](examples/data/shows/GetShowExample.java)
  - [Get several Show](examples/data/shows/GetSeveralShowsExample.java)
  - [Get a Show's Episodes](examples/data/shows/GetShowsEpisodesExample.java)


- **Tracks**
  - [Get Audio Analysis for a Track](examples/data/tracks/GetAudioAnalysisForTrackExample.java)
  - [Get Audio Features for a Track](examples/data/tracks/GetAudioFeaturesForTrackExample.java)
  - [Get Audio Features for Several Tracks](examples/data/tracks/GetAudioFeaturesForSeveralTracksExample.java)
  - [Get Several Tracks](examples/data/tracks/GetSeveralTracksExample.java)
  - [Get a Track](examples/data/tracks/GetTrackExample.java)


- **User's Profile**
  - [Get Current User's Profile](examples/data/users_profile/GetCurrentUsersProfileExample.java)
  - [Get a User's Profile](examples/data/users_profile/GetUsersProfileExample.java)

## Contributions
See [CONTRIBUTING.md](CONTRIBUTING.md).

- Build: `mvn clean install`
- Test: `mvn clean test`

Requirements: Java, Maven.

### Code Overview
This project's main Java package is divided into four sections:
- enumerations
- exceptions
- model objects
- requests.

Those unit-tested parts are connected through various classes that make the API accessible for other Java projects. You
can find details about specific parts or single classes in the sections below.

#### Enumerations
`src/main/java/se.michaelthelin.spotify/enums/`

Enumerations allow elements to ""be of a type"" and limit them to a known value set. They are currently not specified in a
unique place, but are rather scrambled across the online reference. Thus, the reference only allows for construction
of enum classes from this sparse information.

#### Exceptions
`src/main/java/se.michaelthelin.spotify/exceptions/`

Exceptions are thrown when errors occur. They are following RFC-specified
[HTTP status codes](https://en.wikipedia.org/wiki/List_of_HTTP_status_codes) and are packed with a more detailed error
description.

#### Model Objects
`src/main/java/se.michaelthelin.spotify/model_objects/`

The model objects are entities that form the API's responses in arranged formats. They are mostly specified in the
[Web API Object Model](https://developer.spotify.com/web-api/object-model/) and in the
[Web API Authorization Guide](https://developer.spotify.com/web-api/authorization-guide/). Though, unreferenced model
objects exist. This project subdivides those into...

- ""miscellaneous"" model objects: these are mentioned somewhere in the reference, but not in the model object list
- ""special"" model objects: these are not mentioned at all, but appear in API answers nonetheless.

Java classes representing those model objects include private instance variables, a private constructor, but public getter
methods as well as an embedded...

1. builder class, including the setter functions and a public build method
2. JSON-util class, implementing the `createModelObject` method.

#### Requests
`src/main/java/se.michaelthelin.spotify/requests/`

The request classes mirror the strucure of Spotify's Web Api endpoints. They are divided into several categories like
`authorization`, `data/albums` or `data/tracks`. They must extend from `AbstractDataRequest` and contain an
implementation of the request's `execute` method. They have to embed a builder class too, enabling dynamic request
creation.

#### Tests
`src/test/java/se.michaelthelin.spotify/`

Unit tests ensure that implemented features work. This project's unit tests are implemented with [JUnit](http://junit.org/)
and [mockito](http://site.mockito.org/) for mocking.

##### Fixtures
`src/test/fixtures/`

Fixtures are JSON files that represent the data returned from the API server. We use the examples directly provided by
the [Web API Endpoint Reference](https://developer.spotify.com/web-api/endpoint-reference/) with minor tweaks. Tweaks
are needed because the reference sometimes contains invalid data examples.
"
29,fouady/SpotifyTray-Android,Java,"SpotifyTray-Android
===================
This Android project provides simplistic code to produce a floating widget like Facebook's chatheads app. It is supported by Android 2.3.3+ (API 10+).

Please note that it does not provide or include any Spotify music streaming features and is essentially just the UI for demonstration purposes only. Also note that this is not a project developed/endorsed by Spotify.

## Features
Assume that it's a small muted music player without any audio.
- Tray can be dragged around the screen.
- Tray, when released, comes back to a specific region on y-axis.
- The tray can be tapped to open/close.
- The widgets on the tray animate when the tray is between close and open states.
- Next and previous music buttons change the current song and hence the album cover changes too. The change is animated.
- Play and pause buttons work, but the change is not obvious since there is no audio.
- Each song has a duration. After the song has played for that duration, it switches to next song which is evident from the animated change that occurs when next button is pressed. You will notice this if you stay on the first song for 30s.
- The widget can be shut down from notification menu.

## Demo
https://www.youtube.com/watch?v=hdxdTkdNkVs

## License
MIT License. Copyright 2014 Fouad Yaseen.
"
30,xManager-v2/xManager-Spotify,Java,"# xManager (Spotify)
<p align=""center"">
  <img width=""800"" src=""https://camo.githubusercontent.com/128a9b81108bff2616661ca38a827864757ec0def0286dfaa88737c40fbae91b/68747470733a2f2f692e6962622e636f2f7847576e6d5a7a2f782d4d616e616765722d42616e6e65722d416e696d617465642e676966"">
  <img width=""800"" src=""https://user-images.githubusercontent.com/78732474/157926338-709d56c3-0f6b-4c00-a6b2-e391773d67c2.png"">
</p>
<p align=""center"">
  <img src=""https://img.shields.io/badge/Sketchware%20Build-Passing-brightgreen.svg?style=for-the-badge"">
  <img src=""https://img.shields.io/github/v/tag/xManager-v2/xManager-Spotify?label=LATEST%20VERSION&style=for-the-badge"">
  <img src=""https://img.shields.io/github/release-date/xManager-v2/xManager-Spotify?label=UPDATED%20SINCE&style=for-the-badge"">
</p>

### <p align=""center"">DOWNLOAD MILESTONE</p>
<p align=""center"">
  <img src=""https://img.shields.io/github/downloads/xManager-v2/xManager-Spotify/total?label=ORIGINS%20(ACTIVE)&style=for-the-badge"">
  <img src=""https://img.shields.io/badge/LEGACY%20(SHUTDOWN)-400K-brightgreen.svg?style=for-the-badge"">
</p>

### <p align=""center"">SERVER STATUS</p>
<p align=""center"">
  <img src=""https://img.shields.io/uptimerobot/status/m791526898-1d21879566baeaad34b26ac3?label=WEBSITE STATUS&style=for-the-badge"">
  <img src=""https://img.shields.io/uptimerobot/status/m791526898-1d21879566baeaad34b26ac3?label=API STATUS&style=for-the-badge"">
  <img src=""https://img.shields.io/uptimerobot/ratio/7/m791526898-1d21879566baeaad34b26ac3?label=WEBSITE UPTIME&style=for-the-badge"">
  <img src=""https://img.shields.io/uptimerobot/ratio/7/m791526898-1d21879566baeaad34b26ac3?label=API UPTIME&style=for-the-badge"">
</p>

### [<p align=""center"">🎉Check out our Roadmaps, Changelogs and Milestones here!🎉</p>](https://github.com/xManager-v2/xManager-Spotify/wiki/xManager-(Spotify)-Roadmaps,-Changelogs-and-Milestones)  

### [<p align=""center"">🛠VirusTotal Result: Click Here🛠</p>](https://www.virustotal.com/gui/file/82dc69132797b5e72e4a977abae05b661e6298858625b220fdcbd4a4dc4a53a5/detection)

# Main Features

•Upgrade or Downgrade Anytime & Anywhere  
•Manager Tools (Uninstall, Open Settings, Clean Cached Datas & Launch App)  
•Neat & Slick Minimalist UI  
•Swipe Down to Refresh  
•Lightweight Manager  
•Theme Selector  
•Easy to Use  

# How It Works

Depending on what variant or version the user wants to install, the manager will directly fetch that selected url data. Once completed, the selected file can be installed.  

All links are available publicly. IF, you know what it means then you know what it is.

# About The Project

The successor from our previous manager app called **""xSpotify Manager""** that was released way back 2020 developed by xC3FFF0E and with the help of Sherlock Holmes.

We decided to create an app where people can easily manage and install all versions of the spotify app from their devices.  

Our aim is to make a simple yet useful manager app for everyone's convenience. On this second version of the manager app, we added a couple of features such as the ability to uninstall, open the app's settings directly, clear the offline cached datas and launch the app. We hope that all users find these newly added features very useful.

# Legacy Databases Officially Shutdown (04/01/22)  
Legacy databases are now officially shutdown. Update to the latest version of xManager (v3.2) to continue using the app.  

**More Info:**  
> These are the databases used by ""xSpotify Manager"" up until xManager v1-v3.1. Those databases are very old and deprecated at the same time. That is why we decided to take them down.  

# FOR CONTRIBUTORS (01/18/22)  
**CODE CHANGE:** Pull request should be done on the **""Developer""** branch.  

**TRANSLATION CHANGE/UPDATE:** Pull request should be done on the **""Developer""** branch. The translations can be found at  `resource/values/strings.xml`.  

**SUBMIT TRANSLATIONS:** Pull request should be done on the **""Developer""** branch. Please follow the `<--DEFAULT LANGUAGE-->` format that can be found at `resource/values/strings.xml`.  

# IMPORTANT NOTES  

•xManager was created using [Sketchware Pro](https://github.com/Sketchware-Pro/Sketchware-Pro) for android.  
•xManager uses [Sketch2Any](https://play.google.com/store/apps/details?id=com.sketch2any) to convert the project to Android Studio.  
•xManager only uses Firebase Database as its API.  
•No trackers, no spywares, no keyloggers or any other malicious codes added in the source code. What you see in the source code is what's inside the build apk. You can extract the apk for yourself.  
•The source code that can be seen here is what's inside the exported zip file for Android Studio.  
•There are some instance of the source code that are unbuildable, some parts might be missing and such due to limitations.   
•Users might experience downtime and maintenance when using the manager app since we are manually changing the hosting links of each individual file from time to time.  
•xManager is completely free and we do not get any commissions from it **(Rewarded Ads are optional and can be disabled in the settings)**.  
•We will support the app as long as we can. Internal improvements may not be guaranteed. 

# Developer

xC3FFF0E 

# Manager Hosting Links

jetfire  
Wu Tang Clam  

# Manager Translators

**Arabic Translation**  
Yazan Kasem  

**Bengali Translation**  
0V3R5!9H7  

**Chinese - Simplified Translation**  
Gent G | Softland99  

**French Translation**  
The Punisher | Luxchar  

**Greek Translation**  
Walter's Cousin #CAF  

**Indonesian Translation**  
Mc.J | Deraidos  

**Italian Translation**  
Marco | gdonisi | albertopasqualetto  

**Portuguese - Brazil Translation**  
Loui's™ | Zilberto Junior  

**Portuguese - Portugal Translation**  
Androide323  

**Romanian Translation**  
NACH | f9branza  

**Russian Translation**  
Pegioner  

**Slovenian Translation**  
MysticX  

**Spanish - Spain Translation**  
PetFix

**Turkish Translation**  
Berkay  

**Ukrainian Translation**  
NIKITA🇺🇦[beryllium] #PocoForEver  

**Korean Translation**  
Apious  

**Dutch Translation**  
Kevin  

**Vietnamese Translation**  
minhtamvn  

**German Translation**  
smokedzn  

**Persian Translation**  
ohshahab  

**Hebrew Translation**  
GreenArmy18  

**Polish Translation**  
dearminder  

**English Translation**  
Dyras  

**Slovak Translation**  
KaldonM  

**Swedish Translation**  
rexobo  

**Finnish Translation**  
AfraidOfTheBigBlack | Lilko1ra  

# Contributors  

Sherlock Holmes  
jetfire  
meech  
cooldude69  

# Testers  

RishavG  
meech  
jetfire  
Sherlock Holmes  
Wu Tang Clam  
Zach  
aha  
100RABH  
cooldude69  
Tunelover  

# xSpotify Manager Contributors (Old Manager)  

cryiotic (Manager Icon)  
farish278 (Manager Icon)  
roosphx  
Sherlock Holmes  
jetfire  
100RABH  
Light Yagami  
"
31,fr31/spotifylyrics,Python,"# No Longer Updated
This project is no longer updated. See [SimonIT/spotifylyrics](https://github.com/SimonIT/spotifylyrics) for an updated fork.

# Spotify Lyrics
Fetches and displays lyrics to currently playing song in the Spotify desktop client.

# how to
You can grab the latest release exe in the [release section](https://github.com/fr31/spotifylyrics/releases).

Just double click and start playing songs in spotify. 

If you get an error about api-ms-win-crt-runtime-l1-1-0.dll missing, you need this:

https://www.microsoft.com/en-us/download/details.aspx?id=48145

# running from source
If you want to run from source you need:

* Python 3.6.2 (probably any version of Python 3)
* pip install -r requirements.txt

Ubuntu/Debian Example:
```
sudo apt-get install python3-pip
git clone https://github.com/fr31/spotifylyrics.git
cd spotifylyrics/
sudo pip3 install -r requirements.txt
chmod +x SpotifyLyrics.pyw
./SpotifyLyrics.pyw
```

# screenshot
![example-img](https://i.imgur.com/2dUN17q.png)
"
32,kmikiy/SpotMenu,Swift,"# SpotMenu ![demo](https://github.com/kmikiy/SpotMenu/blob/master/SpotMenu/Assets.xcassets/AppIcon.appiconset/spotmenu%20(5)-1.png?raw=true)
Spotify and iTunes in your menu bar

# macOS MOJAVE BETA disclaimer

SpotMenu is currently **NOT** (entirely) compatible with Spotify on macOS MOJAVE BETA. SpotMenu will cause Spotify to crash. 
You can read more about how to fix it [here](https://github.com/kmikiy/SpotMenu/issues/126).


## About

![demo](https://github.com/kmikiy/SpotMenu/blob/master/Demo/demo.gif?raw=true)

SpotMenu is a combination of [TrayPlay](https://github.com/mborgerson/TrayPlay) 
and [Statusfy](https://github.com/paulyoung/Statusfy) written ~entirely~ _almost entirely_ in swift. 

Toast: <kbd>control</kbd> + <kbd>shift</kbd> + <kbd>m</kbd>

## Notes

- The default behavior is to show the SpotMenu icon, Artist and Track title in the menubar. Right click → Preferences to customize.    
- The animated gif currently demonstrates the functionality of version 1.7

## Donate

- [![Paypal](https://github.com/kmikiy/SpotMenu/blob/master/Donation/pp.png?raw=true)](http://paypal.me/kmikiy) [paypal.me/kmikiy](https://paypal.me/kmikiy) Help me get that new Tesla Model X 🚗 or a cup of coffee ☕️, anything helps 💸💰💵
- Or help me become a cryptocurrency  millionaire 🔐   
    - ![Ƀitcoin](https://github.com/kmikiy/SpotMenu/blob/master/Donation/btc.png?raw=true) 1Cc79kaUUWZ2fD7iFAnr5i89vb2j6JunvA
    - ![Ethereum](https://github.com/kmikiy/SpotMenu/blob/master/Donation/eth.png?raw=true) 0xFA06Af34fd45c0213fc909F22cA7241BBD94076f
    - ![Łitecoin](https://github.com/kmikiy/SpotMenu/blob/master/Donation/ltc.png?raw=true) LS3ibFQWd2xz1ByZajrzS3Y787LgRwHYVE
    
## New Features in Version 1.9

+ Layout updated
+ Fixed light album cover issue on MacOS Mojave
+ Cross fade animation on track change
+ Scrolling text (credits: [@NicholasBellucci](https://github.com/NicholasBellucci))
+ Added Fabric

[List of all features](https://github.com/kmikiy/SpotMenu/blob/master/FEATURES.md)


## Easy Install

Download the zip file [version 1.9](https://github.com/kmikiy/SpotMenu/releases/download/v1.9/SpotMenu190.zip). Unarchive it. Run SpotMenu.app.
I do not have an  developer account to sign the app with therefore you will most likely receive a warning that the app is from an unidentified developer. To open the app follow these [steps](https://support.apple.com/kb/PH25088?locale=en_US)!

You can find all releases [here](https://github.com/kmikiy/SpotMenu/releases).

## Advanced Install

via [Homebrew Cask](https://caskroom.github.io)

```sh
brew install --cask spotmenu
```

## How to Build

First, you'll need Xcode 9. You can download this at the [Mac App Store](https://itunes.apple.com/us/app/xcode/id497799835?mt=12).
Second, you'll need [CocoaPods](https://guides.cocoapods.org/using/getting-started.html). 

Now, use [Git](http://git-scm.com/) to clone the repository.

```sh
git clone https://github.com/kmikiy/SpotMenu.git
cd SpotMenu
pod install
```

Finally, open up the SpotMenu.xcworkspace. Set the ""Scheme"" to build the ""SpotMenu"" target for ""My Mac"". Then Product > Run (or the shortcut ⌘R).

Note: 
- Version 1.7 has been updated to swift 4.0 therefore Xcode 9 is required.
- In some cases it might be required to select the ""MusicPlayer"" scheme and build it before selecting ""SpotMenu"".
- To fix ""cannot find a team matching ..."" error follow these [steps](https://github.com/kmikiy/SpotMenu/issues/54)

## Contributors

Many thanks to [@danieltmbr](https://github.com/danieltmbr), [@NicholasBellucci](https://github.com/NicholasBellucci), [@KamranMackey](https://github.com/KamranMackey), [@maurojuniorr](https://github.com/maurojuniorr), [@Triloworld](https://github.com/Triloworld), [@fabi94music](https://github.com/fabi94music), [@rebdeb](https://github.com/rebdeg), [@bcubic](https://github.com/bcubic), [@clinis](https://github.com/clinis), [@Lynx901](https://github.com/Lynx901) [@BatyaMedic](https://github.com/BatyaMedic) and everyone who posted an [issue](https://github.com/kmikiy/SpotMenu/issues?utf8=✓&q=) / [pull request](https://github.com/kmikiy/SpotMenu/pulls?utf8=✓&q=)

## Help

- Star and Fork
- Post any issues you find (please check existing issues before posting!)
- Post new feature requests
- Pull requests are welcome

## Localisation

If you would like SpotMenu in your native language please translate this [file](https://github.com/kmikiy/SpotMenu/blob/master/SpotMenu/Localizable/en.lproj/Localizable.strings) and either create a Pull Request, send it to me via email or post it to this [issue](https://github.com/kmikiy/SpotMenu/issues/44). I will add it to the next release of SpotMenu. Bear in mind that community will have to keep these language files up-to-date ☝🏻.

[![HitCount](http://hits.dwyl.io/kmikiy/SpotMenu.svg)](http://hits.dwyl.io/kmikiy/SpotMenu)

## Contributors

### Code Contributors

This project exists thanks to all the people who contribute. [[Contribute](CONTRIBUTING.md)].
<a href=""https://github.com/kmikiy/SpotMenu/graphs/contributors""><img src=""https://opencollective.com/SpotMenu/contributors.svg?width=890&button=false"" /></a>

### Financial Contributors

Become a financial contributor and help us sustain our community. [[Contribute](https://opencollective.com/SpotMenu/contribute)]

#### Individuals

<a href=""https://opencollective.com/SpotMenu""><img src=""https://opencollective.com/SpotMenu/individuals.svg?width=890""></a>

#### Organizations

Support this project with your organization. Your logo will show up here with a link to your website. [[Contribute](https://opencollective.com/SpotMenu/contribute)]

<a href=""https://opencollective.com/SpotMenu/organization/0/website""><img src=""https://opencollective.com/SpotMenu/organization/0/avatar.svg""></a>
<a href=""https://opencollective.com/SpotMenu/organization/1/website""><img src=""https://opencollective.com/SpotMenu/organization/1/avatar.svg""></a>
<a href=""https://opencollective.com/SpotMenu/organization/2/website""><img src=""https://opencollective.com/SpotMenu/organization/2/avatar.svg""></a>
<a href=""https://opencollective.com/SpotMenu/organization/3/website""><img src=""https://opencollective.com/SpotMenu/organization/3/avatar.svg""></a>
<a href=""https://opencollective.com/SpotMenu/organization/4/website""><img src=""https://opencollective.com/SpotMenu/organization/4/avatar.svg""></a>
<a href=""https://opencollective.com/SpotMenu/organization/5/website""><img src=""https://opencollective.com/SpotMenu/organization/5/avatar.svg""></a>
<a href=""https://opencollective.com/SpotMenu/organization/6/website""><img src=""https://opencollective.com/SpotMenu/organization/6/avatar.svg""></a>
<a href=""https://opencollective.com/SpotMenu/organization/7/website""><img src=""https://opencollective.com/SpotMenu/organization/7/avatar.svg""></a>
<a href=""https://opencollective.com/SpotMenu/organization/8/website""><img src=""https://opencollective.com/SpotMenu/organization/8/avatar.svg""></a>
<a href=""https://opencollective.com/SpotMenu/organization/9/website""><img src=""https://opencollective.com/SpotMenu/organization/9/avatar.svg""></a>
"
33,philipplackner/SpotifyCloneYT,Kotlin,
34,spotify/SpotifyLogin,Swift,"![SpotifyLogin - Swift 5 Framework for authenticating with the Spotify API ](https://user-images.githubusercontent.com/889949/28974990-b2eb0328-7938-11e7-9d19-1ff86d77324b.png)

[![Build Status](https://travis-ci.org/spotify/SpotifyLogin.svg?branch=master)](https://travis-ci.org/spotify/SpotifyLogin)
[![Version](http://img.shields.io/cocoapods/v/SpotifyLogin.svg)](http://cocoapods.org/?q=SpotifyLogin)
[![Carthage compatible](https://img.shields.io/badge/Carthage-compatible-4BC51D.svg?style=flat)](https://github.com/Carthage/Carthage)

# SpotifyLogin
SpotifyLogin is a Swift 5 Framework for authenticating with the Spotify API.

Usage of this framework is bound under the [Developer Terms of Use](https://developer.spotify.com/developer-terms-of-use/).

## Usage

### Disclaimer
SpotifyLogin is appropriate for prototyping and non-commercial use only.

**If your app is meant for commercial production usage, SpotifyLogin can NOT be used.**

### Compatibility
SpotifyLogin requires Xcode 10.2+. It is compatible with iOS 9 or later. 

### Pre-requisites
You will need to register your app in the [Developer Portal](https://developer.spotify.com/my-applications/#!/applications).

Make sure to use a unique redirect url and to supply the bundle ID from your app.

After registering, you will receive a client ID and a client secret.

### Set up SpotifyLogin

Set up SpotifyLogin using any of the methods detailed below (Cocoapods / Carthage / manually).

### Set up info.plist

In Xcode, go to your app's target and select the **Info** tab. At the bottom, of the screen you will find **URL Types**, expand the list and create a new one.

![Set up info.plist](https://user-images.githubusercontent.com/889949/28974992-b30ea08a-7938-11e7-9de5-b00656a42256.png)

Add the app's identifer as the **Identifier** and the redirect url scheme in **URL schemes**.

Additionally, you will need to add ""spotify-action"" to the LSApplicationQueriesSchemes key:
![LSApplicationQueriesSchemes](https://user-images.githubusercontent.com/889949/29968001-f020c4d4-8f19-11e7-8925-433d3b30f842.png)

### Set up your AppDelegate

Add the following to your app delegate:

```swift
func application(_ application: UIApplication, didFinishLaunchingWithOptions launchOptions: [UIApplicationLaunchOptionsKey: Any]?) -> Bool {
    SpotifyLogin.shared.configure(clientID: <#T##String#>, clientSecret: <#T##String#>, redirectURL: <#T##URL#>)
    return true
}

func application(_ app: UIApplication, open url: URL, options: [UIApplicationOpenURLOptionsKey : Any] = [:]) -> Bool {
    let handled = SpotifyLogin.shared.applicationOpenURL(url) { (error) in }
    return handled
}
```

### Check if a user is logged in.

You can retrieve an access token and check if a user is logged in by:

```swift
SpotifyLogin.shared.getAccessToken { (accessToken, error) in
    if error != nil {
        // User is not logged in, show log in flow.
    }
}
```

This also automatically takes care of renewing expired tokens. 

### Log in / Log out

To add the default log in button:
```swift
let button = SpotifyLoginButton(viewController: self, scopes: [.streaming, .userLibraryRead])
self.view.addSubview(button)
```

The scopes define the set of permissions your app will be able to use. For more information about available scopes, see [Scopes Documentation](https://developer.spotify.com/web-api/using-scopes/)

To log out:

```swift
SpotifyLogin.shared.logout()
```

### Update UI after successful log in.

The log in flow is completed in applicationOpenURL. To respond to a successful log in, you can add your own code in the completion handler or respond to the SpotifyLoginSuccessful notification: 

```swift
NotificationCenter.default.addObserver(self, selector: #selector(loginSuccessful), name: .SpotifyLoginSuccessful, object: nil)
```

### Additional features

Access the current user's username:
```swift
let username = SpotifyLogin.shared.username
```

To trigger the log in flow from a custom action:
```swift
SpotifyLoginPresenter.login(from: self, scopes: [.streaming, .userLibraryRead])
```

## Setting up

### Setting up with [CocoaPods](http://cocoapods.org/?q=SpotifyLogin)
```ruby
source 'https://github.com/CocoaPods/Specs.git'
pod 'SpotifyLogin', '~> 0.1'
```

### Setting up with Carthage

[Carthage](https://github.com/Carthage/Carthage) is a decentralized dependency manager that automates the process of adding frameworks to your Cocoa application.

You can install Carthage with [Homebrew](http://brew.sh/) using the following command:

```bash
$ brew update
$ brew install carthage
```

To integrate SpotifyLogin into your Xcode project using Carthage, specify it in your `Cartfile`:

```ogdl
github ""spotify/SpotifyLogin""
```

## Code of conduct
This project adheres to the [Open Code of Conduct][code-of-conduct]. By contributing, you are expected to honor this code.

[code-of-conduct]: https://github.com/spotify/code-of-conduct/blob/master/code-of-conduct.md

## Additional information

[Spotify Developer Portal](https://developer.spotify.com/technologies/spotify-ios-sdk/) | [API Reference](https://spotify.github.io/ios-sdk/)
"
35,spotify/android-sdk,HTML,"
# Spotify Android SDK

The `Spotify Android SDK` allows your application to interact with the Spotify app service.
The capabilities of this SDK includes authentication and getting metadata for the currently playing track and context, issuing playback commands and initiating playback of tracks, albums or playlists.

**The `Spotify Android SDK` consists of two libraries**

`Spotify App Remote` manages audio playback via the [Spotify Music app](https://play.google.com/store/apps/details?id=com.spotify.music) using `app-remote-control` only.<br/>
`Spotify Authentication Library` handles authentication flow and [Spotify Web API](https://developer.spotify.com/documentation/web-api/) calls.

The libraries works well together but can also be used separately. For example, if the application doesn't need to play music but needs user login or Web API capabilities with other [scopes](https://developer.spotify.com/documentation/general/guides/scopes/) you can use the `Spotify Authentication Library` by itself.

Head over to [Spotify for Developers](https://developer.spotify.com/documentation/android/) for more reading about the Android SDK.

### Spotify App Remote

This library contains classes for music playback control and metadata access.
The built-in authentication in App Remote requests for `app-control-scope` only, and is the only scope needed to use App Remote. No token exchange. If more [scopes](https://developer.spotify.com/documentation/general/guides/scopes/) are needed for web-api related calls then use `Spotify Authentication Library`.

[Spotify App Remote README](app-remote-lib/README.md)

### Spotify Authentication Library

This library provides a way to obtain OAuth access tokens that can subsequently be used to play music or used in calls to the [Spotify Web API](https://developer.spotify.com/web-api/).<br/>
[Spotify Authentication Library](https://github.com/spotify/android-auth) is an open source project.

[Spotify Authentication Library README](auth-lib/README.md)

## Getting Started

Walk through the quick start documentation on [Spotify for Developers](https://developer.spotify.com/documentation/android/quick-start).<br/>
Run the sample code in [app-remote-sample](app-remote-sample) and [auth-sample](auth-sample) modules.<br/>
Add the libraries as module dependencies to your project.

## License

```
Copyright © 2018 Spotify AB.

Licensed under the Apache License, Version 2.0 (the ""License"");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

 http://www.apache.org/licenses/LICENSE-2.0
Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an ""AS IS"" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
```
"
36,Savinvadim1312/SpotifyClone,TypeScript,
37,mopidy/mopidy-spotify,Python,"**************
Mopidy-Spotify
**************

.. image:: https://img.shields.io/pypi/v/Mopidy-Spotify
    :target: https://pypi.org/project/Mopidy-Spotify/
    :alt: Latest PyPI version

.. image:: https://img.shields.io/github/workflow/status/mopidy/mopidy-spotify/CI
    :target: https://github.com/mopidy/mopidy-spotify/actions
    :alt: CI build status

.. image:: https://img.shields.io/codecov/c/gh/mopidy/mopidy-spotify
    :target: https://codecov.io/gh/mopidy/mopidy-spotify
    :alt: Test coverage

`Mopidy <https://mopidy.com/>`_ extension for playing music from
`Spotify <https://www.spotify.com/>`_.


Status  :warning:
=================

**Playback/streaming does not work for any version of mopidy-spotify https://github.com/mopidy/mopidy-spotify/issues/110** 

As `promised last month
<https://developer.spotify.com/community/news/2022/04/12/libspotify-sunset>`_,
**Spotify disabled access to libspotify on May 16 2022**. As of today, seven
years after libspotify was deprecated, there is still no official replacement
library available.

Mopidy-Spotify is dependent on ``pyspotify``, a wrapper for Spotify's
``libspotify`` C library. ``libspotify`` was `deprecated in 2015
<https://github.com/mopidy/mopidy-spotify/issues/110>`_ with no replacement. It
is unmaintained, functionally limited, and also now unavailable from the
`Spotify developer site <https://developer.spotify.com/technologies/>`_. Where
possible we are `moving to use Spotify's Web API instead
<https://github.com/mopidy/mopidy-spotify/issues/114>`_. However, native
playback is still only possible using ``libspotify`` and there is no official
way for us to provide some Spotify features.

Limitations and/or bugs in ``libspotify`` currently result in missing/broken
Mopidy-Spotify support for the following:

- Playback - unavailable as of 16/05/2022

- Saving items to My Music (`#108 <https://github.com/mopidy/mopidy-spotify/issues/108>`_) -
  possible via web API

- Podcasts (`#201 <https://github.com/mopidy/mopidy-spotify/issues/201>`_) -
  unavailable

- Radio (`#9 <https://github.com/mopidy/mopidy-spotify/issues/9>`_) - unavailable

- Spotify Connect (`#14 <https://github.com/mopidy/mopidy-spotify/issues/14>`_) -
  unavailable

Working support for the following features is currently available:

- Playback

- Search

- Playlists (read-only)

- Top lists and Your Music (read-only)

- Lookup by URI


Maintainer wanted
=================

Mopidy-Spotify is currently kept on life support by the Mopidy core developers.
It is in need of a more dedicated maintainer.

If you want to be the maintainer of Mopidy-Spotify, please:

1. Make 2-3 good pull requests improving any part of the project.

2. Read and get familiar with all of the project's open issues.

3. Send a pull request removing this section and adding yourself as the
   ""Current maintainer"" in the ""Credits"" section below. In the pull request
   description, please refer to the previous pull requests and state that
   you've familiarized yourself with the open issues.

   As a maintainer, you'll be given push access to the repo and the authority
   to make releases to PyPI when you see fit.


Dependencies
============

- A Spotify Premium subscription. Mopidy-Spotify **will not** work with Spotify
  Free, just Spotify Premium.

- A non-Facebook Spotify username and password. If you created your account
  through Facebook you'll need to create a ""device password"" to be able to use
  Mopidy-Spotify. Go to http://www.spotify.com/account/set-device-password/,
  login with your Facebook account, and follow the instructions. However,
  sometimes that process can fail for users with Facebook logins, in which case
  you can create an app-specific password on Facebook by going to facebook.com >
  Settings > Security > App passwords > Generate app passwords, and generate one
  to use with Mopidy-Spotify.

- ``libspotify`` 12. The official C library from our `Unofficial
  libspotify archive <https://mopidy.github.io/libspotify-archive/>`_.
  The package is available as ``libspotify12`` from
  `apt.mopidy.com <http://apt.mopidy.com/>`__.

- ``pyspotify`` >= 2.0.5. The ``libspotify`` Python wrapper. The package is
  available as ``python3-spotify`` from apt.mopidy.com or ``pyspotify`` on PyPI.
  See https://pyspotify.readthedocs.io/en/latest/installation/ for how to install
  it and its dependencies on most platforms.

- ``Mopidy`` >= 3.0. The music server that Mopidy-Spotify extends.

If you install Mopidy-Spotify from apt.mopidy.com, AUR, or Homebrew, these
dependencies are installed automatically.


Installation
============

Install by running::

    sudo python3 -m pip install Mopidy-Spotify

See https://mopidy.com/ext/spotify/ for alternative installation methods.


Configuration
=============

Before starting Mopidy, you must add your Spotify Premium username and password
to your Mopidy configuration file and also visit
https://mopidy.com/ext/spotify/#authentication
to authorize this extension against your Spotify account::

    [spotify]
    username = alice
    password = secret
    client_id = ... client_id value you got from mopidy.com ...
    client_secret = ... client_secret value you got from mopidy.com ...

The following configuration values are available:

- ``spotify/enabled``: If the Spotify extension should be enabled or not.
  Defaults to ``true``.

- ``spotify/username``: Your Spotify Premium username. You *must* provide this.

- ``spotify/password``: Your Spotify Premium password. You *must* provide this.

- ``spotify/client_id``: Your Spotify application client id. You *must* provide this.

- ``spotify/client_secret``: Your Spotify application secret key. You *must* provide this.

- ``spotify/bitrate``: Audio bitrate in kbps. ``96``, ``160``, or ``320``.
  Defaults to ``160``.

- ``spotify/volume_normalization``: Whether volume normalization is active or
  not. Defaults to ``true``.

- ``spotify/timeout``: Seconds before giving up waiting for search results,
  etc. Defaults to ``10``.

- ``spotify/allow_cache``: Whether to allow caching. The cache is stored in a
  ""spotify"" directory within Mopidy's ``core/cache_dir``. Defaults to ``true``.

- ``spotify/allow_network``: Whether to allow network access or not. Defaults
  to ``true``.

- ``spotify/allow_playlists``: Whether or not playlists should be exposed.
  Defaults to ``true``.

- ``spotify/search_album_count``: Maximum number of albums returned in search
  results. Number between 0 and 50. Defaults to 20.

- ``spotify/search_artist_count``: Maximum number of artists returned in search
  results. Number between 0 and 50. Defaults to 10.

- ``spotify/search_track_count``: Maximum number of tracks returned in search
  results. Number between 0 and 50. Defaults to 50.

- ``spotify/toplist_countries``: Comma separated list of two letter ISO country
  codes to get toplists for. Defaults to blank, which is interpreted as all
  countries that Spotify is available in.

- ``spotify/private_session``: Whether to use a private Spotify session. Turn
  on private session to disable sharing of played tracks with friends through
  the Spotify activity feed, Last.fm scrobbling, and Facebook. This only
  affects social sharing done by Spotify, not by other Mopidy extensions.
  Defaults to ``false``.


Project resources
=================

- `Source code <https://github.com/mopidy/mopidy-spotify>`_
- `Issue tracker <https://github.com/mopidy/mopidy-spotify/issues>`_
- `Changelog <https://github.com/mopidy/mopidy-spotify/releases>`_


Credits
=======

- Original author: `Stein Magnus Jodal <https://github.com/jodal>`__
- Current maintainer: None. Maintainer wanted, see section above.
- `Contributors <https://github.com/mopidy/mopidy-spotify/graphs/contributors>`_
"
38,abba23/spotify-adblock-linux,C,"# This project has been deprecated in favor of its rewrite in Rust (https://github.com/abba23/spotify-adblock).

# spotify-adblock-linux
Spotify adblocker for Linux that works by wrapping `getaddrinfo` and `cef_urlrequest_create`, blocking non-whitelisted domains and blacklisted URLs.

### Notes
* This does not work with the snap Spotify package.

## Build
Prerequisites:
* Git
* Wget
* tar
* Make
* GCC
* libc headers (e.g. `libc-dev` on Debian-based distributions)

---

    $ git clone https://github.com/abba23/spotify-adblock-linux.git
    $ cd spotify-adblock-linux
    $ wget -O cef.tar.bz2 https://cef-builds.spotifycdn.com/cef_binary_88.1.6%2Bg4fe33a1%2Bchromium-88.0.4324.96_linux64_minimal.tar.bz2
    $ tar -xf cef.tar.bz2 --wildcards '*/include' --strip-components=1
    $ make

## Install
### Debian Package
    $ sudo make install

### Flatpak
    $ mkdir -p ~/.spotify-adblock && cp spotify-adblock.so ~/.spotify-adblock
    $ flatpak override --user --filesystem=""~/.spotify-adblock/spotify-adblock.so"" com.spotify.Client

## Usage
### Command-line
#### Debian Package
    $ LD_PRELOAD=/usr/local/lib/spotify-adblock.so spotify

#### Flatpak
    $ flatpak run --command=sh com.spotify.Client -c 'eval ""$(sed s#LD_PRELOAD=#LD_PRELOAD=$HOME/.spotify-adblock/spotify-adblock.so:#g /app/bin/spotify)""'

### Desktop file
You can integrate it with your desktop environment by creating a `.desktop` file (e.g. `spotify-adblock.desktop`) in `~/.local/share/applications`. This lets you easily run it from an application launcher without opening a terminal.

Examples:

<details> 
  <summary>Debian Package</summary>
  <p>

```
[Desktop Entry]
Type=Application
Name=Spotify (adblock)
GenericName=Music Player
Icon=spotify-client
TryExec=spotify
Exec=env LD_PRELOAD=/usr/local/lib/spotify-adblock.so spotify %U
Terminal=false
MimeType=x-scheme-handler/spotify;
Categories=Audio;Music;Player;AudioVideo;
StartupWMClass=spotify
```
  </p>
</details>

<details>
  <summary>Flatpak</summary>
  <p>

```
[Desktop Entry]
Type=Application
Name=Spotify (adblock)
GenericName=Music Player
Icon=com.spotify.Client
Exec=flatpak run --file-forwarding --command=sh com.spotify.Client -c 'eval ""$(sed s#LD_PRELOAD=#LD_PRELOAD=$HOME/.spotify-adblock/spotify-adblock.so:#g /app/bin/spotify)""' @@u %U @@
Terminal=false
MimeType=x-scheme-handler/spotify;
Categories=Audio;Music;Player;AudioVideo;
StartupWMClass=spotify
```
  </p>
</details>

## Uninstall
    $ sudo make uninstall
"
39,jwilsson/spotify-web-api-php,PHP,"# Spotify Web API PHP

[![Packagist](https://img.shields.io/packagist/v/jwilsson/spotify-web-api-php.svg)](https://packagist.org/packages/jwilsson/spotify-web-api-php)
![build](https://github.com/jwilsson/spotify-web-api-php/workflows/build/badge.svg)
[![Coverage Status](https://coveralls.io/repos/jwilsson/spotify-web-api-php/badge.svg?branch=main)](https://coveralls.io/r/jwilsson/spotify-web-api-php?branch=main)

This is a PHP wrapper for [Spotify's Web API](https://developer.spotify.com/web-api/). It includes the following:

* Helper methods for all API endpoints:
    * Information about artists, albums, tracks, podcasts, and users.
    * List music featured by Spotify.
    * Playlist and user music library management.
    * Spotify catalog search.
    * User playback control.
* Authorization flow helpers.
* Automatic refreshing of access tokens.
* Automatic retry of rate limited requests.
* PSR-4 autoloading support.

## Requirements
* PHP 7.3 or later.
* PHP [cURL extension](http://php.net/manual/en/book.curl.php) (Usually included with PHP).

## Installation
Install it using [Composer](https://getcomposer.org/):

```sh
composer require jwilsson/spotify-web-api-php
```

## Usage
Before using the Spotify Web API, you'll need to create an app at [Spotify’s developer site](https://developer.spotify.com/web-api/).

*Note: Applications created after 2021-05-27 [might need to perform some extra steps](https://developer.spotify.com/community/news/2021/05/27/improving-the-developer-and-user-experience-for-third-party-apps/).*

Simple example displaying a user's profile:
```php
require 'vendor/autoload.php';

$session = new SpotifyWebAPI\Session(
    'CLIENT_ID',
    'CLIENT_SECRET',
    'REDIRECT_URI'
);

$api = new SpotifyWebAPI\SpotifyWebAPI();

if (isset($_GET['code'])) {
    $session->requestAccessToken($_GET['code']);
    $api->setAccessToken($session->getAccessToken());

    print_r($api->me());
} else {
    $options = [
        'scope' => [
            'user-read-email',
        ],
    ];

    header('Location: ' . $session->getAuthorizeUrl($options));
    die();
}
```

For more instructions and examples, check out the [documentation](/docs/).

The [Spotify Web API Console](https://developer.spotify.com/web-api/console/) can also be of great help when trying out the API.

## Contributing
Contributions are more than welcome! See [CONTRIBUTING.md](/CONTRIBUTING.md) for more info.

## License
MIT license. Please see [LICENSE.md](LICENSE.md) for more info.
"
40,benchmarkstudios/slackbox,JavaScript,"# slackbox
Spotify playlist collaboration through Slack. Brought to you by the lovely people at [Benchmark](http://benchmark.co.uk).

[![Deploy](https://www.herokucdn.com/deploy/button.png)](https://heroku.com/deploy)

Simply create a Slash Command, such as `/jukebox`, which accepts a track name (also the artist too for a less fuzzy search) to add to a pre-defined Spotify playlist:

    /jukebox Bell Biv DeVoe – Poison

## Installation

### Slack

There are two ways to use slackbox - via a Slash Commands or an Outgoing Webhook:

#### Slash Command

Slash commands allow for private functions within Slack which will **not** show up in chat history.

First you'll want to create your Slack Slash Command, which you can do by going to your [Slash Commands page](https://my.slack.com/services/new/slash-commands).

#### Outgoing WebHook

Outgoing webhooks allow data to be exported from Slack channels. Using an outgoing webhook means song additions will be public so users will know when songs are requested and who requested them.

First you'll want to create your Outgoing Webhook, which you can do by going to your [Outgoing WebHooks page](https://my.slack.com/services/new/outgoing-webhook).

Outgoing WebHooks work best with a trigger word. This way only messages with the trigger word (or words) will be parsed and added.

**NOTE:** You may only use slash commands _or_ outgoing webhooks. The Slack Token environment variable can only be set once so it needs to be the token from this or the slash command.

#### Common

During setup, have your slash command or outgoing webhook submit a POST to your app's `/store` endpoint, e.g. `https://app-name.herokuapp.com/store`.

Make a note of the `token` (either from the slash command or outgoing webhook), as you'll need it later to help guard against cross-site request forgery.

### Spotify

Head over to [Spotify's Developer Site](http://developer.spotify.com) and create a new Application. Make sure you add whatever slackbox's callback URI as a valid callback URI. If you're running locally, this will be `http://localhost:5000/callback` or on Heroku `https://app-name.herokuapp.com/callback`

Make a note of the `key`, `secret` and `callback URI` too, as you'll need these later as well.

Also, don't forget to make a playlist. If you do this through [Spotify's web interface](http://play.spotify.com) then the `playlist identifier` will be the last segment of the URI - make a note of this too! If there's a better way of finding this out, we're all ears. If you do this through the app, right-click the playlist to get it's web URL and again, you need the last segment of the URI.

### Environment variables

Once you've cloned slackbox or hit the ""Deploy with Heroku"" button you'll need to setup the following environment variables. These can either be stored in a `.env` or set up as config variables in Heroku.

* `SLACK_TOKEN` - The token from Slack's Slash Command.
* `SLACK_OUTGOING` - True if using [Slack Outgoing WebHooks](https://my.slack.com/services/new/outgoing-webhook), false if using [Slack Slash Commands](https://my.slack.com/services/new/slash-commands)
* `SPOTIFY_KEY` - Your Spotify application key (a.k.a Client ID).
* `SPOTIFY_SECRET` - Your Spotify application secret (a.k.a Client Secret).
* `SPOTIFY_USERNAME` - Your Spotify username.
* `SPOTIFY_PLAYLIST_ID` - Your playlist identifier.
* `SPOTIFY_REDIRECT_URI` - URI to redirect to once your user has allowed the application's permissions.

### Authentication

Visit your slackbox's home page to authenticate yourself with Spotify and you should be all set!
"
41,SwapnilSoni1999/spotify-dl,JavaScript,"# Spotify Downloader 
<p align=""center"">
  <img src=""./logo.png"" height=""200px""/>
  <br><br>
  <b>Download audio files from spotify links(Based on: youtube-dl)</b>
  <br>
</p>

&nbsp;

#### Required
Get [FFMPEG](https://ffmpeg.org/download.html)

(Node.js 14)[https://nodejs.org/en/download/package-manager/]

Note: if you run into issues related to puppeteer chromium download please try `PUPPETEER_SKIP_CHROMIUM_DOWNLOAD=true npm install -g spotify-dl`

#### spotifydl

A simple commandline utility that allows you to download Spotify Songs, Shows, Episodes, Playlists and Albums from Youtube.

PLEASE NOTE: 
* The ability to find a video is dependent on the fact it is hosted on youtube, and even then there is a chance it is still incorrectly matched
* Some items may only be available to spotify premium users, please be sure to provide a username and password when this is the case

<hr>

# Installation

#### NPM

Install from [npm](https://www.npmjs.com/package/spotify-dl) registry

```sh
npm install -g spotify-dl
```
or You can do manually
```sh
git clone https://github.com/SwapnilSoni1999/spotify-dl
cd spotify-dl
npm install
npm link
```

#### Android (Termux)
PS: You may need to type `termux-setup-storage` first and allow storage permission
```sh
sh -c ""$(curl -fsSL https://raw.githubusercontent.com/SwapnilSoni1999/spotify-dl/master/tools/termux.sh)""
```

#### Docker

Build docker image:
```sh
git clone https://github.com/SwapnilSoni1999/spotify-dl
cd spotify-dl
docker build -t spotify-dl .
```

<hr>

# Usage

To download highest quality audio file
```sh
spotifydl <spotify track/album/playlist link> ...
```

&nbsp;

Example
```sh
$ spotifydl https://open.spotify.com/track/xyz

```

#### Options
| Flag  | Long Flag         | Usage                                                                                |
| ----- | ----------------- | ------------------------------------------------------------------------------------ |
| --o   | --output          | takes valid output path argument                                                     |
| --es  | --extra-search    | takes extra search string/term to be used for youtube search                         |
| --oo  | --output-only     | enforces all downloaded songs in the output dir                                      |
| --st  | --saved-tracks    | download spotify saved tracks                                                        |
| --ss  | --saved-songs     | download spotify saved shows                                                         |
| --sp  | --saved-playlists | download spotify saved playlists                                                     |
| --sa  | --saved-albums    | download spotify saved albums                                                        |
| --l   | --login           | Requests a login in an external window (non tty should use --u and --p)              |
| --u   | --username        | spotify username for headless long (Note: you must use --login once to grant access) |
| --p   | --password        | spotify password                                                                     |
| --cf  | --cache-file      | takes valid output file name path argument                                           |
| --dr  | --download-report | output a download report of what files failed                                        |
| --cof | --cookie-file     | takes valid file name path argument to a txt file for youtube cookies                |
| --v   | --version         | returns current version                                                              |
| --h   | --help            | outputs help text                                                                    |
<hr>

## Notes

To use --u and --p (headless login) you must do a --l once first to grant required permissions (playlists, saved songs ect.)

if you receive 'Got a spotify api error WebapiRegularError: An error occurred while communicating with Spotify's Web API
Details: non existing id'  you may need to provide auth either use `--l` for manual login prompt or `--u username --p password` for headless login

If you receive a 429 error please provide a cookies file given the `--cof` flag, to generate a cookies file please refer to [Chrome](https://chrome.google.com/webstore/detail/njabckikapfpffapmjgojcnbfjonfjfg) or [Firefox](https://github.com/rotemdan/ExportCookies)

## Docker
```sh
docker run -it --user=$(id -u):$(id -g) -v $(pwd):/download --rm spotify-dl <options-to-spotify-dl defaults to --help>
docker run -it --user=$(id -u):$(id -g) -v $(pwd):/download --rm spotify-dl ""https://open.spotify.com/....""
```

#### Acknowledgements

thanks to [icons8](https://icons8.com) for icons in hero image
and all the contributors for PR, suggestions and testing :love:

&nbsp;

#### License

MIT © [Swapnil Soni](https://github.com/SwapnilSoni1999)
"
42,caseychu/spotify-backup,Python,"spotify-backup
==============

A Python script that exports all of your Spotify playlists, useful for paranoid Spotify users like me, afraid that one day Spotify will go under and take all of our playlists with it!

To run the script, [save it from here](https://raw.githubusercontent.com/caseychu/spotify-backup/master/spotify-backup.py) and double-click it. It'll ask you for a filename and then pop open a web page so you can authorize access to the Spotify API. Then the script will load your playlists and save a tab-separated file with your playlists that you can open in Excel. You can even copy-paste the rows from Excel into a Spotify playlist.

You can run the script from the command line:

    python spotify-backup.py playlists.txt

or, to get a JSON dump, use:

    python spotify-backup.py playlists.json --format=json

By default, it includes your playlists. To include your Liked Songs, you can use:

    python spotify-backup.py playlists.txt --dump=liked,playlists


If for some reason the browser-based authorization flow doesn't work, you can also [generate an OAuth token](https://developer.spotify.com/web-api/console/get-playlists/) on the developer site (with the `playlist-read-private` permission) and pass it with the `--token` option.

Collaborative playlists and playlist folders don't show up in the API, sadly.
"
43,hnarayanan/shpotify,Shell,"# shpotify

*shpotify* is a simple Bash/Apple script to control
 [Spotify](https://www.spotify.com) from the command line on a Mac.

If you find this interesting, you should [follow me on
Twitter](https://twitter.com/copingbear) to learn about the other
things I do.

## Installation

[Download and install](http://www.spotify.com/download) the Spotify
desktop application if you haven’t already.

### With Homebrew

The easiest way to install shpotify is by using the [Homebrew package
manager](http://brew.sh):

````
brew install shpotify
````

### Manual installation

If you don’t use Homebrew, you can install the script manually by
following a few simple steps:

1. Fetch a copy of this repository, either with git or [download the
   zip archive](https://github.com/hnarayanan/shpotify/archive/master.zip).

2. Navigate to the folder where you fetched the repository (unzip if
   needed) and make sure the file called `spotify` is executable:
   ````
   cd shpotify
   chmod +x spotify
   ````

3. Copy the file `spotify` to a convenient location in your `PATH`, or
   set your `PATH` to include the folder where the file is located.

### Connecting to Spotify’s API

shpotify needs to connect to Spotify’s API in order to find music by
name. It is very likely you want this feature!

To get this to work, you first need to sign up (or into) Spotify’s
developer site and [create an *Application*][spotify-dev]. Once you’ve
done so, you can find its `Client ID` and `Client Secret` values and
enter them into your shpotify config file at `${HOME}/.shpotify.cfg`.

Be sure to quote your values and don’t add any extra spaces. When
done, it should look like the following (but with your own values):

````
CLIENT_ID=""abc01de2fghijk345lmnop""
CLIENT_SECRET=""qr6stu789vwxyz""
````

## Usage

With shpotify you can control Spotify with the following commands:
````
spotify play                       Resumes playback where Spotify last left off.
spotify play <song name>           Finds a song by name and plays it.
spotify play album <album name>    Finds an album by name and plays it.
spotify play artist <artist name>  Finds an artist by name and plays it.
spotify play list <playlist name>  Finds a playlist by name and plays it.
spotify play uri <uri>             Play songs from specific uri.

spotify next                       Skips to the next song in a playlist.
spotify prev                       Returns to the previous song in a playlist.
spotify replay                     Replays the current track from the beginning.
spotify pos <time>                 Jump to a specific time (in seconds) in the current song.
spotify pause                      Pauses (or resumes) Spotify playback.
spotify stop                       Stops playback.
spotify quit                       Stops playback and quits Spotify.

spotify vol up                     Increases the volume by 10%.
spotify vol down                   Decreases the volume by 10%.
spotify vol <amount>               Sets the volume to an amount between 0 and 100.
spotify vol [show]                 Shows the current volume.

spotify status                     Shows the play status, including the current song details.
spotify status artist              Shows the currently playing artist.
spotify status album               Shows the currently playing album.
spotify status track               Shows the currently playing track.

spotify share                      Displays the current song's Spotify URL and URI.
spotify share url                  Displays the current song's Spotify URL and copies it to the clipboard.
spotify share uri                  Displays the current song's Spotify URI and copies it to the clipboard.

spotify toggle shuffle             Toggles shuffle playback mode.
spotify toggle repeat              Toggles repeat playback mode.
````

## Authors and contributing

shpotify is primarily written and maintained by [Harish
Narayanan](https://harishnarayanan.org).

Since it’s an open source project, it contains numerous contributions
from many helpful people, including:

* Jorge Colindres
* Thomas Pritchard
* iLan Epstein
* Gabriele Bonetti
* Sean Heller
* Eric Martin
* Peter Fonseca

If you’re interested in contributing too, please consider addressing
some of the [issues people have previously
reported](https://github.com/hnarayanan/shpotify/issues) and
[submitting a pull
request](https://help.github.com/articles/using-pull-requests/). **Thank
you!**

## Copyright and license

Copyright (c) 2012–2022 [Harish Narayanan](https://harishnarayanan.org).

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the ""Software""), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in
all copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED ""AS IS"", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
THE SOFTWARE.

[spotify-dev]: https://developer.spotify.com/my-applications/#!/applications/create
"
44,simonschellaert/spotify2am,Python,"# Spotify to Apple Music
Some simple Python 3 scripts to help you into importing your existing Spotify library into Apple Music.  
**Work in progress !**

## Usage

### 1. Export the Spotify songs to an CSV File
The first step is getting the songs you want to import into Apple Music into a CSV file. The simplest way to do this is using [Exportify](https://rawgit.com/watsonbox/exportify/master/exportify.html).  
If you want to export you whole Spotify library, simply create a new playlist called *All* and drag your whole library into it using the Spotify desktop app. You can then export the playlist *All* using *Exportify*. Save the resulting file as *spotify.csv* in the same directory as the directory you cloned this repo into.

### 2. Match the Spotify songs with their Apple Music identifier
In order to add songs to our Apple Music library, we need their Apple Music identifier. Running `python3 retrieve-identifiers.py` will use the *spotify.csv* file to create a new file *itunes.csv* with each line consisting of the Apple Music identifier of a song in your Spotify library.

### 3. Use an intercepting proxy to retrieve the Apple Music request headers
Start iTunes and [Charles](http://www.charlesproxy.com) (or another intercepting proxy you like). Make sure SSL Proxying is enabled and working correctly. Next, select a random song on Apple Music you don't have in your library yet, right click and choose 'Add to library'. If everything went well, you're now able to view all the request headers in Charles of a request to `https://ld-4.itunes.apple.com/WebObjects/MZDaap.woa/daap/databases/1/cloud-add`. We're only interested in `Cookie`, `X-Dsid` and `X-Guid`. Copy the value of these header and paste them in the appropriate place  in `insert-songs.py` (line 29 and further).  
Next, run `python3 insert-songs.py` and go grab a coffee. You're songs are now being imported into Apple Music.


## Current issues

### API limit rate
Apple Music doesn't like it when we're adding a lot of songs in a small amount of time. If we do so, the API responds to all further request with `403 Too many requests`. After this, you're blocked from the API for an undetermined amount of time. We're currently trying to avoid this by waiting after each request. A delay of 30 seconds seems fine to import large libraries into Apple Music. If you're library is smaller, feel free to decrease the delay in `inserts-songs.py`.

### Missing songs
The script I'm using to retrieve the Apple Music identifier for a Spotify song is quite basic. It simply compares the title and artist to find out if a Spotify and Apple Music song match. Some songs don't have the exact same title (extraneous spacing for example) in both services. This results in the script failing to retrieve an identifier for some songs.

### Terminal encoding
Some users are reporting errors like `UnicodeEncodeError: 'ascii' codec can't encode character '\xd8' in ...` when running the scripts. The problem here is that Python is trying to convert UTF-8 characters to ASCII to print them to standard output. This can be solved by setting the `PYTHONIOENCODING` environment variable to `utf-8`.  
In Bash, simply call the scripts like this: `PYTHONIOENCODING=utf-8 python3 retrieve-identifiers.py` and `PYTHONIOENCODING=utf-8 python3 insert-songs.Py`
"
45,spotify/web-api,RAML,We've moved! Visit the [Spotify for Developers community forum](https://community.spotify.com/t5/Spotify-for-Developers/bd-p/Spotify_Developer) to find help with the Web API.
46,Daksh777/SpotifyNoPremium,Batchfile,"#### Please use the latest `install.bat` and `update.bat` if you updated to `1.1.90.859.gf1bb1e36`
##### Last tested version: `1.1.91.824.g07f1e963`
# SpotifyNoPremium
A cross-platform Spicetify theme which removes all Spotify ads (audio, banner, popup, etc.) and declutters the stock UI. 

---
### For installation instructions, go here: [Installation](#installation) <br>
**If you see a blank/black screen, please follow this link for a fix: https://github.com/Daksh777/SpotifyNoPremium/issues/46#issuecomment-1059945231**


---

# Features
This is a Spicetify theme which:
- Removes all audio, banner, sponsored and popup ads ([Source](https://github.com/CharlieS1103/spicetify-extensions/blob/main/adblock/adblock.js))
- Removes `Upgrade` button
- Removes `Upgrade to Premium` entry in drop-down menu
- Removes ad placeholders (in Home tab and above the now playing bar)
- Adds pointer cursors to clickable elements (See [#10](https://github.com/Daksh777/SpotifyNoPremium/discussions/10))

# Screenshots

| Before | After |
| ----------- | ----------- |
| <img src=""https://i.imgur.com/o714XSp.png""/> | <img src=""https://i.imgur.com/289Qq2v.png""/> |
| <img src=""https://i.imgur.com/HVjTHTO.png""/> | <img src=""https://i.imgur.com/Nhy3OOJ.png""/> |

<img src=""https://i.imgur.com/kEffDy8.png"">

# Installation

## 1. Automatic installation/updates for Windows users
##### **Note: If you're on Windows 8.1 or lower, please install Powershell v5.1 since the automatic installation script does not support Powershell versions below v5. <br> Download here: https://www.microsoft.com/en-us/download/details.aspx?id=54616 <br> More info: [#30](https://github.com/Daksh777/SpotifyNoPremium/issues/30#issuecomment-962822618)**
### Installation
Run the `install.bat` if you are installing for the the first time. <br>
[[CLICK HERE TO DOWNLOAD]](https://daksh777.github.io/SpotifyNoPremium/install.bat) <br>


### Updating
You can fetch the latest version of this theme by running the `update.bat` script <br>
[[CLICK HERE TO DOWNLOAD]](https://daksh777.github.io/SpotifyNoPremium/update.bat)


## 2. Manual installation for all users
> **Note for users who install this manually:** Make sure to use the latest Spicetify CLI and Spotify App. Run `spicetify upgrade` and then `spicetify auto` to update Spicetify to the latest version.
### Linux and MacOS:
In **Bash**:
```bash
curl -fsSL https://raw.githubusercontent.com/spicetify/spicetify-cli/master/install.sh | sh
cd ""$(dirname ""$(spicetify -c)"")/Themes""
git clone https://github.com/Daksh777/SpotifyNoPremium
spicetify config current_theme SpotifyNoPremium
cp ""$(dirname ""$(spicetify -c)"")/Themes/SpotifyNoPremium/adblock.js"" ""$(dirname ""$(spicetify -c)"")/Extensions""
spicetify config extensions adblock.js
spicetify apply
```

#### Windows
In **Powershell**:
```powershell
Invoke-WebRequest -UseBasicParsing ""https://raw.githubusercontent.com/spicetify/spicetify-cli/master/install.ps1"" | Invoke-Expression
cd ""$(spicetify -c | Split-Path)\Themes""
git clone https://github.com/Daksh777/SpotifyNoPremium
spicetify config current_theme SpotifyNoPremium
Copy-Item ""$(spicetify -c | Split-Path)\Themes\SpotifyNoPremium\adblock.js"" ""$(spicetify -c | Split-Path)\Extensions""
spicetify config extensions adblock.js
spicetify apply
```

# Updating Manually
### Linux and MacOS:
In **Bash**:
```bash
cd ""$(dirname ""$(spicetify -c)"")/Themes/SpotifyNoPremium""
git pull
cp ""$(dirname ""$(spicetify -c)"")/Themes/SpotifyNoPremium/adblock.js"" ""$(dirname ""$(spicetify -c)"")/Extensions""
spicetify config extensions adblock.js
spicetify auto
```

#### Windows
In **Powershell**:
```powershell
cd ""$(spicetify -c | Split-Path)\Themes\SpotifyNoPremium""
git pull
Copy-Item ""$(spicetify -c | Split-Path)\Themes\SpotifyNoPremium\adblock.js"" ""$(spicetify -c | Split-Path)\Extensions""
spicetify config extensions adblock.js
spicetify auto
```
"
47,TooTallNate/node-spotify-web,JavaScript,"node-spotify-web
================
### Node.js implementation of the Spotify Web protocol

This module implements the ""Spotify Web"" WebSocket protocol that is used on
Spotify's [Web UI](http://play.spotify.com).

This module is heavily inspired by the original open-source Python implementation:
[Hexxeh/spotify-websocket-api](https://github.com/Hexxeh/spotify-websocket-api).

Installation
------------

``` bash
$ npm install spotify-web
```


Example
-------

Here's an example of logging in to the Spotify server and creating a session. Then
requesting the metadata for a given track URI, and playing the track audio file
through the speakers:

``` javascript
var lame = require('lame');
var Speaker = require('speaker');
var Spotify = require('spotify-web');
var uri = process.argv[2] || 'spotify:track:6tdp8sdXrXlPV6AZZN2PE8';

// Spotify credentials...
var username = process.env.USERNAME;
var password = process.env.PASSWORD;

Spotify.login(username, password, function (err, spotify) {
  if (err) throw err;

  // first get a ""Track"" instance from the track URI
  spotify.get(uri, function (err, track) {
    if (err) throw err;
    console.log('Playing: %s - %s', track.artist[0].name, track.name);

    // play() returns a readable stream of MP3 audio data
    track.play()
      .pipe(new lame.Decoder())
      .pipe(new Speaker())
      .on('finish', function () {
        spotify.disconnect();
      });

  });
});
```

See the `example` directory for some more example code.


API
---

TODO: document!


License
-------

(The MIT License)

Copyright (c) 2013-2014 Nathan Rajlich &lt;nathan@tootallnate.net&gt;

Permission is hereby granted, free of charge, to any person obtaining
a copy of this software and associated documentation files (the
'Software'), to deal in the Software without restriction, including
without limitation the rights to use, copy, modify, merge, publish,
distribute, sublicense, and/or sell copies of the Software, and to
permit persons to whom the Software is furnished to do so, subject to
the following conditions:

The above copyright notice and this permission notice shall be
included in all copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED 'AS IS', WITHOUT WARRANTY OF ANY KIND,
EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.
IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY
CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,
TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE
SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
"
48,hbashton/spotify-ripper,Python,"spotify-ripper |Version|
========================

A fork of
`spotify-ripper <https://github.com/robbeofficial/spotifyripper>`__ that
uses `pyspotify <https://github.com/mopidy/pyspotify>`__ v2.x

Spotify-ripper is a small ripper script for Spotify that rips Spotify
URIs to audio files and includes ID3 tags and cover art.  By default spotify-ripper will encode to MP3 files, but includes the ability to rip to WAV, FLAC, Ogg Vorbis, Opus, AAC, and MP4/M4A.

**Note that stream ripping violates the libspotify's ToS**

Libspotify’s Deprecation
------------------------
**From Mopidy's documentation**

*Note that as of May 2015 libspotify is officially deprecated by Spotify and is no longer actively maintained.*

*Note that as of Jan 2016 Spotify may no longer be issuing developer keys.*

*Spotify has published newer libraries intended for Android and iOS development, as well as web APIs to access track metadata and manage playlists. Though, for making apps with Spotify playback capabilities, on any other platform than Android and iOS, there is currently no alternative to libspotify.*

*libspotify has been the main way of integrating with Spotify since 2009, and is today a part of numerous open source projects and commercial applications, including many receivers and even cars. There’s no guarantees, but one can hope that the large deployment of libspotify means that the library will continue to work with the Spotify service for a long time into the future.*

Features
--------

-  real-time VBR or CBR ripping from Spotify PCM stream

-  writes ID3v2/metadata tags (including album covers)

-  rips files into the following directory structure: ``artist/album/artist - song.mp3`` by default or optionally into a user-specified structure (see `Format String`_ section below)

-  option to skip or overwrite existing files

-  accepts tracks, playlists, albums, and artist URIs

-  search for tracks using Spotify queries

-  options for interactive login (no password in shell history) and
   to relogin using previous credentials

-  option to remove tracks from playlist after successful ripping

-  globally installs ripper script using setup.py

-  Python 2.7.x and 3.4.x compatible.  Python 3 will occasionally throw a ``NameError: name '_lock' is not defined`` exception at the end of the script due to an `upstream bug <https://github.com/mopidy/pyspotify/issues/133>`__ in ``pyspotify``.

-  use a config file to specify common command-line options

-  helpful progress bar to gauge the time remaining until completion

-  keep local files in sync with a Spotify playlist, m3u and wpl playlist file

-  option to rip to ALAC, a loseless codec, instead of MP3 (requires extra ``avconv`` dependency)

-  option to rip to FLAC, a loseless codec, instead of MP3 (requires extra ``flac`` dependency)

-  option to rip to Ogg Vorbis instead of MP3 (requires extra ``vorbis-tools`` dependency)

-  option to rip to Opus instead of MP3 (requires extra ``opus-tools`` dependency)

-  option to rip to AAC instead of MP3 (requires extra ``faac`` dependency)

-  option to rip to MP4/M4A instead of MP3 (requires compiling ``fdkaac``)

-  option to replace output filenames

-  option to normalize output filenames to NFKD (see http://unicode.org/faq/normalization.html)

**Please note: Spotify’s highest quality setting is 320 kbps, so the benefit of ripping to a lossless format is to not double encode the audio data. It’s not possible to rip in true lossless quality.**


Usage
-----

Command Line
~~~~~~~~~~~~

``spotify-ripper`` takes many command-line options

.. code::

    usage: spotify-ripper [-h] [-S SETTINGS] [-a] [--aac] [--alac]
                          [--artist-album-type ARTIST_ALBUM_TYPE]
                          [--artist-album-market ARTIST_ALBUM_MARKET] [-A]
                          [-b BITRATE] [-c] [--comp COMP] [--comment COMMENT]
                          [--cover-file COVER_FILE]
                          [--cover-file-and-embed COVER_FILE] [-d DIRECTORY]
                          [--fail-log FAIL_LOG] [--flac] [-f FORMAT]
                          [--format-case {upper,lower,capitalize}] [--flat]
                          [--flat-with-index] [-g {artist,album}]
                          [--grouping GROUPING] [--id3-v23] [-k KEY] [-u USER]
                          [-p PASSWORD] [-l] [-L LOG] [--pcm] [--mp4]
                          [--normalize] [-na] [-o] [--opus]
                          [--partial-check {none,weak,strict}]
                          [--play-token-resume RESUME_AFTER] [--playlist-m3u]
                          [--playlist-wpl] [--playlist-sync] [-q VBR]
                          [-Q {160,320,96}] [--remove-offline-cache]
                          [--resume-after RESUME_AFTER] [-R REPLACE [REPLACE ...]]
                          [-s] [--stereo-mode {j,s,f,d,m,l,r}]
                          [--stop-after STOP_AFTER] [-V] [--wav] [--vorbis] [-r]
                          uri [uri ...]

    Rips Spotify URIs to MP3s with ID3 tags and album covers

    positional arguments:
      uri                   One or more Spotify URI(s) (either URI, a file of URIs or a search query)

    optional arguments:
      -h, --help            show this help message and exit
      -S SETTINGS, --settings SETTINGS
                            Path to settings, config and temp files directory [Default=~/.spotify-ripper]
      -a, --ascii           Convert the file name and the metadata tags to ASCII encoding [Default=utf-8]
      --aac                 Rip songs to AAC format with FreeAAC instead of MP3
      --alac                Rip songs to Apple Lossless format instead of MP3
      --artist-album-type ARTIST_ALBUM_TYPE
                            Only load albums of specified types when passing a Spotify artist URI [Default=album,single,ep,compilation,appears_on]
      --artist-album-market ARTIST_ALBUM_MARKET
                            Only load albums with the specified ISO2 country code when passing a Spotify artist URI. You may get duplicate albums if not set. [Default=any]
      -A, --ascii-path-only
                            Convert the file name (but not the metadata tags) to ASCII encoding [Default=utf-8]
      -b BITRATE, --bitrate BITRATE
                            CBR bitrate [Default=320]
      -c, --cbr             CBR encoding [Default=VBR]
      --comp COMP           compression complexity for FLAC and Opus [Default=Max]
      --comment COMMENT     Set comment metadata tag to all songs. Can include same tags as --format.
      --cover-file COVER_FILE
                            Save album cover image to file name (e.g ""cover.jpg"") [Default=embed]
      --cover-file-and-embed COVER_FILE
                            Same as --cover-file but embeds the cover image too
      -d DIRECTORY, --directory DIRECTORY
                            Base directory where ripped MP3s are saved [Default=cwd]
      --fail-log FAIL_LOG   Logs the list of track URIs that failed to rip
      --flac                Rip songs to lossless FLAC encoding instead of MP3
      -f FORMAT, --format FORMAT
                            Save songs using this path and filename structure (see README)
      --format-case {upper,lower,capitalize}
                            Convert all words of the file name to upper-case, lower-case, or capitalized
      --flat                Save all songs to a single directory (overrides --format option)
      --flat-with-index     Similar to --flat [-f] but includes the playlist index at the start of the song file
      -g {artist,album}, --genres {artist,album}
                            Attempt to retrieve genre information from Spotify's Web API [Default=skip]
      --grouping GROUPING   Set grouping metadata tag to all songs. Can include same tags as --format.
      --id3-v23             Store ID3 tags using version v2.3 [Default=v2.4]
      -k KEY, --key KEY     Path to Spotify application key file [Default=Settings Directory]
      -u USER, --user USER  Spotify username
      -p PASSWORD, --password PASSWORD
                            Spotify password [Default=ask interactively]
      -l, --last            Use last login credentials
      -L LOG, --log LOG     Log in a log-friendly format to a file (use - to log to stdout)
      --pcm                 Saves a .pcm file with the raw PCM data instead of MP3
      --mp4                 Rip songs to MP4/M4A format with Fraunhofer FDK AAC codec instead of MP3
      --normalize           Normalize volume levels of tracks
      -na, --normalized-ascii
                            Convert the file name to normalized ASCII with unicodedata.normalize (NFKD)
      -o, --overwrite       Overwrite existing MP3 files [Default=skip]
      --opus                Rip songs to Opus encoding instead of MP3
      --partial-check {none,weak,strict}
                            Check for and overwrite partially ripped files. ""weak"" will err on the side of not re-ripping the file if it is unsure, whereas ""strict"" will re-rip the file [Default=weak]
      --play-token-resume RESUME_AFTER
                            If the 'play token' is lost to a different device using the same Spotify account, the script will wait a speficied amount of time before restarting. This argument takes the same values as --resume-after [Default=abort]
      --playlist-m3u        create a m3u file when ripping a playlist
      --playlist-wpl        create a wpl file when ripping a playlist
      --playlist-sync       Sync playlist songs (rename and remove old songs)
      -q VBR, --vbr VBR     VBR quality setting or target bitrate for Opus [Default=0]
      -Q {160,320,96}, --quality {160,320,96}
                            Spotify stream bitrate preference [Default=320]
      --remove-offline-cache
                            Remove libspotify's offline cache directory after the ripis complete to save disk space
      --resume-after RESUME_AFTER
                            Resumes script after a certain amount of time has passed after stopping (e.g. 1h30m). Alternatively, accepts a specific time in 24hr format to start after (e.g 03:30, 16:15). Requires --stop-after option to be set
      -R REPLACE [REPLACE ...], --replace REPLACE [REPLACE ...]
                            pattern to replace the output filename separated by ""/"". The following example replaces all spaces with ""_"" and all ""-"" with ""."":    spotify-ripper --replace "" /_"" ""\-/."" uri
      -s, --strip-colors    Strip coloring from output [Default=colors]
      --stereo-mode {j,s,f,d,m,l,r}
                            Advanced stereo settings for Lame MP3 encoder only
      --stop-after STOP_AFTER
                            Stops script after a certain amount of time has passed (e.g. 1h30m). Alternatively, accepts a specific time in 24hr format to stop after (e.g 03:30, 16:15)
      -V, --version         show program's version number and exit
      --wav                 Rip songs to uncompressed WAV file instead of MP3
      --vorbis              Rip songs to Ogg Vorbis encoding instead of MP3
      -r, --remove-from-playlist
                            Delete tracks from playlist after successful ripping [Default=no]

    Example usage:
        rip a single file: spotify-ripper -u user spotify:track:52xaypL0Kjzk0ngwv3oBPR
        rip entire playlist: spotify-ripper -u user spotify:user:username:playlist:4vkGNcsS8lRXj4q945NIA4
        rip a list of URIs: spotify-ripper -u user list_of_uris.txt
        rip tracks from Spotify's charts: spotify-ripper -l spotify:charts:regional:global:weekly:latest
        search for tracks to rip: spotify-ripper -l -Q 160 -o ""album:Rumours track:'the chain'""

Facebook Login
~~~~~~~~~~~~~~

Spotify-ripper will work with your regular Facebook login/password if you setup your Spotify account to login using your Facebook credentials.  Otherwise, use your Spotify login/password.

Config File
~~~~~~~~~~~

For options that you want set on every run, you can use a config file named ``config.ini`` in the settings folder (defaults to ``~/.spotify-ripper``).  The options in the config file use the same name as the command line options with the exception that dashes are translated to ``snake_case``.  Any option specified in the command line will overwrite any setting in the config file.  Please put all options under a ``[main]`` section.

Here is an example config file

.. code:: ini

    [main]
    ascii = True
    format = {album_artist}/{album}/{artist} - {track_name}.{ext}
    quality = 160
    vorbis = True
    last = True

Format String
-------------

The format string dictates how ``spotify-ripper`` will organize your ripped files.  This is controlled through the ``-f | --format`` option.  The string should include the format of the file name and optionally a directory structure.   If you do not include a format string, the default format will be used: ``{album_artist}/{album}/{artist} - {track_name}.{ext}``.

The ``--flat`` option is shorthand for using the format string: ``{artist} - {track_name}.{ext}``, and the ``--flat-with-index`` option is shorthand for using the format string: ``{idx:3} - {artist} - {track_name}.{ext}``.  The use of these shorthand options will override any ``--format`` string option given.

Your format string can include the following variables names, which are case-sensitive and wrapped in curly braces, if you want your file/path name to be overwritten with Spotify metadata.

Format String Variables
~~~~~~~~~~~~~~~~~~~~~~~

+-----------------------------------------+-----------------------------------------------+
| Names and Aliases                       | Description                                   |
+=========================================+===============================================+
| ``{track_artist}``, ``{artist}``        | The track's artist                            |
+-----------------------------------------+-----------------------------------------------+
| ``{track_artists}``, ``{artists}``      | Similar to ``{track_artist}`` but will be join|
|                                         | multiple artists with a comma                 |
|                                         | (e.g. ""artist 1, artist 2"")                   |
+-----------------------------------------+-----------------------------------------------+
| ``{album_artist}``                      | When passing an album, the album's artist     |
|                                         | (e.g. ""Various Artists"").  If no album artist |
|                                         | exists, the track artist is used instead      |
+-----------------------------------------+-----------------------------------------------+
| ``{album_artists_web}``                 | Similar to ``{album_artist}`` but retrieves   |
|                                         | artist information from Spotify's Web API.    |
|                                         | Unlike ``{album_artist}``, multiple album     |
|                                         | artists can be retrieved and will be joined   |
|                                         | with a comma (e.g. ""artist 1, artist 2"")      |
+-----------------------------------------+-----------------------------------------------+
| ``{album}``                             | Album name                                    |
+-----------------------------------------+-----------------------------------------------+
| ``{track_name}``, ``{track}``           | Track name                                    |
+-----------------------------------------+-----------------------------------------------+
| ``{year}``                              | Release year of the album                     |
+-----------------------------------------+-----------------------------------------------+
| ``{ext}``, ``{extension}``              | Filename extension (i.e. ""mp3"", ""ogg"", ""flac"",|
|                                         | ...)                                          |
+-----------------------------------------+-----------------------------------------------+
| ``{idx}``, ``{index}``                  | Playlist index                                |
|                                         |                                               |
+-----------------------------------------+-----------------------------------------------+
| ``{track_num}``, ``{track_idx}``,       | The track number of the disc                  |
| ``{track_index}``                       |                                               |
+-----------------------------------------+-----------------------------------------------+
| ``{disc_num}``, ``{disc_idx}``,         | The disc number of the album                  |
| ``{disc_index}``                        |                                               |
+-----------------------------------------+-----------------------------------------------+
| ``{smart_track_num}``,                  | For a multi-disc album, ``{smart_track_num}`` |
| ``{smart_track_idx}``,                  | will return a number combining the disc and   |
| ``{smart_track_index}``                 | track number. e.g. for disc 2, track 4 it will|
|                                         | return ""204"". For a single disc album, it will|
|                                         | return the track num.                         |
+-----------------------------------------+-----------------------------------------------+
| ``{playlist}``, ``{playlist_name}``     | Name of playlist if passed a playlist uri,    |
|                                         | otherwise ""No Playlist""                       |
+-----------------------------------------+-----------------------------------------------+
|``{playlist_owner}``,                    | User name of playlist's owner if passed a     |
|``{playlist_user}``,                     | a playlist uri, otherwise ""No Playlist Owner"" |
|``{playlist_username}``                  |                                               |
+-----------------------------------------+-----------------------------------------------+
|``{playlist_track_add_time}``,           | When the track was added to the playlist      |
|``{track_add_time}``,                    |                                               |
+-----------------------------------------+-----------------------------------------------+
|``{playlist_track_add_user}``,           | The user that added the track to the playlist |
|``{track_add_user}``,                    |                                               |
+-----------------------------------------+-----------------------------------------------+
|``{user}``, ``{username}``               | Spotify username of logged-in user            |
+-----------------------------------------+-----------------------------------------------+
|``{feat_artists}``,                      | Featuring artists join by commas (see Prefix  |
|``{featuring_artists}``                  | String section below)                         |
+-----------------------------------------+-----------------------------------------------+
|``{copyright}``                          | Album copyright message                       |
+-----------------------------------------+-----------------------------------------------+
|``{label}``, ``{copyright_holder}``      | Album copyright message with the year         |
|                                         | removed at the start of the string if it      |
|                                         | exists                                        |
+-----------------------------------------+-----------------------------------------------+

Any substring in the format string that does not match a variable above will be passed through to the file/path name unchanged.

Zero-Filled Padding
~~~~~~~~~~~~~~~~~~~

Format variables that represent an index can be padded with zeros to a user-specified length.  For example, ``{idx:3}`` will produce the following output: 001, 002, 003, etc.  If no number is provided, no zero-filled padding will occur (e.g. 8, 9, 10, 11, ...). The variables that accept this option include ``{idx}``, ``{track_num}``, ``{disc_num}``, ``{smart_track_num}`` and their aliases.

Prefix String
~~~~~~~~~~~~~

Format variable ``feat_artists`` takes a prefix string to be prepended before the output.  For example, ``{feat_artists:featuring} will produce the follow output ``featuing Bruno Mars``.  If there are no featuring artists, the prefix string (and any preceding spaces) will not be included.

Playlist Sync Option
~~~~~~~~~~~~~~~~~~~~

By default, other than checking for an overwrite, ``spotify-ripper`` will not keep track of local files once they are ripped from Spotify.  However, if you use the ``--playlist-sync`` option when passing a playlist URI, ``spotify-ripper`` will store a json file in your settings directory that keeps track of location of your ripped files for that playlist.

If at a later time, the playlist is changed on Spotify (i.e. songs reordered, removed or added), ``spotify-ripper`` will try to keep your local files ""in sync"" the playlist if you rerun the same command.  For example, if your format string is ``{index} {artist} - {track_name}.{ext}``, it will rename is existing files so the index is correct.  Note that with option set, ``spotify-ripper`` will delete a song that was previously on the playlist, but was removed but still exists on your local machine.  It does not affect files outside of the playlist and has no effect on non-playlist URIs.

If you want to redownload a playlist (for example with improved quality), you either need to remove the song files from your local or use the ``--overwrite`` option.

Installation
------------

Prerequisites
~~~~~~~~~~~~~

-  `libspotify <https://developer.spotify.com/technologies/libspotify>`__

-  `pyspotify <https://github.com/mopidy/pyspotify>`__

-  a Spotify binary `app
   key <https://devaccount.spotify.com/my-account/keys/>`__
   (spotify\_appkey.key)

-  `lame <http://lame.sourceforge.net>`__

-  `mutagen <https://mutagen.readthedocs.org/en/latest/>`__

-  `colorama <https://pypi.python.org/pypi/colorama>`__

-  (optional) `flac <https://xiph.org/flac/index.html>`__

-  (optional) `opus-tools <http://www.opus-codec.org/downloads/>`__

-  (optional) `vorbis-tools <http://downloads.xiph.org/releases/vorbis/>`__

-  (optional) `faac <http://www.audiocoding.com/downloads.html>`__

-  (optional) `fdkaac <https://github.com/nu774/fdkaac>`__

Mac OS X
~~~~~~~~

Recommend approach uses `homebrew <http://brew.sh/>`__ and
`pyenv <https://github.com/yyuu/pyenv>`__

To install pyenv using homebrew:

.. code:: bash

    $ brew update
    $ brew install pyenv
    $ eval ""$(pyenv init -)""
    ## the next line ensures 'eval ""$(pyenv init -)""' is run everytime terminal is opened
    $ echo 'if which pyenv > /dev/null; then eval ""$(pyenv init -)""; fi' >> ~/.bash_profile
    $ pyenv install 2.7.10  # or whatever version of python you want
    $ pyenv global 2.7.10
    $ python -V             # should say Python 2.7.10

To install spotify-ripper once pyenv is setup:

.. code:: bash

    $ brew install homebrew/binary/libspotify
    $ sudo ln -s /usr/local/opt/libspotify/lib/libspotify.12.1.51.dylib \
        /usr/local/opt/libspotify/lib/libspotify
    $ brew install lame
    $ git clone https://github.com/hbashton/spotify-ripper.git && cd spotify-ripper && sudo python setup.py install
    $ pyenv rehash

**Note that Spotify may no longer be issuing developer keys.** See `Libspotify’s Deprecation`_

Download an application key file ``spotify_appkey.key`` from
``https://devaccount.spotify.com/my-account/keys/`` (requires a Spotify
Premium Account) and move the file to the ``~/.spotify-ripper`` directory (or use
the ``-k | --key`` option).

Ubuntu/Debian
~~~~~~~~~~~~~

Recommend approach uses `pyenv <https://github.com/yyuu/pyenv>`__. If
you don't use pyenv, you need to install the ``python-dev`` package
too. If you are installing on the Raspberry Pi (gen 1), use the
`eabi-armv6hf
version <https://developer.spotify.com/download/libspotify/libspotify-12.1.103-Linux-armv6-bcm2708hardfp-release.tar.gz>`__
of libspotify.

To install pyenv using `pyenv-installer <https://github.com/yyuu/pyenv-installer>`__ (requires git and curl):

.. code:: bash

    $ curl -L https://raw.githubusercontent.com/yyuu/pyenv-installer/master/bin/pyenv-installer | bash
    ## restart terminal ##
    $ pyenv install 2.7.10  # or whatever version of python you want
    $ pyenv global 2.7.10
    $ python -V             # should say Python 2.7.10

To install spotify-ripper once pyenv is setup:

.. code:: bash

    $ sudo apt-get install lame build-essential libffi-dev
    $ wget https://developer.spotify.com/download/libspotify/libspotify-12.1.51-Linux-x86_64-release.tar.gz # (assuming 64-bit)
    $ tar xvf libspotify-12.1.51-Linux-x86_64-release.tar.gz
    $ cd libspotify-12.1.51-Linux-x86_64-release/
    $ sudo make install prefix=/usr/local
    $ git clone https://github.com/hbashton/spotify-ripper.git && cd spotify-ripper && sudo python setup.py install
    $ pyenv rehash

**Note that Spotify may no longer be issuing developer keys.** See `Libspotify’s Deprecation`_

Download an application key file ``spotify_appkey.key`` from
``https://devaccount.spotify.com/my-account/keys/`` (requires a Spotify
Premium Account) and move the file to the ``~/.spotify-ripper`` directory (or use
the ``-k | --key`` option).

Windows
~~~~~~~

Unfortunately, pyspotify seems to have an issue building on Windows (if someone can get this to work, please let me know). The best alternative is to run a linux distribution in a virtual machine.  Basic instructions to install Ubuntu on Virtual Box can be found in the `wiki <https://github.com/hbashton-ripper/wiki/Windows>`__.


Optional Encoding Formats
~~~~~~~~~~~~~~~~~~~~~~~~~

In addition to MP3 encoding, ``spotify-ripper`` supports encoding to FLAC, AAC, MP4/M4A, Ogg Vorbis and Opus.  However, additional encoding tools need to be installed for each codec you wish to use.

**Mac OS X**

.. code:: bash

    # FLAC
    $ brew install flac

    # ALAC
    $ brew install libav

    # AAC
    $ brew install faac

    # MP4/M4A
    $ brew install fdk-aac-encoder

    # Ogg Vorbis
    $ brew install vorbis-tools

    # Opus
    $ brew install opus-tools

**Ubuntu/Debian**

.. code:: bash

    # FLAC
    $ sudo apt-get install flac

    # ALAC
    $ sudo apt-get install libav-tools

    # AAC
    $ sudo apt-get install faac

    # MP4/M4A (need to compile fdkaac from source)
    $ sudo apt-get install libfdk-aac-dev automake autoconf
    $ wget https://github.com/nu774/fdkaac/archive/v0.6.2.tar.gz
    $ tar xvf v0.6.2.tar.gz
    $ cd fdkaac-0.6.2
    $ autoreconf -i
    $ ./configure
    $ sudo make install

    # Ogg Vorbis
    $ sudo apt-get install vorbis-tools

    # Opus
    $ sudo apt-get install opus-tools


Upgrade
~~~~~~~

Use ``git pull`` to upgrade to the latest version.

.. code:: bash

    $ cd spotify-ripper
    $ git pull


Common Issues and Problems
--------------------------

Help for common problems while using spotify-ripper can be found in the `wiki <https://github.com/hbashton/spotify-ripper/wiki/Help>`__.


Release Notes
-------------

Release notes can be found in the `wiki <https://github.com/hbashton/spotify-ripper/wiki/Release-Notes>`__.


License
-------

`MIT License <http://en.wikipedia.org/wiki/MIT_License>`__

.. |Version| image:: http://img.shields.io/pypi/v/spotify-ripper.svg?style=flat-square
  :target: https://pypi.python.org/pypi/spotify-ripper
"
49,abba23/spotify-adblock,Rust,"# spotify-adblock
Spotify adblocker for Linux (macOS untested) that works by wrapping `getaddrinfo` and `cef_urlrequest_create`. It blocks requests to domains that are not on the allowlist, as well as URLs that are on the denylist.

### Notes
* This **does not** work with the snap Spotify package.
* This **might not** work with the Flatpak Spotify package, depending on your system's shared libraries' versions.
* On Debian-based distributions (e.g. Ubuntu), the Debian Spotify package can be installed by following the instructions at the bottom of [this page](https://www.spotify.com/us/download/linux/). *(recommended)*

## Build
Prerequisites:
* Git
* Make
* Rust
* [Cargo](https://doc.rust-lang.org/cargo/)

```bash
$ git clone https://github.com/abba23/spotify-adblock.git
$ cd spotify-adblock
$ make
```

## Install
```bash
$ sudo make install
```

#### Flatpak
```bash
$ mkdir -p ~/.spotify-adblock && cp target/release/libspotifyadblock.so ~/.spotify-adblock/spotify-adblock.so
$ mkdir -p ~/.config/spotify-adblock && cp config.toml ~/.config/spotify-adblock
$ flatpak override --user --filesystem=""~/.spotify-adblock/spotify-adblock.so"" --filesystem=""~/.config/spotify-adblock/config.toml"" com.spotify.Client
```

## Usage
### Command-line
```bash
$ LD_PRELOAD=/usr/local/lib/spotify-adblock.so spotify
```

#### Flatpak
```bash
$ flatpak run --command=sh com.spotify.Client -c 'eval ""$(sed s#LD_PRELOAD=#LD_PRELOAD=$HOME/.spotify-adblock/spotify-adblock.so:#g /app/bin/spotify)""'
```

### Desktop file
You can integrate it with your desktop environment by creating a `.desktop` file (e.g. `spotify-adblock.desktop`) in `~/.local/share/applications`. This lets you easily run it from an application launcher without opening a terminal.

Examples:

<details> 
  <summary>Debian Package</summary>
  <p>

```
[Desktop Entry]
Type=Application
Name=Spotify (adblock)
GenericName=Music Player
Icon=spotify-client
TryExec=spotify
Exec=env LD_PRELOAD=/usr/local/lib/spotify-adblock.so spotify %U
Terminal=false
MimeType=x-scheme-handler/spotify;
Categories=Audio;Music;Player;AudioVideo;
StartupWMClass=spotify
```
  </p>
</details>

<details>
  <summary>Flatpak</summary>
  <p>

```
[Desktop Entry]
Type=Application
Name=Spotify (adblock)
GenericName=Music Player
Icon=com.spotify.Client
Exec=flatpak run --file-forwarding --command=sh com.spotify.Client -c 'eval ""$(sed s#LD_PRELOAD=#LD_PRELOAD=$HOME/.spotify-adblock/spotify-adblock.so:#g /app/bin/spotify)""' @@u %U @@
Terminal=false
MimeType=x-scheme-handler/spotify;
Categories=Audio;Music;Player;AudioVideo;
StartupWMClass=spotify
```
  </p>
</details>

## Uninstall
```bash
$ sudo make uninstall
```

#### Flatpak
```bash
$ rm -r ~/.spotify-adblock ~/.config/spotify-adblock
$ flatpak override --user --reset com.spotify.Client
```

## Configuration
The allowlist and denylist can be configured in a config file located at (in ascending order of precedence):
* `/etc/spotify-adblock/config.toml` *(default)*
* `~/.config/spotify-adblock/config.toml` *(default for Flatpak)*
* `config.toml` in the working directory
"
50,spotify/apps-tutorial,,"# Spotify Apps API Tutorial

This repository has been cleared and left intentionally empty.

Spotify closed the submission process for new apps on the 24th of March 2014. Future releases of the Spotify Desktop client will no longer feature an App Finder tab and will no longer support the presentation of Spotify Apps, therefore this API has been discontinued.

With the growing importance of mobile devices and with many developers asking for the tools to build apps outside of our desktop platform, we recognized the need to make a new set of APIs and SDKs available. These would ensure the Spotify platform remained relevant and easy to develop on, as well as enabling you to build innovative and engaging music experiences.

As a result, we launched our [Web API](https://developer.spotify.com/web-api/) and mobile SDKs for [iOS](https://developer.spotify.com/technologies/spotify-ios-sdk/) and [Android](https://developer.spotify.com/technologies/spotify-android-sdk/).

Please read the [announcement](http://devnews.spotify.com/2014/03/24/closure-of-spotify-apps-submissions/) on our Developer News site for more information.
"
51,WebDevSimplified/spotify-clone,JavaScript,
52,novatorem/spotify-readme,Python,"Aphelion | Perihelion 
:-------------------------:|-------
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; [![Spotify](https://novatorem.vercel.app/api/spotify)](https://open.spotify.com/user/omnitenebris)<br>|<div style=""text-align: justify"">You should use the new version of the readme, [here](https://github.com/novatorem/novatorem)

[//]: <> (The `&nbsp;` is to have Aphelion take up more space)
"
53,khanhas/Spicetify,JavaScript,"## This repo is no longer maintained.

## Windows, Linux and MacOS users, please check out https://github.com/khanhas/spicetify-cli
"
54,calebnance/expo-spotify,JavaScript,"# Spotify: UI Clone with React Native / Expo

web demo: [Expo Spotify](https://expo-spotify.vercel.app)

[![follow @calebnance](https://img.shields.io/twitter/follow/calebnance.svg?style=for-the-badge&logo=TWITTER&logoColor=FFFFFF&labelColor=00aced&logoWidth=20&color=lightgray)](https://twitter.com/calebnance)

<p align=""center"">
  <img src=""screenshots/screenshare-4.jpg?raw=true"" />
</p>

## Table of Contents

- [Install & Build](#install--build)
- [Features](#features)
- [Linting](#linting)
- [Expo Web](#expo-web)
- [Demo & Release Notes](#release-notes)

## Install & Build

First, make sure you have Expo CLI installed: `npm install -g expo-cli`

Install: `yarn` or `yarn install`

Run Project Locally: `yarn dev` or `yarn start`

## Features

- Expo SDK 45
- iOS, Android and PWA (Web App)
- React Navigation v6
- React Context
- PropTypes

## Linting

- run: `yarn lint` for a list of linting warnings/error in cli
- prettier and airbnb config
- make sure you have [prettier package](https://atom.io/packages/prettier-atom) installed on your atom/vscode editor
- then make sure to enable these options (packages → prettier):
  - eslint integration
  - stylelint integration
  - automatic format on save (toggle format on save)
- be aware of the `.prettierignore` file

**Update Linting Packages:**

```
yarn add @babel/core eslint-config-airbnb eslint-config-prettier eslint-plugin-import eslint-plugin-import-helpers eslint-plugin-jsx-a11y eslint-plugin-prettier eslint-plugin-react eslint-plugin-react-hooks eslint-plugin-react-native prettier --dev
```

## Expo Web

Currently Expo Web support is **not production ready**, but if you want to see how this project looks on the web as a PWA (Progressive Web App)... using [react-native-web](https://github.com/necolas/react-native-web) and react-dom.

[PWA: Expo Spotify](https://expo-spotify.calebnance.now.sh) looks best on a mobile device, but not bad on desktop!

**Dev with Expo Web**

- Remove node_modules if they exist: `rm -rf nodes_modules`
- Install/Re-install: `yarn`
- Start development: `yarn web` or `expo start --web`
- Build PWA: `yarn web-build` or `expo build:web`

a couple manual changes within `index.html` i found needed to be made so far:

- **to make splash screen work:** ""mobile-web-app-capable"" => ""apple-mobile-web-app-capable""
- **status bar transparent:** apple-mobile-web-app-status-bar-style=""default"" => ""black-translucent""
- **no white background:** add background color within body{background-color: #121212; ...}
- **check output meta:** double image meta tags
- **check output js:** double/triple js packages

## Release Notes

**version 0.5.0 (current)**

- upgraded to [Expo SDK 45](https://blog.expo.dev/expo-sdk-45-f4e332954a68)
- upgraded to [React Navigation v6](https://reactnavigation.org/docs/getting-started)
- upgraded to [React Navigation v5](https://reactnavigation.org/docs/5.x/getting-started)
- Removed ScreenProps for [React Context](https://reactjs.org/docs/context.html)

**version 0.4.0**

- upgraded to [Expo SDK 44](https://blog.expo.dev/expo-sdk-44-4c4b8306584a)
- upgraded to [Expo SDK 43](https://blog.expo.dev/expo-sdk-43-aa9b3c7d5541)
- upgraded to [Expo SDK 42](https://blog.expo.io/expo-sdk-42-579aee2348b6)

**version 0.3.0**

- upgraded to [Expo SDK 41](https://blog.expo.io/expo-sdk-41-12cc5232f2ef)
- upgraded to [Expo SDK 40](https://blog.expo.io/expo-sdk-40-is-now-available-d4d73e67da33)
- upgraded to [Expo SDK 39](https://blog.expo.io/expo-sdk-39-is-now-available-4c10aa825e3f)
- upgraded to [Expo SDK 38](https://blog.expo.io/expo-sdk-38-is-now-available-ab6cd30ca2ee)

**version 0.2.0**

- upgraded to [React Navigation v4](https://reactnavigation.org/docs/4.x/getting-started)
- upgraded to [Expo SDK 37](https://blog.expo.io/expo-sdk-37-is-now-available-dd5770f066a6)
- upgraded to [Expo SDK 36](https://blog.expo.io/expo-sdk-36-is-now-available-b91897b437fe)
- upgraded to [Expo SDK 35](https://blog.expo.io/expo-sdk-35-is-now-available-beee0dfafbf4)

**version 0.1.0**

- Expo Web support
- upgraded to [Expo SDK 34](https://blog.expo.io/expo-sdk-34-is-now-available-4f7825239319)
- upgraded to [Expo SDK 33](https://blog.expo.io/expo-sdk-v33-0-0-is-now-available-52d1c99dfe4c)
- started with [React Navigation v3](https://reactnavigation.org/docs/3.x/getting-started)
- iOS and Android
- Tab Navigation (stacks created)
  - Home
    - Horizontal Album component
    - Album Screen
      - animation opacity on header
      - scroll sticky of shuffle button
      - current song playing shows in album list view
    - Album More Options (added by [@bidah](https://github.com/bidah))
      - blur view
      - SafeAreaView example
      - action list with supporting icons
    - Header animation on scroll event
      - animation opacity on iPhoneX notch
      - animation opacity on cog icon
  - Search
    - Sticky search bar (animated width)
    - Playlists sections added (with mock data)
  - Library
    - Menu items from mock data
  - Custom Bar for Music Player added to `<BottomTabBar />`
- Modals (bottom to top)
  - Music Player
"
55,watsonbox/exportify,JavaScript,"[![Build Status](https://api.travis-ci.com/watsonbox/exportify.svg?branch=master)](https://travis-ci.com/watsonbox/exportify)

<a href=""https://watsonbox.github.io/exportify/""><img src=""screenshot.png""/></a>

Export your Spotify playlists to [CSV](https://en.wikipedia.org/wiki/Comma-separated_values) by clicking on the link below:

[https://watsonbox.github.io/exportify/](https://watsonbox.github.io/exportify/)

As many users have noted, there is no way to export/archive/backup playlists from the Spotify client for safekeeping. This application provides a simple interface for doing that using the [Spotify Web API](https://developer.spotify.com/documentation/web-api/).

**No data will be saved - the entire application runs in the browser.**


## Usage

1. Fire up [the app](https://watsonbox.github.io/exportify/)
2. Click 'Get Started'
3. Grant Exportify read-only access to your playlists
4. Click the 'Export' button to export a playlist

Click 'Export All' to save a zip file containing a CSV file for each playlist in your account. This may take a while when many playlists exist and/or they are large.

### Re-importing Playlists

Once playlists are saved, it's also pretty straightforward to re-import them into Spotify. Open up the CSV file in Excel, for example, select and copy the `spotify:track:xxx` URIs, then simply create a playlist in Spotify and paste them in.

### Export Format

Track data is exported in [CSV](http://en.wikipedia.org/wiki/Comma-separated_values) format with the following fields from the [Spotify track object](https://developer.spotify.com/documentation/web-api/reference/tracks/get-several-tracks/):

- Track URI
- Track Name
- Artist URI(s)
- Artist Name(s)
- Album URI
- Album Name
- Album Artist URI(s)
- Album Artist Name(s)
- Album Release Date
- Album Image URL (typically 640x640px jpeg)
- Disc Number
- Track Number
- Track Duration (ms)
- Track Preview URL (mp3)
- Explicit?
- Popularity
- Added By
- Added At

By clicking on the cog, additional data can be exported.

<a href=""https://watsonbox.github.io/exportify/""><img src=""https://user-images.githubusercontent.com/17737/100668594-72be1600-335c-11eb-90d6-c9ae873e347d.png""/></a>

By selecting ""Include artists data"", the following fields will be added from the [Spotify artist object](https://developer.spotify.com/documentation/web-api/reference/artists/get-several-artists/):

- Artist Genres

And by selecting ""Include audio features data"", the following fields will be added from the [Spotify audio features object](https://developer.spotify.com/documentation/web-api/reference/tracks/get-several-audio-features/):

- Danceability
- Energy
- Key
- Loudness
- Mode
- Speechiness
- Acousticness
- Instrumentalness
- Liveness
- Valence
- Tempo
- Time Signature

Additionally, by selecting ""Include album data"", the following fields will be added from the [Spotify album object (full)](https://developer.spotify.com/documentation/web-api/reference/object-model/#album-object-full)

- Album Genres
- Label
- Copyrights

Note that the more data being exported, the longer the export will take.

### Playlist Search

If you're searching for a specific playlist to export, you can use the search facility to find it quickly by name:

<a href=""https://watsonbox.github.io/exportify/""><img src=""https://user-images.githubusercontent.com/17737/100201109-eb0d7d00-2eff-11eb-993e-7ed955e2361c.gif""/></a>

Please be aware that if you have a very large number of playlists, there may be a small delay before the first search results appear since the Spotify API itself doesn't allow for searching directly, so all playlists are retrieved first.

Searching is _case-insensitive_.


## Development

This project was bootstrapped with [Create React App](https://github.com/facebook/create-react-app).

In the project directory, first run `yarn install` to set up dependencies, then you can run:

**`yarn start`**

Runs the app in the development mode.\
Open [http://localhost:3000](http://localhost:3000) to view it in the browser.

The page will reload if you make edits.\
You will also see any lint errors in the console.

**`yarn test`**

Launches the test runner in the interactive watch mode.\
See the section about [running tests](https://facebook.github.io/create-react-app/docs/running-tests) for more information.

**`yarn build`**

Builds the app for production to the `build` folder.

### Stack

In addition to [Create React App](https://github.com/facebook/create-react-app), the application is built using the following tools/libraries:

* [React](https://reactjs.org/) - A JavaScript library for building user interfaces
* [Bootstrap 4](https://getbootstrap.com/) - styling and UI components
* [Font Awesome 5](https://fontawesome.com/) - vector icon set and toolkit
* [React Testing Library](https://testing-library.com/docs/react-testing-library/intro/) - light-weight solution for testing React DOM nodes
* [MSW](https://mswjs.io/) - network-level request mocking (more of my own thoughts [here](https://watsonbox.github.io/posts/2020/11/30/discovering-msw.html))


## Notes

- According to Spotify's [documentation](https://developer.spotify.com/web-api/working-with-playlists/):

  > Folders are not returned through the Web API at the moment, nor can be created using it"".

  Unfortunately that's just how it is.

- I've [gone to some lengths](https://github.com/watsonbox/exportify/pull/75) to try to eliminate errors resulting from excessively high usage of the Spotify API. Nonetheless, exporting data in bulk is a fairly request-intensive process, so please do try to use this tool responsibly. If you do require more throughput, please consider [creating your own Spotify application](https://github.com/watsonbox/exportify/issues/6#issuecomment-110793132) which you can use with Exportify directly.

- Disclaimer: It should be clear, but this project is not affiliated with Spotify in any way. It's just an app using their API like any other, with a cheeky name and logo 😇.

- In case you don't see the playlists you were expecting to see and realize you've accidentally deleted them, it's actually possible to [recover them](https://support.spotify.com/us/article/can-i-recover-a-deleted-playlist/).


## Error Monitoring

Error monitoring provided by Bugsnag.

<a href=""http://www.bugsnag.com"">
  <img src=""bugsnag.png"" width=""200"" />
</a>


## Contributing

1. Fork it ( https://github.com/watsonbox/exportify/fork )
2. Create your feature branch (`git checkout -b my-new-feature`)
3. Commit your changes (`git commit -am 'Add some feature'`)
4. Push to the branch (`git push origin my-new-feature`)
5. Create a new Pull Request
"
56,kaaes/spotify-web-api-android,Java,"[![Build Status](https://travis-ci.org/kaaes/spotify-web-api-android.svg?branch=master)](https://travis-ci.org/kaaes/spotify-web-api-android)
[![Release](https://img.shields.io/github/release/kaaes/spotify-web-api-android.svg?label=maven)](https://jitpack.io/#kaaes/spotify-web-api-android)

# Spotify Web API for Android

This project is a wrapper for the [Spotify Web API](https://developer.spotify.com/web-api/).
It uses [Retrofit](http://square.github.io/retrofit/) to create Java interfaces from API endpoints.

## Integrating into your project

This library is available in [JitPack.io](https://jitpack.io/) repository.
To use it make sure that repository's url is added to the `build.gradle` file in your app:

```groovy
repositories {
    mavenCentral()
    maven { url ""https://jitpack.io"" }
}

dependencies {
    compile 'com.github.kaaes:spotify-web-api-android:0.4.1'

    // Other dependencies your app might use
}
```

## <a name=""building""></a>Building
This project is built using [Gradle](https://gradle.org/):

1. Clone the repository: `git clone https://github.com/kaaes/spotify-web-api-android.git`
2. Build: `./gradlew assemble`
3. Grab the `aar` that can be found in `spotify-api/build/outputs/aar/spotify-web-api-android-0.4.1.aar`

## Usage

Out of the box it uses [OkHttp](http://square.github.io/okhttp/) HTTP client and a [single thread executor](https://docs.oracle.com/javase/7/docs/api/java/util/concurrent/Executors.html).

```java
SpotifyApi api = new SpotifyApi();

// Most (but not all) of the Spotify Web API endpoints require authorisation.
// If you know you'll only use the ones that don't require authorisation you can skip this step
api.setAccessToken(""myAccessToken"");

SpotifyService spotify = api.getService();

spotify.getAlbum(""2dIGnmEIy1WZIcZCFSj6i8"", new Callback<Album>() {
    @Override
    public void success(Album album, Response response) {
        Log.d(""Album success"", album.name);
    }

    @Override
    public void failure(RetrofitError error) {
        Log.d(""Album failure"", error.toString());
    }
});
```

It is also possible to construct the adapter with custom parameters.

```java
final String accessToken = ""myAccessToken"";

RestAdapter restAdapter = new RestAdapter.Builder()
        .setEndpoint(SpotifyApi.SPOTIFY_WEB_API_ENDPOINT)
        .setRequestInterceptor(new RequestInterceptor() {
            @Override
            public void intercept(RequestFacade request) {
                request.addHeader(""Authorization"", ""Bearer "" + accessToken);
            }
        })
        .build();

SpotifyService spotify = restAdapter.create(SpotifyService.class);
```

## Obtaining Access Tokens

The most straightforward way to get the access token is to use the Authentication Library from the [Spotify Android SDK](https://github.com/spotify/android-sdk).
Detailed information how to use it can be found in the [Spotify Android SDK Authentication Guide](https://developer.spotify.com/technologies/spotify-android-sdk/android-sdk-authentication-guide/).

Feeling adventurous? You can implement the auth flow yourself, following the [Spotify Authorization Guide](https://developer.spotify.com/web-api/authorization-guide/).


## Error Handling

When using Retrofit, errors are returned as [`RetrofitError`](http://square.github.io/retrofit/javadoc/retrofit/RetrofitError.html)
objects. These objects, among others, contain HTTP status codes and their descriptions,
for example `400 - Bad Request`.
In many cases this will work well enough but in some cases Spotify Web API returns more detailed information,
for example `400 - No search query`.

To use the data returned in the response from the Web API `SpotifyCallback` object should be passed to the
request method instead of regular Retrofit's `Callback`:
```java
spotify.getMySavedTracks(new SpotifyCallback<Pager<SavedTrack>>() {
    @Override
    public void success(Pager<SavedTrack> savedTrackPager, Response response) {
        // handle successful response
    }

    @Override
    public void failure(SpotifyError error) {
        // handle error
    }
});
```
For synchronous requests `RetrofitError` can be converted to `SpotifyError` if needed:
```java
try {
    Pager<SavedTrack> mySavedTracks = spotify.getMySavedTracks();
} catch (RetrofitError error) {
    SpotifyError spotifyError = SpotifyError.fromRetrofitError(error);
    // handle error
}
```

## Help

#### Versioning policy
We use [Semantic Versioning 2.0.0](http://semver.org/) as our versioning policy.

#### Bugs, Feature requests
Found a bug? Something that's missing? Feedback is an important part of improving the project, so please [open an issue](https://github.com/kaaes/spotify-web-api-android/issues).

#### Code
Fork this project and start working on your own feature branch. When you're done, send a Pull Request to have your suggested changes merged into the master branch by the project's collaborators. Read more about the [GitHub flow](https://guides.github.com/introduction/flow/).
"
57,Burgestrand/spotify,C++,"Low-level Ruby bindings for [libspotify][], the official Spotify C API
======================================================================
[![Build Status](https://secure.travis-ci.org/Burgestrand/spotify.png?branch=master)](http://travis-ci.org/Burgestrand/spotify)
[![Dependency Status](https://gemnasium.com/Burgestrand/spotify.png)](https://gemnasium.com/Burgestrand/spotify)
[![Code Climate](https://codeclimate.com/github/Burgestrand/spotify.png)](https://codeclimate.com/github/Burgestrand/spotify)
[![Gem Version](https://badge.fury.io/rb/spotify.png)](http://badge.fury.io/rb/spotify)

**Caution: libspotify in its current form has been deprecated: https://developer.spotify.com/news-stories/2015/05/26/last-month-news/**

```
The libspotify C API package allows third party developers to write
applications that utilize the Spotify music streaming service.
```

[Spotify][] is a really nice music streaming service, and being able to interact
with it in an API is awesome. libspotify itself is however written in C, making
it unavailable or cumbersome to use for many developers.

This project aims to allow Ruby developers access to all of the libspotify C API,
without needing to reach down to C. However, to use this library to its full extent
you will need to learn how to use the Ruby FFI API.

The Spotify gem has:

- [100% API coverage][], including callback support. You’ll be able to use any function from the libspotify library.
- [Automatic garbage collection][]. Piggybacking on Ruby’s GC to manage pointer lifecycle.
- [Parallell function call protection][]. libspotify is not thread-safe, but Spotify protects you by making all API calls in a specific background thread.
- [Type conversion and type safety][]. Special pointers for every Spotify type, protecting you from accidental mix-ups.
- [Support for Ruby, JRuby and Rubinius][]. Thanks to FFI, the gem runs fine on the main three Ruby implementations!

[100% API coverage]: http://rdoc.info/github/Burgestrand/spotify/master/Spotify/API
[Automatic garbage collection]: http://rdoc.info/github/Burgestrand/spotify/master/Spotify/ManagedPointer
[Parallell function call protection]: http://rdoc.info/github/Burgestrand/spotify/master/Spotify#method_missing-class_method
[Type conversion and type safety]: http://rdoc.info/github/Burgestrand/spotify/master/Spotify/ManagedPointer
[Support for Ruby, JRuby and Rubinius]: https://github.com/Burgestrand/spotify/blob/master/.travis.yml

Contact details
---------------

- __Got questions?__ Ask on the mailing list: [ruby-spotify@googlegroups.com][] (<https://groups.google.com/d/forum/ruby-spotify>)
- __Found a bug?__ Report an issue: <https://github.com/Burgestrand/spotify/issues/new>
- __Have feedback?__ I ❤ feedback! Please send it to the mailing list.

Questions, notes and answers
----------------------------

### Links to keep close at hand when using libspotify

- [spotify gem API reference](http://rdoc.info/github/Burgestrand/spotify/master/Spotify/API) — YARDoc reference for the spotify gem, maps to the [libspotify function list](https://developer.spotify.com/docs/libspotify/12.1.51/api_8h.html).
- [libspotify C API reference](https://developer.spotify.com/docs/libspotify/12.1.51/) — the one true source of documentation.
- [libspotify FAQ](https://developer.spotify.com/technologies/libspotify/faq/) — you should read this at least once.
- [spotify gem examples](https://github.com/Burgestrand/spotify/tree/master/examples) — located in the spotify gem repository.
- [spotify gem FAQ](#questions-notes-and-answers) — this README section.


### How to run the examples

You’ll need:

1. Your [Spotify](http://spotify.com/) premium account credentials. If you sign in with Facebook, you’ll need your Facebook account e-mail and password.
2. Your [Spotify application key](https://developer.spotify.com/technologies/libspotify/keys/). Download the binary key, and put it in the `examples/` directory.

Running the examples is as simple as:

```
ruby example-audio_stream.rb
```

Available examples are:

- **example-audio_stream.rb**: plays songs from Spotify with the [plaything](https://github.com/Burgestrand/plaything) gem, using OpenAL.
- **example-console.rb**: logs in to Spotfify, and initiates a pry session to allow experimentation with the spotify gem API.
- **example-listing_playlists.rb**: list all playlists available for a certain user.
- **example-loading_object.rb**: loads a track using polling and the spotify gem API.
- **example-random_related_artists.rb**: looks up an artist and its similar artists on spotify, then it picks a similar artist at random and does the same to that artist, over and over. I have used this example file to test prolonged usage of the API.

### Creating a Session, the first thing you should do

Almost all functions require you to have created a session before calling them. Forgetting to do so won’t work at best, and will segfault at worst. You'll also want to log in before doing things as well, or objects will never load.

See [Spotify::API#session_create](http://rdoc.info/github/Burgestrand/spotify/master/Spotify/API#session_create-instance_method) for how to create a session.
See [Spotify::API#session_login](http://rdoc.info/github/Burgestrand/spotify/master/Spotify/API#session_login-instance_method) for logging in.

### libspotify is an asynchronous library

When creating objects in libspotify they are not populated with data instantly, instead libspotify schedules them for download from the Spotify backend. For libspotify to do it's work with downloading content, you need to call [Spotify::API#session_process_events](http://rdoc.info/github/Burgestrand/spotify/master/Spotify/API#session_process_events-instance_method) regularly.

### Facebook vs Spotify Classic

Users who signed up to Spotify with their Facebook account will have numeric IDs as usernames, so a link to their profile looks like [spotify:user:11101648092](spotify:user:11101648092). Spotify Classic users instead have their usernames as canonical name, so a link to their profile looks like [spotify:user:burgestrand](spotify:user:burgestrand).

This matters, for example, when you use the function [Spotify::API#session_publishedcontainer_for_user_create](http://rdoc.info/github/Burgestrand/spotify/master/Spotify/API#session_publishedcontainer_for_user_create-instance_method).

### Callbacks can be dangerous

libspotify allows you to pass callbacks that will be invoked by libspotify when events of interest occur, such as being logged out, or receiving audio data when playing a track.

Callbacks can be very tricky. They must never be garbage collected while they are in use by libspotify, or you may get very weird bugs with your Ruby interpreter randomly crashing. Do use them, but be careful.

### Opinions and the Spotify gem

The Spotify gem has very few opinions. It is build to closely resemble the libspotify C API, and has very little
to aid you in terms of how to structure your application. It aims to make calling the libspotify C API frictionless,
but not much more. It is up to you to decide your own path.

### A note about gem versioning

Given a version `X.Y.Z`, each segment corresponds to:

- `X` reflects supported libspotify version (12.1.45 => 12). There are __no guarantees__ of backwards-compatibility!
- `Y` is for backwards-**incompatible** changes.
- `Z` is for backwards-**compatible** changes.

You should use the following version constraint: `gem ""spotify"", ""~> 12.5.3""`.


### Manually installing libspotify

By default, Spotify uses [the libspotify gem](https://rubygems.org/gems/libspotify) which means you do
not need to install libspotify yourself. However, if your platform is not supported by the libspotify
gem you will need to install libspotify yourself.

Please note, that if your platform is not supported by the libspotify gem I’d very much appreciate it
if you could create an issue on [libspotify gem issue tracker](https://github.com/Burgestrand/libspotify/issues)
so I can fix the build for your platform.

Instructions on installing libspotify manually are in the wiki: [How to install libspotify](https://github.com/Burgestrand/spotify/wiki)

[semantic versioning (semver.org)]: http://semver.org/
[ruby-spotify@googlegroups.com]: mailto:ruby-spotify@googlegroups.com
[libspotify]: https://developer.spotify.com/technologies/libspotify/
[Spotify]: https://www.spotify.com/
[Hallon]: https://github.com/Burgestrand/Hallon
"
58,ShyykoSerhiy/vscode-spotify,TypeScript,"[![Latest Release](https://vsmarketplacebadge.apphb.com/version-short/shyykoserhiy.vscode-spotify.svg)](https://marketplace.visualstudio.com/items?itemName=shyykoserhiy.vscode-spotify)
[![Installs](https://vsmarketplacebadge.apphb.com/installs/shyykoserhiy.vscode-spotify.svg)](https://marketplace.visualstudio.com/items?itemName=shyykoserhiy.vscode-spotify)
[![Rating](https://vsmarketplacebadge.apphb.com/rating-short/shyykoserhiy.vscode-spotify.svg)](https://marketplace.visualstudio.com/items?itemName=shyykoserhiy.vscode-spotify#review-details)

# vscode-spotify

[![All Contributors](https://img.shields.io/badge/all_contributors-15-orange.svg?style=flat)](#contributors)

Use Spotify inside vscode.
Provides integration with Spotify Desktop client. 

Note that some of the functionalities are only available on macOS systems (see [How it works section](#how-it-works))

**This extension requires Spotify Premium to work on Windows**

## How it works

* On macOS, this extension uses [spotify-node-applescript](https://github.com/andrehaveman/spotify-node-applescript) (basically a wrapper for the official Spotify AppleScript API) to communicate with Spotify.
* On Windows, the extension uses the Spotify Web API. 
* On Linux, it uses a combination of dbus and pactl.

Spotify Web API implementation can be used on any platform, but it does have some drawbacks:
* It doesn't work without internet connection (Linux and OS X implementations do).
* Full functionality is only available to Spotify Premium users. 
* API calls are rate limited.

At the same time it provides tighter integration and it's more or less future proofed.

## Features
* Shows the currently playing song in the vscode status bar.
![status bar](media/screenshot.png)
* Provides [commands](#commands) for controlling Spotify from vscode. 
* Provides [hotkeys](#Adding%20or%20changing%20hotkeys) of commands.
* Provides [buttons](#buttons) for controlling Spotify from vscode.

## Compatibility table

| Feature                      | macOS         | Linux                        | Any Platform (only option on Windows) Web API |
| ---------------------------- |:-------------:| :--------------------------- | :-------------------------------------------- |
| Works Offline                | ✅            | ✅                            | ❌                                            |
| Show Current Song            | ✅            | ✅                            | ✅                                            |
| Play Next Song               | ✅            | ✅                            | ✅                                            |
| Play Previous Song           | ✅            | ✅                            | ✅                                            |
| Play                         | ✅            | ✅                            | ✅                                            |
| Pause                        | ✅            | ✅                            | ✅                                            |
| Play Pause                   | ✅            | ✅                            | ✅                                            |
| Mute Volume                  | ✅            | ✅                            | ✅                                            |
| Unmute Volume                | ✅            | ✅                            | ✅                                            |
| Mute Unmute Volume           | ✅            | ✅                            | ✅                                            |
| Volume Up                    | ✅            | ✅                            | ✅                                            |
| Volume Down                  | ✅            | ✅                            | ✅                                            |
| Toggle Repeating             | ✅            | (shows repeating state)  ⭕   | ✅             				    |
| Toggle Shuffling             | ✅            | (shows shuffling state)  ⭕   | ✅                                            |
| Lyrics                       | ✅            | ✅                            | ✅                                            |

Additional Web API features:
* Playlists/tracks selection. *Make sure you have logged in with the command `>Spotify Sign In` to use these features. You can open the Virtual Studio Code command line with the hotkey `Ctrl+P` by default.*

## Contributing 
This project follows the [all-contributors](https://github.com/kentcdodds/all-contributors) specification. Contributions of any kind are welcome, any contributions made will be recognised in the README.

A list of contributors to this project ([emoji key](https://github.com/kentcdodds/all-contributors#emoji-key)):

<!-- ALL-CONTRIBUTORS-LIST:START - Do not remove or modify this section -->
<!-- prettier-ignore-start -->
<!-- markdownlint-disable -->
<table>
  <tr>
    <td align=""center""><a href=""https://github.com/ShyykoSerhiy""><img src=""https://avatars1.githubusercontent.com/u/1106995?v=4?s=100"" width=""100px;"" alt=""""/><br /><sub><b>shyyko.serhiy</b></sub></a><br /><a href=""https://github.com/ShyykoSerhiy/vscode-spotify/commits?author=ShyykoSerhiy"" title=""Code"">💻</a> <a href=""#design-ShyykoSerhiy"" title=""Design"">🎨</a> <a href=""https://github.com/ShyykoSerhiy/vscode-spotify/commits?author=ShyykoSerhiy"" title=""Documentation"">📖</a> <a href=""#ideas-ShyykoSerhiy"" title=""Ideas, Planning, & Feedback"">🤔</a> <a href=""https://github.com/ShyykoSerhiy/vscode-spotify/pulls?q=is%3Apr+reviewed-by%3AShyykoSerhiy"" title=""Reviewed Pull Requests"">👀</a></td>
    <td align=""center""><a href=""https://www.levrik.io""><img src=""https://avatars3.githubusercontent.com/u/9491603?v=4?s=100"" width=""100px;"" alt=""""/><br /><sub><b>Levin Rickert</b></sub></a><br /><a href=""https://github.com/ShyykoSerhiy/vscode-spotify/issues?q=author%3Alevrik"" title=""Bug reports"">🐛</a> <a href=""https://github.com/ShyykoSerhiy/vscode-spotify/commits?author=levrik"" title=""Code"">💻</a></td>
    <td align=""center""><a href=""https://github.com/mrcasals""><img src=""https://avatars3.githubusercontent.com/u/491891?v=4?s=100"" width=""100px;"" alt=""""/><br /><sub><b>Marc Riera</b></sub></a><br /><a href=""https://github.com/ShyykoSerhiy/vscode-spotify/commits?author=mrcasals"" title=""Code"">💻</a></td>
    <td align=""center""><a href=""https://github.com/ecbrodie""><img src=""https://avatars2.githubusercontent.com/u/1844664?v=4?s=100"" width=""100px;"" alt=""""/><br /><sub><b>Evan Brodie</b></sub></a><br /><a href=""https://github.com/ShyykoSerhiy/vscode-spotify/commits?author=ecbrodie"" title=""Code"">💻</a> <a href=""https://github.com/ShyykoSerhiy/vscode-spotify/issues?q=author%3Aecbrodie"" title=""Bug reports"">🐛</a></td>
    <td align=""center""><a href=""https://github.com/stephanyan""><img src=""https://avatars1.githubusercontent.com/u/5939522?v=4?s=100"" width=""100px;"" alt=""""/><br /><sub><b>Stéphane</b></sub></a><br /><a href=""https://github.com/ShyykoSerhiy/vscode-spotify/commits?author=stephanyan"" title=""Documentation"">📖</a></td>
    <td align=""center""><a href=""https://github.com/Ryan-Gordon""><img src=""https://avatars1.githubusercontent.com/u/11082710?v=4?s=100"" width=""100px;"" alt=""""/><br /><sub><b>Ryan Gordon</b></sub></a><br /><a href=""https://github.com/ShyykoSerhiy/vscode-spotify/commits?author=Ryan-Gordon"" title=""Documentation"">📖</a> <a href=""#ideas-Ryan-Gordon"" title=""Ideas, Planning, & Feedback"">🤔</a></td>
    <td align=""center""><a href=""http://www.audstanley.com""><img src=""https://avatars0.githubusercontent.com/u/2934052?v=4?s=100"" width=""100px;"" alt=""""/><br /><sub><b>Richard Stanley</b></sub></a><br /><a href=""https://github.com/ShyykoSerhiy/vscode-spotify/commits?author=audstanley"" title=""Code"">💻</a></td>
  </tr>
  <tr>
    <td align=""center""><a href=""https://github.com/realbizkit""><img src=""https://avatars1.githubusercontent.com/u/25567148?v=4?s=100"" width=""100px;"" alt=""""/><br /><sub><b>realbizkit</b></sub></a><br /><a href=""https://github.com/ShyykoSerhiy/vscode-spotify/commits?author=realbizkit"" title=""Code"">💻</a></td>
    <td align=""center""><a href=""http://jesusroldan.com""><img src=""https://avatars1.githubusercontent.com/u/662916?v=4?s=100"" width=""100px;"" alt=""""/><br /><sub><b>Jesús Roldán</b></sub></a><br /><a href=""https://github.com/ShyykoSerhiy/vscode-spotify/commits?author=xeBuz"" title=""Code"">💻</a></td>
    <td align=""center""><a href=""https://negebauer.com""><img src=""https://avatars3.githubusercontent.com/u/11860880?v=4?s=100"" width=""100px;"" alt=""""/><br /><sub><b>Nicolás Gebauer</b></sub></a><br /><a href=""https://github.com/ShyykoSerhiy/vscode-spotify/commits?author=negebauer"" title=""Code"">💻</a></td>
    <td align=""center""><a href=""http://this.rivki.id/""><img src=""https://avatars0.githubusercontent.com/u/4416419?v=4?s=100"" width=""100px;"" alt=""""/><br /><sub><b>Muhammad Rivki</b></sub></a><br /><a href=""https://github.com/ShyykoSerhiy/vscode-spotify/commits?author=mikqi"" title=""Code"">💻</a></td>
    <td align=""center""><a href=""https://github.com/miguelBinpar""><img src=""https://avatars0.githubusercontent.com/u/14270461?v=4?s=100"" width=""100px;"" alt=""""/><br /><sub><b>Miguel Rodríguez Rosales</b></sub></a><br /><a href=""https://github.com/ShyykoSerhiy/vscode-spotify/commits?author=miguelBinpar"" title=""Code"">💻</a></td>
    <td align=""center""><a href=""https://il.linkedin.com/in/moshefeuchtwanger""><img src=""https://avatars2.githubusercontent.com/u/3723951?v=4?s=100"" width=""100px;"" alt=""""/><br /><sub><b>Mosh Feu</b></sub></a><br /><a href=""https://github.com/ShyykoSerhiy/vscode-spotify/commits?author=moshfeu"" title=""Documentation"">📖</a></td>
    <td align=""center""><a href=""https://www.codependentcodr.com""><img src=""https://avatars1.githubusercontent.com/u/414933?v=4?s=100"" width=""100px;"" alt=""""/><br /><sub><b>Adam Parkin</b></sub></a><br /><a href=""https://github.com/ShyykoSerhiy/vscode-spotify/commits?author=pzelnip"" title=""Documentation"">📖</a></td>
  </tr>
  <tr>
    <td align=""center""><a href=""https://github.com/AndrewBastin""><img src=""https://avatars2.githubusercontent.com/u/9131943?v=4?s=100"" width=""100px;"" alt=""""/><br /><sub><b>Andrew Bastin</b></sub></a><br /><a href=""https://github.com/ShyykoSerhiy/vscode-spotify/commits?author=AndrewBastin"" title=""Documentation"">📖</a></td>
    <td align=""center""><a href=""https://www.michaelscottfox.com""><img src=""https://avatars2.githubusercontent.com/u/21694891?v=4?s=100"" width=""100px;"" alt=""""/><br /><sub><b>Michael Fox</b></sub></a><br /><a href=""https://github.com/ShyykoSerhiy/vscode-spotify/commits?author=misterfoxy"" title=""Documentation"">📖</a></td>
    <td align=""center""><a href=""http://korra.io/""><img src=""https://avatars1.githubusercontent.com/u/2392130?v=4?s=100"" width=""100px;"" alt=""""/><br /><sub><b>Matija Mrkaic</b></sub></a><br /><a href=""https://github.com/ShyykoSerhiy/vscode-spotify/commits?author=matijamrkaic"" title=""Code"">💻</a></td>
    <td align=""center""><a href=""https://github.com/marioortizmanero""><img src=""https://avatars2.githubusercontent.com/u/25647296?v=4?s=100"" width=""100px;"" alt=""""/><br /><sub><b>Mario</b></sub></a><br /><a href=""https://github.com/ShyykoSerhiy/vscode-spotify/commits?author=marioortizmanero"" title=""Documentation"">📖</a></td>
    <td align=""center""><a href=""http://www.kodaman.dev/""><img src=""https://avatars3.githubusercontent.com/u/10265682?v=4?s=100"" width=""100px;"" alt=""""/><br /><sub><b>Fernando B</b></sub></a><br /><a href=""https://github.com/ShyykoSerhiy/vscode-spotify/commits?author=TheFern2"" title=""Code"">💻</a></td>
  </tr>
</table>

<!-- markdownlint-restore -->
<!-- prettier-ignore-end -->

<!-- ALL-CONTRIBUTORS-LIST:END -->

## Commands

There are a number of commands available for the extension, and accessible via the command
pallette.  Find them by searching for ""Spotify"" in the command pallette:

![Commands](media/screenshot2.png)

## Adding or changing hotkeys
All keyboard shortcuts in vscode can be customized via the `User/keybindings.json` file.

To configure keyboard shortcuts the way you want, go to the menu under File > Preferences > Keyboard Shortcuts.
This will open the Default Keyboard Shortcuts on the left and your `User/keybindings.json` file where you can overwrite the default bindings on the right. You may also see an interface to modify the shortcuts on different versions of vscode.

Example :
```json
{
		""command"": ""spotify.volumeDown"",
		""key"": ""cmd+shift+g""
}
```

For more info on hotkeys please look at https://code.visualstudio.com/docs/customization/keybindings

## Buttons
This extension provides a variety of buttons to control Spotify from status bar. By default 4 buttons are enabled:
1. Previous track
2. Play / Pause
3. Next track
4. Mute / Unmute

You can modify the shown buttons by changing your parameters ([go here to find out how](https://code.visualstudio.com/docs/customization/userandworkspace)):
```json
""spotify.showNextButton"": {
	""type"": ""boolean"",
	""default"": true,
	""description"": ""Whether to show next button.""
},
""spotify.showPreviousButton"": {
	""type"": ""boolean"",
	""default"": true,
	""description"": ""Whether to show previous button.""
},
""spotify.showPlayButton"": {
	""type"": ""boolean"",
	""default"": false,
	""description"": ""Whether to show play button.""
},
""spotify.showPauseButton"": {
	""type"": ""boolean"",
	""default"": false,
	""description"": ""Whether to show pause button.""
},
""spotify.showPlayPauseButton"": {
	""type"": ""boolean"",
	""default"": true,
	""description"": ""Whether to show play|pause button.""
},
""spotify.showMuteVolumeButton"": {
	""type"": ""boolean"",
	""default"": false,
	""description"": ""Whether to show mute button.""
},
""spotify.showUnmuteVolumeButton"": {
	""type"": ""boolean"",
	""default"": false,
	""description"": ""Whether to show unmute button.""
},
""spotify.showMuteUnmuteVolumeButton"": {
	""type"": ""boolean"",
	""default"": true,
	""description"": ""Whether to show mute|unmute button.""
},
""spotify.showVolumeUpButton"": {
	""type"": ""boolean"",
	""default"": false,
	""description"": ""Whether to show volume up button.""
},
""spotify.showVolumeDownButton"": {
	""type"": ""boolean"",
	""default"": false,
	""description"": ""Whether to show volume down button.""
}
""spotify.showToggleRepeatingButton"": {
	""type"": ""boolean"",
	""default"": false,
	""description"": ""Whether to show toggle repeating button.""
},
""spotify.showToggleShufflingButton"": {
	""type"": ""boolean"",
	""default"": false,
	""description"": ""Whether to show toggle shuffling button.""
}
```

For the full configuration options go [here](https://github.com/ShyykoSerhiy/vscode-spotify/blob/master/package.json#L161).

Note that due to limitations of Spotify's Applescript API ```toggleRepeatingButton``` toggles only
'repeat all' property of spotify. There is no way to set 'repeat one' via vscode-spotify.  

You can also change the position of buttons by changing the parameters below:

```json
""spotify.priorityBase"": {
	""type"": ""number"",
	""default"": 30,
	""description"": ""Base value of priority for all vscode-spotify elements in Status Bar(priority = basePriority+priority). This is done to avoid 'conflicts' with other extensions. ""
},
""spotify.nextButtonPriority"": {
	""type"": ""number"",
	""default"": 8,
	""description"": ""Priority of next button.""
},
""spotify.previousButtonPriority"": {
	""type"": ""number"",
	""default"": 10,
	""description"": ""Priority of previous button.""
},
""spotify.playButtonPriority"": {
	""type"": ""number"",
	""default"": 7,
	""description"": ""Priority of play button.""
},
""spotify.pauseButtonPriority"": {
	""type"": ""number"",
	""default"": 6,
	""description"": ""Priority of pause button.""
},
""spotify.playPauseButtonPriority"": {
	""type"": ""number"",
	""default"": 9,
	""description"": ""Priority of play|pause button.""
},
""spotify.muteButtonPriority"": {
	""type"": ""number"",
	""default"": 5,
	""description"": ""Priority of mute button.""
},
""spotify.unmuteButtonPriority"": {
	""type"": ""number"",
	""default"": 4,
	""description"": ""Priority of unmute button.""
},
""spotify.muteUnmuteButtonPriority"": {
	""type"": ""number"",
	""default"": 3,
	""description"": ""Priority of mute|unmute button.""
},
""spotify.volumeUpButtonPriority"": {
	""type"": ""number"",
	""default"": 2,
	""description"": ""Priority of volume up button.""
},
""spotify.volumeDownButtonPriority"": {
	""type"": ""number"",
	""default"": 1,
	""description"": ""Priority of volume down button.""
},
""spotify.trackInfoPriority"": {
	""type"": ""number"",
	""default"": 0,
	""description"": ""Priority of volume track info.""
},
""spotify.toggleRepeatingButtonPriority"": {
	""type"": ""number"",
	""default"": 11,
	""description"": ""Priority of toggle repeating button.""
},
""spotify.toggleShufflingButtonPriority"": {
	""type"": ""number"",
	""default"": 12,
	""description"": ""Priority of toggle shuffling button.""
}
```

## Seeking to a specific point in a song
You can use `Spotify Seek To` command (`spotify.seekTo`) to seek to the specific point in a song. You can specify hotkey that will seek to a custom time in a song by adding keybinding in keybindings.json. For example:

```json
{
    ""command"": ""spotify.seekTo"",
    ""key"": ""alt+d"",
    ""args"": ""1:15""
}
```

[MIT LICENSE](LICENSE)
"
59,JMPerez/spotify-dedup,TypeScript,"# Spotify Deduplicator

[![Greenkeeper badge](https://badges.greenkeeper.io/JMPerez/spotify-dedup.svg)](https://greenkeeper.io/)

Have you ever wanted to remove duplicated songs from your Spotify library? Now you can find and remove them using Spotify Dedup.

This project uses the [Spotify Web API](https://developer.spotify.com/web-api/) for managing playlists. Just log in and it will traverse your playlists, finding songs that appear multiple times with the same identifier (Spotify URI) in a given playlist.

If it finds duplicates, they can be removed just pushing a button. And since it doesn't create a whole new playlist, it keeps all the information like creation date and subscribers.

## Try it

You can check it out on [https://spotify-dedup.com](https://spotify-dedup.com) or run it locally.

## Install and run

Install the dependencies:

    yarn install

Run it:

    yarn dev

Then open http://localhost:3000 in a browser

## Testing

In order to test saved tracks, create duplicated tracks by executing the Web API request on https://developer.spotify.com/console/put-current-user-saved-tracks/?ids=2JZfTvWWtpaE8NohqRXqFr,1poUtf2dDdVUtWL8tn03Wd,6ADSaE87h8Y3lccZlBJdXH,2x45xqISlmmDJqxOqr8BuS,1iQ1BpOGF1Umd3lpTV4OPO.

## About the tools used and implementation details

### Spotify Web API and Promises

This app is a good example of how to traverse a user's library without incurring in rate limit. Have a look at the code and see how Promises and a Promise Queue are used to control the amount of requests sent to the Spotify Web API. If you are interested in throttling promises, check out [promise-throttle](https://github.com/JMPerez/promise-throttle).
"
60,awicks44/JavaScript-SpotifyAPI,JavaScript,"# JavaScript-SpotifyAPI
This is a sample project showing how to call Spotify's API using vanilla JS
"
61,Glyphack/spotify_download_bot,Python,"# Spotify download bot
A telegram bot for downloading spotify playlist songs on telegram.
The bot works by getting list of song names from spotify and find them on youtube.

## How to setup on heroku
1. Create a telegram bot using [bot father](https://core.telegram.org/bots#3-how-do-i-create-a-bot)
2. Create account on [heroku.com](https://heroku.com/)
3. Create a new application on heroku
4. fork this repository
  * To deploy bot on heroku there are two methods (CLI and Web), we use the heroku.com way:
5. In your application on heroku go to deploy tab and choose Github on deployment method
6. Select this repository you forked there and choose deploy from master option
7. Then go to settings tab on heroku and add two vars to config vars:
  - URL: Base URL of the application you created on Heroku
  - TOKEN: your telegram bot token)
8. install [heroku CLI](https://devcenter.heroku.com/articles/heroku-cli#download-and-install) and run the command `heroku stack:set container -a APP_NAME` (APP_NAME is name of the app you choose when creating heroku application) then login to your account for change to happen
9. In heroku from deploy section scroll down to Manual deploy and press deploy branch for master branch

## Setup everywhere else
1. use the Dockerfile for deployment method
2. Set the TOKEN and URL in environment variables

## Local Development
To run the bot on local machine you need a way to expose a web url from your machine, this can be done with tools like [ngrok.io](https://ngrok.com).
After setting up the URL run the bot and provide the settings
```python
python bot.py --token {your-token} --url {ngrok-url} --port 8443
```
"
62,citruspi/Spotify-Notifications,Objective-C,"## Spotify Notifications

[![Build Status](https://travis-ci.org/citruspi/Spotify-Notifications.png?branch=master)](https://travis-ci.org/citruspi/Spotify-Notifications)

Spotify Notifications does nothing more than display a notification when:

- A song goes from ""paused"" to ""playing"" _(optional)_
- A new song is played

## Contributing

Pull requests are more than welcome!

In your pull request, include a __separate__ commit adding yourself to `contributors.md`.

## Licenses

### Spotify Notifications

__The code is licensed under the MIT license. The icon - the `icon.icns` file is not, however. That is licensed to Spotify AB Inc.__

Copyright © 2013 Mihir Singh me@mihirsingh.com

Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the “Software”), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED “AS IS”, WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.

### GBLaunchAtLogin

__GBLaunchAtLogin was used to implement the start on login option and was written by @lmirosevic__

It is published under the Apache 2.0 License, a copy of which is included.

### MASShortcut

__MASShortcut was used to implement the global shortcut and was written by @shpakovski__

It is published under the 2-clause BSD license, a copy of which is included.
"
63,charlie86/spotifyr,R,"
<!-- README.md is generated from README.Rmd. Please edit that file -->

# spotifyr

<!-- badges: start -->

[![CRAN\_Status\_Badge](http://www.r-pkg.org/badges/version/spotifyr?color=brightgreen)](https://cran.r-project.org/package=spotifyr)
![](http://cranlogs.r-pkg.org/badges/spotifyr?color=brightgreen)
[![CRAN\_time\_from\_release](https://www.r-pkg.org/badges/ago/spotifyr)](https://cran.r-project.org/package=spotifyr)
[![metacran
downloads](https://cranlogs.r-pkg.org/badges/spotifyr)](https://cran.r-project.org/package=spotifyr)
[![DOI](https://zenodo.org/badge/DOI/10.5281/zenodo.5638489.svg)](https://doi.org/10.5281/zenodo.5638489)
<!-- badges: end -->

## Overview

spotifyr is an R wrapper for pulling track audio features and other
information from Spotify’s Web API in bulk. By automatically batching
API requests, it allows you to enter an artist’s name and retrieve their
entire discography in seconds, along with Spotify’s audio features and
track/album popularity metrics. You can also pull song and playlist
information for a given Spotify User (including yourself!).

## Installation

CRAN version 2.2.3 (recommended)

``` r
install.packages('spotifyr')
```

Development version

``` r
devtools::install_github('charlie86/spotifyr')
```

## Authentication

First, set up a Dev account with Spotify to access their Web API
[here](https://developer.spotify.com/my-applications/#!/applications).
This will give you your `Client ID` and `Client Secret`. Once you have
those, you can pull your access token into R with
`get_spotify_access_token()`.

The easiest way to authenticate is to set your credentials to the System
Environment variables `SPOTIFY_CLIENT_ID` and `SPOTIFY_CLIENT_SECRET`.
The default arguments to `get_spotify_access_token()` (and all other
functions in this package) will refer to those. Alternatively, you can
set them manually and make sure to explicitly refer to your access token
in each subsequent function call.

``` r
Sys.setenv(SPOTIFY_CLIENT_ID = 'xxxxxxxxxxxxxxxxxxxxx')
Sys.setenv(SPOTIFY_CLIENT_SECRET = 'xxxxxxxxxxxxxxxxxxxxx')

access_token <- get_spotify_access_token()
```

#### Authorization Code Flow

For certain functions and applications, you’ll need to log in as a
Spotify user. To do this, your Spotify Developer application needs to
have a callback url. You can set this to whatever you want that will
work with your application, but a good default option is
`http://localhost:1410/` (see image below). For more information on
authorization, visit the offical [Spotify Developer
Guide](https://developer.spotify.com/documentation/general/guides/authorization-guide/).

<img src=""man/figures/spotifyr_auth_screenshot.png"" width=""50%"" />

## Usage

### What Was the Beatles’ Favorite Key?

``` r
library(spotifyr)
beatles <- get_artist_audio_features('the beatles')
```

``` r
library(dplyr)
library(purrr)
library(knitr)

beatles %>% 
    count(key_mode, sort = TRUE) %>% 
    head(5) %>% 
    kable()
```

| key\_mode |   n |
|:----------|----:|
| D major   | 115 |
| C major   | 111 |
| G major   |  90 |
| A major   |  80 |
| E major   |  68 |

### Get your most recently played tracks

``` r
library(lubridate)
#> Warning: package 'lubridate' was built under R version 4.1.1

get_my_recently_played(limit = 5) %>% 
    mutate(
        artist.name = map_chr(track.artists, function(x) x$name[1]),
        played_at = as_datetime(played_at)
        ) %>% 
    select(
      all_of(c(""track.name"", ""artist.name"", ""track.album.name"", ""played_at""))
      ) %>% 
    kable()
```

| track.name                   | artist.name | track.album.name                                                                                   | played\_at          |
|:-----------------------------|:------------|:---------------------------------------------------------------------------------------------------|:--------------------|
| Look For Me (I’ll Be Around) | Neko Case   | Blacklisted                                                                                        | 2021-11-01 17:16:12 |
| Don’t Forget Me              | Neko Case   | Middle Cyclone                                                                                     | 2021-11-01 17:12:50 |
| Magpie to the Morning        | Neko Case   | The Worse Things Get, The Harder I Fight, The Harder I Fight, The More I Love You (Deluxe Edition) | 2021-11-01 17:09:42 |
| Margaret vs. Pauline         | Neko Case   | Fox Confessor Brings The Flood (Bonus Track Version)                                               | 2021-11-01 17:06:45 |
| Runnin’ Out Of Fools         | Neko Case   | Blacklisted                                                                                        | 2021-11-01 17:03:52 |

### Find Your All Time Favorite Artists

``` r
get_my_top_artists_or_tracks(type = 'artists', 
                             time_range = 'long_term', 
                             limit = 5) %>% 
    select(.data$name, .data$genres) %>% 
    rowwise %>% 
    mutate(genres = paste(.data$genres, collapse = ', ')) %>% 
    ungroup %>% 
    kable()
```

| name                | genres                                                |
|:--------------------|:------------------------------------------------------|
| Japanese Breakfast  | art pop, eugene indie, indie pop, philly indie        |
| Balthazar           | belgian indie, belgian rock, dutch indie, ghent indie |
| Haley Bonar         | melancholia, stomp and holler                         |
| Angus & Julia Stone | australian indie folk, indie folk, stomp and holler   |
| Buildings Breeding  | indie fuzzpop                                         |

### Find your favorite tracks at the moment

``` r
get_my_top_artists_or_tracks(type = 'tracks', 
                             time_range = 'short_term', 
                             limit = 5) %>% 
    mutate(
        artist.name = map_chr(artists, function(x) x$name[1])
        ) %>% 
    select(name, artist.name, album.name) %>% 
    kable()
```

| name                                 | artist.name   | album.name                       |
|:-------------------------------------|:--------------|:---------------------------------|
| Can’t Walk That Back                 | Tristen       | Can’t Walk That Back             |
| You’re Too Weird                     | Fruit Bats    | Tripper                          |
| California (All the Way)             | Luna          | Bewitched                        |
| Don’t Blame Your Daughter (Diamonds) | The Cardigans | Super Extra Gravity (Remastered) |
| Born In The ’70s                     | Fruit Bats    | Spelled In Bones                 |

### What’s the most joyful Joy Division song?

My favorite audio feature has to be “valence,” a measure of musical
positivity.

``` r
joy <- get_artist_audio_features('joy division')
```

``` r
joy %>% 
    arrange(-valence) %>% 
    select(.data$track_name, .data$valence) %>% 
    head(5) %>% 
    kable()
```

| track\_name                               | valence |
|:------------------------------------------|--------:|
| Passover - 2020 Digital Master            |   0.946 |
| Passover - 2007 Remaster                  |   0.941 |
| Colony - 2020 Digital Master              |   0.829 |
| Colony - 2007 Remaster                    |   0.808 |
| Atrocity Exhibition - 2020 Digital Master |   0.790 |

Now if only there was some way to plot joy…

### Joyplot of the emotional rollercoasters that are Joy Division’s albums

``` r
library(ggplot2)
library(ggridges)

ggplot(
    joy, 
    aes(x = valence, y = album_name)
    ) + 
geom_density_ridges() + 
theme_ridges() +
labs(title = ""Joyplot of Joy Division's joy distributions"", 
     subtitle = ""Based on valence pulled from Spotify's Web API with spotifyr"")
```

<img src=""man/figures/README-joyplot-1.png"" width=""100%"" />

## Sentify: A Shiny app

This [app](http://rcharlie.net/sentify/), powered by spotifyr, allows
you to visualize the energy and valence (musical positivity) of all of
Spotify’s artists and playlists.

## Dope Stuff Other People Have Done with spotifyr

The coolest thing about making this package has definitely been seeing
all the awesome stuff other people have done with it. Here are a few
examples:

[Exploring the Spotify API with R: A tutorial for beginners, by a
beginner](https://msmith7161.github.io/what-is-speechiness/), Mia Smith

[Blue Christmas: A data-driven search for the most depressing Christmas
song](https://caitlinhudon.com/2017/12/22/blue-christmas/), Caitlin
Hudon

[Sente-se triste quando ouve “Amar pelos dois”? Não é o único (Do you
feel sad when you hear “Love for both?” You’re not
alone)](https://rr.sapo.pt/especial/112355/sente-se-triste-quando-ouve-amar-pelos-dois-nao-e-o-unico),
Rui Barros, Rádio Renascença

[Using Data to Find the Angriest Death Grips
Song](https://medium.com/@evanopp/angriest-death-grips-data-anger-502168c1c2f0),
Evan Oppenheimer

[Hierarchical clustering of David Bowie
records](https://twitter.com/WireMonkey/status/1009915034246565891?s=19),
Alyssa Goldberg

[tayloR](https://medium.com/@simranvatsa5/taylor-f656e2a09cc3), Simran
Vatsa

## Code of Conduct

Please note that the spotifyr project is released with a [Contributor
Code of
Conduct](https://contributor-covenant.org/version/2/0/CODE_OF_CONDUCT.html).
By contributing to this project, you agree to abide by its terms.
"
64,JMPerez/passport-spotify,JavaScript,"# Passport-Spotify

[Passport](http://passportjs.org/) strategy for authenticating with [Spotify](http://www.spotify.com/)
using the OAuth 2.0 API.

This module lets you authenticate using Spotify in your Node.js applications.
By plugging into Passport, Spotify authentication can be easily and
unobtrusively integrated into any application or framework that supports
[Connect](http://www.senchalabs.org/connect/)-style middleware, including
[Express](http://expressjs.com/).

For more information about Spotify's OAuth 2.0 implementation, check their
[Web API Authorization Guide](https://developer.spotify.com/web-api/authorization-guide/).

## Installation

    $ npm install passport-spotify

## Usage

### Configure Strategy

The Spotify authentication strategy authenticates users using a Spotify account
and OAuth 2.0 tokens. The strategy requires a `verify` callback, which accepts
these credentials and calls `done` providing a user, as well as `options`
specifying a client ID, client secret, and callback URL.

```javascript
const SpotifyStrategy = require('passport-spotify').Strategy;

passport.use(
  new SpotifyStrategy(
    {
      clientID: client_id,
      clientSecret: client_secret,
      callbackURL: 'http://localhost:8888/auth/spotify/callback',
    },
    function (accessToken, refreshToken, expires_in, profile, done) {
      User.findOrCreate({spotifyId: profile.id}, function (err, user) {
        return done(err, user);
      });
    }
  )
);
```

### Authenticate Requests

Use `passport.authenticate()`, specifying the `'spotify'` strategy, to
authenticate requests.

For example, as route middleware in an [Express](http://expressjs.com/)
application:

```javascript
app.get('/auth/spotify', passport.authenticate('spotify'));

app.get(
  '/auth/spotify/callback',
  passport.authenticate('spotify', {failureRedirect: '/login'}),
  function (req, res) {
    // Successful authentication, redirect home.
    res.redirect('/');
  }
);
```

### Using scopes

Depending on the data you want to fetch, you may want to specify custom scopes. For more information about scopes in the Spotify Web API check [their developer site](https://developer.spotify.com/web-api/using-scopes/).

By default, no scope is passed. That means that you won't fetch information such as display name, picture or email. You can get those by using these scopes:

- `user-read-email`: Returns the email address of the user on Spotify, if it exists.
- `user-read-private`: Returns private information about the user such as display name and picture, if they are set.

You can specify the parameters in the `authenticate` call:

```javascript
app.get(
  '/auth/spotify',
  passport.authenticate('spotify', {
    scope: ['user-read-email', 'user-read-private'],
  })
);
```

### Forcing login dialog

You can force the login dialog using the `showDialog` parameter when authenticating:

```javascript
app.get(
  '/auth/spotify',
  passport.authenticate('spotify', {
    scope: ['user-read-email', 'user-read-private'],
    showDialog: true,
  })
);
```

## Examples

For a complete, working example, refer to the [login example](https://github.com/jmperez/passport-spotify/tree/master/examples/login).

You can get your keys on [Spotify - My Applications](https://developer.spotify.com/my-applications).

## Tests

    $ npm install --dev
    $ npm test

## Build and Coverage Status

[![Actions Status](https://github.com/JMPerez/passport-spotify/workflows/build/badge.svg)](https://github.com/JMPerez/passport-spotify/actions)

## License

[The MIT License](http://opensource.org/licenses/MIT)
"
65,dtcooper/raspotify,Shell,"
[<img src=""https://raw.githubusercontent.com/dtcooper/raspotify/master/raspotify.svg?sanitize=true"">](https://github.com/dtcooper/raspotify)

Raspotify is a
[Debian package and associated repository](https://en.wikipedia.org/wiki/Deb_(file_format)) for Debian Stable and other Debian Stable based/compatible OS's 
which thinly wraps the awesome
[librespot](https://github.com/librespot-org/librespot) library by
[Paul Lietar](https://github.com/plietar) and others up as a [systemd](https://en.wikipedia.org/wiki/Systemd) [daemon](https://en.wikipedia.org/wiki/Daemon_(computing)). **Librespot, and therefore Raspotify, requires a premium account.**

Raspotify is primarily intended to be used in a *[headless enviroment](https://en.wikipedia.org/wiki/Headless_computer)*.

*For desktop OS's [spotifyd](https://github.com/Spotifyd/spotifyd) offers similar functionality and is probably a better choice.*

If you're looking for a turnkey audio solution for Raspberry Pi's with Spotify Connect support we recommend [moOde™ audio player](https://moodeaudio.org/).

## Dependencies

**Raspotify will not install without these packages and minimum versions:**
* [libc6 (>= 2.31)](https://tracker.debian.org/pkg/libc6)
* [systemd (>= 247.3)](https://tracker.debian.org/pkg/systemd)
* [libasound2 (>= 1.2.4)](https://tracker.debian.org/pkg/libasound2)
* [alsa-utils (>= 1.2.4)](https://tracker.debian.org/pkg/alsa-utils)
* [libpulse0 (>= 14.2)](https://tracker.debian.org/pkg/libpulse0)
* [init-system-helpers (>= 1.60)](https://tracker.debian.org/pkg/init-system-helpers)

## Installation

***The easy way***

```sh
sudo apt-get -y install curl && curl -sL https://dtcooper.github.io/raspotify/install.sh | sh
```

***The hard way***

Essentially, here's what the easy installer does minus the compatibility checks:

```sh
# Install curl
sudo apt-get -y install curl

# Add the raspotify key to the keyring
curl -sSL https://dtcooper.github.io/raspotify/key.asc | sudo tee /usr/share/keyrings/raspotify_key.asc  > /dev/null
sudo chmod 644 /usr/share/keyrings/raspotify_key.asc

# Create the apt repo
echo 'deb [signed-by=/usr/share/keyrings/raspotify_key.asc] https://dtcooper.github.io/raspotify raspotify main' | sudo tee /etc/apt/sources.list.d/raspotify.list

# Install package
sudo apt-get update
sudo apt-get -y install raspotify
```

Or you can just download the latest .deb package and install it manually from here:
* [`raspotify-latest_armhf.deb`](https://dtcooper.github.io/raspotify/raspotify-latest_armhf.deb)
* [`raspotify-latest_arm64.deb`](https://dtcooper.github.io/raspotify/raspotify-latest_arm64.deb)
* [`raspotify-latest_amd64.deb`](https://dtcooper.github.io/raspotify/raspotify-latest_amd64.deb)

### [Support for ARMv6 (Pi v1 and Pi Zero v1.x) has been dropped.](https://github.com/dtcooper/raspotify/commit/345f15c5d695736db8f90d1acc7e542803db5ca0)

[0.31.8.1](https://github.com/dtcooper/raspotify/releases/tag/0.31.8.1) was the last version to be built with ARMv6 support.

*You can install and run that version on an ARMv6 device, but you will never get updates and doing so is completely unsupported.*

```sh
# Install curl and download raspotify_0.31.8.1
sudo apt-get -y install curl && curl -sL https://github.com/dtcooper/raspotify/releases/download/0.31.8.1/raspotify_0.31.8.1.librespot.v0.3.1-54-gf4be9bb_armhf.deb

# Install raspotify_0.31.8.1
sudo apt install ./raspotify_0.31.8.1.librespot.v0.3.1-54-gf4be9bb_armhf.deb
```

***Don't forget to checkout the [wiki](https://github.com/dtcooper/raspotify/wiki) for tips, tricks and configuration info!!!***

The [Basic Setup Guide](https://github.com/dtcooper/raspotify/wiki/Basic-Setup-Guide) is particularly useful. 

## Bug Reports and Feature Requests

**Please read the [Troubleshooting wiki page](https://github.com/dtcooper/raspotify/wiki/Troubleshooting) before opening an issue or asking a question.**

As stated above Raspotify is just a package. The actual program that's run by the service is [librespot](https://github.com/librespot-org/librespot). Unless it's a packaging issue or a basic confguration question this is the wrong place to file your bug reports and/or feature requests.

## Disclaimer

Per librespot's disclaimer, using librespot &mdash; the underlying library behind
raspotify &mdash; to connect to Spotify's API *""is probably forbidden by them.""*
We've not received word about that, however use at your own risk.

**Raspotify and librespot are intended for personal private use. Please DO NOT use Raspotify or librespot in any sort of commercial and/or public presentation. Doing so is a flagrant violation of Spotify's terms of service and could potentially lead to them blocking all Raspotify and librespot users.**

## License

This project is licensed under the MIT License - see the [`LICENSE`](LICENSE)
file for details.

## Acknowledgments

Special thanks to [Paul Lietar](https://github.com/plietar), [librespot org](https://github.com/librespot-org)
and its [many contributors](https://github.com/librespot-org/librespot/graphs/contributors) for [librespot](https://github.com/librespot-org/librespot),
which Raspotify packages. Without [librespot](https://github.com/librespot-org/librespot),
Raspotify would simply not exist.

### 📻 *""And Now, For Something Completely Different!""* 🎙️

Raspotify's author [David Cooper](https://jew.pizza/) has abandoned being a software
engineer to pursue a career as a radio personality. If you find Raspotify useful, you
can support him by checking out his [radio work here](https://jew.pizza/) or
[give him a follow on Twitter](https://twitter.com/dtcooper).

On a related note, [@JasonLG1979](https://github.com/JasonLG1979) has become the
de-facto maintainer of the project. So an additional thank you to him as well.

If you'd like to buy Jason a Red Bull you can [❤️ Sponsor Him](https://github.com/sponsors/JasonLG1979).

## Final Note

***...and remember kids, have fun!***
"
66,jpochyla/psst,Rust,"# Psst

Fast Spotify client with native GUI, without Electron, built in Rust. Very early in development, lacking in features, stability, and general user experience. It is being tested only on Mac so far, but aims for full Windows and Linux support. Contributions welcome!

**Note:** Spotify Premium account is required.

[![Build](https://github.com/jpochyla/psst/actions/workflows/build.yml/badge.svg)](https://github.com/jpochyla/psst/actions)

![Screenshot](./psst-gui/assets/screenshot.png)

##### Pre-built binaries

GitHub Actions automatically runs when new commits are pushed to `master`. To download prebuilt binaries for x86_64 macOS, Windows or Ubuntu, [go to the newest successfully built action](https://nightly.link/jpochyla/psst/workflows/build/master).

##### Linux

Our user-interface library, Druid, has two possible backends to choose from on Linux: GTK and pure X11, with Wayland backend in the works. The default linux backend is GTK. Before building on Linux, make sure the required dependencies are installed. 

Debian/Ubuntu:

```shell
sudo apt-get install libssl-dev libgtk-3-dev libcairo2-dev libasound2-dev
```

RHEL/Fedora:

```shell
sudo dnf install openssl-devel gtk3-devel cairo-devel alsa-lib-devel
```

##### Building

On all platforms, the **latest Rust stable** (at least 1.54.0) is needed.

Development build:
```shell
git submodule update --recursive --init
cargo build
```

Release build:
```shell
git submodule update --recursive --init
cd psst-gui
cargo build --release
# Use `cargo install cargo-bundle` and `cargo bundle --release` for building the installation bundle (i.e. macOS .app)
```

##### Running and configuration

```shell
cd psst-gui
cargo run
# Use `cargo run --release` for the release build.
```

##### Roadmap

- [x] Vorbis track playback
- [x] Browsing saved albums and tracks
- [x] Save / unsave albums and tracks
- [x] Browsing followed playlists
- [x] Search for artist, albums, and tracks
- [x] Podcast support
- [x] Media keys control
- [x] Open Spotify links through search bar
- [x] Audio volume control
- [x] Audio loudness normalization
- [x] Genre playlists and ""For You"" content
- [x] Dark theme
- [ ] Resilience to network errors (automatically retry timed-out requests)
- [ ] Managing playlists
    - Follow / unfollow
    - Add / remove track
    - Reorder tracks
    - Rename playlist
    - Playlist folders
- [ ] Playback queue
- [ ] React to audio output device events
    - Pause after disconnecting headphones
    - Transfer playback after connecting headphones
- [ ] Better caching
    - Cache as much as possibly of WebAPI responses
    - Visualize cache utilization
        - Total cache usage in the config dialog
        - Show time origin of cached data, allow to refresh
- [ ] Trivia on the artist page, Wikipedia links
- [ ] Downloading encrypted tracks
- [ ] Reporting played tracks to Spotify servers
- [ ] OS-specific application bundles
- UI
    - [ ] Rethink current design, consider a two-pane layout
        - Left pane for browsing
        - Right pane for current playback
    - [ ] Detect light/dark OS theme
    - [ ] Robust error states, ideally with retry button
    - [ ] Correct playback highlight
        - Highlight now-playing track only in the correct album / playlist
        - Keep highlighted track in viewport
    - [ ] Paging or virtualized lists for albums and tracks
    - [ ] Grid for albums and artists
    - [ ] Robust active/inactive menu visualization
    - [ ] Save last route, volume, playback state

##### Development

Contributions are very welcome! Project structure:

- `/psst-core` - Core library, takes care of Spotify TCP session, audio file retrieval, decoding, audio output, playback queue, etc.
- `/psst-gui` - GUI application built with [Druid](https://github.com/linebender/druid)
- `/psst-cli` - Example CLI that plays a track.  Credentials need to be configured in the code.
- `/psst-protocol` - Internal Protobuf definitions used for Spotify communication.

##### Privacy Policy

Psst connects only to the official Spotify servers, and does not call home. Cache of various things is stored locally, and can be deleted at any time. User credentials are not stored at all (re-usable authentication token from Spotify is used instead).

##### Thanks

This project would not exist without:

- Big thank you to [`librespot`](https://github.com/librespot-org/librespot), the Open Source Spotify client library for Rust.  Most of `psst-core` is directly inspired by the ideas and code of `librespot`, although with a few differences:
    - Spotify Connect (remote control) is not supported yet.
    - Psst is completely synchronous, without `tokio` or other `async` runtime, although it will probably change in the future.
    - Psst is using HTTPS-based CDN audio file retrieval, similar to the official Web client or [`librespot-java`](https://github.com/librespot-org/librespot-java), instead of the channel-based approach in `librespot`.
- [`druid`](https://github.com/linebender/druid) native GUI library for Rust.
- [`ncspot`](https://github.com/hrkfdn/ncspot) cross-platform ncurses Spotify client written in Rust, using `librespot`.
- ...and of course other libraries and projects.
"
67,SecUpwN/Spotify-AdKiller,Shell,"# Spotify-AdKiller (for LINUX)

Your Party with [Spotify](https://www.spotify.com) - without ads!

[![Spotify-AdKiller](https://github.com/SecUpwN/Spotify-AdKiller/raw/master/Spotify-AdKiller.png)](https://github.com/SecUpwN/Spotify-AdKiller)

We all love Spotify, but sometimes people (like us) want to throw a party without having to listen to interrupting ads before having bought [Spotify Premium](https://www.spotify.com/premium/). Well, with this killer project, now you can!

**This is for testing purposes ONLY!** Spotify is a fantastic service and worth every penny. This script is **NOT** meant to circumvent buying premium! Please do consider switching to premium to support Spotify - especially if you're going to use it on mobile. If the script does not work for you, help us improve it!

### Dependencies

Utilities used in the script:

  - xprop
  - pacmd
  - notify-send
  - **xdotool**

New dependencies are highlighted in bold. Please make sure to install these before upgrading the script.

You will also need to have one of the following audio/media players installed:

  - mpv
  - vlc
  - mplayer
  - mpg321
  - avplay
  - ffplay

Please consult the Settings section below for information on setting a custom audio player.

[![openSUSE](https://news.opensuse.org/wp-content/uploads/2014/11/468x60.png)](http://www.opensuse.org/)

Install all utilities + VLC on **[openSUSE](http://www.opensuse.org/)** with:

    sudo zypper in binutils pulseaudio-utils libnotify-tools xdotool vlc

[![Ubuntu](http://spreadubuntu.neomenlo.org/files/banner-468x60.png)](http://www.ubuntu.com/)

Install all utilities + VLC on **[Ubuntu](http://www.ubuntu.com/)** with:

    sudo apt-get install x11-utils pulseaudio-utils libnotify-bin xdotool vlc

[![Arch Linux](http://www.faderweb.de/img/archlinux.jpg)](http://www.archlinux.org/)

There is an [AUR Package](https://aur.archlinux.org/packages/spotify-adkiller-git/) for  **[Arch Linux](http://www.archlinux.org/)**. To install:

    git clone https://aur.archlinux.org/spotify-adkiller-git.git
    cd spotify-adkiller-git
    makepkg -si

### Installation

**Automated Installation**

Grab the latest release of `Spotify-AdKiller`:

    git clone https://github.com/SecUpwN/Spotify-AdKiller.git

Run the provided installer:

    cd Spotify-AdKiller
    ./install.sh

**Troubleshooting**

- `Spotify-AdKiller` has been tested to work with Spotify 0.9.x. Support for the 1.0.x beta releases has been implemented, but still needs more testing. If you run into any bugs while using `Spotify-AdKiller` with a Spotify beta release please report them on the bug tracker.

- If you've installed Spotify from any source other than the official repository please make sure that the `spotify` executable is in your `PATH`.

    You can create a symbolic link, if necessary (e.g. linking `my-spotify` to `spotify` if you are using the user installation of [spotify-make](https://github.com/leamas/spotify-make)).

- The installer script will install `Spotify-AdKiller` to `$HOME/bin`, which should be recognized by Ubuntu and openSUSE.

- If `$HOME/bin` didn't exist before, a relog might be necessary to complete the installation.

    Technical explanation: Ubuntu automatically adds `$HOME/bin` to your `PATH` if it exists when you log in. Relogging reloads `$HOME/.profile` and updates your `PATH`.

    If the script doesn't work after relogging you can either [manually add](http://askubuntu.com/q/3744) `$HOME/bin` to your `PATH` or follow the installation instructions below. This also applies if you're using a distro that is configured differently than Ubuntu/OpenSUSE or if you want to install the script in a custom location.

- If GUI and text are too small, you can scale the application by editing the desktop file:

        cd /home/<your username>/.local/share/applications
        sudo gedit Spotify\ \(AdKiller\).desktop

    Add `--force-device-scale-factor=2` to scale it with factor 2:

        Exec=spotify-wrapper.sh --force-device-scale-factor=2 %U

**Manual Installation**

1. Copy `spotify-adkiller.sh` and `spotify-wrapper.sh` to your `PATH` (e.g. `$HOME/bin` or `/usr/local/bin` on openSUSE and Ubuntu) and make both of them executable with `chmod +x spotify-adkiller.sh` and `chmod +x spotify-wrapper.sh`.

2. Copy `Spotify (AdKiller).desktop` to `$HOME/.local/share/applications` or any other folder your distro reads `.desktop` launchers from (e.g. `/usr/share/applications`, `/usr/local/share/applications`).

The default configuration file will be written automatically on the first startup of the script.

### Usage

If you installed `Spotify-AdKiller` correctly, a new entry called `Spotify (AdKiller)` should appear in your menu. This launcher will start Spotify in ad-free mode. The script will terminate automatically as soon as Spotify exits. As mentioned before, **this is for testing purposes ONLY** so use this new entry only when your purposes are **testing**.

**Important note:** Please make sure you don't have notifications disabled in your Spotify configuration (`ui.track_notifications_enabled=true` in `~/.config/spotify/User/<your username>/prefs`).

### Settings

The configuration file for `Spotify-AdKiller` is located under `$HOME/.config/Spotify-AdKiller/Spotify-AdKiller.cfg`. There are several settings that control how `Spotify-AdKiller` operates:

**Modes**

`CUSTOM_MODE` controls the ad blocking mode. The following modes are available:

- `simple`: mute Spotify, unmute when ad is over
- `interstitial`: mute Spotify, play random local track, stop and unmute when ad is over
    + If the local track is shorter than the ad, `Spotify-AdKiller` will automatically try to loop it. This will only work with players that support a loop option. If you are planning to use this feature with a custom player make sure to also supply a custom loop option in your configuration file.
- `continuous`: mute Spotify, play random local track, stop and unmute when track is over
    + You can skip the local track as soon as the ad is over. To do so, simply press Play or Forward/Next in your Spotify client (or use the corresponding hotkeys).
    + Please note that the `continuous` ad blocking mode works best with tracks that are longer than the average ad duration (≈30-45s). If a custom track ends prematurely or is shorter than the current ad, `Spotify-AdKiller` will switch to the next random local track in line.

The default ad blocking mode is `continuous`.

`Spotify-AdKiller` will always fall back to `simple` mode if no local tracks are found and/or if no supported music player is available on the system.

**Local Playback**

The following settings control local music playback during ads:

- `CUSTOM_PLAYER`: local music player to use; chosen automatically by default
- `CUSTOM_LOOPOPT`: loop option for custom player (e.g. `-loop 0`); we recommend setting this if you are planning to use interstitial adblocking mode
- `CUSTOM_VOLUME`: volume of local playback; set to 100 by default
- `CUSTOM_MUSIC`: local track to play / local music directory to choose tracks from; set to XDG standard music directory by default (e.g. `$HOME/Music`)

**Debug Setting**

You can make the CLI output more verbose and enable the log file by setting `DEBUG` to `1`. The log will be written to `$HOME/.Spotify-AdKiller.log` and replaced each time `Spotify-AdKiller` runs.

### Important Notes

Please make sure to always use the provided launcher when running Spotify. Under some circumstances Spotify might remain muted when exiting the application. This is a technical limitation with `PulseAudio`. `Spotify-AdKiller` automatically unmutes Spotify when initially run.

If, for some reason, Spotify does remain muted you can use the following command to unmute it manually while it's running:

```bash
for i in $(LC_ALL=C pactl list | grep -E '(^Sink Input)|(media.name = \""Spotify\""$)' | cut -d \# -f2 | grep -v Spotify); do pactl set-sink-input-mute ""$i"" no; done
```

### Similar Projects

- [blockify](https://github.com/mikar/blockify) - automatic/blacklist-based ad-blocker written in Python
- [spotify_ad_blocker_linux.rb](https://github.com/superr4y/hacks/blob/master/spotify/spotify_ad_blocker_linux.rb) - automatic ad-blocker written in Ruby
- [spotify-blacklist-mute](https://github.com/ysangkok/spotify-blacklist-mute) - blacklist-based muting, written in Bash

### License

Many people have contributed to make our script become what it is today (huge shout-out to the initial creator [pcworld](https://github.com/pcworld)). If you are like us and think that it is very sad when projects die, please accept that all code here is fully licensed under GPL v3+. Have a look at the full [License](https://github.com/SecUpwN/Spotify-AdKiller/blob/master/LICENSE). Contribute pull requests!

**This product is not endorsed, certified or otherwise approved in any way by Spotify. Spotify is the registered trade mark of the Spotify Group. Use your brainz prior to formatting your HDD.**
"
68,gk4m/vue-spotify,Vue,"# vue-spotify
Spotify client built with vue.js / vuex.

Authenticated users must have a valid Spotify Premium subscription because if it doesn't, Web Playback SDK will not work.

![alt text](https://github.com/gk4m/vue-spotify/blob/master/public/example/BrowseView.png ""Browse"")
![alt text](https://github.com/gk4m/vue-spotify/blob/master/public/example/SearchView.png ""Search"")
![alt text](https://github.com/gk4m/vue-spotify/blob/master/public/example/PlaylistView.png ""Playlist"")

## Features

#### Authorization
* Login
* Logout
* Refresh token

#### Search
* Get Spotify Catalog information about artists, albums, tracks or playlists that match a keyword string.

#### Browse
* Get a List of Categories
* Get New Releases

#### Playlist manipulation
* Get a user's playlists
* Create playlists

#### Follow
* Follow a playlist
* Unfollow a playlist

#### Player
* Get a user's available devices
* Connect to another device
* Start/Resume a User's Playback
* Get the User's Currently Playing Track
* Set volume
* Skip User’s Playback To Next Track
* Skip User’s Playback To Previous Track
* Seek playback to a given position
* Toggle Shuffle For User’s Playback
* Set Repeat Mode On User’s Playback

## Read more
* [Spotify web API](https://developer.spotify.com/documentation/web-api/)
* [Web Playback SDK](https://developer.spotify.com/documentation/web-playback-sdk/)

"
69,tmerten/spotify-ripper,Python,"# spotify-ripper

A fork of [spotify-ripper](https://github.com/robbeofficial/spotifyripper) that uses [pyspotify](https://github.com/mopidy/pyspotify) v2.x

Spotify-ripper is a small ripper script for Spotify that rips Spotify URIs to MP3 files and includes ID3 tags and cover art.

**Note that stream ripping violates the libspotify's ToS**

## Features

* real-time VBR or CBR ripping from spotify PCM stream

* writes id3 tags (including album covers)

* creates files and directories based on the following structure artist/album/artist - song.mp3

* optionally skip existing files

* accepts tracks, playlists, albums, and artist URIs

* search for tracks using Spotify queries

* options for interactive login (no password in shell history) and relogin using previous credentials

* option to remove tracks from playlist after successful ripping

## Usage

```shell
usage: ripper [-h] [-b {160,320,96}] [-c] [-d DIRECTORY] [-u USER]
              [-p PASSWORD] [-l] [-m] [-o] [-v VBR]
              uri

Rips Spotify URIs to MP3s with ID3 tags and album covers

positional arguments:
  uri                   Spotify URI (either URI, a file of URIs or a search query)

optional arguments:
  -h, --help            show this help message and exit
  -b {160,320,96}, --bitrate {160,320,96}
                        Bitrate rip quality [Default=320]
  -c, --cbr             Lame CBR encoding [Default=VBR]
  -d DIRECTORY, --directory DIRECTORY
                        Base directory where ripped MP3s are saved [Default=cwd]
  -u USER, --user USER  Spotify username
  -p PASSWORD, --password PASSWORD
                        Spotify password [Default=ask interactively]
  -l, --last            Use last login credentials
  -m, --pcm             Saves a .pcm file with the raw PCM data
  -o, --overwrite       Overwrite existing MP3 files [Default=skip]
  -v VBR, --vbr VBR     Lame VBR encoding quality setting [Default=0]
  -r, --remove-from-playlist
                        Delete tracks from playlist after successful ripping [Default=no]

Example usage:
    rip a single file: ./ripper.py -u user -p password spotify:track:52xaypL0Kjzk0ngwv3oBPR
    rip entire playlist: ./ripper.py -u user -p password spotify:user:username:playlist:4vkGNcsS8lRXj4q945NIA4
    search for tracks to rip: /ripper.py -l -b 160 -o ""album:Rumours track:'the chain'""
```

## Installation

### Prerequisites

* [libspotify](https://developer.spotify.com/technologies/libspotify)

* [pyspotify](https://github.com/mopidy/pyspotify)

* a Spotify binary [app key](https://devaccount.spotify.com/my-account/keys/) (spotify_appkey.key)

* [lame](http://lame.sourceforge.net)

* [eyeD3](http://eyed3.nicfit.net)

* [colorama](https://pypi.python.org/pypi/colorama)

### Mac OS X

Recommend approach uses [homebrew](http://brew.sh/) and [pyenv](https://github.com/yyuu/pyenv)

```bash
$ git clone https://github.com/jrnewell/spotify-ripper.git
$ cd spotify-ripper
$ brew install homebrew/binary/libspotify
$ sudo ln -s /usr/local/opt/libspotify/lib/libspotify.12.1.51.dylib \
    /usr/local/opt/libspotify/lib/libspotify
$ pip install --pre pyspotify
$ brew install lame
$ pip install eyeD3 --allow-external eyeD3 --allow-unverified eyeD3
$ pip install colorama
$ pyenv rehash
```

Download an application key file `spotify_appkey.key` from `https://devaccount.spotify.com/my-account/keys/` (requires a Spotify Premium Account) and move to the `spotify-ripper` directory.

### Ubuntu/Debian

Recommend approach uses [pyenv](https://github.com/yyuu/pyenv)

```bash
$ git clone https://github.com/jrnewell/spotify-ripper.git
$ cd spotify-ripper
$ sudo apt-get install lame build-essential libffi-dev
$ wget https://developer.spotify.com/download/libspotify/libspotify-12.1.51-Linux-x86_64-release.tar.gz # (assuming 64-bit)
$ cd libspotify-12.1.51-Linux-x86_64-release/
$ sudo make install prefix=/usr/local
$ cd ..
$ pip install --pre pyspotify
$ pip install eyeD3 --allow-external eyeD3 --allow-unverified eyeD3
$ pip install colorama
$ pyenv rehash
```

Download an application key file `spotify_appkey.key` from `https://devaccount.spotify.com/my-account/keys/` (requires a Spotify Premium Account) and move to the `spotify-ripper` directory.

## License

[MIT License](http://en.wikipedia.org/wiki/MIT_License)
"
70,paulyoung/Statusfy,Objective-C,"Statusfy
========

<img src=""https://d13yacurqjgara.cloudfront.net/users/6536/screenshots/1532570/statusfy.png"" alt=""Icon"" width=""400"" height=""300"" />

Spotify in your status bar.

<img src=""https://raw.github.com/paulyoung/Statusfy/master/screenshot.png"" alt=""Screenshot"" width=""439"" height=""67"" />

[Download](https://github.com/paulyoung/Statusfy/releases)
"
71,bchiang7/spotify-profile,JavaScript,"# Spotify Profile

> A web app for visualizing personalized Spotify data

Built with a bunch of things, but to name a few:

- [Spotify Web API](https://developer.spotify.com/documentation/web-api/)
- [Create React App](https://github.com/facebook/create-react-app)
- [Express](https://expressjs.com/)
- [Reach Router](https://reach.tech/router)
- [Styled Components](https://www.styled-components.com/)

## Setup

1. [Register a Spotify App](https://developer.spotify.com/dashboard/applications) and add `http://localhost:8888/callback` as a Redirect URI in the app settings
1. Create an `.env` file in the root of the project based on `.env.example`
1. `nvm use`
1. `yarn && yarn client:install`
1. `yarn dev`

## Deploying to Heroku

1. Create new heroku app

   ```bash
   heroku create app-name
   ```

2. Set Heroku environment variables

   ```bash
   heroku config:set CLIENT_ID=XXXXX
   heroku config:set CLIENT_SECRET=XXXXX
   heroku config:set REDIRECT_URI=https://app-name.herokuapp.com/callback
   heroku config:set FRONTEND_URI=https://app-name.herokuapp.com
   ```

3. Push to Heroku

   ```bash
   git push heroku master
   ```

4. Add `http://app-name.herokuapp.com/callback` as a Redirect URI in the spotify application settings

5. Once the app is live on Heroku, hitting http://app-name.herokuapp.com/login should be the same as hitting http://localhost:8888/login
"
72,kodi-community-addons/plugin.audio.spotify,Python,"# plugin.audio.spotify
Unofficial spotify plugin for Kodi, (for now) not yet available in the official Kodi repo.

Based on the opensource Librespot client. Special thanks to mherger for building the special spotty binaries, based on librespot.


## Install with repository
Install the add-on from my Kodi repo:
https://github.com/kodi-community-addons/repository.marcelveldt/raw/master/repository.marcelveldt/repository.marcelveldt-1.0.1.zip


## Support
Support is provided on the Kodi forums:
http://forum.kodi.tv/showthread.php?tid=265356
Or create issue in Github


## Help needed with maintaining !
I am very busy currently so I do not have a lot of time to work on this project or watch the forums.
Be aware that this is a community driven project, so feel free to submit PR's yourself to improve the code and/or help others with support on the forums etc. If you're willing to really participate in the development, please contact me so I can give you write access to the repo. I do my best to maintain the project every once in a while, when I have some spare time left.
Thanks for understanding!
"
73,osamaqarem/spotify-lite,TypeScript,"<p align=""center"">
  <a>
    <img width=""100px"" src=""https://github.com/osamaq/spotify-lite/raw/master/docs/assets/icon.png"">
  </a>
  <h1 align=""center"">Spotify Lite - React Native</h1>  
</p>

Based on the [Spotify Lite app for Android](https://play.google.com/store/apps/details?id=com.spotify.lite&referrer=adjust_reftag%3Dcc6cp0nuUCn33%26utm_source%3DLanding%2Bpage).

## Features

- Home feed (recently played, featured playlists and your top artists).
- Explore genres.
- Remote playback control
- View playlists, artists and albums.
- View your music library.
- Search.
- Like/follow.

## Try The App

You will need a [Spotify](https://www.spotify.com/us/) account to login.

### Android

You can download the latest APK [here](https://github.com/osamaq/spotify-lite/tree/master/docs/apk).

### iOS

You need to build from source. See [development](#Development).


### Notes

- For a real app, you don't want to perform authentication as done here. Consider using [react-native-inappbrowser](https://github.com/proyecto26/react-native-inappbrowser) or [react-native-app-auth](https://github.com/FormidableLabs/react-native-app-auth). With an in-app browser, an existing authentication session can be reused if it exists in the user's browser. It's also a sign of security to your users as the page cannot be manipulated via JavaScript by the developer.

## Screenshots

iOS

<img width=""288px"" src=""https://github.com/osamaq/spotify-lite/raw/master/docs/assets/screenshots/iphone11/splash.png""> <img width=""288px"" src=""https://github.com/osamaq/spotify-lite/raw/master/docs/assets/screenshots/iphone11/home.png"">
<img width=""288px"" src=""https://github.com/osamaq/spotify-lite/raw/master/docs/assets/screenshots/iphone11/explore.png"">
<img width=""288px"" src=""https://github.com/osamaq/spotify-lite/raw/master/docs/assets/screenshots/iphone11/favorites.png"">
<img width=""288px"" src=""https://github.com/osamaq/spotify-lite/raw/master/docs/assets/screenshots/iphone11/playlist.png"">
<img width=""288px"" src=""https://github.com/osamaq/spotify-lite/raw/master/docs/assets/screenshots/iphone11/related-artists.png"">
<img width=""288px"" src=""https://github.com/osamaq/spotify-lite/raw/master/docs/assets/screenshots/iphone11/genre.png"">
<img width=""288px"" src=""https://github.com/osamaq/spotify-lite/raw/master/docs/assets/screenshots/iphone11/search-history.png"">
<img width=""288px"" src=""https://github.com/osamaq/spotify-lite/raw/master/docs/assets/screenshots/iphone11/results.png"">
<img width=""288px"" src=""https://github.com/osamaq/spotify-lite/raw/master/docs/assets/screenshots/iphone11/search.png"">
<img width=""288px"" src=""https://github.com/osamaq/spotify-lite/raw/master/docs/assets/screenshots/iphone11/see-all-songs.png"">

### Android

<img width=""288px"" src=""https://github.com/osamaq/spotify-lite/raw/master/docs/assets/screenshots/pixel3/splash.png""> <img width=""288px"" src=""https://github.com/osamaq/spotify-lite/raw/master/docs/assets/screenshots/pixel3/home.png"">
<img width=""288px"" src=""https://github.com/osamaq/spotify-lite/raw/master/docs/assets/screenshots/pixel3/explore.png"">
<img width=""288px"" src=""https://github.com/osamaq/spotify-lite/raw/master/docs/assets/screenshots/pixel3/favorites.png"">
<img width=""288px"" src=""https://github.com/osamaq/spotify-lite/raw/master/docs/assets/screenshots/pixel3/playlist.png"">
<img width=""288px"" src=""https://github.com/osamaq/spotify-lite/raw/master/docs/assets/screenshots/pixel3/related-artists.png"">
<img width=""288px"" src=""https://github.com/osamaq/spotify-lite/raw/master/docs/assets/screenshots/pixel3/genre.png"">
<img width=""288px"" src=""https://github.com/osamaq/spotify-lite/raw/master/docs/assets/screenshots/pixel3/search-history.png"">
<img width=""288px"" src=""https://github.com/osamaq/spotify-lite/raw/master/docs/assets/screenshots/pixel3/results.png"">
<img width=""288px"" src=""https://github.com/osamaq/spotify-lite/raw/master/docs/assets/screenshots/pixel3/search.png"">
<img width=""288px"" src=""https://github.com/osamaq/spotify-lite/raw/master/docs/assets/screenshots/pixel3/see-all-songs.png"">

## Development

```bash
# Dependencies
yarn install

# iOS only
cd ios && pod install && cd ..

# Run iOS
npx react-native run-ios

# Run Android
npx react-native run-android

```

You can also refer to available [npm scripts](https://github.com/osamaq/spotify-lite/blob/b8f763b48ec95ed7e1b4cacfae750b57051cd68e/package.json#L5).


## TODO

- [ ] Details modal
- [ ] Settings Menu
- [ ] Logout
- [ ] Error UI
- [ ] Image placeholders / loading state
- [ ] Play a specific song/artist/playlist
- [ ] Music player screen
- [ ] Error boundary – Restart app button
- [ ] See All Artists - Navigate to artist
"
74,WebDevSimplified/Spotify-Landing-Page-Redesign,CSS,
75,qrpike/spotify-playlist-downloader,CoffeeScript,"# Spotify Playlist Downloader

Download an entire spotify playlist ( FROM SPOTIFY @ 160kbps ) to your local machine.

Also upon download it writes the ID3 data to the file.

###To install:
Install nodejs if you haven't already. ( [NodeJS Downloads](http://nodejs.org/download/) )

	npm install -g spotify-playlist-downloader

You will also need ffmpeg installed.

	In mac terminal: brew install ffmpeg


###Available Options

	
	Usage: spotify-playlist-downloader [options]
	
	Options:

	    -h, --help                   output usage information
	    -V, --version                output the version number
	    -u, --username [username]    Spotify Username (required)
	    -p, --password [password]    Spotify Password (required)
	    -l, --playlist [playlist]    Spotify URI for playlist
	    -d, --directory [directory]  Directory you want to save the mp3s to, default: HOME/spotify-mp3s
	


####So if you wanted to download ""Top 100 Hip-Hop Tracks on Spotify"". You would use the following command:

	spd -u yourusername -p yourpassword -l spotify:user:spotify:playlist:06KmJWiQhL0XiV6QQAHsmw

`spd` is the shorthand for `spotify-playlist-downloader`. You can use either one.

####The output should look something like:

![image](spotify-downloader.png)



###Must haves:

- Spotify Premium Account ( haven't tried it on a free account )
- Only tested on Mac OSX 10.10 ( Should work on Linux and Windows as well??? )

### Disclaimer:

- This was done purely as an academic exercise.
- I do not recommend you doing this illegally or against Spotify's terms of service.
"
76,xou816/spot,Rust,"# Spot [![spot-snapshots](https://github.com/xou816/spot/actions/workflows/spot-snapshots.yml/badge.svg?branch=master)](https://github.com/xou816/spot/actions/workflows/spot-snapshots.yml)

Gtk/Rust native Spotify client for the GNOME desktop. **Only works with premium accounts!**

Based on [librespot](https://github.com/librespot-org/librespot/).

![Spot screenshot](./data/appstream/2.png)

## Installing

<a href='https://flathub.org/apps/details/dev.alextren.Spot'><img width='130' alt='Download on Flathub' src='https://flathub.org/assets/badges/flathub-badge-en.png'/></a>

## Usage notes

### Credentials

It is recommended to install a libsecret compliant keyring application, such as [GNOME Keyring](https://wiki.gnome.org/action/show/Projects/GnomeKeyring) (aka seahorse). This will allow saving your password securely between launches.

In GNOME, things should work out of the box. It might be a bit trickier to get it working in other DEs: see this [ArchWiki entry](https://wiki.archlinux.org/index.php/GNOME/Keyring) for detailed explanations on how to automatically start the daemon with your session.

Bear special attention to the fact that to enable automatic login, you might have to use the same password for your user account and for the keyring, and that the keyring might need to be [set as default](https://wiki.archlinux.org/index.php/GNOME/Keyring#Passwords_are_not_remembered).

See [this comment](https://github.com/xou816/spot/issues/92#issuecomment-801852593) for more details!

### Login in with Facebook

...is not supported. However, you can update your account in order to be able to log in with a username and password [as explained in this issue](https://github.com/xou816/spot/issues/373).


### Settings

Spot can also be configured via `gsettings` if you want to change the audio backend, the song bitrate, etc. [A GUI is planned but not available yet.](https://github.com/xou816/spot/issues/142)

### Seek bar warping
It is possible to click on the seek bar to navigate to that position in a song. If you are having issues with this not working you may have [gtk-primary-button-warps-slider](https://docs.gtk.org/gtk3/property.Settings.gtk-primary-button-warps-slider.html) set to false.
In order to fix this issue set the value to true in your gtk configuration.

### Scrobbling

Scrobbling is not supported directly by Spot. However, you can use a tool such a [rescrobbled](https://github.com/InputUsername/rescrobbled) ([see #85](https://github.com/xou816/spot/issues/85)).

### Lyrics

Similarly, Spot does not display lyrics for songs, but you can use [osdlyrics](https://github.com/osdlyrics/osdlyrics)  ([see #226](https://github.com/xou816/spot/issues/226)).

### Gtk theme

Spot uses the dark theme variant by default; this can be changed using `gsettings`.

If you are using the flatpak version, don't forget to install your theme with flatpak as well. See [this comment](https://github.com/xou816/spot/issues/209#issuecomment-860180537) for details.

Similarly, snap also requires that you install the corresponding snap for your theme. See [this comment](https://github.com/xou816/spot/issues/338#issuecomment-975543476) for details.

## Features

**Only works with premium accounts!**

- playback control (play/pause, prev/next, seeking, shuffle, repeat (none, all, song))
- selection mode: easily browse and select mutliple tracks to queue them
- browse your saved albums and playlists
- search albums and artists
- view an artist's releases
- view users' playlists
- view album info
- credentials management with Secret Service
- MPRIS integration

### Planned

- playlist management (creation and edition)
- liked tracks
- GNOME search provider?
- improved search? (track results)
- recommendations?

## Contributing

Contributions are welcome! If you wish, add yourself to the `AUTHORS` files when submitting your contribution.

For any large feature/change, please consider opening an issue first to discuss implementation and design decisions.

### Translating

Translations are managed using `gettext` and are available in the `po/` subdirectory.

**I am now experimenting an online service, [POEditor](https://poeditor.com/join/project?hash=xfVrpQfRBM), to manage translations; PRs are still welcome if you feel like using these instead!**

If you feel like it, you are welcome to open a PR to be added to the `TRANSLATORS` file!

## Building

### With GNOME Builder and flatpak

Pre-requisite: install the `org.freedesktop.Sdk.Extension.rust-stable` SDK extension with flatpak. Builder might do this for you automatically, but it will install an older version; make sure  the version installed matches the version of the Freedesktop SDK GNOME uses.

Open the project in GNOME Builder and make the `dev.alextren.Spot.development.json` configuration active. Then build :)

### Manually

Requires Rust (stable), **GTK4**, and a couple other things. Also requires **libadwaita**: it is not packaged on all distros at the moment, you might have to build it yourself!

With meson:

```
meson target -Dbuildtype=debug -Doffline=false --prefix=""$HOME/.local""
ninja install -C target
```

This will install a `.desktop` file among other things, and the spot executable will be put in `.local/bin` (you might want to add it to your path).

To build an optimized release build, use `-Dbuildtype=release` instead.

### Regenerating potfiles

When adding new `msgids`, don't forget to regenerate/update the potfiles.

```
ninja spot-pot -C target
ninja spot-update-po -C target
```

### Pulling updated strings from POEditor

We are now using POEditor and the wonderful [`poeditor-sync`](https://github.com/mick88/poeditor-sync) tool.

```
poeditor pull
```

### Regenerating sources for flatpak

Using [flatpak-cargo-generator.py](https://github.com/flatpak/flatpak-builder-tools/tree/master/cargo):

```
ninja cargo-sources.json -C target
```

### Debugging

Set the `RUST_LOG` env variable to the appropriate level.

Debug builds (flatpak) are available from the master branch on Github (see the `spot-snaphots` action).

Spot caches images and HTTP responses in `~/.cache/spot`.

Spot uses [isahc](https://github.com/sagebind/isahc), which uses libcurl, therefore you can set the `https_proxy` env variable to help with debugging. In debug mode, Spot skips SSL certificate verification.
"
77,amyreese/spotify-gnome,Python,"Spotify Gnome Integration
-------------------------

**NOTE: This project is no longer required in order to use media keys with Spotify on Gnome.  It will not receive any updates going forward.**

This program provides Gnome media key support for the
[Spotify Linux client](http://www.spotify.com/us/download/previews/).

The Spotify client supports DBus for controlling the player, using the
[MPRIS Specification](http://www.mpris.org/2.1/spec/), but does not listen for basic
media key signals provided by Gnome.  This program acts as a ""wrapper"" around Spotify
to translate media key signals from Gnome and send them to the Spotify client.

It supports the play/pause, stop, next, and previous signals, and is compatible with
both Gnome 2 and Gnome 3.

NEW Jan 2013 - Get Now Playing integration for telepathy based clients such as 
Empathy,Pidgin,Kde Telepathy Sugar using lib telepahty support from gobject-introspection - dhananjaysathe@gmail.com
Edit : Added basic advertisement filtering for advertisements in the telepathy statuses

Many thanks to [Mike Houston at kothar.net](http://kothar.net/index.php/blog/30-spotifydbus)
and [Fran Diéguez at Mabishu](http://www.mabishu.com/blog/2010/11/15/playing-with-d-bus-interface-of-spotify-for-linux/)
for their blog postings that pointed me in the right directions to get this implemented.


Installation
------------

Verify that your copy of Spotify installed its binary to `/usr/bin/spotify`:

    $ which spotify
	/usr/bin/spotify

If it was installed to a different location, you will need to edit `bin/spotify` to set
`spotify_bin` to the appropriate path.

Copy `bin/spotify` to `/usr/local/bin/spotify`, or a different path that takes precedent
over the location of your `spotify` binary:

    $ sudo install bin/spotify /usr/local/bin/

Launching `spotify` via application launcher or from the command line should now start
the wrapper first, which will then launch the real Spotify client.  Enjoy having media
keys that work for both Spotify and other media players.


Support
-------

Spotify-Gnome was created by [John Reese](http://johnmreese.com), and copyright (c) 2011.
Telepathy support - [Dhananjay Sathe](dhananjaysathe@gmail.com)
Notification support - [Matthew Bray](http://bf.mattjbray.com)
Spotify-Gnome is licensed under the MIT license.  See the LICENSE files for details.

Bugs can be reported on [Github](https://github.com/jreese/spotify-gnome/issues).

"
78,simontaen/SpotifyTokenSwap,Ruby,"Spotify Token Swap Service for Heroku
=======

To use the new [Spotify SDK](https://github.com/spotify/ios-sdk) we are required to run our own [Token Exchange Service](https://developer.spotify.com/technologies/spotify-ios-sdk/tutorial/#setting-up-your-token-exchange-service). This repository provides you with an easy installation on [Heroku](http://heroku.com/home). The current `CLIENT_ID`, `CLIENT_SECRET` and `CLIENT_CALLBACK_URL` are straight from [Spotifys Repo](https://github.com/spotify/ios-sdk/tree/master/Demo%20Projects) and work with their example apps. 


Setup
=======

* Sign up for [Heroku](https://signup.heroku.com/) and follow the first two [Getting Started Steps](https://devcenter.heroku.com/articles/getting-started-with-ruby#introduction)

Unless you are expecting **massive** traffic, the free plan will work for you. Be patient, it can take up to 60 min until you get the confirmation Mail from Heroku.

* [Clone](https://devcenter.heroku.com/articles/getting-started-with-ruby#prepare-the-app) this Repository

```bash
git clone https://github.com/simontaen/SpotifyTokenSwap.git
cd SpotifyTokenSwap
```

From here on forward it's basically following the Getting Started Guide.

* [Deploy](https://devcenter.heroku.com/articles/getting-started-with-ruby#deploy-the-app) the app using git

```bash
heroku create --http-git
git push heroku master
heroku ps:scale web=1
```

* [View logs](https://devcenter.heroku.com/articles/getting-started-with-ruby#view-logs)

```bash
heroku logs --tail
```

* Verify its running

```bash
curl https://peaceful-sierra-1249.herokuapp.com
```

and you should get a `<h1>Not Found</h1>` back. Also check the logs should show something like

```
app[web.1]: ip-10-147-165-35.ec2.internal - - [<timestamp>] ""GET / HTTP/1.1"" 404 18
app[web.1]: - -> /
app[web.1]: <your-ip> - - [<timestamp>] ""GET / HTTP/1.1"" 404 18 0.0005
heroku[router]: at=info method=GET path=""/"" host=peaceful-sierra-1249.herokuapp.com <...>
```

Or run the Spotify examples with a corrected `kTokenSwapServiceURL` and `kTokenRefreshServiceURL`.

* Your own app

As mentioned above the current code is configured to what Spotify provided us. So you need to syncronize the `CLIENT_ID`, `CLIENT_SECRET` and `CLIENT_CALLBACK_URL` between your [Spotify Account](https://developer.spotify.com/my-applications/#!/applications), your iOS App and the `spotify_token_swap.rb`.


Run Locally
=======

```bash
bundle install
foreman start
```

`foreman`is part of the [Heroku Toolbelt](https://devcenter.heroku.com/articles/getting-started-with-ruby#set-up).


Convenience
=======

I personally will host an instance on Heroku for public use as it is very annoying to go through setting everything up when you just want to try something with the SDK. I'll keep it on the free plan and won't pay much attention to it. We'll see how it goes but if the service it getting slammed it'll crash, so be polite.

```
https://peaceful-sierra-1249.herokuapp.com/swap
https://peaceful-sierra-1249.herokuapp.com/refresh
```
"
79,milgra/macmediakeyforwarder,Objective-C,"# Mac Media Key Forwarder [![Build Status](https://travis-ci.org/milgra/macmediakeyforwarder.svg?branch=master)](https://travis-ci.org/milgra/macmediakeyforwarder#)

Mac Media Key Forwarder for [iTunes](https://www.apple.com/itunes/) and [Spotify](http://www.spotify.com).

## For the latest version and bugfixes use quentinlesceller's fork : https://github.com/quentinlesceller/macmediakeyforwarder/releases

Forwards media keys to iTunes or Spotify directly.

You can prioritize which app you would like to control or you can go with the default behaviour which controls the running app.

The app runs in the menu bar.

Download the compiled application from my [Releases](https://github.com/milgra/macmediakeyforwarder/releases).

If you want even more control over what you want to control you should try [beardedspice](http://beardedspice.github.io).

**Issues you should know about**

The app listens on the event tap for key events. This causes problems in some rare cases, like 
- when changing search engine in Safari's preferences window
- when trying to allow third-party kernel extensions

In these cases simply pause Mac Media Key Forwarder from it's menu.

**Installation & MacOS Mojave Compatibility**

The app itself is compatible with Mojave, but you need to add it as trusted application in order to make it function properly.

You can do this with these steps:
1. Go to **System Preferences** > **Security & Privacy**
2. Open the **Privacy** tab, and look for **Accessibility** in the left list
3. Turn on the checkbox for **MacMediaKeyForwarder.app** in the right list
2. Look for **Automation** in the left list
3. Turn on the checkbox for **iTunes.app** and **Spotifiy.app** under **MacMediaKeyForwarder.app** in the right list
4. Run the app again

![Security Setting](security_a.png)

![Security Setting](security_b.png)

**Other milgra utilities you might be interested in**

[mac audio keepalive](https://github.com/milgra/macaudiokeepalive)

[airpods sound quality fixer](https://github.com/milgra/airpodssoundqualityfixer)

[fat fingers keyboard for iphone](https://github.com/milgra/fatfingerskeyboard)

---

**Contributors :** 
* Michael Dorner ([@michaeldorner](http://github.com/michaeldorner))
* Matt Chaput ([@mchaput](http://github.com/mchaput))
* Ben Kropf ([@ben-kropf](http://github.com/ben-kropf))
* Alejandro Iván ([@alejandroivan](http://github.com/alejandroivan))
* Sungho Lee ([@sh1217sh](http://github.com/sh1217sh))
* Björn Büschke ([@maciboy](http://github.com/maciboy))
* Sergei Solovev ([@e1ectron](http://github.com/e1ectron))
* Munkácsi Márk ([@munkacsimark](http://github.com/munkacsimark))
* Irvin Lim ([@irvinlim](https://github.com/irvinlim))
* Simon Seku ([@SimonSeku](https://github.com/SimonSeku))
* Dave Nicolson ([@dnicolson](https://github.com/dnicolson))
* teemue ([@teemue](https://github.com/teemue))
* takamu ([@takamu](https://github.com/takamu))
* Alex ([@sashoism](https://github.com/sashoism))
* Sebastiaan Pasma ([@spasma](https://github.com/spasma))
* WiktorBuczko ([@WiktorBuczko](https://github.com/WiktorBuczko))
* Andy White ([@arcwhite](https://github.com/arcwhite))
* xjbeta ([@xjbeta](https://github.com/xjbeta))
* Jules Coynel ([@jcoynel](https://github.com/jcoynel))

Thank you!!!

---

*What's new in version 3.1 :*
- Ability to hide the menu icon
- French translation

*What's new in version 3.0 :*
- Catalina compatibility

*What's new in version 2.8 :*
- Polish localization
- Fixed broken Japanese, Finnish, Dutch localization 

*What's new in version 2.7 :*
- Dutch localization 

*What's new in version 2.6 :*
- Enabled undocking status bar item 

*What's new in version 2.5 :*
- Finnish, Japanese localization
- Modified Accessibility Instructions

*What's new in version 2.3 :*
- Korean, Danish, Russian and Hungarian localization is linked back to the project ( they got lost somewhere :( )

*What's new in version 2.2 :*
- MacOS Mojave 10.14.2 fix, showing notification pop-up if tap cannot be created

*What's new in version 2.1 :*
- app brings up permission popups if permission is not granted for Accessibility and Automation Target

What's new in version 2.0 :
- app renamed to Mac Media Key Forwarder
- Hungarian localization
- updated icon
- Open At Login state is checked every time the menu is opened so it shows an updated state
- added installation steps to readme because increased MacOS security made it more confusing
- added event-tap related issues to readme because it can cause head scratches in some special cases 

What's new in version 1.9 :
- added open at login menu option
- German localization update
- Korean localization update

What's new in version 1.8 :
- added pause menu option
- added pause automatically menu option : if no music player is running macOS default behavior is used and keys are forwarded to currently active media player
- Russian localization
- German localization
- Spanish localization
- fixed headphone button issue
- added macOS Sierra compatibility if you want explicit music player control there

What's new in version 1.7 :
- fast forward/rewind is possible when iTunes is selected explicitly
- Korean localization
- rumors say that it works with TouchBar

What's new in version 1.6 :
- increased compatibility with external keyboards

What's new in version 1.5 :
- now you can explicitly prioritize iTunes or Spotify
- play button now starts up iTunes or Spotify if they are not running aaaand explicitly selected

What's new in version 1.4 :
- memory leak fixed

What's new in version 1.3 :
- previousTrack replaced with backTrack in case of iTunes for a better experience

What's new in version 1.2 :
- new icon
- source code is super tight now
- developer id signed, its a trusted app now

---
"
80,dupontgu/retro-ipod-spotify-client,Python,"# sPot

This code is meant to accompany [this project](https://hackaday.io/project/177034-spot-spotify-in-a-4th-gen-ipod-2004) in which a Spotify client is built into an iPod ""Classic"" from 2004. Everything is meant to run on a Raspberry Pi Zero W.

Since we are using the lite version of raspbian, some extra packages need to be installed:

# Instructions

1. Install updates 

```
sudo apt-get update 
sudo apt-get upgrade
```
2. Install Required Packages.

Installation for python3-pip, raspotify, python3-tk, openbox
```

sudo apt install python-setuptools python3-setuptools

sudo apt install python3-pip

sudo curl -sL https://dtcooper.github.io/raspotify/install.sh | sh

sudo apt-get install python3-tk 

sudo apt-get install redis-server

sudo apt-get install openbox

sudo apt install xorg

sudo apt-get install lightdm

sudo apt-get install x11-xserver-utils

```
3. Install Dependencies

```
pip3 install -r requirements.txt
```

4. Install pi-btaudio
```
git clone https://github.com/bablokb/pi-btaudio.git
cd pi-btaudio
sudo tools/install
```
5. Install PiGPIO
```
wget https://github.com/joan2937/pigpio/archive/master.zip
unzip master.zip
cd pigpio-master
make
sudo make install
```

6. Setup Spotify API

First Create an App at https://developer.spotify.com/dashboard/applications/
```
https://accounts.spotify.com/authorize?client_id=XXXXXXXXXXXXXXXXXXXXXXXXXXXXX&response_type=code&redirect_uri=http%3A%2F%2F127.0.0.1&scope=user-read-playback-state%20user-modify-playback-state%20user-read-currently-playing%20	app-remote-control%20streaming%20playlist-modify-public%20playlist-modify-private%20playlist-read-private%20playlist-read-collaborative
```


7. raspi-config

` sudo raspi-config`

_Console Autologin_

_Display Option -> Screen Blanking -> Off_ if you want to avoid the screen turning black after a few seconds.


8. bash_profile

In *.bash_profile* added the following (if the file is not htere, you must create it)

```
#!/bin/bash

[[ -z $DISPLAY && $XDG_VTNR -eq 1 ]] && startx -- -nocursor

# Disable any form of screen saver / screen blanking / power management

xset s off

xset s noblank
```

9. Configure xinitrc

`sudo nano /etc/X11/xinit/xinitrc`


Inside, make sure the following is there:
```
#!/bin/sh

# /etc/X11/xinit/xinitrc

# global xinitrc file, used by all X sessions started by xinit (startx)

# invoke global X session script

#. /etc/X11/Xsession

exec openbox-session #-> This is the one that launches Openbox ;)
```
10. Run ""spotifypod.py"" with autostart

`sudo nano /etc/xdg/openbox/autostart`


and add the following command to launch spotifypod.py:

```
cd /home/pi/fork/retro-ipod-spotify-client/frontend/

sudo -H -u pi python3 spotifypod.py &

sudo /home/pi/fork/retro-ipod-spotify-client/clickwheel/click &
```

_Make sure that the paths are ok with your setup!!_

in ` sudo nano /etc/xdg/openbox/environment` all the variables needed to run spotifypod.py are set( SPOTIPY_CLIENT_ID, SPOTIPY_CLIENT_SECRET,SPOTIPY_REDIRECT_URI)

```
export SPOTIPY_CLIENT_ID='your_SPOTIPY_CLIENT_ID'

export SPOTIPY_CLIENT_SECRET='your_SPOTIPY_CLIENT_SECRET'

export SPOTIPY_REDIRECT_URI='your_SPOTIPY_REDIRECT_URI'
```

11. Synchronizing Spotify data!
Last but not least, if you want to make sure all your playlists artists, etc are synchronized every time you turn on your Spotypod, you can simply modify the script view_model.py with the following at line 16:

`#spotify_manager.refresh_devices()`

`spotify_manager.refresh_data()`


instead of calling refresh_device, you can execute refresh_data. This will sync all your data and then will eceute refresh.devices. This will make the boot up way slower! but it will synchronize every single time you switch on :). 
If you dont run at least once `refresh_data()` no playlist, artist or anything related with your account will be displayed!

12. Configure Raspotify

`sudo nano /etc/default/raspotify`


Uncomment and fill the following line:

`OPTIONS=""--username <USERNAME> --password <PASSWORD>""`


And maybe you want also to consider the following:

```
# The displayed device type in Spotify clients. 

# Can be ""unknown"", ""computer"", ""tablet"", ""smartphone"", ""speaker"", ""tv"",

# ""avr"" (Audio/Video Receiver), ""stb"" (Set-Top Box), and ""audiodongle"".

DEVICE_TYPE=""smartphone""
```

# Wiring

Here is the wiring of the hardware, as of revision 1. Note that the pin numbers correlate to those referenced in [click.c](./clickwheel/click.c)

![Wiring Diagram](./.docs/sPot_schematic.png)"
81,Jvanrhijn/polybar-spotify,Python,"# polybar-spotify

This is a module that shows the current song playing and its primary artist on Spotify, with a Spotify-green underline, for people that don't want to set up mpd. If Spotify is not active, nothing is shown. If the song name is longer than `trunclen` characers (default 25), it is truncated and `...` is appended. If the song is truncated and contains a single opening parenthesis, the closing paranethsis is appended as well.

### Controls

You can add mouse controls for the player inside the module, as well. The configuration shown below uses mouse-1 for play-pause, mouse-2 for next, and mouse-3 for previous.

### Dependencies
- Python (2.x or 3.x)
- Python [`dbus`](https://pypi.org/project/dbus-python/) module
- playerctl

[![sample screenshot](https://i.imgur.com/kEluTSq.png)](https://i.imgur.com/kEluTSq.png)

### Settings
``` ini
[module/spotify]
type = custom/script
interval = 1
format-prefix = "" ""
format = <label>
exec = python /path/to/spotify/script -f '{artist}: {song}'
format-underline = #1db954
;control players (optional)
click-left = playerctl --player=spotify play-pause 
click-right = playerctl --player=spotify next 
click-middle = playerctl --player=spotify previous 
```

#### Custom arguments

##### Truncate

The argument ""-t"" is optional and sets the `trunlen`. It specifies the maximum length of the printed string, so that it gets truncated when the specified length is exceeded. Defaults to 35.

Override example:

``` ini
exec = python /path/to/spotify/script -t 42
```

##### Format

The argument ""-f"" is optional and sets the format. You can specify how to display the song and the artist's name, as well as where (or whether) to print the play-pause indicator. 

Override example:

``` ini
exec = python /path/to/spotify/script -f '{play_pause} {song} - {artist} - {album}'
```

This would output ""Lone Digger - Caravan Palace - <I°_°I>"" in your polybar, instead of what is shown in the screenshot.

##### Status indicator

The argument ""-p"" is optional, and sets which unicode symbols to use for the status indicator. These should be given as a comma-separated string, with the play indicator as the first value and the pause indicator as the second.

Override example:

``` ini
exec = python /path/to/spotify/script -p '[playing],[paused]'
```

##### Fonts

The argument ""--font"" is optional, and allow to specify which font from your Polybar config to use to display the main label.

Override example:
```ini
exec = python /path/to/spotify/script --font=1
```

The argument ""--playpause-font"" is optional, and allow to specify which font from your Polybar config to use to display the ""play/pause"" indicator.

Override example:
``` ini
exec = python /path/to/spotify/script -p '[playing],[paused]' --playpause-font=2
```

##### Quiet

The argument ""-q"" or ""--quiet"" is optional and specifies whether to display the output when the current song is paused.
This will make polybar only show a song title and artist (or whatever your custom format is) when the song is actually playing and not when it's paused.
Simply setting the flag on the comand line will enable this option.

Override example:
```ini
exec = python /path/to/spotify/script -q
```
"
82,eddiemoore/angular-spotify,JavaScript,"# angular-spotify 

[![Build Status](https://travis-ci.org/eddiemoore/angular-spotify.svg?branch=master)](https://travis-ci.org/eddiemoore/angular-spotify) [![codecov.io](http://codecov.io/github/eddiemoore/angular-spotify/coverage.svg?branch=master)](http://codecov.io/github/eddiemoore/angular-spotify?branch=master) [![Coverage Status](https://img.shields.io/coveralls/eddiemoore/angular-spotify.svg)](https://coveralls.io/r/eddiemoore/angular-spotify) [![devDependency Status](https://david-dm.org/eddiemoore/angular-spotify/dev-status.svg)](https://david-dm.org/eddiemoore/angular-spotify#info=devDependencies) [![Code Climate](https://codeclimate.com/github/eddiemoore/angular-spotify/badges/gpa.svg)](https://codeclimate.com/github/eddiemoore/angular-spotify)
[![Greenkeeper badge](https://badges.greenkeeper.io/eddiemoore/angular-spotify.svg)](https://greenkeeper.io/)
[![Gitter](https://badges.gitter.im/Join%20Chat.svg)](https://gitter.im/eddiemoore/angular-spotify?utm_source=badge&utm_medium=badge&utm_campaign=pr-badge&utm_content=badge)

angular service to connect to the [Spotify Web API](https://developer.spotify.com/web-api/)

angular-spotify makes heavy use of promises throughout the service

## Usage

Install angular-spotify via bower. Use the --save property to save into your bower.json file.
```shell
bower install angular-spotify --save
```
Also available on npm
```shell
npm install angular-spotify --save
```

Include spotify into your angular module
```js
var app = angular.module('example', ['spotify']);
```

Most of the functions in Spotify do not require you to authenticate your application. However if you do need to gain access to playlists or a user's data then configure it like this:
```js
app.config(function (SpotifyProvider) {
  SpotifyProvider.setClientId('<CLIENT_ID>');
  SpotifyProvider.setRedirectUri('<CALLBACK_URI>');
  SpotifyProvider.setScope('<SCOPE>');
  // If you already have an auth token
  SpotifyProvider.setAuthToken('<AUTH_TOKEN>');
});
```
For example:
```js
app.config(function (SpotifyProvider) {
  SpotifyProvider.setClientId('ABC123DEF456GHI789JKL');
  SpotifyProvider.setRedirectUri('http://www.example.com/callback.html');
  SpotifyProvider.setScope('user-read-private playlist-read-private playlist-modify-private playlist-modify-public');
  // If you already have an auth token
  SpotifyProvider.setAuthToken('zoasliu1248sdfuiknuha7882iu4rnuwehifskmkiuwhjg23');
});
```


Inject Spotify into a controller to gain access to all the functions available
```js
app.controller('MainCtrl', function (Spotify) {

});
```


### Albums

#### Get an Album
Get Spotify catalog information for a single album.
```js
Spotify.getAlbum('AlbumID or Spotify Album URI');
```
Example:
```js
Spotify.getAlbum('0sNOF9WDwhWunNAHPD3Baj').then(function (data) {
  console.log(data);
});
```


#### Get Several Albums
Get Spotify catalog information for multiple albums identified by their Spotify IDs.
```js
Spotify.getAlbums('Array or comma separated list of Album IDs');
```
Example:
```js
Spotify
  .getAlbums('41MnTivkwTO3UUJ8DrqEJJ,6JWc4iAiJ9FjyK0B59ABb4,6UXCm6bOO4gFlDQZV5yL37')
  .then(function (data) {
    console.log(data);
  });
```


#### Get an Album’s Tracks
Get Spotify catalog information about an album’s tracks. Optional parameters can be used to limit the number of tracks returned.
```js
Spotify.getAlbumTracks('AlbumID or Spotify Album URI', options);
```
##### Options Object (Optional)
 - limit - Optional. The maximum number of tracks to return. Default: 20. Minimum: 1. Maximum: 50.
 - offset - Optional. The index of the first track to return. Default: 0 (the first object). Use with limit to get the next set of tracks.

Example:
```js
Spotify.getAlbumTracks('6akEvsycLGftJxYudPjmqK').then(function (data) {
  console.log(data);
});
```


### Artists
#### Get an Artist
Get Spotify catalog information for a single artist identified by their unique Spotify ID or Spotify URI.

```js
Spotify.getArtist('Artist Id or Spotify Artist URI');
```
Example
```js
Spotify.getArtist('0LcJLqbBmaGUft1e9Mm8HV').then(function (data) {
  console.log(data);
});
```

#### Get Several Artists
Get Spotify catalog information for several artists based on their Spotify IDs.
```js
Spotify.getArtists('Comma separated string or array of Artist Ids');
```
Example:
```js
Spotify
  .getArtists('0oSGxfWSnnOXhD2fKuz2Gy,3dBVyJ7JuOMt4GE9607Qin')
  .then(function (data) {
    console.log(data);
  });
```

#### Get an Artist’s Albums
Get Spotify catalog information about an artist’s albums. Optional parameters can be passed in to filter and sort the response.
```js
Spotify.getArtistAlbums('Artist Id or Spotify Artist URI', options);
```

##### Options Object (Optional)
 - album_type - Optional A comma-separated list of keywords that will be used to filter the response. If not supplied, all album types will be returned. Valid values are:
   - album
   - single
   - appears_on
   - compilation

Example: { album_type: 'album,single' }
 - country - Optional. An ISO 3166-1 alpha-2 country code. Supply this parameter to limit the response to one particular country. Note if you do not provide this field, you are likely to get duplicate results per album, one for each country in which the album is available!
 - limit - The number of album objects to return. Default: 20. Minimum: 1. Maximum: 50. For example: { limit: 2 }
 - offset - Optional. The index of the first album to return. Default: 0 (i.e., the first album). Use with limit to get the next set of albums.


Example:
```js
Spotify.getArtistAlbums('1vCWHaC5f2uS3yhpwWbIA6').then(function (data) {
  console.log(data);
});
```


#### Get an Artist’s Top Tracks
Get Spotify catalog information about an artist’s top tracks by country.
```js
Spotify.getArtistTopTracks('Artist Id or Spotify Artist URI', 'Country Code');
```
- The country: an ISO 3166-1 alpha-2 country code.


Example:
```js
Spotify
  .getArtistTopTracks('1vCWHaC5f2uS3yhpwWbIA6', 'AU')
  .then(function (data) {
    console.log(data);
  });
```


#### Get an Artist’s Related Artists
Get Spotify catalog information about artists similar to a given artist. Similarity is based on analysis of the Spotify community’s listening history.
```js
Spotify.getRelatedArtists('Artist Id or Spotify Artist URI');
```
Example:
```js
Spotify.getRelatedArtists('1vCWHaC5f2uS3yhpwWbIA6').then(function (data) {
  console.log(data);
});
```


### Browse
Discover new releases and featured playlists. User needs to be logged in to gain access to these features.

#### Get the featured playlists
Get a list of Spotify featured playlists
```js
Spotify.getFeaturedPlaylists(options);
```
##### Options Object (Optional)
 - locale - string - Optional. The desired language, consisting of a lowercase ISO 639 language code and an uppercase ISO 3166-1 alpha-2 country code, joined by an underscore. For example: es_MX, meaning ""Spanish (Mexico)"". Provide this parameter if you want the results returned in a particular language (where available).
 - country - string - Optional. A country: an ISO 3166-1 alpha-2 country code. Provide this parameter if you want the list of returned items to be relevant to a particular country. If omitted, the returned items will be relevant to all countries.
 - timestamp - string - Optional.  A timestamp in ISO 8601 format: yyyy-MM-ddTHH:mm:ss. Use this parameter to specify the user's local time to get results tailored for that specific date and time in the day. If not provided, the response defaults to the current UTC time. Example: ""2014-10-23T09:00:00"" for a user whose local time is 9AM.

Example:
```js
Spotify
  .getFeaturedPlaylists({ locale: ""nl_NL"", country: ""NL"" })
  .then(function (data) {
    console.log(data);
  });
```

#### Get new releases
Get a list of new album releases featured in Spotify
```js
Spotify.getNewReleases(options);
```
##### Options Object (Optional)
 - country - string - Optional. A country: an ISO 3166-1 alpha-2 country code. Provide this parameter if you want the list of returned items to be relevant to a particular country. If omitted, the returned items will be relevant to all countries.

Example:
```js
Spotify.getNewReleases({ country: ""NL"" }).then(function (data) {
  console.log(data);
});
```

#### Get categories
Get a list of categories used to tag items in Spotify (on, for example, the Spotify player’s “Browse” tab).
```js
Spotify.getCategories(options);
```

##### Options Object (Optional)
 - country - string - Optional. A country: an ISO 3166-1 alpha-2 country code. Provide this parameter if you want the list of returned items to be relevant to a particular country. If omitted, the returned items will be relevant to all countries.
 - locale - string - Optional. The desired language, consisting of an ISO 639 language code and an ISO 3166-1 alpha-2 country code, joined by an underscore. For example: es_MX, meaning ""Spanish (Mexico)"". Provide this parameter if you want the category metadata returned in a particular language.
 - limit - number - Optional. The maximum number of categories to return. Default: 20. Minimum: 1. Maximum: 50.
 - offset - number - Optional. The index of the first item to return. Default: 0 (the first object). Use with ```limit``` to get the next set of categories.

Example:
```js
Spotify.getCategories({ country: 'SG' }).then(function (data) {
  console.log(data);
});
```

#### Get category
Get a single category used to tag items in Spotify (on, for example, the Spotify player’s “Browse” tab).
```js
Spotify.getCategory(category_id, options);
```

##### Required
- category_id - The Spotify category ID for the category.

##### Options Object (Optional)
 - country - string - Optional. A country: an ISO 3166-1 alpha-2 country code. Provide this parameter if you want the list of returned items to be relevant to a particular country. If omitted, the returned items will be relevant to all countries.
 - locale - string - Optional. The desired language, consisting of an ISO 639 language code and an ISO 3166-1 alpha-2 country code, joined by an underscore. For example: es_MX, meaning ""Spanish (Mexico)"". Provide this parameter if you want the category metadata returned in a particular language.

Example:
```js
Spotify.getCategory('party').then(function (data) {
  console.log(data);
})
```

#### Get category playlists
Get a list of Spotify playlists tagged with a particular category.
```js
Spotify.getCategoryPlaylists(category_id, options);
```

##### Required
- category_id - The Spotify category ID for the category.

##### Options Object (Optional)
 - country - string - Optional. A country: an ISO 3166-1 alpha-2 country code. Provide this parameter if you want the list of returned items to be relevant to a particular country. If omitted, the returned items will be relevant to all countries.
 - limit - number - Optional. The maximum number of items to return. Default: 20. Minimum: 1. Maximum: 50.
 - offset - number - Optional. The index of the first item to return. Default: 0 (the first object). Use with ```limit``` to get the next set of items.

 Example:
 ```js
 Spotify.getCategoryPlaylists('party').then(function (data) {
   console.log(data);
 })
 ```

#### Get Recommendations
Create a playlist-style listening experience based on seed artists, tracks and genres.
```js
Spotify.getRecommendations(options);
```

##### Options Object
- limit - number - Optional. The target size of the list of recommended tracks. Default: 20. Minimum: 1. Maximum: 100.
- market - string - Optional. An ISO 3166-1 alpha-2 country code.
- max_* - number - Optional. Multiple values. For each tunable track attribute, a hard ceiling on the selected track attribute’s value can be provided. See tunable track attributes below for the list of available options. For example, max_instrumentalness=0.35 would filter out most tracks that are likely to be instrumental.
- min_* - number Optional. Multiple values. For each tunable track attribute, a hard floor on the selected track attribute’s value can be provided. See tunable track attributes below for the list of available options. For example, min_tempo=140 would restrict results to only those tracks with a tempo of greater than 140 beats per minute.
- seed_artists - A comma separated list of Spotify IDs for seed artists.
Up to 5 seed values may be provided in any combination of seed_artists, seed_tracks and seed_genres.
- seed_genres - A comma separated list of any genres in the set of available genre seeds.
Up to 5 seed values may be provided in any combination of seed_artists, seed_tracks and seed_genres.
- seed_tracks - A comma separated list of Spotify IDs for a seed track.
Up to 5 seed values may be provided in any combination of seed_artists, seed_tracks and seed_genres.
- target_* - Optional. Multiple values. For each of the tunable track attributes (below) a target value may be provided. Tracks with the attribute values nearest to the target values will be preferred. For example, you might request target_energy=0.6 and target_danceability=0.8. All target values will be weighed equally in ranking results.

Example:
```js
Spotify.getRecommendations({ seed_artists: '4NHQUGzhtTLFvgF5SZesLK' }).then(function (data) {
  console.log(data);
});
```

#### Get Available Genre Seeds
Retrieve a list of available genres seed parameter values for recommendations.
```js
Spotify.getAvailableGenreSeeds();
```

Example:
```js
Spotify.getAvailableGenreSeeds().then(function (data) {
  console.log(data);
});
```


### Follow
These endpoints allow you manage the list of artists and users that a logged in user follows. Following and unfollowing requires the ```user-follow-modify``` scope. Check if Current User Follows requires the ```user-follow-read``` scope.

#### Get User’s Followed Artists
Get the current user’s followed artists.

```js
Spotify.following('type', options)
```
- type: Required. currently only ```artist``` is supported.


```js
Spotify.following('artists', { limit: 10 }).then(function (artists) {
  console.log(artists);
})
```

#### Follow Artists or Users
Add the current user as a follower of one or more artists or other Spotify users.
```js
Spotify.follow('type', 'ids');
```
- type: Required. either ```artist``` or ```user```

Example:
```js
Spotify.follow('user', 'exampleuser01').then(function () {
 // no response from Spotify
});
```

#### Unfollow Artists or Users
Remove the current user as a follower of one or more artists or other Spotify users.
```js
Spotify.unfollow('type', 'ids');
```
- type: Required. either ```artist``` or ```user```

Example:
```js
Spotify.unfollow('user', 'exampleuser01').then(function () {
 // no response from Spotify
});
```

#### Check if Current User Follows
Check to see if the current user is following one or more artists or other Spotify users.
```js
Spotify.userFollowingContains('type', 'ids');
```
- type: Required. either ```artist``` or ```user```
- ids: Required. comma-separated list.

Example:
```js
Spotify.userFollowingContains('user', 'exampleuser01').then(function (data) {
  console.log(data);
});
```

#### Follow a Playlist
Add the current user as a follower of a playlist. Requires ```playlist-modify-public``` or ```playlist-modify-private``` scope to work.
```js
Spotify.followPlaylist('owner_id', 'playlist_id', isPublic);
```
- owner_id: The Spotify user ID of the person who owns the playlist.
- playlist_id: The Spotify ID of the playlist. Any playlist can be followed, regardless of its public/private status, as long as you know its playlist ID.
- isPublic: Boolean (Optional), default true. If true the playlist will be included in user's public playlists, if false it will remain private.

Example:
```js
Spotify
 .followPlaylist('jmperezperez', '2v3iNvBX8Ay1Gt2uXtUKUT', false)
 .then(function (data) {
   console.log(data);
 });
```

#### Unfollow a Playlist
Remove the current user as a follower of a playlist. Requires ```playlist-modify-public``` or ```playlist-modify-private``` scope to work.
```js
Spotify.unfollowPlaylist('owner_id', 'playlist_id', isPublic);
```
- owner_id: The Spotify user ID of the person who owns the playlist.
- playlist_id: The Spotify ID of the playlist that is to be no longer followed.

Example:
```js
Spotify
 .unfollowPlaylist('jmperezperez', '2v3iNvBX8Ay1Gt2uXtUKUT')
 .then(function (data) {
   console.log(data);
 });
```

#### Check if Users Follow a Playlist
 Check to see if one or more Spotify users are following a specified playlist.Following a playlist can be done publicly or privately. Checking if a user publicly follows a playlist doesn't require any scopes; if the user is publicly following the playlist, this endpoint returns true.

 Checking if the user is privately following a playlist is only possible for the current user when that user has granted access to the ```playlist-read-private``` scope.
 ```js
 Spotify
 .playlistFollowingContains('owner_id', 'playlist_id', 'comma separated string or array of user ids');
 ```
 Example:
 ```js
 Spotify.playlistFollowingContains('jmperezperez', '2v3iNvBX8Ay1Gt2uXtUKUT', 'possan,elogain').then(function (data) {
   console.log(data);
 });
 ```


### Library *(may have name changes in next version)*
#### Get Current User’s Saved Tracks
Get a list of the songs saved in the current Spotify user’s “Your Music” library. Requires the ```user-library-read``` scope.
```js
Spotify.getSavedUserTracks(options);
```
##### Options Object (Optional)

- limit - Optional. The maximum number of objects to return. Default: 20. Minimum: 1. Maximum: 50.
- offset - Optional. The index of the first object to return. Default: 0 (i.e., the first object). Use with limit to get the next set of objects.

```js
Spotify.getSavedUserTracks().then(function (data) {
  console.log(data);
});
```


#### Check Current User’s Saved Tracks
Check if one or more tracks is already saved in the current Spotify user’s “Your Music” library. Requires the ```user-library-read``` scope.

```js
Spotify.userTracksContains('comma separated string or array of spotify track ids');
```
Example:
```js
Spotify
  .userTracksContains('0udZHhCi7p1YzMlvI4fXoK,3SF5puV5eb6bgRSxBeMOk9')
  .then(function (data) {
   console.log(data);
  });
```


#### Save Tracks for Current User
Save one or more tracks to the current user’s “Your Music” library. Requires the ```user-library-modify``` scope.
```js
Spotify.saveUserTracks('comma separated string or array of spotify track ids');
```
Example:
```js
Spotify
  .saveUserTracks('0udZHhCi7p1YzMlvI4fXoK,3SF5puV5eb6bgRSxBeMOk9')
  .then(function (data) {
    console.log(data);
  });
```


#### Remove Tracks for Current User
Remove one or more tracks from the current user’s “Your Music” library. Requires the ```user-library-modify``` scope.
```js
Spotify.removeUserTracks('comma separated string or array of spotify track ids');
```
Example:
```js
Spotify
  .removeUserTracks('0udZHhCi7p1YzMlvI4fXoK,3SF5puV5eb6bgRSxBeMOk9')
  .then(function (data) {
    console.log(data);
  });
```


#### Save Albums for Current User
Save one or more albums to the current user’s “Your Music” library. Requires the ```user-library-modify``` scope.
```js
Spotify.saveUserAlbums('comma separated string or array of spotify album ids');
```
Example:
```js
Spotify
  .saveUserAlbums('4iV5W9uYEdYUVa79Axb7Rh,1301WleyT98MSxVHPZCA6M')
  .then(function (data) {
    console.log(data);
  });
```

#### Get Current User’s Saved Albums
Get a list of the albums saved in the current Spotify user’s “Your Music” library. Requires the ```user-library-read``` scope.
```js
Spotify.getSavedUserAlbums(options);
```
##### Options Object (Optional)

- limit - Optional. The maximum number of objects to return. Default: 20. Minimum: 1. Maximum: 50.
- offset - Optional. The index of the first object to return. Default: 0 (i.e., the first object). Use with limit to get the next set of objects.
- market - Optional. An ISO 3166-1 alpha-2 country code. Provide this parameter if you want to apply Track Relinking.

```js
Spotify.getSavedUserAlbums().then(function (data) {
  console.log(data);
});
```

#### Remove Albums for Current User
Remove one or more albums from the current user’s “Your Music” library. Requires the ```user-library-modify``` scope.
```js
Spotify.removeUserAlbums('comma separated string or array of spotify album ids');
```
Example:
```js
Spotify
  .removeUserAlbums('4iV5W9uYEdYUVa79Axb7Rh,1301WleyT98MSxVHPZCA6M')
  .then(function (data) {
    console.log(data);
  });
```


#### Check User’s Saved Albums
Check if one or more albums is already saved in the current Spotify user’s “Your Music” library. Requires the ```user-library-read``` scope.

```js
Spotify.userAlbumsContains('comma separated string or array of spotify album ids');
```
Example:
```js
Spotify
  .userAlbumsContains('4iV5W9uYEdYUVa79Axb7Rh,1301WleyT98MSxVHPZCA6M')
  .then(function (data) {
   console.log(data);
  });
```


### Personalization
Endpoints for retrieving information about the user’s listening habits.

#### Get a User’s Top Artists
Get the current user’s top artists based on calculated affinity.
```js
Spotify.getUserTopArtists(options);
```

##### Options Object (Optional)
- limit - number - Optional. The number of entities to return. Default: 20. Minimum: 1. Maximum: 50.
- offset - number - Optional. The index of the first entity to return. Default: 0 (i.e., the first track). Use with limit to get the next set of entities.
- time_range - Optional. Over what time frame the affinities are computed. Valid values: long_term (calculated from several years of data and including all new data as it becomes available), medium_term (approximately last 6 months), short_term (approximately last 4 weeks). Default: medium_term.

Example:
```js
Spotify.getUserTopArtists({ limit: 50 }).then(function (data) {
  console.log(data);
});
```

#### Get a User’s Top Tracks
Get the current user’s top tracks based on calculated affinity.
```js
Spotify.getUserTopTracks(options);
```

##### Options Object (Optional)
- limit - number - Optional. The number of entities to return. Default: 20. Minimum: 1. Maximum: 50.
- offset - number - Optional. The index of the first entity to return. Default: 0 (i.e., the first track). Use with limit to get the next set of entities.
- time_range - Optional. Over what time frame the affinities are computed. Valid values: long_term (calculated from several years of data and including all new data as it becomes available), medium_term (approximately last 6 months), short_term (approximately last 4 weeks). Default: medium_term.

Example:
```js
Spotify.getUserTopTracks({ limit: 50 }).then(function (data) {
  console.log(data);
});
```


### Playlists
User needs to be logged in to gain access to playlists

#### Get a List of a User’s Playlists
Get a list of the playlists owned by a Spotify user. Requires the ```playlist-read-private``` scope
```js
Spotify.getUserPlaylists('user_id', options);
```
##### Options Object (Optional)
- limit - Optional. The maximum number of playlists to return. Default: 20. Minimum: 1. Maximum: 50.
- offset - Optional. The index of the first playlist to return. Default: 0 (the first object). Use with limit to get the next set of playlists.

Example:
```js
Spotify.getUserPlaylists('wizzler').then(function (data) {
  console.log(data);
});
```


#### Get a Playlist
Get a playlist owned by a Spotify user.
```js
Spotify.getPlaylist('user_id', 'playlist_id', options);
```
##### Options Object (Optional)
- fields - Optional. Filters for the query: a comma-separated list of the fields to return. If omitted, all fields are returned. Sub-fields can be excluded by prefixing them with an exclamation mark. [More Info](https://developer.spotify.com/web-api/get-playlist/)

```js
Spotify
  .getPlaylist('1176458919', '6Df19VKaShrdWrAnHinwVO')
  .then(function (data) {
    console.log(data);
  });
```


#### Get a Playlist’s Tracks
Get full details of the tracks of a playlist owned by a Spotify user. Requires the ```playlist-read-private``` scope.
```js
Spotify.getPlaylistTracks('user_id', 'playlist_id', options);
```
Example:
```js
Spotify
  .getPlaylistTracks('1176458919', '6Df19VKaShrdWrAnHinwVO')
  .then(function (data) {
   console.log(data);
  });
```

#### Create a Playlist
Create a playlist for a Spotify user. (The playlist will be empty until you add tracks.) Creating a public playlist requires the ```playlist-modify-public``` scope. Creating a private playlist requires the ```playlist-modify-private``` scope.
```js
Spotify.createPlaylist('user_id', options);
```
##### Options Object
- name - string - Required. The name for the new playlist, for example ""Your Coolest Playlist"". This name does not need to be unique; a user may have several playlists with the same name.
- public - boolean - Optional, default true. If true the playlist will be public, if false it will be private. To be able to create private playlists, the user must have granted the playlist-modify-private scope.


Example:
```js
Spotify
  .createPlaylist('1176458919', { name: 'Awesome Mix Vol. 1' })
  .then(function (data) {
   console.log('playlist created');
  });
```


#### Add Tracks to a Playlist
Add one or more tracks to a user’s playlist. Adding tracks to a public playlist requires the ```playlist-modify-public``` scope. Adding tracks to a private playlist requires the ```playlist-modify-private``` scope.
```js
Spotify.addPlaylistTracks('user_id', 'playlist_id', 'comma separated string or array of spotify track uris');
```
##### Options Object (Optional)
- position - integer - Optional. The position to insert the tracks, a zero-based index. For example, to insert the tracks in the first position: position=0; to insert the tracks in the third position: position=2. If omitted, the tracks will be appended to the playlist. Tracks are added in the order they are listed in the query string or request body.


Example:
```js
Spotify
  .addPlaylistTracks('1176458919', '2TkWjGCu8jurholsfdWtG4', 'spotify:track:4iV5W9uYEdYUVa79Axb7Rh, spotify:track:1301WleyT98MSxVHPZCA6M')
  .then(function (data) {
    console.log('tracks added to playlist');
  });
```


#### Remove Tracks from a Playlist
Remove one or more tracks from a user’s playlist. Removing tracks from a public playlist requires the ```playlist-modify-public``` scope. Removing tracks from a private playlist requires the ```playlist-modify-private``` scope.
```js
Spotify.removePlaylistTracks('user_id', 'playlist_id', 'comma separated string or array of spotify track ids or uris');
```
Example:
```js
Spotify
  .removePlaylistTracks('1176458919', '2TkWjGCu8jurholsfdWtG4', 'spotify:track:4iV5W9uYEdYUVa79Axb7Rh, spotify:track:1301WleyT98MSxVHPZCA6M')
  .then(function (data) {
    console.log('tracks removed from playlist');
  });
```

#### Reorder a Playlist's Tracks
Reorder a track or a group of tracks in a playlist.
```js
Spotify.reorderPlaylistTracks('user_id', 'playlist_id', options);
```
##### Options Object (Required)
- range_start - integer - Required. The position of the first track to be reordered.
- range_length - integer - Optional. The amount of tracks to be reordered. Defaults to 1 if not set.
- insert_before - integer - Required. The position where the tracks should be inserted.
- snapshot_id - string - Optional. The playlist's snapshot ID against which you want to make the changes.


Example:
```js
Spotify.reorderPlaylistTracks('1176458919', '2TkWjGCu8jurholsfdWtG4', {
  range_start: 8,
  range_length: 5,
  insert_before: 0
}).then(function (data) {
  console.log(data);
});
```


#### Replace a Playlist’s Tracks
Replace all the tracks in a playlist, overwriting its existing tracks. This powerful request can be useful for replacing tracks, re-ordering existing tracks, or clearing the playlist. Replacing tracks in a public playlist requires the ```playlist-modify-public``` scope. Replacing tracks in a private playlist requires the ```playlist-modify-private``` scope.
```js
Spotify.replacePlaylistTracks('user_id', 'playlist_id', 'comma separated string or array of spotify track ids or uris');
```
Example:
```js
Spotify
  .replacePlaylistTracks('1176458919', '2TkWjGCu8jurholsfdWtG4', 'spotify:track:4iV5W9uYEdYUVa79Axb7Rh, spotify:track:1301WleyT98MSxVHPZCA6M')
  .then(function (data) {
    console.log('tracks removed from playlist');
  });
```


#### Change a Playlist’s Details
Change a playlist’s name and public/private state. (The user must, of course, own the playlist.) Changing a public playlist requires the ```playlist-modify-public``` scope. Changing a private playlist requires the ```playlist-modify-private``` scope.
```js
Spotify.updatePlaylistDetails('user_id', 'playlist_id', options);
```
##### Options Object (Optional)
- name - string - Optional. The new name for the playlist, for example ""My New Playlist Title"".
- public - Boolean - Optional. If true the playlist will be public, if false it will be private.


Example:
```js
Spotify
  .updatePlaylistDetails('1176458919', '2TkWjGCu8jurholsfdWtG4', { name: 'Updated Playlist Title' })
  .then(function (data) {
    console.log('Updated playlist details');
  });
```


### User Profiles
User needs to be logged in to gain access to user profiles

#### Get a User’s Profile
Get public profile information about a Spotify user.
```js
Spotify.getUser('user_id');
```
Example:
```js
Spotify.getUser('wizzler').then(function (data) {
  console.log(data);
});
```


#### Get Current User’s Profile
Get detailed profile information about the current user (including the current user’s username).
```js
Spotify.getCurrentUser();
```
Example:
```js
Spotify.getCurrentUser().then(function (data) {
  console.log(data);
});
```


### Search
#### Search for an Item
Get Spotify catalog information about artists, albums, or tracks that match a keyword string.
```js
Spotify.search('Search Query', 'type', options);
```
- type - Required. A comma-separated list of item types to search across. Valid types are: album, artist, playlist, and track.

##### Options Object (Optional)
- limit - Optional. The maximum number of objects to return. Default: 20. Minimum: 1. Maximum: 50.
- offset - Optional. The index of the first object to return. Default: 0 (i.e., the first object). Use with limit to get the next set of objects.


Example:
```js
Spotify.search('Nirvana', 'artist').then(function (data) {
  console.log(data);
});
```


### Tracks
#### Get a Track
Get Spotify catalog information for a single track identified by its unique Spotify ID or Spotify URI.
```js
Spotify.getTrack('Track Id or Spotify Track URI');
```
Example:
```js
Spotify.getTrack('0eGsygTp906u18L0Oimnem').then(function (data) {
  console.log(data);
});
```

#### Get Several Tracks
Get Spotify catalog information for multiple tracks based on their Spotify IDs.
```js
Spotify.getTracks('Comma separated list or array of Track Ids');
```
Example:
```js
Spotify.getTracks('0eGsygTp906u18L0Oimnem,1lDWb6b6ieDQ2xT7ewTC3G').then(function (data) {
  console.log(data);
});
```

#### Get Audio Features for a Track
Get audio feature information for a single track identified by its unique Spotify ID.

```js
Spotify.getTrackAudioFeatures('Track Id or Spotify Track URI');
```
Example:
```js
Spotify.getTrackAudioFeatures('0eGsygTp906u18L0Oimnem').then(function (data) {
  console.log(data);
});
```

#### Get Audio Features for Several Tracks
Get audio features for multiple tracks based on their Spotify IDs.

```js
Spotify.getTracksAudioFeatures('Comma separated list or array of Track Ids');
```
Example:
```js
Spotify.getTracksAudioFeatures('0eGsygTp906u18L0Oimnem,1lDWb6b6ieDQ2xT7ewTC3G').then(function (data) {
  console.log(data);
});
```

### Authentication
#### Login
Will open login window. Requires user to initiate as it will open a pop up window.
Requires client id, callback uri and scope to be set in config.
```js
Spotify.login();
```

Example:
```js
$scope.login = function () {
  Spotify.login();
};
```

#### Example callback html
```html
<!DOCTYPE html>
<html>
<head>
  <meta charset=""utf-8"">
  <meta http-equiv=""X-UA-Compatible"" content=""IE=edge"">
  <title></title>
  <script>
    window.onload = function () {
      var hash = window.location.hash;
      if (window.location.search.substring(1).indexOf(""error"") !== -1) {
        // login failure
        window.close();
      } else if (hash) {
        // login success
        var token = window.location.hash.split('&')[0].split('=')[1];
        localStorage.setItem('spotify-token', token);
      }
    }
  </script>
</head>
<body>

</body>
</html>
```


[![Bitdeli Badge](https://d2weczhvl823v0.cloudfront.net/eddiemoore/angular-spotify/trend.png)](https://bitdeli.com/free ""Bitdeli Badge"")
"
83,fuzeman/Spotify2.bundle,Python,
84,onemanbuilds/SpotifyStreamingBot,Python,"# SpotifyStreamingBot
 Simple tool which plays spotify songs between the given amount of time with multiple accounts.

# Installation
```
pip3 install -r requirements.txt
``` 
 
# Tool
![](https://i.ibb.co/wgvrnXY/spotify-streaming-tool-v2.png)

# Example
![](https://i.ibb.co/k1wB3f9/spotify-streaming-tool-v2-example.png)

# Proof
![](https://i.ibb.co/PNTWLd3/listening.png)

# Legal
 This was merely a speedrun to demonstrate how streaming bots work.<br/>
 This is illegal if you use this without the consent of the owners (in this case, the Spotify team).<br/>
 The software designed to perform website security testing.<br/>
 The author is not responsible for any illegal use of these programs.<br/>
 I am not accountable for anything you get into.<br/>
 I am not accountable for any of your actions.<br/>
 This is 100% educational, please do not misuse this tool.
 
"
85,frosas/spotify-to-mp3,Ruby,"# Spotify to MP3

A simple command line utility to download MP3 files of Spotify tracks. *Note those files are downloaded from Grooveshark, not from Spotify itself.*

---

**[Grooveshark](http://grooveshark.com/), the service this app was relying on, has shut down. Don't expect it to work anymore :(**

---

## Installation

### Mac OS X

```bash
$ sudo gem install spotify-to-mp3
```

Probably `sudo` can be ommited if using [rvm](http://beginrescueend.com/) or similar.

### Linux (Ubuntu)

Make sure you have rubygems installed and configured:

```bash
$ sudo apt-get install ruby2.0 ruby2.0-dev
$ echo 'PATH=$PATH:/var/lib/gems/1.9/bin' | sudo tee /etc/profile.d/rubygems1.9.sh >/dev/null
```

```bash
$ sudo gem2.0 install spotify-to-mp3
```

## Usage

1. Create a file (like `songs.txt`) and copy the Spotify songs URLs to it. Plain song names are also
   accepted. It will look like this:

   ```
   http://open.spotify.com/track/1JqTcOjOn7gEpeC0JcRVPa
   spotify:track:1fE3ddAlmjJ99IIfLgZjTy
   The Drums - Money
   ```

2. Download songs. They are saved to the current directory. Errors will appear in red (like when a song is not found).

   ```bash
   $ spotify-to-mp3 songs.txt
   ```

Also, as it's common in Unix programs, you can pipe in the songs:

```bash
$ echo white knuckle ride | spotify-to-mp3
```

or simply:

```bash
$ spotify-to-mp3
```

and drag the songs from the Spotify app to the terminal.

## Changelog

2015-01-25

- Accept album URI's
- Download progress bar

A big thanks to [@dulakm](https://github.com/dulakm) for such great contributions!

2014-05-05

- Accept track IDs from stdin

2012-08-20

- Set filename artist and title from Grooveshark

2012-01-11

- Touch already downloaded songs. This way songs no more in the download list can be spotted easily.

2011-10-03

- Make it work on ruby 1.8.7 (Snow Leopard)

2011-09-26

- Both Spotify URLs and plain song names are accepted

## Development

Install Ruby.

```bash
$ gem install bundler
$ bundle
$ bundle exec spotify-to-mp3
$ bundle exec rspec
```

## Update RubyGems

Bump version in spotify-to-mp3.gemspec

```bash
$ gem build spotify-to-mp3.gemspec
$ gem push spotify-to-mp3-[version].gem
```

## TODO

- Consider multiple artists songs
- Filter Grooveshark results by artist, title and length
- Accept tracks from stdin (instead of from a file, to drag songs directly to the app)
- Exit with a single Ctrl+C
- Cleaner output
- Don't pick remixes
"
86,lufinkey/react-native-spotify,Objective-C,"
# Spotify for React Native

A react native module for the Spotify SDK

**NOTE:** This repo is using the deprecated Spotify streaming SDKs. I'm only doing bug fixes on this repo and I don't really have a whole lot of time to update it. [react-native-spotify-remote](https://github.com/cjam/react-native-spotify-remote) is being worked on by someone else to use the newer ""remote"" SDK.

## Install

To add the Spotify SDK to your project, cd into your project directory and run the following commands:
```bash
npm install --save rn-spotify-sdk
react-native link react-native-events
react-native link rn-spotify-sdk
```

Next, do the manual setup for each platform:

#### iOS
Manually add `SpotifyMetadata.framework` and `SpotifyAudioPlayback.framework` from `node_modules/rn-spotify-sdk/ios/external/SpotifySDK` to *Linked Frameworks and Libraries* in your project settings. Then add `../node_modules/rn-spotify-sdk/ios/external/SpotifySDK` to *Framework Search Paths* in your project settings.

#### Android

Edit `android/build.gradle` and add `flatDir`

```
...
allprojects {
	repositories {
		mavenLocal()
		jcenter()
		maven {
			// All of React Native (JS, Obj-C sources, Android binaries) is installed from npm
			url ""$rootDir/../node_modules/react-native/android""
		}
		flatDir {
			dirs project(':rn-spotify-sdk').file('libs'), 'libs'
		}
	}
}
...
```

Edit `android/app/build.gradle` and add `packagingOptions`

```
...
buildTypes {
    release {
        minifyEnabled enableProguardInReleaseBuilds
        proguardFiles getDefaultProguardFile(""proguard-android.txt""), ""proguard-rules.pro""
    }
}
packagingOptions {
    pickFirst 'lib/armeabi-v7a/libgnustl_shared.so'
    pickFirst 'lib/x86/libgnustl_shared.so'
    exclude 'lib/arm64-v8a/libgnustl_shared.so'
    exclude 'lib/x86_64/libgnustl_shared.so'
}
...
```

In some cases, the two `exclude` lines cause issues when compiling and can be omitted. I need to look further into what causes this.

On Android, `react-native link` has a bug where it imports `RNSpotifyPackage` using the wrong bundle. You may have to make the following change to `MainApplication.java`:
```java
...
import com.spotify.sdk.android.authentication.RNSpotifyPackage; // remove this line
import com.lufinkey.react.spotify.RNSpotifyPackage; // replace with this line
...
```

If you have issues linking the module, please check that gradle is updated to the latest version and that your project is synced. Please reference the [example app](example) to ensure you've implemented things correctly before opening any issues.



## Usage

```javascript
import Spotify from 'rn-spotify-sdk';
```

### Types

- **Session**

	Contains information about a session
	
	- *Properties*
	
		- **accessToken** - A token used to communicate with the Spotify API
		- **expireTime** - The time that the access token expires, in milliseconds from January 1, 1970 00:00:00 UTC
		- **refreshToken** - An encrypted token used to get a new access token when they expire. This should be encrypted by your token swap service, as per OAuth standards.
		- **scopes** - An array of scopes that the session has access to. A list of scopes can be found [here](https://developer.spotify.com/web-api/using-scopes/).



- **PlaybackState**

	Contains information about the current state of the player
	
	- *Properties*
	
		- **playing** - boolean indicating whether the player is playing
		- **repeating** - boolean indicating whether the player is repeating
		- **shuffling** - boolean indicating whether the player is shuffling
		- **activeDevice** - boolean indicating whether the current device is the one playing
		- **position** - the position of the player in the current track, in seconds




- **PlaybackTrack**

	Contains information about a track in the playback queue
	
	- *Properties*
	
		- **name** - The title of the track
		- **uri** - The uri of the track
		- **contextName** - The name of the playlist or album that the track is being played from
		- **contextUri** - The uri of the playlist or album that the track is being played from
		- **artistName** - The name of the track's artist
		- **artistUri** - The uri of the track's artist
		- **albumName** - The name of the album that the track belongs to
		- **albumUri** - The uri of the album that the track belongs to
		- **albumCoverArtURL** - A URL for the album art image
		- **duration** - The length of the track in seconds
		- **indexInContext** - The track index in the playlist or album that the track is being played from




- **PlaybackMetadata**

	Contains information about the previous, current, and next tracks in the player
	
	- *Properties*
	
		- **prevTrack** - A *PlaybackTrack* with information about the previous track
		- **currentTrack** - A *PlaybackTrack* with information about the current track
		- **nextTrack** - A *PlaybackTrack* with information about the next track




- **PlaybackEvent**

	Contains information about a playback event and the state of the player.
	
	- *Properties*
	
		- **state** - the player's current *PlaybackState*
		- **metadata** - the player's current *PlaybackMetadata*




### Events

This module uses [react-native-events](https://www.npmjs.com/package/react-native-events), so it has all of the same methods as an [EventEmitter](https://nodejs.org/api/events.html) object. All of the events except for **'disconnect'** / **'reconnect'** (on Android) and **'login'** / **'logout'** come from Spotify's native SDK and are simply forwarded to javascript. If one of these events occurs at a weird time or has strange data, please open an issue on Spotify's [ios-streaming-sdk](https://github.com/spotify/ios-streaming-sdk) or [android-streaming-sdk](https://github.com/spotify/android-streaming-sdk) repo, and not here.

- **'login'**

	- `session` {Session}
	
	Emitted when the module has successfully logged in.

- **'logout'**

	Emitted when the module is logged out.

- **'sessionRenewed'**

	- `session` {Session}
	
	Emitted when the session has been renewed.

- **'play'**

	- `event` {PlaybackEvent}
	
	Emitted when playback has started or has resumed.

- **'pause'**

	- `event` {PlaybackEvent}
	
	Emitted when playback is paused.

- **'trackChange'**

	- `event` {PlaybackEvent}
	
	Emitted when playback of a new/different track starts.

- **'metadataChange'**

	- `event` {PlaybackEvent}
	
	Emitted when metadata has changed. This event occurs when playback starts or changes to a different context, when a track switch occurs, etc. This is an informational event that does not require action, but should be used to keep the UI display updated with the latest metadata information.

- **'contextChange'**

	- `event` {PlaybackEvent}
	
	Emitted when playback starts or changes to a different context than was playing before, such as a change in album or playlist.

- **'shuffleStatusChange'**

	- `event` {PlaybackEvent}
	
	Emitted when ""shuffle"" is switched on or off.

- **'repeatStatusChange'**

	- `event` {PlaybackEvent}
	
	Emitted when ""repeat"" is switched on or off.

- **'active'**

	- `event` {PlaybackEvent}
	
	Emitted when this device has become the active playback device. This event occurs when the users moves playback to this device using Spotify Connect.

- **'inactive'**

	- `event` {PlaybackEvent}
	
	Emitted when this device is no longer the active playback device. This event occurs when the user moves playback to a different device using Spotify Connect.

- **'permissionLost'**

	- `event` {PlaybackEvent}
	
	Emitted when this device has temporarily lost permission to stream audio from Spotify. A user can only stream audio on one of her devices at any given time. If playback is started on a different device, this event may occur.

- **'audioFlush'**

	- `event` {PlaybackEvent}
	
	Emitted when the application should flush its audio buffers (you don't need to deal with this since that's handled by the native code). For example, this event occurs when seeking to a different position within a track.

- **'audioDeliveryDone'**

	- `event` {PlaybackEvent}
	
	Emitted when the library reaches the end of a playback context and has no more audio to deliver.

- **'trackDelivered'**

	- `event` {PlaybackEvent}
	
	Emitted when the application accepted all samples from the current track. This is an informative event that indicates that all samples from the current track have been delivered to and accepted by the application. The track has not yet finished playing the last audio sample, but no more audio will be delivered for this track. For nearly all intents and purposes, the track has finished playing.

- **'disconnect'**

	Emitted when the player loses network connectivity.

- **'reconnect'**

	Emitted when the player regains network connectivity.

- **'temporaryPlayerError'**

	Emitted when service has been interrupted, usually by lack of network access. However, it can also occur if there is a problem with Spotify's backend services, or also when the user switches from WiFi to 3G. These errors can occur in many non-critical situations, and thus it is not necessary to show toasts or alert dialogs when receiving this event, or else you will unnecessarily annoy or panic the user. However, it can be useful to know about these events if operations are consistently failing, in which case showing a toast or alert may be justified.

- **'playerMessage'**

	- `message` {String}
	
	Called when the player has recieved a message for the end user from the Spotify service.




### Initialization/Authorization Methods

- **initialize**( *options* )

	Initializes the Spotify module and resumes a logged in session if there is one. This must be the first method you call when using this module.
	
	- *Parameters*
	
		- **options** - an object with options to pass to the Spotify Module
			- **clientID** - (*Required*) Your spotify application's client ID that you registered with spotify [here](https://developer.spotify.com/dashboard/applications)
			- **redirectURL** - (*Required*) The redirect URL to use when you've finished logging in. You NEED to set this URL for your application [here](https://developer.spotify.com/dashboard/applications), otherwise the login screen will not close
			- **sessionUserDefaultsKey** - The preference key to use in order to store session data for this module. Set this to a string of your choice when you initialize in order to persist user information between app uses.
			- **scopes** - An array of scopes that define permissions for the Spotify API. A list of scopes can be found [here](https://developer.spotify.com/documentation/general/guides/scopes)
			- **tokenSwapURL** - The URL to use to swap an authentication code for an access token (see [Token swap and refresh](#token-swap-and-refresh) section for more info)
			- **tokenRefreshURL** - The URL to use to get a new access token from a refresh token
			- **tokenRefreshEarliness** - The number of seconds to set a token refresh timer before the access token expires. Default is `300`
			- **ios** - iOS specific options
				- **audioSessionCategory** - The name of the audio session category to use for playing music in the app. Default is `'AVAudioSessionCategoryPlayback'`
			- **android** - Android specific options
				- **loginLoadingText** - The ""Loading"" text that will show on the login popup
	
	- *Returns*
	
		- A *Promise* that resolves to a boolean when the module finishes initialization, indicating whether or not a session was automatically logged back in




- **isInitialized**()

	Checks if the Spotify module has been initialized yet.

	- *Returns*
	
		- *true* if the Spotify module has been initialized
		- *false* if the Spotify module has not been initialized




- **isInitializedAsync**()

	Checks if the Spotify module has been initialized yet, but returns a *Promise* that resolves to the result.
	
	- *Returns*
	
		- A *Promise* that resolves to a boolean, indicating whether or not the Spotify module has been initialized




- **login**( *options*? )

	Opens a UI to log into Spotify.
	
	- *Parameters*
	
		- **options**
			- **showDialog** - Whether or not to force the user to approve the app again if they’ve already done so.
			- **clientID** - Your spotify application's client ID that you registered with spotify [here](https://developer.spotify.com/dashboard/applications). Falls back to value given in **initialize**.
			- **redirectURL** - The redirect URL to use when you've finished logging in. You NEED to set this URL for your application [here](https://developer.spotify.com/dashboard/applications), otherwise the login screen will not close. Falls back to value given in **initialize**.
			- **scopes** - An array of scopes that define permissions for the Spotify API. A list of scopes can be found [here](https://developer.spotify.com/documentation/general/guides/scopes). Falls back to value given in **initialize**.
			- **tokenSwapURL** - The URL to use to swap an authentication code for an access token (see [Token swap and refresh](#token-swap-and-refresh) section for more info). Falls back to value given in **initialize**.
	
	- *Returns*
	
		- A *Promise* that resolves to a boolean, indicating whether or not the user was logged in




- **isLoggedIn**()

	Checks if the client is logged in.

	- *Returns*
		
		- *true* if the client is logged in
		- *false* if the client is not logged in




- **isLoggedInAsync**()

	Checks if the client is logged in, but returns a *Promise* that resolves to the result.
	
	- *Returns*
	
		- A *Promise* that resolves to a boolean, indicating whether or not a user is currently logged in




- **logout**()

	Logs out of Spotify.
	
	- *Returns*
	
		- A *Promise* that resolves when the logout completes




- **getSession**()

	Gives information about the current session.
	
	- *Returns*
	
		- An *Session* object, or *null* if not logged in




- **getSessionAsync**()

	Gives information about the current session, but returns a *Promise* that resolves to the result.
	
	- *Returns*
	
		- A *Promise* that resolves to an *Session* object, or *null* if not logged in




- **renewSession**()

	Renews a logged in session. If no token refresh URL was given to **initialize** or if the session does not have a refresh token, this function returns without error
	
	- *Returns*
	
		- A *Promise* that resolves when the session renewal attempt finishes




- **authenticate**( *options*? )

	Opens a UI to perform the auth flow for Spotify, but returns a session instead of logging in.
	
	- *Parameters*
	
		- **options**
			- **showDialog** - Whether or not to force the user to approve the app again if they’ve already done so.
			- **clientID** - Your spotify application's client ID that you registered with spotify [here](https://developer.spotify.com/dashboard/applications). Falls back to value given in **initialize**.
			- **redirectURL** - The redirect URL to use when you've finished logging in. You NEED to set this URL for your application [here](https://developer.spotify.com/dashboard/applications), otherwise the login screen will not close. Falls back to value given in **initialize**.
			- **scopes** - An array of scopes that define permissions for the Spotify API. A list of scopes can be found [here](https://developer.spotify.com/documentation/general/guides/scopes). Falls back to value given in **initialize**.
			- **tokenSwapURL** - The URL to use to swap an authentication code for an access token (see [Token swap and refresh](#token-swap-and-refresh) section for more info). Falls back to value given in **initialize**.
	
	- *Returns*
	
		- A *Promise* that resolves to an *Session* object, or *null* if login is cancelled




- **loginWithSession**( *options* )

	Logs into the app with a given session
	
	- *Parameters*
	
		- **options**
			- **accessToken** (*Required*) - The token to use to communicate with the Spotify API.
			- **expireTime** (*Required*) - The time that the access token expires, in milliseconds from January 1, 1970 00:00:00 UTC
			- **refreshToken** - An encrypted token used to get a new access token when it expires.
			- **scopes** - An array of scopes that the session has access to. A list of scopes can be found [here](https://developer.spotify.com/documentation/general/guides/scopes).
			- **clientID** - Your spotify application's client ID that you registered with spotify [here](https://developer.spotify.com/dashboard/applications). Falls back to value given in **initialize**.
			- **tokenRefreshURL** - The URL to use to get a new access token from a refresh token (see [Token swap and refresh](#token-swap-and-refresh) section for more info). Falls back to value given in **initialize**.
	
	- *Returns*
	
		- A *Promise* that resolves when the login finishes




### Playback Methods

- **playURI**( *spotifyURI*, *startIndex*, *startPosition* )

	Play a Spotify URI.
	
	- *Parameters*
		
		- **spotifyURI** - The Spotify URI to play
		- **startIndex** - The index of an item that should be played first, e.g. 0 - for the very first track in the playlist or a single track
		- **startPosition** - starting position for playback in seconds
	
	- *Returns*
	
		- A *Promise* that resolves or rejects when the operation is complete




- **queueURI**( *spotifyURI* )

	Queue a Spotify URI. **WARNING: This function has proven to be very [inconsistent and buggy](https://github.com/spotify/ios-streaming-sdk/issues/717).**
	
	- *Parameters*
	
		- **spotifyURI** - The Spotify URI to queue
	
	- *Returns*
	
		- A *Promise* that resolves or rejects when the operation is complete




- **setPlaying**( *playing* )

	Set the “playing” status of the player.
	
	- *Parameters*
	
		- **playing** - *true* to resume playback, or *false* to pause it
	
	- *Returns*
	
		- A *Promise* that resolves or rejects when the operation is complete

- **getPlaybackState**()

	Gives the player's current state.
	
	- *Returns*
	
		- A *PlaybackState* object, or *null* if the player has not yet initialized




- **getPlaybackStateAsync**()

	Gives the player's current state, but returns a *Promise* that resolves to the result.
	
	- *Returns*
	
		- A *Promise* that resolves to a *PlaybackState* object or *null* if the player has not yet initialized



- **getPlaybackMetadata**()

	Gives information about the previous, current, and next track in the player.
	
	- *Returns*
	
		- A *PlaybackMetadata* object, or *null* if the player has yet initialized



- **getPlaybackMetadataAsync**()

	Gives information about the previous, current, and next track in the player, but returns a *Promise* that resolves to the result.
	
	- *Returns*
	
		- A *Promise* that resolves to a *PlaybackMetadata* object or *null* if the player has not yet initialized




- **skipToNext**()

	Skips to the next track.
	
	- *Returns*
	
		- A *Promise* that resolves or rejects when the operation is complete




- **skipToPrevious**()

	Skips to the previous track.
	
	- *Returns*
	
		- A *Promise* that resolves or rejects when the operation is complete




- **seek**( *position* )

	Seeks to a position within the current track
	
	- *Parameters*
	
		- **position** - The position in seconds to seek to
	
	- *Returns*
	
		- A *Promise* that resolves or rejects when the operation is complete




- **setShuffling**( *shuffling* )

	Enables or disables shuffling on the player.
	
	- *Parameters*
	
		- **shuffling** - *true* to enable shuffle, *false* to disable it
	
	- *Returns*
	
		- A *Promise* that resolves or rejects when the operation is complete




- **setRepeating**( *repeating* )

	Enables or disables repeating on the player.
	
	- *Parameters*
	
		- **repeating** - *true* to enable repeat, *false* to disable it
	
	- *Returns*
	
		- A *Promise* that resolves or rejects when the operation is complete




### Metadata Methods

- **sendRequest**( *endpoint*, *method*, *params*, *isJSONBody* )

	Sends a general request to the spotify api. A list of potential endpoints can be found [here](https://developer.spotify.com/documentation/web-api/reference).
	
	- *Parameters*
	
		- **endpoint** - the api endpoint, without a leading slash, e.g. `'v1/browse/new-releases'`
		- **method** - the HTTP method to use
		- **params** - the request parameters
		- **isJSONBody** - whether or not to send the parameters as json in the body of the request
	
	- *Returns*
	
		- A *Promise* that resolves to the result of the API request




- **getMe**()

	Retrieves information about the logged in Spotify user.
	
	- *Returns*
	
		- A *Promise* that resolves to the request result object. An example response can be seen [here](https://developer.spotify.com/web-api/get-current-users-profile/#example)




- **search**( *query*, *types*, *options*? )

	Sends a [search](https://developer.spotify.com/web-api/search-item/) request to spotify.
	
	- *Parameters*
	
		- **query** - The search query string. Same as the *q* parameter on the [search](https://developer.spotify.com/web-api/search-item/) endpoint
		- **types** - An array of item types to search for. Valid types are: `'album'`, `'artist'`, `'playlist'`, and `'track'`.
		- **options** - A map of other optional parameters to specify for the query
	
	- *Returns*
	
		- A *Promise* that resolves to the search result object. An example response can be seen [here](https://developer.spotify.com/web-api/search-item/#example)




- **getAlbum**( *albumID*, *options*? )

	Gets Spotify catalog information for a single album.
	
	- *Parameters*
	
		- **albumID** - The Spotify ID for the album
		- **options** - A map of other optional parameters to specify for the query
	
	- *Returns*
	
		- A *Promise* that resolves to the request result object. An example response can be seen [here](https://developer.spotify.com/web-api/get-album/#example)




- **getAlbums**( *albumIDs*, *options*? )

	Gets Spotify catalog information for multiple albums identified by their Spotify IDs.
	
	- *Parameters*
	
		- **albumIDs** - An array of the Spotify IDs for the albums
		- **options** - A map of other optional parameters to specify for the query
	
	- *Returns*
	
		- A *Promise* that resolves to the request result object. An example response can be seen [here](https://developer.spotify.com/web-api/get-several-albums/#example)




- **getAlbumTracks**( *albumID*, *options*? )

	Gets Spotify catalog information about an album’s tracks.

	- *Parameters*
	
		- **albumID** - The Spotify ID for the album
		- **options** - A map of other optional parameters to specify for the query
	
	- *Returns*
	
		- A *Promise* that resolves to the request result object. An example response can be seen [here](https://developer.spotify.com/web-api/get-albums-tracks/#example)




- **getArtist**( *artistID*, *options*? )

	Gets Spotify catalog information for a single artist.
	
	- *Parameters*
	
		- **artistID** - The Spotify ID for the artist
		- **options** - A map of other optional parameters to specify for the query
	
	- *Returns*
	
		- A *Promise* that resolves to the request result object. An example response can be seen [here](https://developer.spotify.com/web-api/get-artist/#example)




- **getArtists**( *artistIDs*, *options*? )

	Gets Spotify catalog information for several artists based on their Spotify IDs.
	
	- *Parameters*
	
		- **artistIDs** - An array of the Spotify IDs for the artists
		- **options** - A map of other optional parameters to specify for the query
	
	- *Returns*
	
		- A *Promise* that resolves to the request result object. An example response can be seen [here](https://developer.spotify.com/web-api/get-several-artists/#example)




- **getArtistAlbums**( *artistID*, *options*? )

	Gets Spotify catalog information about an artist’s albums.
	
	- *Parameters*
	
		- **artistID** - The Spotify ID for the artist
		- **options** - A map of other optional parameters to specify for the query
	
	- *Returns*
	
		- A *Promise* that resolves to the request result object. An example response can be seen [here](https://developer.spotify.com/web-api/get-artists-albums/#example)




- **getArtistTopTracks**( *artistID*, *country*, *options*? )

	Gets Spotify catalog information about an artist’s top tracks by country.
	
	- *Parameters*
	
		- **artistID** - The Spotify ID for the artist
		- **country** - The country: an [ISO 3166-1 alpha-2 country code](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2).
		- **options** - A map of other optional parameters to specify for the query
	
	- *Returns*
	
		- A *Promise* that resolves to the request result object. An example response can be seen [here](https://developer.spotify.com/web-api/get-artists-top-tracks/#example)




- **getArtistRelatedArtists**( *artistID*, *options*? )

	Gets Spotify catalog information about artists similar to a given artist.
	
	- *Parameters*
	
		- **artistID** - The Spotify ID for the artist
		- **options** - A map of other optional parameters to specify for the query
	
	- *Returns*
	
		- A *Promise* that resolves to the request result object. An example response can be seen [here](https://developer.spotify.com/web-api/get-related-artists/#example)




- **getTrack**( *trackID*, *options*? )

	Gets Spotify catalog information for a single track identified by its unique Spotify ID.
	
	- *Parameters*
	
		- **trackID** - The Spotify ID for the track
		- **options** - A map of other optional parameters to specify for the query
	
	- *Returns*
	
		- A *Promise* that resolves to the request result object. An example response can be seen [here](https://developer.spotify.com/web-api/get-track/#example)




- **getTracks**( *trackIDs*, *options*? )

	Gets Spotify catalog information for multiple tracks based on their Spotify IDs.
	
	- *Parameters*
	
		- **trackIDs** - An array of the Spotify IDs for the tracks
		- **options** - A map of other optional parameters to specify for the query
	
	- *Returns*
	
		- A *Promise* that resolves to the request result object. An example response can be seen [here](https://developer.spotify.com/web-api/get-several-tracks/#example)




- **getTrackAudioAnalysis**( *trackID*, *options*? )

	Gets a detailed audio analysis for a single track identified by its unique Spotify ID.
	
	- *Parameters*
	
		- **trackID** - The Spotify ID for the track
		- **options** - A map of other optional parameters to specify for the query
	
	- *Returns*
	
		- A *Promise* that resolves to the request result object. An example response can be seen [here](https://developer.spotify.com/web-api/get-audio-analysis/#example)




- **getTrackAudioFeatures**( *trackID*, *options*? )

	Gets audio feature information for a single track identified by its unique Spotify ID.
	
	- *Parameters*
	
		- **trackID** - The Spotify ID for the track
		- **options** - A map of other optional parameters to specify for the query
	
	- *Returns*
	
		- A *Promise* that resolves to the request result object. An example response can be seen [here](https://developer.spotify.com/web-api/get-audio-features/#example)




- **getTracksAudioFeatures**( *trackIDs*, *options*? )

	Gets audio features for multiple tracks based on their Spotify IDs.
	
	- *Parameters*
	
		- **trackIDs** - An array of the Spotify IDs for the tracks
		- **options** - A map of other optional parameters to specify for the query
	
	- *Returns*
	
		- A *Promise* that resolves to the request result object. An example response can be seen [here](https://developer.spotify.com/web-api/get-several-audio-features/#example)




### Token swap and refresh

In order for your app to stay logged into Spotify for more than an hour, you must set up your own server with endpoints for token swap and refresh, and specify your `tokenSwapURL` and `tokenRefreshURL` parameters in the `Spotify.initialize` method

The `tokenSwapURL` parameter is used to swap the authentication code provided by the Spotify login process for an access token and a refresh token.

The `tokenRefreshURL` parameter is used to retrieve new access tokens for the user using the refresh token received from the `tokenSwapURL`.

Both URLs are queried using POST with a Content-Type of `application/x-www-form-urlencoded`.

You can find an example server implementation [here](https://github.com/lufinkey/react-native-spotify/tree/master/example-server).

Refresh tokens are part of [OAuth standard](https://tools.ietf.org/html/rfc6749#section-1.5). If you are not familiar with them, [Understanding Refresh Tokens](https://auth0.com/learn/refresh-tokens/) can give you a basic idea on how they work.

## Additional notes

This module only works for Spotify Premium users.
"
87,spotify/web-api-auth-examples,HTML,"# Spotify Accounts Authentication Examples

This project contains basic demos showing the different OAuth 2.0 flows for [authenticating against the Spotify Web API](https://developer.spotify.com/web-api/authorization-guide/).

These examples cover:

* Authorization Code flow
* Client Credentials flow
* Implicit Grant flow

## Installation

These examples run on Node.js. On [its website](http://www.nodejs.org/download/) you can find instructions on how to install it. You can also follow [this gist](https://gist.github.com/isaacs/579814) for a quick and easy way to install Node.js and npm.

Once installed, clone the repository and install its dependencies running:

    $ npm install

### Using your own credentials
You will need to register your app and get your own credentials from the Spotify for Developers Dashboard.

To do so, go to [your Spotify for Developers Dashboard](https://beta.developer.spotify.com/dashboard) and create your application. For the examples, we registered these Redirect URIs:

* http://localhost:8888 (needed for the implicit grant flow)
* http://localhost:8888/callback

Once you have created your app, replace the `client_id`, `redirect_uri` and `client_secret` in the examples with the ones you get from My Applications.

## Running the examples
In order to run the different examples, open the folder with the name of the flow you want to try out, and run its `app.js` file. For instance, to run the Authorization Code example do:

    $ cd authorization_code
    $ node app.js

Then, open `http://localhost:8888` in a browser.
"
88,ucalyptus/Spotify-Recommendation-Engine,Jupyter Notebook,"<h1 align=""center"">Spotify Recommendation Engine</h1>
<p align=""center"">
 <img src=""https://ucalyptus.github.io/Spotify-Recommendation-Engine/spotify.gif"" width=400>
</p>

## About the Project:
#### Check my video to understand this project better.

[![Check my video to understand this project better.](images/Capture1.PNG)](https://www.youtube.com/watch?v=otrW8brCAiU)

## Requirements
* spotipy
```bash
 pip install spotipy
```
[Spotify Developer](https://beta.developer.spotify.com/documentation/web-api/) for more info 

## Recommender System:
## [Notebook](https://github.com/ucalyptus/Spotify-Recommendation-Engine/blob/master/Spotify_Recommendation_System_.ipynb) | [Playlist created using the notebook](https://open.spotify.com/playlist/4D8p3hVYwgngTmf1FHol0Y)

# Engage in the [Discussions](https://github.com/ucalyptus/Spotify-Recommendation-Engine/discussions) for more questions.

### Contributing
Please see the [Code of Conduct](https://github.com/ucalyptus/Spotify-Recommendation-Engine/blob/master/CODE_OF_CONDUCT.md) before contributing.
Check the [Wiki](https://github.com/ucalyptus/Spotify-Recommendation-Engine/wiki) for instructions.

## 🌟 Contributors 

Thanks to these wonderful people ✨✨:

<table>
	<tr>
		<td>
			<a href=""https://github.com/ucalyptus/Spotify-Recommendation-Engine/graphs/contributors"">
  				<img src=""https://contrib.rocks/image?repo=ucalyptus/Spotify-Recommendation-Engine"" />
			</a>
		</td>
	</tr>
</table>

## Star History

[![Star History Chart](https://api.star-history.com/svg?repos=ucalyptus/Spotify-Recommendation-Engine&type=Timeline)](https://star-history.com/#ucalyptus/Spotify-Recommendation-Engine&Timeline)

"
89,guilhermesad/rspotify,Ruby,"# RSpotify

[![Gem Version](https://badge.fury.io/rb/rspotify.svg)](http://badge.fury.io/rb/rspotify)
[![Build Status](https://github.com/guilhermesad/rspotify/actions/workflows/main.yml/badge.svg?branch=master)](https://github.com/guilhermesad/rspotify/actions)

This is a ruby wrapper for the [Spotify Web API](https://developer.spotify.com/web-api).

## Features

* [Full documentation](http://www.rubydoc.info/github/guilhermesad/rspotify/master)
* Full API Endpoint coverage
* OAuth and other authorization flows

## Installation

Add this line to your application's Gemfile:

    gem 'rspotify'

And then execute:

    $ bundle

Or install it yourself as:

    $ gem install rspotify

## Usage

RSpotify was designed with usability as its primary goal, so that you can forget the API and intuitively interact with your playlists, favorite artists, users and so on.

You can write things like `my_playlist.tracks.sort_by(&:popularity).last.album` without having to think which API calls must be done. RSpotify fills the gaps for you.

Below are some basic usage examples. Check the [documentation](http://rdoc.info/github/guilhermesad/rspotify/master/frames) for the complete reference.

```ruby
require 'rspotify'

artists = RSpotify::Artist.search('Arctic Monkeys')

arctic_monkeys = artists.first
arctic_monkeys.popularity      #=> 74
arctic_monkeys.genres          #=> [""Alternative Pop/Rock"", ""Indie"", ...]
arctic_monkeys.top_tracks(:US) #=> (Track array)

albums = arctic_monkeys.albums
albums.first.name #=> ""AM""

am = albums.first
am.release_date      #=> ""2013-09-10""
am.images            #=> (Image array)
am.available_markets #=> [""AR"", ""BO"", ""BR"", ...]

tracks = am.tracks
tracks.first.name #=> ""Do I Wanna Know?""

do_i_wanna_know = tracks.first
do_i_wanna_know.duration_ms  #=> 272386
do_i_wanna_know.track_number #=> 1
do_i_wanna_know.preview_url  #=> ""https://p.scdn.co/mp3-preview/<id>""

playlists = RSpotify::Playlist.search('Indie')
playlists.first.name #=> ""The Indie Mix""

# You can search within other types too
albums = RSpotify::Album.search('The Wall')
tracks = RSpotify::Track.search('Thriller')
```

Find by id:

```ruby
arctic_monkeys = RSpotify::Artist.find('7Ln80lUS6He07XvHI8qqHH')
arctic_monkeys.related_artists #=> (Artist array)

am = RSpotify::Album.find('41vPD50kQ7JeamkxQW7Vuy')
am.album_type #=> ""single""

do_i_wanna_know = RSpotify::Track.find('2UzMpPKPhbcC8RbsmuURAZ')
do_i_wanna_know.album #=> (Album object)

me = RSpotify::User.find('guilhermesad')
me.uri #=> ""spotify:user:guilhermesad""

# Or find several objects at once:

ids = %w(2UzMpPKPhbcC8RbsmuURAZ 7Jzsc04YpkRwB1zeyM39wE)

my_tracks = RSpotify::Track.find(ids)
my_tracks.size #=> 2
```

Some data require authentication to be accessed, such as playlists' details. You can easily get your credentials [here](https://developer.spotify.com/my-applications).

Then just copy and paste them like so:

```ruby
RSpotify.authenticate(""<your_client_id>"", ""<your_client_secret>"")

# Now you can access playlists in detail, browse featured content and more

me = RSpotify::User.find('guilhermesad')
me.playlists #=> (Playlist array)

# Find by id
playlist = RSpotify::Playlist.find('guilhermesad', '1Xi8mgiuHHPLQYOw2Q16xv')
playlist.name               #=> ""d33p""
playlist.description        #=> ""d33p h0uz""
playlist.followers['total'] #=> 1
playlist.tracks             #=> (Track array)

# Search by category
party = RSpotify::Category.find('party')
party.playlists #=> (Playlist array)
categories = RSpotify::Category.list # See all available categories

# Access featured content from Spotify's Browse tab
featured_playlists = RSpotify::Playlist.browse_featured(country: 'US')
new_releases = RSpotify::Album.new_releases(country: 'ES')

# Access tracks' audio features
sorry = RSpotify::Track.search(""Sorry"").first
sorry.audio_features.danceability #=> 0.605
sorry.audio_features.energy #=> 0.768
sorry.audio_features.tempo #=> 100.209

# Get recommendations
recommendations = RSpotify::Recommendations.generate(seed_genres: ['blues', 'country'])
recommendations = RSpotify::Recommendations.generate(seed_tracks: my_fav_tracks.map(&:id))
recommendations = RSpotify::Recommendations.generate(seed_artists: my_fav_artists.map(&:id))
recommendations.tracks #=> (Track array)
```

## Rails + OAuth

You might want your application to access a user's Spotify account.

For instance, suppose you want your app to create playlists for the user based on their taste, or to add a feature that syncs user's playlists with some external app.

If so, add the following to your application (Remember to [get your credentials](https://developer.spotify.com/my-applications))

```ruby
# config/application.rb

RSpotify::authenticate(""<your_client_id>"", ""<your_client_secret>"")
```

```ruby
# config/initializers/omniauth.rb

require 'rspotify/oauth'

Rails.application.config.middleware.use OmniAuth::Builder do
  provider :spotify, ""<your_client_id>"", ""<your_client_secret>"", scope: 'user-read-email playlist-modify-public user-library-read user-library-modify'
end

OmniAuth.config.allowed_request_methods = [:post, :get]
```

You should replace the scope values for the ones your own app will require from the user. You can see the list of available scopes in [here](https://developer.spotify.com/documentation/general/guides/authorization/scopes/).

Next, make a link so the user can log in with his Spotify account:

```ruby
<%= link_to 'Sign in with Spotify', '/auth/spotify', method: :post %>
```

And create a route to receive the callback:

```ruby
# config/routes.rb

get '/auth/spotify/callback', to: 'users#spotify'
```

Remember you need to tell Spotify this address is white-listed. You can do this by adding it to the Redirect URIs list in your [application page](https://developer.spotify.com/my-applications). An example of Redirect URI would be http://localhost:3000/auth/spotify/callback.

Finally, create a new RSpotify User with the response received:

```ruby
class UsersController < ApplicationController
  def spotify
    spotify_user = RSpotify::User.new(request.env['omniauth.auth'])
    # Now you can access user's private data, create playlists and much more

    # Access private data
    spotify_user.country #=> ""US""
    spotify_user.email   #=> ""example@email.com""

    # Create playlist in user's Spotify account
    playlist = spotify_user.create_playlist!('my-awesome-playlist')

    # Add tracks to a playlist in user's Spotify account
    tracks = RSpotify::Track.search('Know')
    playlist.add_tracks!(tracks)
    playlist.tracks.first.name #=> ""Somebody That I Used To Know""

    # Access and modify user's music library
    spotify_user.save_tracks!(tracks)
    spotify_user.saved_tracks.size #=> 20
    spotify_user.remove_tracks!(tracks)

    albums = RSpotify::Album.search('launeddas')
    spotify_user.save_albums!(albums)
    spotify_user.saved_albums.size #=> 10
    spotify_user.remove_albums!(albums)

    # Use Spotify Follow features
    spotify_user.follow(playlist)
    spotify_user.follows?(artists)
    spotify_user.unfollow(users)

    # Get user's top played artists and tracks
    spotify_user.top_artists #=> (Artist array)
    spotify_user.top_tracks(time_range: 'short_term') #=> (Track array)

    # Check doc for more
  end
end
```

## Refreshing the access token

The user's access token is automatically refreshed by RSpotify when needed. This is especially useful if you persist
the user data on a database. This way, the user only need log in to Spotify once during the use of the application.

Additionally, you can store a proc that is invoked when a new access token is generated. This give you the
opportunity to persist the new access token for future use. The proc will be invoked with two arguments: the
new access token and the lifetime of the token in seconds. For example, if lifetime value returned from
Spotify is 3600, you know that the token will be good for one hour.

In the sample code below, the credentials have been retrieved from some persistent store such as
AWS SecretsManager.

```ruby

callback_proc = Proc.new { |new_access_token, token_lifetime |
   now = Time.now.utc.to_i  # seconds since 1/1/1970, midnight UTC
   deadline = now+token_lifetime
   #puts(""new access token will expire at #{Time.at(deadline).utc.to_s}"")
   self.save_new_access_token(new_access_token)
 }

spotify_user = RSpotify::User.new(
  {
    'credentials' => {
       ""token"" => self.credentials[""access_token""],
       ""refresh_token"" => self.credentials[""refresh_token""],
       ""access_refresh_callback"" => callback_proc
    } ,
    'id' => self.credentials[""user_id""]
  })


```

RSpotify provides a way to facilitate persistence:

```ruby
hash = spotify_user.to_hash
# hash containing all user attributes, including access tokens

# Use the hash to persist the data the way you prefer...

# Then recover the Spotify user whenever you like
spotify_user = RSpotify::User.new(hash)
spotify_user.create_playlist!('my_awesome_playlist') # automatically refreshes token
```


## Getting raw response

To get the raw response from Spotify API requests, just toggle the `raw_response` variable:

```ruby
RSpotify.raw_response = true
RSpotify::Artist.search('Cher') #=> (String with raw json response)
```

## Notes

If you'd like to use OAuth outside rails, have a look [here](https://developer.spotify.com/web-api/authorization-guide/#authorization_code_flow) for the requests that need to be made. You should be able to pass the response to RSpotify::User.new just as well, and from there easily create playlists and more for your user.

## Contributing

1. Fork it ( https://github.com/guilhermesad/rspotify/fork )
2. Create your feature branch (`git checkout -b my-new-feature`)
3. Test your changes (`bundle exec rspec`)
4. Commit your changes (`git commit -am 'Add some feature'`)
5. Push to the branch (`git push origin my-new-feature`)
6. Create a new Pull Request
"
90,Fornoth/spotify-connect-web,Python,"# Spotify Connect Web

This is based off of the example code from https://github.com/plietar/spotify-connect

## Quickstart using a packaged release
This is a version of spotify-connect-web with all dependencies bundled (about 7MB compressed, 13MB extracted)  
For armv7+ (Rpi 2, Rpi 3, etc, but not Rpi 1/Rpi Zero) devices only for now

Grab the latest release from [Releases](https://github.com/Fornoth/spotify-connect-web/releases)
### Installation instructions (example):
```
wget https://github.com/Fornoth/spotify-connect-web/releases/download/0.0.4-alpha/spotify-connect-web_0.0.4-alpha.tar.gz
tar zxvf spotify-connect-web_0.0.4-alpha.tar.gz
```
A `spotify-connect-web` directory will be created, and you'll need to put your `spotify_appkey.key` in that directory

### Running:
Just run `./spotify-connect-web`  in the extracted directory  
Supports the same options as the regular version


## Quickstart using a pre-built chroot
Grab the latest release from [Releases](https://github.com/Fornoth/spotify-connect-web/releases)

If you just want to get running, you can use a pre-built chroot with the latest version installed.
### Installation instructions (example):

    curl -O curl -OL https://github.com/Fornoth/spotify-connect-web/releases/download/0.0.4-alpha/spotify-connect-web.sh
    chmod u+x spotify-connect-web.sh
    # Download the current chroot (~ 180 MB)
    ./spotify-connect-web.sh install
    # Copy your `spotify_appkey.key` into the app directory. (See below for information on how to get that file.)
    sudo cp spotify_appkey.key spotify-connect-web-chroot/usr/src/app/
    # Run using normal cmdline options
    ./spotify-connect-web.sh --username 12345678 --password xyz123 --bitrate 320

(~~Btw, the chroot is built nightly from master using Docker on a C1.~~ Manually built for now. See the [Makefile](Makefile.docker) for details.)

## Quickstart with Docker
(You will have to use `sudo` if not logged in as root.)

* Get Docker running on your machine. (See [this preliminary documentation](https://github.com/aetherical/docker/blob/master/docs/sources/installation/raspberrypi.md) for advice.)
* Get your `spotify_appkey.key` and put it into the base directory. (See below for details.)
* Build the container via `docker build -t spotify-connect-web .`
* Run it via `~/run-with-docker`.

## Installation from source
Requires development packages for `Python`, `FFI`, and `Alsa`  
 - For Debian/Ubuntu: `apt-get install python-dev libffi-dev libasound2-dev`  

To install the other requirements: `pip install -r requirements.txt`

## Usage
```
usage: main.py [-h] [--device DEVICE | --playback_device PLAYBACK_DEVICE]
               [--mixer_device_index MIXER_DEVICE_INDEX] [--mixer MIXER]
               [--dbrange DBRANGE] [--cors CORS] [--debug] [--key KEY]
               [--username USERNAME] [--password PASSWORD] [--name NAME]
               [--bitrate {90,160,320}] [--credentials CREDENTIALS]

Web interface for Spotify Connect

optional arguments:
  -h, --help            show this help message and exit
  --device DEVICE, -D DEVICE
                        alsa output device (deprecated, use --playback_device)
  --playback_device PLAYBACK_DEVICE, -o PLAYBACK_DEVICE
                        alsa output device (get name from aplay -L)
  --mixer_device_index MIXER_DEVICE_INDEX
                        alsa card index of the mixer device
  --mixer MIXER, -m MIXER
                        alsa mixer name for volume control
  --dbrange DBRANGE, -r DBRANGE
                        alsa mixer volume range in Db
  --lastfm_username LASTFM_USERNAME
                        your Last.fm username
  --lastfm_password LASTFM_PASSWORD
                        your Last.fm password
  --lastfm_api_key LASTFM_API_KEY
                        your Last.fm API key
  --lastfm_api_secret LASTFM_API_SECRET
                        your Last.fm API secret
  --lastfm_credentials LASTFM_CREDENTIALS
                        file to load Last.fm credentials from
  --cors CORS           enable CORS support for this host (for the web api).
                        Must be in the format <protocol>://<hostname>:<port>.
                        Port can be excluded if its 80 (http) or 443 (https).
                        Can be specified multiple times
  --debug, -d           enable libspotify_embedded/flask debug output
  --key KEY, -k KEY     path to spotify_appkey.key (can be obtained from
                        https://developer.spotify.com/my-account/keys )
  --username USERNAME, -u USERNAME
                        your spotify username
  --password PASSWORD, -p PASSWORD
                        your spotify password
  --name NAME, -n NAME  name that shows up in the spotify client
  --bitrate {90,160,320}, -b {90,160,320}
                        Sets bitrate of audio stream (may not actually work)
  --credentials CREDENTIALS, -c CREDENTIALS
                        File to load and save credentials from/to

```

`libspotify_embedded_shared.so` must be in the same directory as the python scripts.  
Also requires a spotify premium account, and the `spotify_appkey.key` (the binary version) file can be be obtained from https://developer.spotify.com/technologies/libspotify/application-keys/. Fill the 'App-key Request Form' in, send it and wait until you get the key sent via email (it can take a few weeks...).

After receiving it, you need to place it in the python scripts directory, or have the path specified with the `-k` parameter

### Launching from source
- Running without debug output `LD_LIBRARY_PATH=$PWD python main.py`
- Running with debug output `LD_LIBRARY_PATH=$PWD python main.py -d`
- Run with only flask debug output (flask debug output allows you to see the python exceptions that are thrown) `DEBUG=true LD_LIBRARY_PATH=$PWD python main.py`
- Can also be run without the web server (Requires username and password to be passed in as parameters)  `LD_LIBRARY_PATH=$PWD python connect.py -u username -p password`

### Headers
Generated with `cpp spotify.h > spotify.processed.h && sed -i 's/__extension__//g' spotify.processed.h`
`spotify.h` was taken from from https://github.com/plietar/spotify-connect

## Web server
Server runs on port `4000`

## Logging in
After logging in successfully, a blob is sent by Spotify and saved to disk (to `credentials.json` by default), and is use to login automatically on next startup.

### Username/Password
There's a login button on the webpage to enter a username and password, or you can pass the `--username` and `--password` arguments

### Last.fm
If you want to enable Last.fm scrobbling, you should first obtain API key at http://www.last.fm/api/account/create. You can pass your `--lastfm_username`, `--lastfm_password`, `--lastfm_api_key` and `--lastfm_api_secret` on the command line. You can also use `lastfm_credentials.json` and pass `--lastfm_credentials lastfm_credentials.json` to the command line. You can find an example of the file format in `lastfm_credentials.json.dist`. You need to explicitly pass the credentials file, otherwise the Last.fm module will not launch.

### Passwordless/Multiuser (Zeroconf/Avahi)
Zeroconf (Avahi) login can be used after executing the command `avahi-publish-service TestConnect _spotify-connect._tcp 4000 VERSION=1.0 CPath=/login/_zeroconf` (`avahi-publish-service` is in the `avahi-utils` package).

## Support
You can [file an issue](https://github.com/Fornoth/spotify-connect-web/issues/new) or come to the [Gitter chat](https://gitter.im/sashahilton00/spotify-connect-resources)
"
91,vdesabou/alfred-spotify-mini-player,PHP,"# <img src=""https://www.freepnglogos.com/uploads/spotify-logo-png/image-gallery-spotify-logo-21.png"" width=""24""><img src=""https://i.pinimg.com/originals/b8/26/ea/b826eaa3fa9a08fdd00ae98f33432e74.png"" width=""24""> Alfred Spotify Mini Player

![GitHub All Releases](https://img.shields.io/github/downloads/vdesabou/alfred-spotify-mini-player/total) ![GitHub Releases](https://img.shields.io/github/downloads/vdesabou/alfred-spotify-mini-player/latest/total)![GitHub Release Date](https://img.shields.io/github/release-date/vdesabou/alfred-spotify-mini-player)![GitHub commits since latest release (by date)](https://img.shields.io/github/commits-since/vdesabou/alfred-spotify-mini-player/latest)
![GitHub issues](https://img.shields.io/github/issues/vdesabou/alfred-spotify-mini-player)![GitHub closed issues](https://img.shields.io/github/issues-closed-raw/vdesabou/alfred-spotify-mini-player)

Find all information and download the workflow on [alfred-spotify-mini-player.com](http://alfred-spotify-mini-player.com)

[![Screenshot](https://github.com/vdesabou/alfred-spotify-mini-player/raw/master/docs/images/readme_site.jpg)](http://alfred-spotify-mini-player.com)


# Installation

1. Download and install the [latest version of the workflow](https://github.com/vdesabou/alfred-spotify-mini-player/releases/latest/download/spotifyminiplayer.alfredworkflow).
2. Follow the [setup documentation](https://alfred-spotify-mini-player.com/setup/).

# Features

[![Screenshot](https://github.com/vdesabou/alfred-spotify-mini-player/raw/master/docs/images/features.jpg)](http://alfred-spotify-mini-player.com/#features)

# Example

![Screenshot](http://alfred-spotify-mini-player.com/images/index1.gif)

# Twitter

Follow [@TheMiniPlayer](https://twitter.com/TheMiniPlayer) to get all the news.


Made with ❤ by [@vdesabou](https://github.com/vdesabou).

Love it? Give it a ⭐️ or a tweet to help spread the word!
"
92,ErickWendel/semana-javascript-expert06,JavaScript,"# Spotify Radio - JS Expert Week 6.0

Welcome to the sixth Javascript Expert Week. This is the starting code to start our journey.

Tag this project with a star 🌟

## Preview

<img src=""./prints/demo.png"" />

## Checklist Features

- Web API
    - [ ] Must achieve 100% code coverage in tests
    - [ ] Must have end to end tests validating all API routes
    - [ ] Must deliver static files as Node.js Streams
    - [ ] Must deliver music files as a Node.js Stream
    - [ ] Given a disconnected user it should not break the API
    - [ ] Even if multiple commands are fired at the same time, it should not break the API
    - [ ] If an unexpected error occurs, the API should keep working
    - [ ] The project needs to run on Linux, Mac and Windows environments

- Web App
    - Client
        - [ ] Must play the broadcast
        - [ ] Shouldn't pause if any effects are added
    - Controller
        - [ ] Must achieve 100% code coverage in tests
        - [ ] Must be able to start or stop a broadcast
        - [ ] Must send commands to add audio effects to a stream

## Tasks per class

- Lesson 01: Cover service and route layers with unit tests and achieve 100% code coverage
- Lesson 02: Maintain 100% code coverage and implement e2e tests for the entire API
- Lesson 03: implement unit tests for the frontend and maintain 100% code coverage
- **PLUS**:
    - [ ] provide a new effect
        - [ ] add a new button on the controller
        - [ ] add a new effect sound to the `audios/fx/` folder
        - [ ] repost on heroku
## Source code for classes and solving challenges
- [Class01](./classes/class01/)
    - [desafio-resolvido](./aulas/aula01-desafio-resolvido) and [page with 100% code coverage](https://erickwendel.github.io/semana-javascript-expert06/aulas/aula01-desafio-resolvido/coverage/lcov-report/index.html)
- [Class02](./classes/class02/)
    - [desafio-resolvido](./aulas/aula02-desafio-resolvido) and [page with 100% code coverage](https://erickwendel.github.io/semana-javascript-expert06/aulas/aula02-desafio-resolvido/coverage/lcov-report/index.html)
- [Class03](./classes/class03/)
    - [desafio-resolvido](./aulas/aula03-desafio-resolvido) and [page with 100% code coverage](https://erickwendel.github.io/semana-javascript-expert06/aulas/aula03-desafio-resolvido/coverage/lcov-report/index.html)

### Credits to the sources I've used on the demos

#### Streaming
- [English Conversation](https://youtu.be/ytmMipczEI8)

#### Effects
- [Applause](https://youtu.be/mMn_aYpzpG0)
- [Applause Audience](https://youtu.be/3IC76o_lhFw)
- [Boo](https://youtu.be/rYAQN11a2Dc)
- [Fart](https://youtu.be/4PnUfYhbDDM)
- [Laugh](https://youtu.be/TZ90IUrMNCo)
## FAQ
- `NODE_OPTIONS` is not a system recognized command, what to do?
    - If you are on Windows, the way to create environment variables is different. You must use the word `set` before the command.
    - Ex: ` ""test"": ""set NODE_OPTIONS=--experimental-vm-modules && npx jest --runInBand"",`

- I ran `npm test` but nothing happens, what to do?
    - Check your Node.js version. We are using version 17. Go to [node.js website](https://nodejs.org) and download the latest version.

- `jest.spyOn` - when we try to use `function.name` (something like `stream.pipe.name`), it says the instance is undefined
    - In this case, use the value as a string: `jest.spyOn(stream, ""pipe"").mockReturnValue`
- Challenge 01 impossible to complete 100% code coverage because [testUtil.js](./aulas/aula01/tests/unit/_util/testUtil.js) is not being fully used
    - Add the following code snippet to the first line of the [testUtil.js](./aulas/aula01/tests/unit/_util/testUtil.js) file: `/* istanbul ignore file */` . This will make jest ignore this file and complete 100%.
    - Important: this change will only serve to complete this first and/or second challenge, in the last class, we will not need to ignore this file since we will use all the functions
"
93,kraxarn/spotify-qt,C++,"<p align=""center"">
    <img src="".github/img/logo.svg""/>
</p>

![spotify-qt with dark theme](.github/img/spotify-qt.png)

[![Linux Build](https://github.com/kraxarn/spotify-qt/actions/workflows/linux.yml/badge.svg)](https://github.com/kraxarn/spotify-qt/actions/workflows/linux.yml)
[![Windows Build](https://github.com/kraxarn/spotify-qt/actions/workflows/windows-qt6.yml/badge.svg)](https://github.com/kraxarn/spotify-qt/actions/workflows/windows-qt6.yml)
[![macOS Build](https://github.com/kraxarn/spotify-qt/actions/workflows/macos.yml/badge.svg)](https://github.com/kraxarn/spotify-qt/actions/workflows/macos.yml)

An unofficial Spotify client using Qt as a simpler, lighter alternative to the official client,
inspired by [spotify-tui](https://github.com/Rigellute/spotify-tui). Much like spotify-tui, you need
an actual Spotify client running, for example [spotifyd](https://github.com/Spotifyd/spotifyd),
which can be configured from within the app.

**Note:** Controlling playback requires Spotify Premium.

#### Contributions are very welcome!

## Goals

* Fast, light on resources, and small file size.
* Portable, and supporting as many platforms and architectures as possible.
* Customizable.

## Non-goals

* Having the same features as the official client.

## Supported platforms

Any system with a C++11 compiler and Qt is supported, but only Linux and Windows are regularly being
tested, so if an issue occurs on your favorite platform, please report it.

## Installing

spotify-qt is available from some package managers. If there are any package issues, or the version
is out of date, contact the respective package maintainers, not me, unless I'm the package
maintainer. If you want to maintain the package on a system not in the list below, you are very much
free to, just please open an issue, or get in contact with me, so I can add it to the list.

| Platform             | Package                                                                                                                                                                                                                                                     | Maintainer                                          |
|----------------------|-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------|-----------------------------------------------------|
| Arch (or Arch-based) | [![AUR](https://repology.org/badge/version-for-repo/aur/spotify-qt.svg?header=AUR)](https://aur.archlinux.org/packages/spotify-qt)                                                                                                                          | [kraxarn](https://github.com/kraxarn)               |
| Haiku                | [![HaikuPorts](https://repology.org/badge/version-for-repo/haikuports_master/spotify-qt.svg?header=HaikuPorts)](https://github.com/haikuports/haikuports/tree/master/media-sound/spotify_qt)                                                                | [Begasus](https://github.com/Begasus)               |
| NetBSD               | [![pkgsrc](https://repology.org/badge/version-for-repo/pkgsrc_current/spotify-qt.svg?header=pkgsrc)](https://pkgsrc.se/audio/spotify-qt)                                                                                                                    | [pin](https://codeberg.org/pin)                     |
| FreeBSD              | [![FreeBSD Ports](https://repology.org/badge/version-for-repo/freebsd/spotify-qt.svg?header=FreeBSD%20Ports)](https://www.freshports.org/audio/spotify-qt)                                                                                                  | [ehaupt](https://github.com/ehaupt)                 |
| DragonflyBSD         | [![DPorts](https://repology.org/badge/version-for-repo/dports/spotify-qt.svg?header=DPorts)](https://github.com/DragonFlyBSD/DPorts/blob/master/audio/spotify-qt/Makefile)                                                                                  | [ehaupt](https://github.com/ehaupt)                 |
| Void Linux           | [![Void Linux](https://repology.org/badge/version-for-repo/void_x86_64/spotify-qt.svg?header=Void%20Linux)](https://github.com/void-linux/void-packages/blob/master/srcpkgs/spotify-qt/template)                                                            | [abenson](https://github.com/abenson)               |
| NixOS                | [![nixpkgs unstable](https://repology.org/badge/version-for-repo/nix_unstable/spotify-qt.svg?header=nixpkgs%20unstable)](https://github.com/NixOS/nixpkgs/blob/master/pkgs/applications/audio/spotify-qt/default.nix)                                       | [karthikiyengar](https://github.com/karthikiyengar) |
| openSUSE             | [![openSUSE Multimedia:Apps Tumbleweed package](https://repology.org/badge/version-for-repo/opensuse_multimedia_apps_tumbleweed/spotify-qt.svg?header=openSUSE)](https://software.opensuse.org//download.html?project=multimedia%3Aapps&package=spotify-qt) | [KaratekHD](https://github.com/KaratekHD)           |
| Other (Linux)        | [![Snapcraft](https://snapcraft.io//spotify-qt/badge.svg)](https://snapcraft.io/spotify-qt)                                                                                                                                                                 | [kraxarn](https://github.com/kraxarn)               |

The snap version can be installed by simply running  `snap install spotify-qt`, if that's your
thing. If you want to try out new features, you can download unstable builds automatically built
every day from [spotify-qt-nightly](https://kraxarn.github.io/spotify-qt-nightly).

## Configuring

* open https://developer.spotify.com/dashboard/
* create a new application
* goto **edit settings** in the app overview
* add `http://localhost:8888` in **Redirect URIs** section

![spotify dashboard](.github/img/spotify_dashboard-redirect_uri.png)

* launch Spotify-qt and copy/paste **Client ID** and **Client Secret**, you should be able to login

## Building yourself

Make sure you have Qt (5.9+/6.0+) with SVG support, CMake (3.5+) and various build tools like
`make`, `g++` and `git`. Keep in mind that the master branch is unstable at all times. Therefore,
it's recommended to use the stable branch, which is updated after each new stable release, only
including important bug fixes, unless you want to try out new features.

```
git clone --branch stable https://github.com/kraxarn/spotify-qt.git
cd spotify-qt
mkdir build
cd build
cmake ..
make
./spotify-qt
```
"
94,Yooooomi/your_spotify,TypeScript,"![Client CI](https://github.com/Yooooomi/your_spotify/workflows/Client%20CI/badge.svg)
![Server CI](https://github.com/Yooooomi/your_spotify/workflows/Server%20CI/badge.svg)
[![Donate](https://img.shields.io/badge/Donate-PayPal-green.svg)](https://www.paypal.com/donate/?hosted_button_id=BLAPT49PK9A8G)

<p align='center'>
  <img width=""100%"" src=""https://user-images.githubusercontent.com/17204739/154752226-c2215a51-e20e-4ade-ac63-42c5abb25240.png"">
</p>

# Your Spotify

**YourSpotify** is a self-hosted application that tracks what you listen and offers you a dashboard to explore statistics about it!
It's composed of a web server which polls the Spotify API every now and then and a web application on which you can explore your statistics.

# Table of contents

- [Prerequisites](#prerequisites)
- [Installation](#installation)
  - [Using docker](#using-docker-compose)
  - [Installing locally](#installing-locally-not-recommended)
  - [Environment](#environment)
  - [CORS](#cors)
- [Creating the Spotify application](#creating-the-spotify-application)
- [Importing past history](#importing-past-history)
  - [Supported import methods](#supported-import-methods)
    - [Privacy data](#privacy-data)
    - [Full privacy data](#full-privacy-data)
  - [Troubleshoot](#troubleshoot)
- [FAQ](#faq)
- [External guides](#external-guides)
- [Contributing](#contributing)
- [Sponsoring](#sponsoring)

# Prerequisites

1. You have to own a Spotify application ID that you can create through their [dashboard](https://developer.spotify.com/dashboard/applications).
2. You need to provide the **Server** environment the **public** AND **secret** key of the application (cf. [Installation](#installation)).
3. You need to provide an **authorized** redirect URI to the `docker-compose` file.

> A tutorial is available at the end of this readme.

# Installation

## Using `docker-compose`

Follow the [docker-compose-example.yml](https://github.com/Yooooomi/your_spotify/blob/master/docker-compose-example.yml) to host your application through docker.

```yml
version: ""3""

services:
  server:
    image: yooooomi/your_spotify_server
    restart: always
    ports:
      - ""8080:8080""
    links:
      - mongo
    depends_on:
      - mongo
    environment:
      - API_ENDPOINT=http://localhost:8080 # This MUST be included as a valid URL in the spotify dashboard (see below)
      - CLIENT_ENDPOINT=http://localhost:3000
      - SPOTIFY_PUBLIC=__your_spotify_client_id__
      - SPOTIFY_SECRET=__your_spotify_secret__
      - CORS=http://localhost:3000,http://localhost:3001 # all if you want to allow every origin
  mongo:
    container_name: mongo
    image: mongo:4.4.8
    volumes:
      - ./your_spotify_db:/data/db

  web:
    image: yooooomi/your_spotify_client
    restart: always
    ports:
      - ""3000:3000""
    environment:
      - API_ENDPOINT=http://localhost:8080
```

> Some ARM-based devices might have trouble with Mongo >= 5. I suggest you use the image **mongo:4.4**.

## Installing locally (not recommended)

You can follow the instructions [here](https://github.com/Yooooomi/your_spotify/blob/master/LOCAL_INSTALL.md). Note that you will still have to do the steps below.

## Environment

| Key | Default value (if any) | Description |
| :--- | :--- | :--- |
| CLIENT_ENDPOINT       | REQUIRED | The endpoint of your web application |
| API_ENDPOINT          | REQUIRED | The endpoint of your server |
| SPOTIFY_PUBLIC        | REQUIRED | The public key of your Spotify application (cf [Creating the Spotify Application](#creating-the-spotify-application)) |
| SPOTIFY_SECRET        | REQUIRED | The secret key of your Spotify application (cf [Creating the Spotify Application](#creating-the-spotify-application)) |
| CORS                  | all      | List of comma-separated origin allowed, or all to allow any origin |
| MAX_IMPORT_CACHE_SIZE | Infinite | The maximum element in the cache when importing data from an outside source, more cache means less requests to Spotify, resulting in faster imports |
| MONGO_ENDPOINT        | mongodb://mongo:27017/your_spotify | The endpoint of the Mongo database |
| PORT                  | 8080 | The port of the server, do not modify if you're using docker |
| TIMEZONE              | Europe/Paris | The timezone of your stats, only affects read requests since data is saved with UTC time |
| LOG_LEVEL             | info | The log level, debug is useful if you encouter any bugs |

## CORS

You can edit the CORS for the server:

- `all` will allow every source.
- `origin1,origin2` will allow `origin1` and `origin2`.

# Creating the Spotify Application

For **YourSpotify** to work you need to provide a Spotify application **public** AND **secret** to the server environment.
To do so, you need to create a **Spotify application** [here](https://developer.spotify.com/dashboard/applications).

1. Click on **Create a client ID**.
2. Fill out all the informations.
3. Copy the **public** and the **secret** key into your `docker-compose` file under the name of `SPOTIFY_PUBLIC` and `SPOTIFY_SECRET`
   respectively.
4. Add an authorized redirect URI corresponding to your **server** location on the internet adding the suffix **/oauth/spotify/callback**.
   1. use the `EDIT SETTINGS` button on the top right corner of the page.
   2. add your URI under the `Redirect URIs` section.
   - i.e: `http://localhost:8080/oauth/spotify/callback` or `http://home.mydomain.com/your_spotify_backend/oauth/spotify/callback`
   3. Do not forget to hit the save button at the bottom of the popup.

# Importing past history

By default, **YourSpotify** will only retrieve data for the past 24 hours once registered. This is a technical limitation. However, you can import previous data by two ways.

The import process uses cache to limit requests to the Spotify API. By default, the cache size is unlimited, but you can limit is with the `MAX_IMPORT_CACHE_SIZE` env variable in the **server**.

## Supported import methods

### Privacy data

- Request your **privacy data** at Spotify to have access to your history for the past year [here](https://www.spotify.com/us/account/privacy/).
- Head to the **Settings** page and choose the **privacy** method.
- Input your files starting with `StreamingHistoryX.json`.
- Start your import.

### Full privacy data

> Full privacy data can be obtained by emailing **privacy@spotify.com** and requesting your data since the creation of the account.

- Request your data by email.
- Head to the **Settings** page and choose the **full-privacy** method.
- Input your files starting with `endsongX.json`.
- Start your import.

## Troubleshoot

An import can fail:
- If the server reboots.
- If a request fails 10 times in a row.

A failed import can be retried in the **Settings** page. Be sure to clean your failed imports if you do not want to retry it as it will remove the files used for it.

It is safer to import data at account creation. Though **YourSpotify** detects duplicates, some may still be inserted. However, song search is pretty accurate since it filters on artist then search for the song name.

# FAQ

> How can I block new registrations?

From an admin account, go to the **Settings** page and hit the **Disable new registrations** button.

> Songs don't seem to synchronize anymore.

This can happen if you revoked access on your Spotify account. To re-sync the songs, go to settings and hit the **Relog to Spotify** button.

> The web application is telling me it cannot retrieve global preferences.

This means that your web application can't connect to the backend. Check that your **API_ENDPOINT** env variable is reachable from the device you're using the platform from.

# External guides

- [BreadNet](https://breadnet.co.uk/installing) installation tutorial

# Contributing

If you have any issue or any idea that could make the project better, feel free to open an [issue](https://github.com/Yooooomi/your_spotify/issues/new/choose). I'd love to hear about new ideas or bugs you are encountering.

# Sponsoring

I work on this project on my spare time and try to fix issues as soon as I can. If you feel generous and think this project and my investment are worth a few cents, you can consider sponsoring it with the button on the right, many thanks.
"
95,satire6/Spotify,Pascal,"Toontown Online is a MMORPG created by Disney Interactive, shut down in 2013.

These are the source resource files for the game.
"
96,rinukkusu/spotify-dart,Dart,"# spotify-dart [![Pub](https://img.shields.io/pub/v/spotify.svg)](https://pub.dartlang.org/packages/spotify) ![Dart CI](https://github.com/rinukkusu/spotify-dart/workflows/Dart%20CI/badge.svg)

A dart library for interfacing with the Spotify API.

## Usage

### Simple Example

```dart
final credentials = SpotifyApiCredentials(clientId, clientSecret);
final spotify = SpotifyApi(credentials);
final artist = await spotify.artists.get('0OdUWJ0sBjDrqHygGUXeCF');
```

### Authorization
#### Client Credentials Flow
This flow is recommended when you only need access to public Spotify data. It cannot be used to access or manage a user's private data.

```dart
final credentials = SpotifyApiCredentials(clientId, clientSecret);
final spotify = SpotifyApi(credentials);
```
See the [wiki](https://github.com/rinukkusu/spotify-dart/wiki) for a list of implemented API endpoints.

#### Authorization Code Flow
This flow is suitable for long-running applications when you need to access or manage a user's private data. The Authorization Code Flow is a complex process, so it's highly recommended to read through [Spotify's Authorization Guide][spotify_auth] before attempting. Note that this package simplifies the creation of the authorization URI and the process of requesting tokens after receiving an authorization code.

```dart
final credentials = SpotifyApiCredentials(clientId, clientSecret);
final grant = SpotifyApi.authorizationCodeGrant(credentials);

// The URI to redirect to after the user grants or denies permission. It must
// be in your Spotify application's Redirect URI whitelist. This URI can
// either be a web address pointing to an authorization server or a fabricated
// URI that allows the client device to function as an authorization server.
final redirectUri = 'https://example.com/auth';

// See https://developer.spotify.com/documentation/general/guides/scopes/
// for a complete list of these Spotify authorization permissions. If no
// scopes are specified, only public Spotify information will be available.
final scopes = ['user-read-email', 'user-library-read'];

final authUri = grant.getAuthorizationUrl(
  Uri.parse(redirectUri),
  scopes: scopes, // scopes are optional
);

// `redirect` is an imaginary function that redirects the resource owner's
// browser to the `authUri` on the authorization server. Once the resource
// owner has authorized, they'll be redirected to the `redirectUri` with an
// authorization code. The exact implementation varies across platforms.
await redirect(authUri);

// `listen` is another imaginary function that listens for a request to
// `redirectUri` after the user grants or denies permission. Again, the
// exact implementation varies across platforms.
final responseUri = await listen(redirectUri);

final spotify = SpotifyApi.fromAuthCodeGrant(grant, responseUri);
```

<details>
  <summary>Click here to learn how to implement the imaginary functions mentioned above.</summary>
  
  -----
  
  Unfortunately, there's not a universal example for implementing the imaginary functions, `redirect` and `listen`, because different options exist for each platform.
      
  For Flutter apps, there's two popular approaches:
  1. Launch a browser using [url_launcher][] and listen for a redirect using [uni_links][].
      ```dart
      if (await canLaunch(authUri)) {
        await launch(authUri);
      }

      ...
  
      final linksStream = getLinksStream().listen((String link) async {
        if (link.startsWith(redirectUri)) {
          responseUri = link;
        }
      });
      ```

  2. Launch a WebView inside the app and listen for a redirect using [webview_flutter][].
      ```dart
      WebView(
        javascriptMode: JavascriptMode.unrestricted,
        initialUrl: authUri,
        navigationDelegate: (navReq) {
          if (navReq.url.startsWith(redirectUri)) {
            responseUri = navReq.url;
            return NavigationDecision.prevent;
          }
          
          return NavigationDecision.navigate;
        },
        ...
      );
      ```
   
  For Dart apps, the best approach depends on the available options for accessing a browser. In general, you'll need to launch the authorization URI through the client's browser and listen for the redirect URI.
</details>

#### Refreshing Using Serverside Code Flow
When using the Authorization Code Flow where the client requests a code and is exchanged on the server for the access token and refresh token, a custom client needs to be instantiated to handle the refreshing (as there is no client secret present within the application).

In this flow, you will have to manually save the user's access token and refresh token somewhere (secure storage on device or serverside).

```dart
import 'package:oauth2/oauth2.dart' as oauth2;

// starting with an accesstoken and/or refresh token
var credentials = new oauth2.Credentials(YOUR_ACCESS_TOKEN, 
    refreshToken: YOUR_REFRESH_TOKEN,
    tokenEndpoint: Uri.parse('https://accounts.spotify.com/api/token')
);

var client = new oauth2.Client(credentials,
    identifier: YOUR_SPOTIFY_CLIENT_ID,
);

var spotify = new SpotifyApi.fromClient(client);
```

Where you replace:
  * `YOUR_ACCESS_TOKEN`: The User's saved access token (even if expired)
  * `YOUR_REFRESH_TOKEN`: Cached refresh token 
  * `YOUR_SPOTIFY_CLIENT_ID`: The client identifier of your application

#### Saved Credentials Flow
No one wants to redo the Authorization Code Flow for every login or app start. If you save your credentials somewhere while authenticated, you can reconnect to Spotify later by passing those credentials into the constructor. If the access token is expired at this point, the credentials will be automatically refreshed. If the refresh token has been revoked for any reason, an exception will be thrown and you'll need to reauthenticate through another flow.

```dart
// Connect to Spotify using the Authorization Code Flow
final spotify = SpotifyApi(...);

// Save the credentials somewhere (local storage, database etc.)
someService.saveCredentials(spotify.getCredentials());

...

// Retrieve the saved credentials and use them to connect to Spotify
final credentials = someService.retrieveCredentials();

// All of these fields are required for the Saved Credentials Flow
final spotifyCredentials = SpotifyApiCredentials(
    credentials.clientId,
    credentials.clientSecret,
    accessToken: credentials.accessToken,
    refreshToken: credentials.refreshToken,
    scopes: credentials.scopes,
    expiration: credentials.expiration,
  );

final spotify = SpotifyApi(spotifyCredentials);

//The refresh token can be used to obtain just one access token. After token retrieval, a new refresh token is provided.
someService.saveCredentials(spotify.getCredentials());
```

If, for any reason, you are planning to leave the app open in the background for a very long time and access Spotify's API with variable intervals, spotify-dart will automatically refresh the token if it's expired and updates you with the new credentials (in particular you need the new refresh token) by using the following methods.

```dart
SpotifyApi api = SpotifyApi(spotifyCredentials, onCredentialsRefreshed: (SpotifyApiCredentials newCred) async {
          await _saveCredentials(newCred);
          print(""Saved from oauth"" + newCred.refreshToken);
        });
``` 

#### Access Token authentication
In case you already have a valid access token and you don't need to complete any of the above flows you can use this constructor.

```dart
var spotify = SpotifyApi.withAccessToken(accessToken);
```

In that case, you are responsible of refreshing and updating the token accordingly.

## Features and bugs

Please file feature requests and bugs at the [issue tracker][tracker].

## Development

### Generating JSON Serializers
Run `pub run build_runner build` to generate JSON serializers via [json_serializable][].
Run `pub run build_runner watch` to continuously rebuild serializers in the background when files are updated.

### Running tests
Run `pub run test` to run all of the tests in `test/spotify_test.dart`.

### Running example code
Run `pub run example/example` to run the example code. You'll need to modify `example/example.dart` to use your Spotify client ID and secret.

If you would like to run the example that accesses your user data (such as currently playing song etc.), run `pub run example/example_auth.dart`. There, you are requested to
enter your redirect url (see the comment above [`redirectUri`](#authorization-code-flow)). After that, you are requested to call a given url (or paste it into your browser). That url will do a redirect in your browser. You should copy and paste this redirected url into your console to see the currently playing song and your available devices.

[json_serializable]: https://pub.dartlang.org/packages/json_serializable
[spotify_auth]: https://developer.spotify.com/documentation/general/guides/authorization-guide/
[tracker]: https://github.com/rinukkusu/spotify-dart/issues
[uni_links]: https://pub.dev/packages/uni_links
[url_launcher]: https://pub.dev/packages/url_launcher
[webview_flutter]: https://pub.dev/packages/webview_flutter
"
97,custom-cards/spotify-card,TypeScript,"[![hacs_badge](https://img.shields.io/badge/HACS-Default-orange.svg)](https://github.com/custom-components/hacs) [![spotify-card](https://img.shields.io/github/release/custom-cards/spotify-card.svg)](https://github.com/custom-cards/spotify-card)

![Build](https://github.com/custom-cards/spotify-card/workflows/Build/badge.svg)

## Home Assistant Spotify Lovelace Card

**DISCLAIMER**: _This project is a private open source project and doesn't have any connection with Spotify._

This card supports listing the users currently available devices and the users playlists on [Spotify](https://www.spotify.com). Choose an online media player and click on a playlist to play it on the device. This component will query the current playback from the [Spotify Integration](https://www.home-assistant.io/integrations/spotify/) and tries to reflect the currently playing playlist.

The component uses the [Spotify Integration](https://www.home-assistant.io/integrations/spotify/) and [spotcast](https://github.com/fondberg/spotcast) and both of them have to be installed for the card to function properly.

The forum thread can be found [here](https://community.home-assistant.io/t/spotify-lovelace-card/103525)

<img src=""pics/grid.png"" width=""300"">

## See release information on Github for release notes

### Requirements

[Spotify Integration](https://www.home-assistant.io/integrations/spotify/) and [spotcast](https://github.com/fondberg/spotcast) have to be installed (Spotcast is needed for many other things than playing on cast devices).
This card should work in all newer major browsers. If it does not work for you please provide detailed reports in an issue ticket.

### Installation

#### HACS users

Follow the HACS instructions when installing it.

#### Manually

Copy the content of the `dist` folder to `www/community/spotify-card/` in your Home Assistant configuration directory. Create these folders if they do not exist.

Then you have to add spotify card to your resources. This can be done via `Settings -> Lovelace Dashboards -> Resources`. Add this path:

```
  /local/community/spotify-card/spotify-card.js
```

If you do not have the `Resources` tab available, you have to enable the advanced mode for Lovelace. To do so, click on your username on your Home Assistant dashboard and enanble the setting.

### Usage

Add the card via lovelace to your dashboard. All of the settings can be configured via the visual editor.

#### Advanced usage

##### Device filtering

If you want to hide specific devices, you can do so in the advanced tab of the visual editor. If you are not using the visual editor see [YAML mode](YAML-mode).
You can enter as many regular expressions as you like, separated by a comma. If any of these rules apply to a device-name it will be hidden. The rules are evaluated against the whole device-name so `room` will not match `bedroom`. Here are a few examples:

- `.*room` hides all devices ending with room
- `bath.*,kids.*` hides all devices which start with bath or kids

##### Playlist filtering

You can filter the playlists you want on a specific card instance. Just enter as many regular expressions as you like, separated by a comma.
Playlists are first requested through spotcast websocket API, and *then* filtered. It means that if you fetch 10 playlists, only those 10 will be filtered.

The filters are inclusive, so it means that, as soon as you set at least one filter, a playlist will be included *only* if it matches at least one filter.

Filters can apply on any top-level attributes (ie any attributes defined in [interface](https://github.com/custom-cards/spotify-card/blob/master/src/types.ts#L129)).

You can specify filters in 2 ways:

- with only pattern, ex `.*rock.*`, then it will filter only on `name` attribute
- with field + pattern, ex `description:.*rock.*`, then it will filter on given field.

##### Known Spotify Connect devices

You can specify a pre-known Spotify Connect devices that are not showing up in the devices list although they are available in the network.
This is useful for smart WiFi speakers that are not connected specifically to your Spotify account and are available visible only inside the home WiFi network, such as Sonos speakers. 

To add a device, start a playback on it and then click the add button in the card editor. You can also manually configure devices, if know the device id (see [spotcast guide for finding the device id](https://github.com/fondberg/spotcast#find-spotify-device-id)).

#### YAML mode

If you are not using the visual configuration of Lovelace you can add the card like this:

```yaml
  cards:
    - type: 'custom:spotify-card'
      account: <optional> which account to use for spotcast. Defaults to ""default""
      height: <optional pixels height for the playlist element. If content is larger scrolling will be enabled>
      limit: <optional number of playlists to retrieve (default 10)>
      device: <optional name of a device to pre-select>
      playlist_type: <optional featured|discover-weekly> Change type of playlists shown. Default are your normal playlists.
      always_play_random_song: <optional true> Set to start playlists from a random song.
      country_code: <optional country code to show featured playlist relevent to a particular country. https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2 >
      hide_warning: <optional true> Hide warnings if they are displayed.
      name: <optional name> Custom title. Leave empty to hide.
      display_style: <optional Grid> Change default display style.
      grid_covers_per_row: <optional number> Number of covers per row (default 3) in Grid-view.
      spotify_entity: <optional> Name of your spotify media player entity if it doesn't start with ""spotify""
      default_device: <optional> Name of your spotify connect or chromecast device, e.g. ""Kitchen""
      filter_devices: <optional Array> Hides devices which matches any array entry. The entries have to be regular expressions and are matched against the full device-name. The following are examples
        - .*room <hides all devices ending with room>
        - bath.*,kids.* <hides all devices which start with bath or kids>
      known_connect_devices: <optional> List of known Spotify Connect devices, see [Known Spotify Connect devices](Known-Spotify-Connect-devices) section
        - id: The Spotify Connect device id
          name: The name of the device
          entity_id: <optional> The Home Assistant media player entity id of this device (e.g. from Sonos integration)
```

### Screenshots

<img src=""pics/list.png"" height=""300"">
<img src=""pics/conf.png"" height=""300"">

### General usage

This library can of course also be used on other websites or projects other than Home Assistant

### CONTRIBUTING

Please contribute and help. Before creating a large PR make sure to sync about it with me.

### License

This library is licensed under Apache 2.0, see [LICENSE](./LICENSE)
"
98,mackorone/spotify-playlist-archive,Python,"# spotify-playlist-archive [![Workflow status](https://github.com/mackorone/spotify-playlist-archive/actions/workflows/main.yml/badge.svg)](https://github.com/mackorone/spotify-playlist-archive/actions/workflows/main.yml) <a href=""https://www.buymeacoffee.com/mackorone""><img align=""right"" height=36 alt=""Save the Children"" src=""https://cdn.buymeacoffee.com/buttons/v2/default-yellow.png""></a>

> Daily snapshots of public Spotify playlists

Spotify's playlists are great. I like that they're updated once in a while -
change is good! I don't like, however, that it's impossible to see older
versions. How am I supposed to remember the name of that song I really liked?
Apparently, I'm not alone:
[\[1\]](https://community.spotify.com/t5/Desktop-Mac/Find-Songs-of-old-versions-of-Spotify-Playlists/td-p/998504),
[\[2\]](https://community.spotify.com/t5/Accounts/A-playlist-was-modified-Can-I-get-the-old-songs-back/td-p/1001889),
[\[3\]](https://community.spotify.com/t5/Content-Questions/Today-s-top-hits-old-songs/td-p/1005003),
[\[4\]](https://community.spotify.com/t5/Closed-Ideas/Playlist-Versioning-History/idi-p/1133819),
[\[5\]](https://community.spotify.com/t5/Archived-Chat/Looking-for-an-old-version-of-Brain-Food-playlist/td-p/1285086),
[\[6\]](https://community.spotify.com/t5/Content-Questions/Seeing-an-old-version-of-a-playlist/td-p/1318739),
[\[7\]](https://community.spotify.com/t5/Closed-Ideas/Playlist-History-Versioning/idi-p/1346418),
[\[8\]](https://community.spotify.com/t5/Content-Questions/88-Keys-playlist-changed-need-to-find-old-songs/td-p/1357743),
[\[9\]](https://community.spotify.com/t5/Closed-Ideas/Playlists-Playlist-History/idi-p/1816799),
[\[10\]](https://community.spotify.com/t5/Chat/Old-Brain-Food-Playlist-Song/td-p/2112581),
[\[11\]](https://community.spotify.com/t5/Archived-Chat/Viewing-Spotify-playlist-history/td-p/2369783),
[\[12\]](https://community.spotify.com/t5/Content-Questions/Spotify-Changed-Playlist-Content-and-I-would-like-the-old-songs/td-p/4367300),
[\[13\]](https://community.spotify.com/t5/Content-Questions/View-previous-versions-of-playlists/td-p/4400750),
[\[14\]](https://community.spotify.com/t5/Archived-Chat/Is-it-possible-to-restore-older-version-of-followed-playlist/td-p/4439946),
[\[15\]](https://community.spotify.com/t5/Chat/Spotify-changes-playlists/td-p/4508967),
[\[16\]](https://community.spotify.com/t5/Closed-Ideas/Playlists-Edit-History/idi-p/4573743),
[\[17\]](https://community.spotify.com/t5/Other-Podcasts-Partners-etc/Playlists-Is-there-any-way-to-recover-previous-versions-of-a/td-p/4726831),
[\[18\]](https://community.spotify.com/t5/Content-Questions/Recover-old-version-of-a-Spotify-created-playlist/td-p/4893267),
[\[19\]](https://community.spotify.com/t5/Chat/Recover-previous-version-of-Spotify-playlist-quot-Rainy-Day-quot/td-p/5081678),
[\[20\]](https://community.spotify.com/t5/Content-Questions/POLLEN-Viewing-songs-that-have-been-taken-off-the-playlist/td-p/5085718).

Since Spotify won't take snapshots of our favorite playlists, let's do it ourselves!

## Quick start

There are two options for browsing the archive:
1. https://spotifyplaylistarchive.com/
1. Use the autogenerated list [below](https://github.com/mackorone/spotify-playlist-archive#playlists)

To add a playlist to the archive, see [these instructions](https://github.com/mackorone/spotify-playlist-archive/blob/main/CONTRIBUTING.md#adding-playlists).

## How it works

This repository contains a script for scraping Spotify playlists and publishing
them back to the repo. The script is run daily via
[GitHub Actions](https://github.com/mackorone/spotify-playlist-archive/actions/workflows/main.yml).
It's also run after every commit, which means that playlists get regenerated
whenever the scraping or formatting logic changes, or when new playlists are
added.

The script determines which playlists to scrape by looking at the file names in
`playlists/registry`. Files get regenerated as follows: a pretty version of each
playlist gets dumped in `playlists/pretty`, new tracks are added to the
files in `playlists/cumulative`, and a plaintext version of each playlist is
written to `playlists/plain`. The plain version is sorted alphabetically, rather
than by track number, so that it only changes when tracks are added or removed,
making [Git History](https://githistory.xyz/) a nice way to visualize how the
playlist evolves over time.

### Aliases

Aliases are alternative playlists names. They're useful for avoiding
naming collisions when archiving personalized playlists, which have the
same name for every user. To add an alias, add a single line
containing the desired name to `playlists/registry/<playlist_id>`.

## Playlists

- [\#FlashbackFriday](/playlists/pretty/2dWfCGZguakRQagX7wM6Mi.md)
- [\#Hotmess](/playlists/pretty/2Rah43YvyO765e4gACIDef.md)
- [\#JazzAppreciationMonth](/playlists/pretty/2nb7lCySvvf7PNxHUD5oun.md)
- [\#MakeitHappen](/playlists/pretty/5sty33UvgJZzeyfocoOaUV.md)
- [\#SpotifyTBT: 2009 Hits](/playlists/pretty/37i9dQZF1DX5RPDzQ25TM3.md)
- [\#SpotifyTBT: Song of the Year](/playlists/pretty/37i9dQZF1DX6bxAUv7BcDH.md)
- [\#SpotifyTBT: Women of Country](/playlists/pretty/37i9dQZF1DWTQrwBpetTXv.md)
- [\#SundayFunday](/playlists/pretty/5cdRxEiQmawJaraYYEF7Di.md)
- ['90s Baby Makers](/playlists/pretty/37i9dQZF1DWVEvzGeX3eRs.md)
- ['fit check](/playlists/pretty/37i9dQZF1DX1dvMSwf27JO.md)
- [\(Descent\) A Beginning](/playlists/pretty/71WgbCkbVXGzAltJTAT6lD.md)
- [+852 Rising](/playlists/pretty/37i9dQZF1DX5JZ2TewQjUr.md)
- [\-BELLE\-　竜とそばかすの姫](/playlists/pretty/37i9dQZF1DX0Y8kMPjaqrb.md)
- [.ORG](/playlists/pretty/37i9dQZF1DWXQXM7agvwjO.md)
- [00s Arabic Hits](/playlists/pretty/37i9dQZF1DWTTCCEjVC99N.md)
- [00s Ballads](/playlists/pretty/37i9dQZF1DX4laDTTxplAf.md)
- [00s Indie Folk](/playlists/pretty/37i9dQZF1DXajkNVL0LazE.md)
- [00s Latino](/playlists/pretty/37i9dQZF1DWWfSNTZNgABD.md)
- [00s Love Songs](/playlists/pretty/37i9dQZF1DXd0DyosUBZQ7.md)
- [00s Metal Classics](/playlists/pretty/37i9dQZF1DWXNFSTtym834.md)
- [00s Pop Rock](/playlists/pretty/37i9dQZF1DX9vEn8vBG5Y1.md)
- [00s Rock Anthems](/playlists/pretty/37i9dQZF1DX3oM43CtKnRV.md)
- [00s Soft Rock](/playlists/pretty/37i9dQZF1DXb29NQI3OtQI.md)
- [00s Summer Rock](/playlists/pretty/37i9dQZF1DWZHO2BTzHF4G.md)
- [100](/playlists/pretty/37i9dQZF1DWXfgo3OOonqa.md)
- [100 Best African Love Songs](/playlists/pretty/37i9dQZF1DWZEBR5Lu37rb.md)
- [100 Uplifting Songs](/playlists/pretty/6Qf2sXTjlH3HH30Ijo6AUp.md)
- [100% Cuarteto](/playlists/pretty/37i9dQZF1DX490QbTioWDE.md)
- [100% Cumbia](/playlists/pretty/37i9dQZF1DX8yLfjPY8emY.md)
- [100% Lounge](/playlists/pretty/37i9dQZF1DXdQP3bGyOAvs.md)
- [101\_FTB](/playlists/pretty/6llXb59kkj2STIMBcDobJT.md)
- [10s Ballads](/playlists/pretty/37i9dQZF1DXc2ncgvdQknc.md)
- [10s Indie Folk](/playlists/pretty/37i9dQZF1DX33sAKOXmmb7.md)
- [10s Latino](/playlists/pretty/37i9dQZF1DWZQkHAMKYFuV.md)
- [10s Love Songs](/playlists/pretty/37i9dQZF1DWVTfbQdQ8l7H.md)
- [10s Metal Classics](/playlists/pretty/37i9dQZF1DWUnhhRs5u3TO.md)
- [10s Pop Rock](/playlists/pretty/37i9dQZF1DWWCk4v3ohhHQ.md)
- [10s Rock Anthems](/playlists/pretty/37i9dQZF1DX99DRG9N39X3.md)
- [10s Soft Rock](/playlists/pretty/37i9dQZF1DXcf57PJZ9901.md)
- [10s Summer Rock](/playlists/pretty/37i9dQZF1DXcSfa3jsASp1.md)
- [12"" Classics](/playlists/pretty/37i9dQZF1DXbNxO0uJPyJ9.md)
- [1960](/playlists/pretty/2PE0DbAlT8ZFiiYaCsCm4Q.md)
- [1960s Nostalgia](/playlists/pretty/2NFOUmp2wyR5CrXtKDkUkB.md)
- [1961](/playlists/pretty/7EhO7YjjFdrNRtTHcRrnnQ.md)
- [1962](/playlists/pretty/7GSt7smvMMAiOFmPJ17jEf.md)
- [1963](/playlists/pretty/6c1DPPuq4eNKcS2usgij9m.md)
- [1964](/playlists/pretty/2XFhZrcFAFFvBLjRQrw9wI.md)
- [1965](/playlists/pretty/48GGszBLm7kS5D1xJuMnxD.md)
- [1966](/playlists/pretty/41YL3HcXd3zTXa1rMZY5uR.md)
- [1967](/playlists/pretty/3nT5EK7WTRbRZ5vtWg5irD.md)
- [1968](/playlists/pretty/0sbkEFgqbA3Jjot2lbqsyx.md)
- [1969](/playlists/pretty/1xZ87c95aRIeyvqVoKCtdM.md)
- [1970](/playlists/pretty/09D0CKBRWkBBoPn46V6YTO.md)
- [1971](/playlists/pretty/5xAfItDaeAViBRNdSuQ7ZG.md)
- [1972](/playlists/pretty/1DcArrb34m9SS3o8O2dATX.md)
- [1973](/playlists/pretty/5WUFWhGRVpi4ED9QpK2hOF.md)
- [1974](/playlists/pretty/78UTV8Gw5bHpyWc65qR4Px.md)
- [1975](/playlists/pretty/67FrRIrS2v0WAs8yE2JTUM.md)
- [1976](/playlists/pretty/3axv4DMbWHWf7uxOPB1I7K.md)
- [1977](/playlists/pretty/2cIkPMesqdx5VV6IAvX9bE.md)
- [1978](/playlists/pretty/05dTMGk8MjnpQg3bKuoXcc.md)
- [1979](/playlists/pretty/2xtEcvpPTus59Ppa0fv3xP.md)
- [1980](/playlists/pretty/4j0G7LOHRpKYDDXa8lxUik.md)
- [1981](/playlists/pretty/5Co3nToduGTXXF1ra9gXB3.md)
- [1982](/playlists/pretty/722UH6DU3oigTYKBnfBZSy.md)
- [1983](/playlists/pretty/2wHQqJDXcWgQ4GLdVCfb8G.md)
- [1984](/playlists/pretty/0FXAO6yBxrfz5PTOEuvq67.md)
- [1985](/playlists/pretty/5p5jgESe4r75R70Rzvqpcy.md)
- [1986](/playlists/pretty/3GM3OMvut5VuRht0dr8GJX.md)
- [1987](/playlists/pretty/6sKz6mI28U6Dcj7a8WpRnQ.md)
- [1989](/playlists/pretty/1ASJaLRG6NhOpwc8vGYceZ.md)
- [1990](/playlists/pretty/0COE1X7FirWRdfOgls1JJV.md)
- [1991](/playlists/pretty/6ATJMRUakF2bhZcPBYjnD5.md)
- [1992](/playlists/pretty/62NfPhRvacdmSAsNghaRs5.md)
- [1993](/playlists/pretty/33sPgLhtkMgQLWMgdHRQma.md)
- [1994](/playlists/pretty/27hnSuEcFg6wr5C5t3J5eL.md)
- [1996](/playlists/pretty/1FDK3hDHMSyzjC1IpdIOU3.md)
- [1997](/playlists/pretty/4nftZhTZDARHbC2oX5l2Vw.md)
- [1999](/playlists/pretty/1WkrD0MvdN3BcLa4DXBRCQ.md)
- [2 \. 24](/playlists/pretty/37i9dQZF1DXaitacWUJMPH.md)
- [20 Questions](/playlists/pretty/37i9dQZF1DX4b3CsyjLN6p.md)
- [2000](/playlists/pretty/0JvFNpF6sn3LeV5LXbbSxv.md)
- [2000's Hip Hop](/playlists/pretty/01pNIDYGqmeawppy32wr3D.md)
- [2000s Country](/playlists/pretty/37i9dQZF1DXdxUH6sNtcDe.md)
- [2000s Heartache](/playlists/pretty/37i9dQZF1DWUw3COUvHCkS.md)
- [2000s Hits Throwbacks](/playlists/pretty/2f6tXtN0XesjONxicAzMIw.md)
- [2000s Screamo](/playlists/pretty/37i9dQZF1DX8sGALGjOrTu.md)
- [2001](/playlists/pretty/5TUU1rXz87AipJYg92AXFg.md)
- [2002](/playlists/pretty/665gwFk3RaSHbgiimtgok0.md)
- [2003](/playlists/pretty/2I7h7Mj5bGlqhI4PyupTPF.md)
- [2004](/playlists/pretty/1XbPuTCA2KsqAOn9PJploZ.md)
- [2006](/playlists/pretty/1Gn0PYtF7VmfuZD0Gb91fN.md)
- [2007](/playlists/pretty/0KIKHBXChX4m2MVm8qQk6N.md)
- [2008](/playlists/pretty/3jibtPWLDXBK0OCJN6Ztsf.md)
- [2009](/playlists/pretty/1fLy5EE5473UueC82LvQub.md)
- [2010](/playlists/pretty/2eCpwX876ZuWtIsZweYMnr.md)
- [2010s Country](/playlists/pretty/37i9dQZF1DWXdiK4WAVRUW.md)
- [2010s Hits 🔥](/playlists/pretty/1tPWTwuxOLsE2Do1JQSUxA.md)
- [2011](/playlists/pretty/0BXZJ6BiA151CzaMcTKPMN.md)
- [2012](/playlists/pretty/7z2Wo5a21ENb24YGcEdoTE.md)
- [2017 Dove Award Winners](/playlists/pretty/37i9dQZF1DX00QnRFT3a0O.md)
- [2022 Billboard Music Awards](/playlists/pretty/37i9dQZF1DWWGeEU3DbvDJ.md)
- [21st Century Jazz](/playlists/pretty/37i9dQZF1DWTR6lD3pmkqP.md)
- [24K Magic Radio](/playlists/pretty/37i9dQZF1E8LxY0mOH4jEX.md)
- [30 km/h](/playlists/pretty/37i9dQZF1DX0sQWfevMRw3.md)
- [303 Classics](/playlists/pretty/37i9dQZF1DX202yvKb0g9m.md)
- [365 Days Official Playlist](/playlists/pretty/37i9dQZF1DX0JXQl1bmFgT.md)
- [38 Great Female Duets](/playlists/pretty/1xAmEtLT8c17IisGUa1f4M.md)
- [40s Country](/playlists/pretty/37i9dQZF1DX0vVAWnG6fKT.md)
- [4:00 AM GROOVE](/playlists/pretty/37i9dQZF1DXbShqaetC9Tw.md)
- [4AM Chillout](/playlists/pretty/37i9dQZF1DXdbizRAR17Ui.md)
- [4AM Perreo](/playlists/pretty/37i9dQZF1DX0J2sZQ1dV6f.md)
- [4th of July Family Fun](/playlists/pretty/37i9dQZF1DWUs5ZfyIp6hP.md)
- [4th of July Party](/playlists/pretty/37i9dQZF1DX4nYqGKSH0ld.md)
- [50 Himnos del Rock en Español](/playlists/pretty/37i9dQZF1DX5d5pMk8ynO3.md)
- [50 Irish Folk Songs](/playlists/pretty/37i9dQZF1DX7Y2xcY13mN1.md)
- [50 Latin Classics](/playlists/pretty/37i9dQZF1DWZJIhAWlsiOv.md)
- [50 Songs for Snow](/playlists/pretty/4sEKPcBYLcW3woDviiaigj.md)
- [50s Country](/playlists/pretty/37i9dQZF1DWWnpcjfCqaW0.md)
- [50s Latino](/playlists/pretty/37i9dQZF1DX9gHUsLp9bcj.md)
- [50s Love Songs](/playlists/pretty/37i9dQZF1DWUGhrXBsyMVJ.md)
- [50s Party](/playlists/pretty/37i9dQZF1DWSwFS0Z6E1ep.md)
- [60s Ballads](/playlists/pretty/37i9dQZF1DWVAWtyHQImlQ.md)
- [60s Country](/playlists/pretty/37i9dQZF1DX7CGYgLhqwu5.md)
- [60s Latino](/playlists/pretty/37i9dQZF1DX9TCQkJ8ktzo.md)
- [60s Love Songs](/playlists/pretty/37i9dQZF1DWYUCqLrWKr4p.md)
- [60s Party](/playlists/pretty/37i9dQZF1DX3AdAEX3vkB1.md)
- [60s Rock Anthems](/playlists/pretty/37i9dQZF1DWWzBc3TOlaAV.md)
- [6PM Indie](/playlists/pretty/37i9dQZF1DXbXWGZfG4d1b.md)
- [70s & 80s Acoustic](/playlists/pretty/37i9dQZF1DX0JKUIfwQSJh.md)
- [70s Ballads](/playlists/pretty/37i9dQZF1DWXrcZh4Kf8Qx.md)
- [70s Country](/playlists/pretty/37i9dQZF1DWYP5PUsVbso9.md)
- [70s Latino](/playlists/pretty/37i9dQZF1DWVdIlYm88oQy.md)
- [70s Love Songs](/playlists/pretty/37i9dQZF1DWY373eEGlSj4.md)
- [70s Party](/playlists/pretty/37i9dQZF1DX1Hya1sRqqxI.md)
- [70s Road Trip](/playlists/pretty/37i9dQZF1DWWiDhnQ2IIru.md)
- [70s Rock Anthems](/playlists/pretty/37i9dQZF1DWWwzidNQX6jx.md)
- [70s Soft Rock](/playlists/pretty/37i9dQZF1DX50zbPdCCGia.md)
- [70s Soul Classics](/playlists/pretty/37i9dQZF1DWULEW2RfoSCi.md)
- [70s Summer Rock](/playlists/pretty/37i9dQZF1DX821Oj2DrHJk.md)
- [8 Bit Hits](/playlists/pretty/37i9dQZF1DWVr03NrIUlx5.md)
- [808 Classics](/playlists/pretty/37i9dQZF1DX2SiqF4iBnmO.md)
- [808.](/playlists/pretty/37i9dQZF1DX2y6end4Tb8T.md)
- [80s Ballads](/playlists/pretty/37i9dQZF1DXdg0VZ8UGKsU.md)
- [80s Boogie](/playlists/pretty/37i9dQZF1DWX5tULOO5PjY.md)
- [80s Classic Hits](/playlists/pretty/2peJPuYDQJMsmEpjqMALnl.md)
- [80s Country](/playlists/pretty/37i9dQZF1DX6RCydf9ytsj.md)
- [80s Latino](/playlists/pretty/37i9dQZF1DWVWEJ7IcHiFv.md)
- [80s Love Songs](/playlists/pretty/37i9dQZF1DXc3KygMa1OE7.md)
- [80s Party](/playlists/pretty/37i9dQZF1DX6xnkAwJX7tn.md)
- [80s Pop Rock](/playlists/pretty/37i9dQZF1DWWLS4T1o0HG9.md)
- [80s Rock Anthems](/playlists/pretty/37i9dQZF1DX1spT6G94GFC.md)
- [80s Rock Drive](/playlists/pretty/37i9dQZF1DX206LSYrawGc.md)
- [80s Smash Hits](/playlists/pretty/19PgP2QSGPcm6Ve8VhbtpG.md)
- [80s Soft Rock](/playlists/pretty/37i9dQZF1DXccljMjoDjBT.md)
- [80s Summer Rock](/playlists/pretty/37i9dQZF1DXaKs4phBF9kX.md)
- [80s Workout](/playlists/pretty/37i9dQZF1DWZY6U3N4Hq7n.md)
- [90's Alt Rock](/playlists/pretty/65mTEy33PMBRsfVtpwexlc.md)
- [90's Hip Hop Don't Stop](/playlists/pretty/7HQu1GUDVSx64GdCpaB88I.md)
- [90's Workout](/playlists/pretty/37i9dQZF1DXdMm3yYbD7IO.md)
- [909 Classics](/playlists/pretty/37i9dQZF1DX6qMmUY0JUQO.md)
- [90s](/playlists/pretty/6wsFITBT08NA12LlCG9h3Q.md)
- [90s Acoustic](/playlists/pretty/37i9dQZF1DXb9LIXaj5WhL.md)
- [90s Alternative Rock](/playlists/pretty/20LKsiDZd4ALrlihncFcFa.md)
- [90s Arabic Hits](/playlists/pretty/37i9dQZF1DXaHuo0R6jTxZ.md)
- [90s Ballads](/playlists/pretty/37i9dQZF1DX7L1VcqQ1quZ.md)
- [90s Boy Bands](/playlists/pretty/37i9dQZF1DX17dmzi8A5FV.md)
- [90s Country](/playlists/pretty/37i9dQZF1DWVpjAJGB70vU.md)
- [90s House Classics](/playlists/pretty/37i9dQZF1DWTU3Zl0elDUa.md)
- [90s Latino](/playlists/pretty/37i9dQZF1DX4g1k3dwPPvk.md)
- [90s Love Songs](/playlists/pretty/37i9dQZF1DWXqpDKK4ed9O.md)
- [90s Metal Classics](/playlists/pretty/37i9dQZF1DX08jcQJXDnEQ.md)
- [90s Party](/playlists/pretty/37i9dQZF1DXdo6A3mWpdWx.md)
- [90s Pop Rock](/playlists/pretty/37i9dQZF1DX3YMp9n8fkNx.md)
- [90s Pop Run](/playlists/pretty/37i9dQZF1DWUxdwkOJZYCJ.md)
- [90s Road Trip](/playlists/pretty/37i9dQZF1DX76cnmxfAAhD.md)
- [90s Rock Anthems](/playlists/pretty/37i9dQZF1DX1rVvRgjX59F.md)
- [90s Smash Hits](/playlists/pretty/3C64V048fGyQfCjmu9TIGA.md)
- [90s Soft Rock](/playlists/pretty/37i9dQZF1DXe3fHHqLkbnV.md)
- [90s Summer Rock](/playlists/pretty/37i9dQZF1DX1kznM9KyewU.md)
- [A Bite Out Of The Afternoon](/playlists/pretty/3uDgik1xOhjYVsXucW7GEb.md)
- [A Cappella Christmas](/playlists/pretty/37i9dQZF1DWTZ37yWkEort.md)
- [A Child's Garden of Verses](/playlists/pretty/37i9dQZF1DX1C9bnJXVI4K.md)
- [A Decade in K\-Pop](/playlists/pretty/37i9dQZF1DX2cVoXMHpaD1.md)
- [A Hipster's Guide to Poetry](/playlists/pretty/37i9dQZF1DX1DnmMwIpYQk.md)
- [A Long Now](/playlists/pretty/37i9dQZF1DWZOFbVrnsA55.md)
- [A Merry Lofi Christmas](/playlists/pretty/37i9dQZF1DWYK8AUzwi00m.md)
- [A Monty Python Emporium](/playlists/pretty/37i9dQZF1DXb85CZUwGLzX.md)
- [A Noam Chomsky Chronology](/playlists/pretty/37i9dQZF1DX8d1cgbQqKFy.md)
- [A Perfect Day](/playlists/pretty/37i9dQZF1DWSXBu5naYCM9.md)
- [A Poem a Day](/playlists/pretty/37i9dQZF1DXaVtcC7N0WMw.md)
- [A Quiet Christmas](/playlists/pretty/37i9dQZF1DWSYI3OtMNMsT.md)
- [A Soft Piano Christmas](/playlists/pretty/7J8HlMdOq82WJAU6JmhR5d.md)
- [A Sudden Rainstorm](/playlists/pretty/37i9dQZF1DX9NmDLwNQnXE.md)
- [A.M\. Commute](/playlists/pretty/1UQo7foKwUUMjb9KnaBE3S.md)
- [ACM Awards 2022](/playlists/pretty/37i9dQZF1DX13kFuGnInkY.md)
- [AMA Winners 2014](/playlists/pretty/37i9dQZF1DX3JLmmala1kX.md)
- [AMPLIFIKA](/playlists/pretty/37i9dQZF1DX95vhptNy3YE.md)
- [AMY](/playlists/pretty/3QAT1vJA7CAIHIRP9Gkyqj.md)
- [API Pride](/playlists/pretty/37i9dQZF1DX7eWGbr5dV3X.md)
- [APIHM Takeover: Alok Menon](/playlists/pretty/37i9dQZF1DXaBIwevZ5Lux.md)
- [APIHM Takeover: Amanda Nguyen](/playlists/pretty/37i9dQZF1DWVFEIJKF33Nk.md)
- [APIHM Takeover: CAPE](/playlists/pretty/37i9dQZF1DX2b9oUJWXOaZ.md)
- [APIHM Takeover: Malavika Kannan](/playlists/pretty/37i9dQZF1DX0mO9hA9XUb4.md)
- [ARMNHMR's DJ Mix](/playlists/pretty/37i9dQZF1DX2gO3SN574Ui.md)
- [ASMR Sleep](/playlists/pretty/37i9dQZF1DWUAeTOoyNaqm.md)
- [ASMR Sleep Whispers](/playlists/pretty/37i9dQZF1DXbZmKskFbVct.md)
- [AUGE](/playlists/pretty/37i9dQZF1DWZylNQMXNhNe.md)
- [AULAS](/playlists/pretty/37i9dQZF1DWSIvbYYt1Dvi.md)
- [Academia Reggaetón](/playlists/pretty/37i9dQZF1DXd8p9XRfIfUn.md)
- [Acalmando a Mente](/playlists/pretty/37i9dQZF1DXb8X0x7JMkJi.md)
- [Acid Blues](/playlists/pretty/37i9dQZF1DX5NXVhu59GCz.md)
- [Acid House](/playlists/pretty/37i9dQZF1DXbwcS5W73XRr.md)
- [Acid Jazz](/playlists/pretty/37i9dQZF1DWXHghfFFOaS6.md)
- [Acoustic Arabic](/playlists/pretty/37i9dQZF1DWTMD8irDo4sC.md)
- [Acoustic Blues](/playlists/pretty/37i9dQZF1DX2iUghHXGIjj.md)
- [Acoustic Cafe International](/playlists/pretty/37i9dQZF1DX571ttkrxAeN.md)
- [Acoustic Chill](/playlists/pretty/37i9dQZF1DWYGZAMYFDM8S.md)
- [Acoustic Christmas](/playlists/pretty/37i9dQZF1DX2uk5oHRWimT.md)
- [Acoustic Commute](/playlists/pretty/3OUguxmuL5x24sMAw4qPku.md)
- [Acoustic Concentration](/playlists/pretty/37i9dQZF1DXcLDm348RRYK.md)
- [Acoustic Covers](/playlists/pretty/37i9dQZF1DWXmlLSKkfdAk.md)
- [Acoustic Driving Songs](/playlists/pretty/6yU1l4H28UbyNjgTX1ozHv.md)
- [Acoustic Grit](/playlists/pretty/37i9dQZF1DXaiAJKcabR16.md)
- [Acoustic Hits](/playlists/pretty/37i9dQZF1DX4VvfRBFClxm.md)
- [Acoustic Hits: Oldies but Goodies](/playlists/pretty/37i9dQZF1DWUH2AzNQzWua.md)
- [Acoustic Love](/playlists/pretty/37i9dQZF1DWSlwBojgQEcN.md)
- [Acoustic Pilates](/playlists/pretty/37i9dQZF1DXcTpoGQmyr2B.md)
- [Acoustic Rock](/playlists/pretty/37i9dQZF1DX0rCrO4CFRfM.md)
- [Acoustic Soul](/playlists/pretty/37i9dQZF1DX5lDysu4GbKR.md)
- [Acoustic Throwbacks](/playlists/pretty/37i9dQZF1DX8TvdyVZSYFY.md)
- [Action & Adventure](/playlists/pretty/37i9dQZF1DXaIjTCDpbgLL.md)
- [Ada Twist's Science Songs Official Playlist](/playlists/pretty/37i9dQZF1DWX59EIlXKpKw.md)
- [Adam Beyer DJ Mix: Drum Codes](/playlists/pretty/37i9dQZF1DWTETgNEeTR8L.md)
- [Adam Lambert: Pride](/playlists/pretty/37i9dQZF1DX6WKkjNUHy2F.md)
- [Adrenaline Workout](/playlists/pretty/37i9dQZF1DXe6bgV3TmZOL.md)
- [African Blues](/playlists/pretty/37i9dQZF1DXeba6s3Tb8Fj.md)
- [African Heat](/playlists/pretty/37i9dQZF1DWYkaDif7Ztbp.md)
- [African Heat Presents..\. Best African Songs of 2021](/playlists/pretty/37i9dQZF1DXdD040nrEzxm.md)
- [Afro Arab](/playlists/pretty/37i9dQZF1DWSSgVr1ITJve.md)
- [Afro Bashment](/playlists/pretty/37i9dQZF1DXdeMORbC1XNa.md)
- [Afro Fusion](/playlists/pretty/37i9dQZF1DXdiuTkmMSmb9.md)
- [Afro Hits](/playlists/pretty/37i9dQZF1DWX0o6sD1a6P5.md)
- [Afro Party Anthems](/playlists/pretty/37i9dQZF1DWSjibQnF0bUk.md)
- [Afro Psychedelica](/playlists/pretty/37i9dQZF1DWVyizF9BJ61m.md)
- [Afro Ritmo](/playlists/pretty/37i9dQZF1DWYzQ2Vx5M6uV.md)
- [Afro Throwback](/playlists/pretty/37i9dQZF1DWT4nLa3WetIs.md)
- [AfroBoogie](/playlists/pretty/37i9dQZF1DWT6pI50XnTRh.md)
- [AfroGospel](/playlists/pretty/37i9dQZF1DX2LoKKKetKEw.md)
- [Afrobeat Essentials](/playlists/pretty/37i9dQZF1DX0ItcQfwbKZJ.md)
- [Afrocentric](/playlists/pretty/37i9dQZF1DWT2I2nyOA0zG.md)
- [Afropop](/playlists/pretty/37i9dQZF1DWYs2pvwxWA7l.md)
- [Afrotronica](/playlists/pretty/37i9dQZF1DX6eyIKoZCdug.md)
- [After Life Official Playlist](/playlists/pretty/37i9dQZF1DX0FQWBuUOlXj.md)
- [After Party//Come Down](/playlists/pretty/37i9dQZF1DX55vgfGaIdlF.md)
- [After Work](/playlists/pretty/37i9dQZF1DWSKtEVXBdAHi.md)
- [Afterhours](/playlists/pretty/37i9dQZF1DX0AZ24QB6TCx.md)
- [Afternoon Acoustic](/playlists/pretty/37i9dQZF1DX4E3UdUs7fUx.md)
- [Aguas Frescas](/playlists/pretty/37i9dQZF1DXa8DuxYig0Rl.md)
- [Aksamit's track IDs](/playlists/pretty/37i9dQZF1DXdO4V8LPxYLN.md)
- [Al Tiro](/playlists/pretty/37i9dQZF1DXdDoYRQ4LfQJ.md)
- [Alabanza y Gloria](/playlists/pretty/37i9dQZF1DWTkyVpP5GNAO.md)
- [Algeria Sounds](/playlists/pretty/37i9dQZF1DX7ZqKP81pHlu.md)
- [Alicia Keys](/playlists/pretty/3zxOlGe8vWwQA8eLRXBqTY.md)
- [Alitas & Chelas](/playlists/pretty/37i9dQZF1DWUvvUj1074WH.md)
- [Alive with Worship](/playlists/pretty/37i9dQZF1DWVVia6qTpojp.md)
- [All A Cappella](/playlists/pretty/37i9dQZF1DX3HYlktiFpE6.md)
- [All About Country](/playlists/pretty/37i9dQZF1DWSK8os4XIQBk.md)
- [All About That Brass](/playlists/pretty/37i9dQZF1DWXMEbgClM8hw.md)
- [All Funked Up](/playlists/pretty/37i9dQZF1DX4WgZiuR77Ef.md)
- [All New All Now](/playlists/pretty/37i9dQZF1DX8vwRmUsEIMT.md)
- [All New Indie](/playlists/pretty/37i9dQZF1DXdbXrPNafg9d.md)
- [All New Jazz](/playlists/pretty/37i9dQZF1DWW2c0C8Vb2IR.md)
- [All New Metal](/playlists/pretty/37i9dQZF1DX5J7FIl4q56G.md)
- [All New Punk](/playlists/pretty/37i9dQZF1DX0KpeLFwA3tO.md)
- [All New Rock](/playlists/pretty/37i9dQZF1DWZryfp6NSvtz.md)
- [All Night](/playlists/pretty/37i9dQZF1DWYosJTamOlmp.md)
- [All Out 00s](/playlists/pretty/37i9dQZF1DWZNJXX2UeBij.md)
- [All Out 2000s](/playlists/pretty/37i9dQZF1DX4o1oenSJRJd.md)
- [All Out 2010s](/playlists/pretty/37i9dQZF1DX5Ejj0EkURtP.md)
- [All Out 50s](/playlists/pretty/37i9dQZF1DWSV3Tk4GO2fq.md)
- [All Out 60s](/playlists/pretty/37i9dQZF1DXaKIA8E7WcJj.md)
- [All Out 70s](/playlists/pretty/37i9dQZF1DWTJ7xPn4vNaz.md)
- [All Out 80s](/playlists/pretty/37i9dQZF1DX4UtSsGT1Sbe.md)
- [All Out 90s](/playlists/pretty/37i9dQZF1DXbTxeAdrVG2l.md)
- [All The Feels](/playlists/pretty/37i9dQZF1DX7gIoKXt0gmx.md)
- [All Things Post](/playlists/pretty/37i9dQZF1DX9Mqxt6NLTDY.md)
- [All Time Pakistani Hits](/playlists/pretty/37i9dQZF1DX8ubeHYX0X34.md)
- [All You Need Is Love](/playlists/pretty/37i9dQZF1DX5k1GSjYBi0z.md)
- [All the Aloha: Native Hawaii](/playlists/pretty/37i9dQZF1DWY0N3eAirRjZ.md)
- [All\-Nighter](/playlists/pretty/37i9dQZF1DX692WcMwL2yW.md)
- [Alma](/playlists/pretty/37i9dQZF1DXcAPgsGLgd43.md)
- [Alone Again](/playlists/pretty/37i9dQZF1DWX83CujKHHOn.md)
- [Alone on Christmas](/playlists/pretty/37i9dQZF1DXbgPVq1ydgmS.md)
- [Alt Country Classics](/playlists/pretty/37i9dQZF1DWYBXdN7izJSV.md)
- [Alt NOW](/playlists/pretty/37i9dQZF1DWVqJMsgEN0F4.md)
- [Alt\-Blue](/playlists/pretty/37i9dQZF1DXd9H435blNqg.md)
- [Altar](/playlists/pretty/37i9dQZF1DXa71eg5j9dKZ.md)
- [Alternative 00s](/playlists/pretty/37i9dQZF1DX0YKekzl0blG.md)
- [Alternative 10s](/playlists/pretty/37i9dQZF1DX873GaRGUmPl.md)
- [Alternative 60s](/playlists/pretty/37i9dQZF1DX5qNE4zrflL7.md)
- [Alternative 70s](/playlists/pretty/37i9dQZF1DXb3ZjVksUlfu.md)
- [Alternative 80s](/playlists/pretty/37i9dQZF1DWTSKFpOdYF1r.md)
- [Alternative 90s](/playlists/pretty/37i9dQZF1DXaLI8a395lse.md)
- [Alternative Beats](/playlists/pretty/37i9dQZF1DWXMg4uP5o3dm.md)
- [Alternative Hip\-Hop](/playlists/pretty/37i9dQZF1DWTggY0yqBxES.md)
- [Alternative Love Songs](/playlists/pretty/37i9dQZF1DWZIQpJDqCc10.md)
- [Alternative Metal](/playlists/pretty/37i9dQZF1DWY5ai7gxfuaS.md)
- [Alternative New Year's Eve](/playlists/pretty/214Nwj78JwTfjSeQxbGxeX.md)
- [Alternative Noise](/playlists/pretty/37i9dQZF1DWTBN71pVn2Ej.md)
- [Alternative Pride](/playlists/pretty/37i9dQZF1DWTMR78LDoAZC.md)
- [Alternative R&B](/playlists/pretty/37i9dQZF1DWSfMe9z89s9B.md)
- [Alternative Rock's Most Precious Gems](/playlists/pretty/37i9dQZF1DXcKHVXMYcCuJ.md)
- [Alto Astral](/playlists/pretty/37i9dQZF1DWUIDYTCle9M9.md)
- [Alté Cruise](/playlists/pretty/37i9dQZF1DX5ja5oV6Kto0.md)
- [Always Perfect](/playlists/pretty/37i9dQZF1DX8ZxAQJCANsW.md)
- [AmaPiano Grooves](/playlists/pretty/37i9dQZF1DX5mILnBJLA26.md)
- [Amanda Kloots' AK! Dance Playlist](/playlists/pretty/37i9dQZF1DXa4Mh4maMlwS.md)
- [Amanhecer na Estrada](/playlists/pretty/37i9dQZF1DX7C2YzRKS41S.md)
- [Amapiano Grooves Presents..\. Best Amapiano Songs of 2021](/playlists/pretty/37i9dQZF1DX6sHwck3IBzT.md)
- [Ambient 1970s](/playlists/pretty/37i9dQZF1DXdgq0lsW8B2O.md)
- [Ambient 1980s](/playlists/pretty/37i9dQZF1DXc2NlKNewIrq.md)
- [Ambient 1990s](/playlists/pretty/37i9dQZF1DXaJ6UYQLBB2k.md)
- [Ambient 2000s](/playlists/pretty/37i9dQZF1DWTr85QtpBm8W.md)
- [Ambient 2010s](/playlists/pretty/37i9dQZF1DXbXkZolmAsKx.md)
- [Ambient Dreamscapes](/playlists/pretty/37i9dQZF1DXdf43Md5h6cE.md)
- [Ambient Essentials](/playlists/pretty/37i9dQZF1DWUrPBdYfoJvz.md)
- [Ambient Film Scores](/playlists/pretty/37i9dQZF1DX8SxUtY6PbgZ.md)
- [Ambient Japan](/playlists/pretty/37i9dQZF1DX5pzlFKAwpZ5.md)
- [Ambient Post\-Rock](/playlists/pretty/37i9dQZF1DX9uKvEw7Rwtq.md)
- [Ambient Relaxation](/playlists/pretty/37i9dQZF1DX3Ogo9pFvBkY.md)
- [Ambient Shoegaze](/playlists/pretty/37i9dQZF1DWYIlyW5yvFjI.md)
- [Ambient Sonics](/playlists/pretty/37i9dQZF1DXcndo43KVGbN.md)
- [Ambient Tokyo](/playlists/pretty/37i9dQZF1DWZqNqPemiefM.md)
- [Ambiente](/playlists/pretty/37i9dQZF1DX9c7yCloFHHL.md)
- [American Made](/playlists/pretty/37i9dQZF1DWSttCmn8GHUg.md)
- [Americana Icons](/playlists/pretty/37i9dQZF1DX7tfbjVrTPnV.md)
- [Amigos Playtime](/playlists/pretty/37i9dQZF1DWVppRat1VNcX.md)
- [Amine K's track IDs](/playlists/pretty/37i9dQZF1DX0jCZIphUeEF.md)
- [Amor Amor](/playlists/pretty/37i9dQZF1DWUoGbRYcteyC.md)
- [Amor Festivalero](/playlists/pretty/37i9dQZF1DXayjeC0C6R14.md)
- [Amor Francés](/playlists/pretty/37i9dQZF1DXbdQnmAuEkJr.md)
- [Amor Indie](/playlists/pretty/37i9dQZF1DX4z6u7kMqQvX.md)
- [Amor Libre: Sobrino Takeover](/playlists/pretty/37i9dQZF1DXa87Zq4SJwzv.md)
- [Amor Tropical](/playlists/pretty/37i9dQZF1DX8WzB1Rs2vkz.md)
- [Amor Vintage](/playlists/pretty/37i9dQZF1DWXI7p9kAVJpn.md)
- [Amor de teleserie](/playlists/pretty/37i9dQZF1DX4ADFgvieTAg.md)
- [Amor y Desamor](/playlists/pretty/37i9dQZF1DWT6yDPo14vsW.md)
- [Amore Davvero](/playlists/pretty/37i9dQZF1DWTbGYZ9Pq4TH.md)
- [Amped up.](/playlists/pretty/0kVaFpvoi0O4IbyJyEZckU.md)
- [Amy Wiles' DJ Mix](/playlists/pretty/37i9dQZF1DX8Imas7RTB6t.md)
- [AmyElle DJ Mix: My Garage is Finally A Studio](/playlists/pretty/37i9dQZF1DXe30kLtifvte.md)
- [An Elegant Affair](/playlists/pretty/37i9dQZF1DWVf1Phr4ZVgO.md)
- [An Epic Evening](/playlists/pretty/6wz9sFJRqsmu7ldv0xJOIz.md)
- [An Instrumental Sunday](/playlists/pretty/37i9dQZF1DX9XdJRfSK6a0.md)
- [An\-Ten\-Nae \- Weekly Medicine \(DEEP BASS \- 140  / DUBSTEP \- VIBES\)](/playlists/pretty/4ugml2yTfIJzuEpytnzJYP.md)
- [And Upon This Rock](/playlists/pretty/37i9dQZF1DX06wYNNUR5t6.md)
- [Andando De Noche](/playlists/pretty/37i9dQZF1DX4KO8WBGf7uc.md)
- [Animal Stories](/playlists/pretty/37i9dQZF1DXb9DmOVVVkdh.md)
- [Anime Classical](/playlists/pretty/37i9dQZF1DX0CgRlkzaOFL.md)
- [Anime Hits](/playlists/pretty/37i9dQZF1DX6XceWZP1znY.md)
- [Anime Now](/playlists/pretty/37i9dQZF1DWT8aqnwgRt92.md)
- [Anime On Replay](/playlists/pretty/37i9dQZF1DX0hAXqBDwvwI.md)
- [Anime Rewind '00s](/playlists/pretty/37i9dQZF1DWZZu9JWZK2dy.md)
- [Anime Rewind '10s](/playlists/pretty/37i9dQZF1DWYzHfIcEruXw.md)
- [Anime Rewind '80s](/playlists/pretty/37i9dQZF1DXcFCZS9poESZ.md)
- [Anime Rewind '90s](/playlists/pretty/37i9dQZF1DXanOaZVFiwtB.md)
- [Annorlunda Kärlekslåtar](/playlists/pretty/1cddSHoeIrE3m0i8TqYNbn.md)
- [Anti\-Valentine's Day](/playlists/pretty/37i9dQZF1DX1uusaBwROuk.md)
- [Antiestrés](/playlists/pretty/37i9dQZF1DX39FzqwAhZEK.md)
- [Aperitivo Time](/playlists/pretty/37i9dQZF1DWZLhUfNQOQ1p.md)
- [Apply Yourself](/playlists/pretty/37i9dQZF1DXe1cC3XInKct.md)
- [Après Ski Classics](/playlists/pretty/37i9dQZF1DX0nBLMN0XzSQ.md)
- [Arab Hip\-Hop](/playlists/pretty/37i9dQZF1DXd43GfSFAeHA.md)
- [Arab Indie](/playlists/pretty/37i9dQZF1DWUQM3rmTXpBR.md)
- [Arab Metal](/playlists/pretty/37i9dQZF1DXaqykGqi6KX8.md)
- [Arab Reggae](/playlists/pretty/37i9dQZF1DXdfYLmYuBPaf.md)
- [Arab X](/playlists/pretty/37i9dQZF1DWWkrGNlIHxPl.md)
- [Arabic Classics](/playlists/pretty/37i9dQZF1DWZyoKpr8bHNc.md)
- [Arabic Coffee](/playlists/pretty/37i9dQZF1DX9h1d4VhVGeh.md)
- [Arabic Love Songs](/playlists/pretty/37i9dQZF1DX0UetYTdFoTk.md)
- [Arabic Trap](/playlists/pretty/37i9dQZF1DXcC6YLqj8ET8.md)
- [Are & Be](/playlists/pretty/37i9dQZF1DX4SBhb3fqCJd.md)
- [Are & Be Presents Best R&B Songs of 2021](/playlists/pretty/37i9dQZF1DXcSC8oOed07w.md)
- [Arena Hip\-Hop](/playlists/pretty/37i9dQZF1DWVFZbCNivv6B.md)
- [Armada Today](/playlists/pretty/3PCZEuLpGKpsEHeaQ6cKEN.md)
- [Arsenico](/playlists/pretty/37i9dQZF1DX0IWHdjlGV0r.md)
- [Artists Den + Spotify](/playlists/pretty/1HdxEroWca3L8JR3lvnolH.md)
- [As Seen on TV](/playlists/pretty/1Z8HPzXKTX3tVQk04JC9YE.md)
- [Asli Aishwarya](/playlists/pretty/37i9dQZF1DWZIQCYtfr3hh.md)
- [At The Zoo](/playlists/pretty/37i9dQZF1DX6BChUV4Ga35.md)
- [Atlantic Records: Presents](/playlists/pretty/4sjY92ZWVdLJYdPmhpJQXh.md)
- [Atmospheric Calm](/playlists/pretty/37i9dQZF1DX4TnpT6vw5rE.md)
- [Atmospheric Focus](/playlists/pretty/37i9dQZF1DXaf6XmhwlgC6.md)
- [Atmospheric Piano](/playlists/pretty/37i9dQZF1DWURCUKHUKWCX.md)
- [Atmospheric Sci\-fi Soundtracks](/playlists/pretty/37i9dQZF1DXbIeCFU20wRm.md)
- [Attack on Titan \-進撃の巨人\-](/playlists/pretty/37i9dQZF1DWXkVfVmXHa7l.md)
- [Audiobooks](/playlists/pretty/37i9dQZF1DX1L0MDB1OhZy.md)
- [Audiophile Classical](/playlists/pretty/37i9dQZF1DWWISLnAIWyCZ.md)
- [Augusta On My Mind](/playlists/pretty/37i9dQZF1DX2QGqIfuB65s.md)
- [Austin After Dark](/playlists/pretty/50l7KMPuO1jMnpofYHCwV1.md)
- [Austin Millz's DJ Mix](/playlists/pretty/37i9dQZF1DWXyQamatDptq.md)
- [Austin Pops](/playlists/pretty/15wD5DzfOIRx7QnJKDLtav.md)
- [Austin Sounds](/playlists/pretty/2d96NZvM6U7G14LDQdNfwS.md)
- [Autumn Leaves](/playlists/pretty/37i9dQZF1DX62qCiGEp1YH.md)
- [Autumn Lounge](/playlists/pretty/37i9dQZF1DWTSPqolnbHgK.md)
- [Aux](/playlists/pretty/37i9dQZF1DWVEcPtggpQMu.md)
- [Avant Folk](/playlists/pretty/2uVP1agvV5rba3MqLQ0pzy.md)
- [Avant\-Jazz](/playlists/pretty/37i9dQZF1DX3rTk9UUrbYS.md)
- [B.A.E.](/playlists/pretty/37i9dQZF1DWX3387IZmjNa.md)
- [BAE](/playlists/pretty/37i9dQZF1DX1aA8os1ylFZ.md)
- [BBE](/playlists/pretty/37i9dQZF1DX66m4icL86Ru.md)
- [BBQ 2022: Summer Party Classics](/playlists/pretty/098hVwvAVYKJZd5kTwm9Ra.md)
- [BBQ Blues](/playlists/pretty/37i9dQZF1DX26pZI5rk3y9.md)
- [BEASTARS \-ビースターズ\-](/playlists/pretty/37i9dQZF1DWTIFbsBStcyg.md)
- [BESKRES' track IDs](/playlists/pretty/37i9dQZF1DWYbhRaecw5So.md)
- [BFF Girls](/playlists/pretty/37i9dQZF1DXamcyl84FTpQ.md)
- [BILLIONS CLUB](/playlists/pretty/37i9dQZF1DX7iB3RCnBnN4.md)
- [BIOHAZARD 25th ANNIVERSARY](/playlists/pretty/37i9dQZF1DXavxLjAz4XDv.md)
- [BLUE GIANT EXPLORER](/playlists/pretty/37i9dQZF1DXas9apVLvbWp.md)
- [BORUTO\-ボルト\- NARUTO NEXT GENERATIONS](/playlists/pretty/37i9dQZF1DX2MJV2gcuJO7.md)
- [BRILLIANTMINDS2016](/playlists/pretty/57clV3IPw1TXSWdzzDVDwp.md)
- [BRock 80](/playlists/pretty/37i9dQZF1DWUjoOWKKJzAy.md)
- [BUSAN International Rock Festival 2022](/playlists/pretty/37i9dQZF1DX1DiKbtMp8w3.md)
- [BUTTER](/playlists/pretty/37i9dQZF1DWVzZlRWgqAGH.md)
- [Baby Bells for Sleep](/playlists/pretty/37i9dQZF1DX9QSrZ8cQbyd.md)
- [Baby Hair](/playlists/pretty/37i9dQZF1DX1CDfMq8oOPq.md)
- [Baby Sleep](/playlists/pretty/37i9dQZF1DX0DxcHtn4Hwo.md)
- [Baby Sleep Aid: Rain Sounds](/playlists/pretty/37i9dQZF1DXdp5bwJ1FHFe.md)
- [Baby Sleep Aid: White Noise](/playlists/pretty/37i9dQZF1DXby8tlLbzqaH.md)
- [Baby Sleep: Nature Sounds](/playlists/pretty/37i9dQZF1DX5ZTdvWvQHAL.md)
- [Bachata Classics](/playlists/pretty/37i9dQZF1DX65py6HnnlE1.md)
- [Bachata Lovers](/playlists/pretty/37i9dQZF1DX7MTlMMRl0MD.md)
- [Bachatéame](/playlists/pretty/37i9dQZF1DX43c0ftmnMBx.md)
- [Bachelor Party](/playlists/pretty/37i9dQZF1DX2pto11EMGQc.md)
- [Bachelorette Party](/playlists/pretty/37i9dQZF1DXckE9NhZZgv4.md)
- [Back To School](/playlists/pretty/37i9dQZF1DX0JEG5nlR2Tc.md)
- [Back To The Garden](/playlists/pretty/37i9dQZF1DX36Lvoo24qFe.md)
- [Back a Yard](/playlists/pretty/37i9dQZF1DWTxofAzA6rAK.md)
- [Back to the Roots](/playlists/pretty/1S4JPQeJxtsN37X8as5EPk.md)
- [Backporch Blues](/playlists/pretty/37i9dQZF1DXdNHhNNm0G0B.md)
- [Backstage](/playlists/pretty/5qVqzAenJiKLfRny06XQf0.md)
- [Backyard BBQ](/playlists/pretty/37i9dQZF1DX030FFx0YCXp.md)
- [Backyard Wedding](/playlists/pretty/37i9dQZF1DX4YLk1hHv7S9.md)
- [Bacán](/playlists/pretty/37i9dQZF1DXbhNh5DYTmwV.md)
- [Baila Reggaeton](/playlists/pretty/37i9dQZF1DWY7IeIP1cdjF.md)
- [Balada Americana](/playlists/pretty/37i9dQZF1DXdWqzsS4CEhX.md)
- [Baladas Rock](/playlists/pretty/37i9dQZF1DX0URqd6gYywe.md)
- [Baladas Románticas](/playlists/pretty/37i9dQZF1DX09mi3a4Zmox.md)
- [Ballads Forever](/playlists/pretty/37i9dQZF1DXd4hrw8K7Pxm.md)
- [Ballads International](/playlists/pretty/37i9dQZF1DXaFm6IhSHlyi.md)
- [Baltimore Club](/playlists/pretty/37i9dQZF1DWWrKm37olqYM.md)
- [BanG Dream! バンドリ！ガールズバンドパーティ！](/playlists/pretty/37i9dQZF1DX3JjiT3BYft0.md)
- [Band Baaja Bollywood](/playlists/pretty/37i9dQZF1DXaq7lvg1a3j6.md)
- [Banda 2022](/playlists/pretty/37i9dQZF1DWX4UAnLC6Pj3.md)
- [Banda Mix](/playlists/pretty/37i9dQZF1DXdysBploZZvI.md)
- [Banda Romántica](/playlists/pretty/37i9dQZF1DX1S3aM8sZo63.md)
- [Banda: Viejitas Pero Bonitas](/playlists/pretty/37i9dQZF1DWSl0SWyyyUFG.md)
- [Bangers](/playlists/pretty/37i9dQZF1DWZCdOD1jAvLL.md)
- [Bangla Rock](/playlists/pretty/37i9dQZF1DX3MUQrfTBXMY.md)
- [Barack Obama's 2021 Summer Playlist](/playlists/pretty/37i9dQZF1DX8G0t7hKiZC2.md)
- [Barack Obama's 2022 Summer Playlist](/playlists/pretty/37i9dQZF1DWVbX0Kwa6Hge.md)
- [Barack Obama’s Summer Playlist 2022](/playlists/pretty/3xN6J0LCyVj8k1gVCguWRH.md)
- [Barbería](/playlists/pretty/37i9dQZF1DX4ad1mBZqxYJ.md)
- [Barista Blend](/playlists/pretty/25zEHXJzEQZU1eyF6eqEzD.md)
- [Baroque Classics](/playlists/pretty/37i9dQZF1DWXjj6kdiviS0.md)
- [Bass Arcade](/playlists/pretty/37i9dQZF1DX0hvSv9Rf41p.md)
- [Bass Legends](/playlists/pretty/37i9dQZF1DWSp5T5bVON3g.md)
- [Bass Lounge](/playlists/pretty/37i9dQZF1DWX8l0PIEOYVj.md)
- [Bassline Bangers](/playlists/pretty/37i9dQZF1DX13R6rBZEpj7.md)
- [Be Yourself](/playlists/pretty/37i9dQZF1DWSAdqTQgzvYM.md)
- [Beach Party](/playlists/pretty/37i9dQZF1DX4Y4RhrZqHhr.md)
- [Beach Vibes](/playlists/pretty/37i9dQZF1DX83I5je4W4rP.md)
- [Beast Mode](/playlists/pretty/37i9dQZF1DX76Wlfdnj7AP.md)
- [Beast Mode Christian](/playlists/pretty/37i9dQZF1DWXq6zX9dQEzo.md)
- [Beast Mode Dance](/playlists/pretty/37i9dQZF1DXdURFimg6Blm.md)
- [Beast Mode Hip\-Hop](/playlists/pretty/37i9dQZF1DX9oh43oAzkyx.md)
- [Beast Mode Latin](/playlists/pretty/37i9dQZF1DXdc2CX1rMGAc.md)
- [Beast Mode Rock](/playlists/pretty/37i9dQZF1DWZYWNM3NfvzJ.md)
- [Beat Down Your Morning](/playlists/pretty/4qstWgP2KMRSiTY3a1fF2R.md)
- [Beats & Rhymes](/playlists/pretty/37i9dQZF1DXcA6dRp8rwj6.md)
- [Beats Para Rapear](/playlists/pretty/37i9dQZF1DX92t5UjbyVl5.md)
- [Beats to think to](/playlists/pretty/37i9dQZF1DXa2SPUyWl8Y5.md)
- [Bedouin's track IDs](/playlists/pretty/37i9dQZF1DX1T8YkHjAnHP.md)
- [Bedroom Jams](/playlists/pretty/37i9dQZF1DX0QKpU3cGsyb.md)
- [Bedroom Jazz](/playlists/pretty/37i9dQZF1DX4Ce7C9uKaHy.md)
- [Bedroom Pop](/playlists/pretty/37i9dQZF1DXcxvFzl58uP7.md)
- [Bedtime Stories](/playlists/pretty/37i9dQZF1DX4mDnU0PhsMn.md)
- [Beer & Wings](/playlists/pretty/37i9dQZF1DXauOWFg72pbl.md)
- [Beer 'n Burgers](/playlists/pretty/7CHrwiytyubNpnaZqyyUkb.md)
- [Beethoven Piano](/playlists/pretty/37i9dQZF1DWY3bSz5dBEak.md)
- [Begin Again \(비긴어게인\)](/playlists/pretty/37i9dQZF1DWUtDvJFa147B.md)
- [Behind The Lyrics: Hip Hop](/playlists/pretty/37i9dQZF1DXaKctwWdt4be.md)
- [Bellini's Opera](/playlists/pretty/1M2abQkxCwrLjzLGgKWnDP.md)
- [Best Blues Songs of 2020](/playlists/pretty/37i9dQZF1DXbJmzoA7Y2Ld.md)
- [Best Blues Songs of 2021](/playlists/pretty/37i9dQZF1DWYi488IywmOA.md)
- [Best Electronic Songs of 2021](/playlists/pretty/37i9dQZF1DXdXliePGSvEb.md)
- [Best Folk Songs of 2021 Canada](/playlists/pretty/37i9dQZF1DX0aPQ8qySzLK.md)
- [Best Hip\-Hop Songs of 2021 Canada](/playlists/pretty/37i9dQZF1DWWEncNAQJJkE.md)
- [Best Indie Songs of 2020](/playlists/pretty/37i9dQZF1DWWkGXMGv9j4M.md)
- [Best Indie Songs of 2021](/playlists/pretty/37i9dQZF1DWW06b4n9Ho9J.md)
- [Best Indie Songs of 2021 Canada](/playlists/pretty/37i9dQZF1DX24s7wiZ6iNt.md)
- [Best Jazz Songs of 2021](/playlists/pretty/37i9dQZF1DX5LYxFep0J7E.md)
- [Best Mellow Pop of 2021](/playlists/pretty/37i9dQZF1DXaASLfu4mBQT.md)
- [Best Podcasts of the Month](/playlists/pretty/37i9dQZF1DXdlkPQJ1PlTQ.md)
- [Best R&B Songs of 2021 Canada](/playlists/pretty/37i9dQZF1DWZbHJkHSDOTR.md)
- [Best Tracks from Tarantino Films](/playlists/pretty/37i9dQZF1DX3b9hbbPi5hD.md)
- [Best Vocal Jazz of 2021](/playlists/pretty/37i9dQZF1DX4ieBny4Vpgk.md)
- [Best of 2016:  Hot Country](/playlists/pretty/7g3zHOim2XylTlM7Oittr8.md)
- [Best of 2016: Folk & Americana](/playlists/pretty/0fmNiEOXSfBfurQwf4gG5L.md)
- [Best of 2016: Metal](/playlists/pretty/37i9dQZF1DX3HkeE0Yyy1n.md)
- [Best of 2016: Ultimate Indie](/playlists/pretty/1517hhPIVwA9EN41krpZo3.md)
- [Best of 2018: K\-Pop](/playlists/pretty/37i9dQZF1DX5CHqBODmn2c.md)
- [Best of Arab Pop](/playlists/pretty/37i9dQZF1DXaL8gtxi9eun.md)
- [Best of Bebop](/playlists/pretty/37i9dQZF1DX6KyCRJzZneq.md)
- [Best of Bond](/playlists/pretty/37i9dQZF1DX0ZzMQgXnSUD.md)
- [Best of Boybands and Girl Groups](/playlists/pretty/7oTMBMLu6EI4l163C9fkhg.md)
- [Best of Broadway](/playlists/pretty/37i9dQZF1DWX82ahbDuQIz.md)
- [Best of Folk & Americana 2019](/playlists/pretty/37i9dQZF1DWYdLqwKCcDiy.md)
- [Best of Hamilton](/playlists/pretty/37i9dQZF1DX1nsfmnIDVAJ.md)
- [Best of John Peel Sessions](/playlists/pretty/37i9dQZF1DWY3pbjsJ6MxA.md)
- [Best of Korean Soundtracks](/playlists/pretty/37i9dQZF1DWUXxc8Mc6MmJ.md)
- [Best of Live Worship](/playlists/pretty/37i9dQZF1DXdrxKdrXE2Vk.md)
- [Best of Plus Ultra 2021](/playlists/pretty/37i9dQZF1DWYQKKZPHGppf.md)
- [Best of Sesame Street](/playlists/pretty/37i9dQZF1DWUrIr0kH1BCb.md)
- [Best of Star Wars](/playlists/pretty/37i9dQZF1DXaUaRhCgtpCo.md)
- [Best of The Oscars: Scores and Soundtracks](/playlists/pretty/37i9dQZF1DX4h3u2WBqcR0.md)
- [Best of: Coke Studio Fusion](/playlists/pretty/37i9dQZF1DX5k2NQZIn7LE.md)
- [Best of: Coke Studio Pakistan](/playlists/pretty/37i9dQZF1DXbck8sFsEQGj.md)
- [Best of: Coke Studio Sufi](/playlists/pretty/37i9dQZF1DXajUwYhWkg4J.md)
- [Betty Who: Pride](/playlists/pretty/37i9dQZF1DX3V9xyjs9Om5.md)
- [Beyond Trans Visibility: ALOK](/playlists/pretty/37i9dQZF1DX21ildQwVt4b.md)
- [Beyond the Music](/playlists/pretty/01WIu4Rst0xeZnTunWxUL7.md)
- [Bhangra Bangers](/playlists/pretty/37i9dQZF1DX3VNFqEPdDGw.md)
- [Bien Machín](/playlists/pretty/37i9dQZF1DXaMxIh88NH1N.md)
- [Bienvenido a la Friendzone](/playlists/pretty/37i9dQZF1DXc8dqv8mDRBy.md)
- [Big Band](/playlists/pretty/37i9dQZF1DX6G7arXBXa3A.md)
- [Big Country](/playlists/pretty/37i9dQZF1DXaJXCbmtHVHV.md)
- [Big Room Dance](/playlists/pretty/37i9dQZF1DX3d2wagqzwmM.md)
- [Big in Japan](/playlists/pretty/37i9dQZF1DXbR32Ldau7WM.md)
- [Binaural Beats: Focus](/playlists/pretty/37i9dQZF1DX7EF8wVxBVhG.md)
- [Binaural Beats: Sleep](/playlists/pretty/37i9dQZF1DX8h3zQNo57xG.md)
- [Birds in the Forest](/playlists/pretty/37i9dQZF1DWVEt8B7a1H1M.md)
- [Birds in the Rain](/playlists/pretty/37i9dQZF1DX0eAsdXwbE4f.md)
- [Biso Na Biso](/playlists/pretty/37i9dQZF1DX8d57cbyhqPM.md)
- [Bittersweet Symphony](/playlists/pretty/37i9dQZF1DWSNNoRF9meHq.md)
- [Black & Dark Metal](/playlists/pretty/37i9dQZF1DXbl9rMxGEmRC.md)
- [Black & White Flick](/playlists/pretty/37i9dQZF1DWWiYmf13kBNz.md)
- [Black Clover \-ブラッククローバー\-](/playlists/pretty/37i9dQZF1DXcWN1IuaY8rd.md)
- [Black Coffee Blues](/playlists/pretty/37i9dQZF1DX2Pqxel6mitp.md)
- [Black History Salute](/playlists/pretty/37i9dQZF1DX2r0FByV5U4C.md)
- [Black Lives Matter](/playlists/pretty/37i9dQZF1DWWAqc46ZJdZf.md)
- [Black, Queer, & Proud](/playlists/pretty/37i9dQZF1DWYdV3Fs5eWjC.md)
- [Blake’s 7: The Audio Series](/playlists/pretty/37i9dQZF1DWTKyGuxpLg8Z.md)
- [Blessings](/playlists/pretty/37i9dQZF1DX7Bi6W3YuUlA.md)
- [Bleu Clair's DJ Mix](/playlists/pretty/37i9dQZF1DX92zI3Y5s9Wf.md)
- [Bliss](/playlists/pretty/37i9dQZF1DX4bSrsRWE9cd.md)
- [Bloghouse](/playlists/pretty/37i9dQZF1DWSyOfQ9LA1uF.md)
- [Blood, Shred & Tears](/playlists/pretty/37i9dQZF1DXblV99WEHIW4.md)
- [Blossom](/playlists/pretty/37i9dQZF1DWU24O1KPl8Ai.md)
- [Blue Ballads](/playlists/pretty/37i9dQZF1DXdeoRwG5yUKg.md)
- [Bluegrass Byways](/playlists/pretty/2EjRsHG8m4bGCrhCoJ1ykn.md)
- [Bluegrass Covers](/playlists/pretty/37i9dQZF1DX56crgoe4TG3.md)
- [Bluegrass Origins](/playlists/pretty/37i9dQZF1DX0RwLEp3x6W4.md)
- [Blues & Roots Rock](/playlists/pretty/37i9dQZF1DWSKpvyAAcaNZ.md)
- [Blues Classics](/playlists/pretty/37i9dQZF1DXd9rSDyQguIk.md)
- [Blues Covers](/playlists/pretty/37i9dQZF1DX1rSirtgYLyt.md)
- [Blues Drive](/playlists/pretty/37i9dQZF1DX9cTwPMorHcH.md)
- [Blues Focus](/playlists/pretty/37i9dQZF1DX9tJFUKjeDqu.md)
- [Blues Harp](/playlists/pretty/37i9dQZF1DWVKE4YNKbqtI.md)
- [Blues Live & Loud](/playlists/pretty/37i9dQZF1DWT1RLff7HxDm.md)
- [Blues Origins](/playlists/pretty/37i9dQZF1DXbkKnGZHv1kf.md)
- [Blues Party](/playlists/pretty/37i9dQZF1DWTRcyTcS6xqm.md)
- [Blues Piano Legends](/playlists/pretty/37i9dQZF1DX5XEAHcCzWcH.md)
- [Blues Road Trip](/playlists/pretty/37i9dQZF1DXd8nB8TGVGGF.md)
- [Blues Roots](/playlists/pretty/37i9dQZF1DXcFk5r8uS3l2.md)
- [Blues Standards](/playlists/pretty/37i9dQZF1DXcu3QLJudo4X.md)
- [Blues on the Rocks](/playlists/pretty/37i9dQZF1DWWyCCtyRAvGr.md)
- [Bluestronica](/playlists/pretty/37i9dQZF1DWZprlljz35Gr.md)
- [Bob Dylan: Covered](/playlists/pretty/37i9dQZF1DX0q1RHoDiZBg.md)
- [Body & Soul](/playlists/pretty/37i9dQZF1DWXUtxBFupUW9.md)
- [Boho + Chill](/playlists/pretty/37i9dQZF1DWSNmwgf7Nv11.md)
- [Bolero Tuyệt Phẩm](/playlists/pretty/37i9dQZF1DWWdlSG3xntgM.md)
- [Boleros](/playlists/pretty/37i9dQZF1DX7YVXCfBlE4D.md)
- [Boleros Pop](/playlists/pretty/37i9dQZF1DWYOiy3rOFsDS.md)
- [Boleros en Casa](/playlists/pretty/37i9dQZF1DWUmr8GM6X0hs.md)
- [Bollywood 2.O](/playlists/pretty/37i9dQZF1DX3A421vEQpsl.md)
- [Bollywood Acoustic](/playlists/pretty/37i9dQZF1DWSwxyU5zGZYe.md)
- [Bollywood Butter](/playlists/pretty/37i9dQZF1DWXtlo6ENS92N.md)
- [Bollywood Dance Music](/playlists/pretty/37i9dQZF1DX8xfQRRX1PDm.md)
- [Bollywood Mush](/playlists/pretty/37i9dQZF1DXdpQPPZq3F7n.md)
- [Bollywood Themes](/playlists/pretty/37i9dQZF1DWVIEXqkZKKXl.md)
- [Bollywood Top 50](/playlists/pretty/4nNVfQ9eWidZXkBKZN5li4.md)
- [Bollywood Zumba](/playlists/pretty/37i9dQZF1DWUKXFmhEN5MF.md)
- [Bon Voyage](/playlists/pretty/37i9dQZF1DWXjv2J1ebzlh.md)
- [Bongo Flava](/playlists/pretty/37i9dQZF1DX3EbcelyrZPd.md)
- [Boogaloo Essentials](/playlists/pretty/37i9dQZF1DWYS4jYoOYXiN.md)
- [Boogie Rock](/playlists/pretty/37i9dQZF1DX7KwBiutIRku.md)
- [Boogie\-woogie Blues](/playlists/pretty/37i9dQZF1DWULaRXVqGMUt.md)
- [Book Club](/playlists/pretty/37i9dQZF1DWYWyJFR69WAN.md)
- [Boom Rap](/playlists/pretty/37i9dQZF1DX3zN05ePDN6Q.md)
- [Boozy Brunch](/playlists/pretty/37i9dQZF1DX9pryhDLql25.md)
- [Born To Run 150 BPM](/playlists/pretty/37i9dQZF1DX0hWmn8d5pRe.md)
- [Boso Jowo](/playlists/pretty/37i9dQZF1DXcwHMQ31Y15k.md)
- [Bosque Místico](/playlists/pretty/37i9dQZF1DX5GSGPU4E3Sq.md)
- [Bossa Chill](/playlists/pretty/37i9dQZF1DX2m4xSMtooam.md)
- [Bossa Nova](/playlists/pretty/4LmOnbOmtMUyQQjo6L9mct.md)
- [Bossa Nova Covers](/playlists/pretty/37i9dQZF1DXardnHdSkglX.md)
- [Bossa Nova Dinner](/playlists/pretty/37i9dQZF1DWVleyMkaelTd.md)
- [Bottoms Up](/playlists/pretty/37i9dQZF1DX0N8QTiMHLoT.md)
- [Bow Wow Reggae](/playlists/pretty/37i9dQZF1DWYAI2XQZF5zW.md)
- [Boy Bands 4 Ever](/playlists/pretty/37i9dQZF1DX5wKayT9q3El.md)
- [Brain Food](/playlists/pretty/37i9dQZF1DWXLeA8Omikj7.md)
- [Bread & Dub](/playlists/pretty/4drXxn0GpOXXG6Rp5RvXca.md)
- [Breakout Country](/playlists/pretty/37i9dQZF1DWW7RgkOJG32Y.md)
- [Breakup Blues](/playlists/pretty/1o2bTwofazfzElA5mXGf2t.md)
- [Breathe](/playlists/pretty/37i9dQZF1DX6oU7rbE4ffh.md)
- [Breezy Acoustic](/playlists/pretty/37i9dQZF1DXbHKTQ2s1l8q.md)
- [Bridge to Bombay](/playlists/pretty/37i9dQZF1DX2nX8HgBDmgL.md)
- [Bridgerton: Official Playlist](/playlists/pretty/37i9dQZF1DX5Hl0iWtr5b3.md)
- [Bring Back the 2000s](/playlists/pretty/5baU2nNxC8ag8XzlHNsANg.md)
- [Brit\-Blues](/playlists/pretty/37i9dQZF1DWWtGE7PB0aRR.md)
- [Britfolk](/playlists/pretty/5XyoROE7WrTHtvcwFrhzO1.md)
- [Britpop, Etc.](/playlists/pretty/37i9dQZF1DXaVgr4Tx5kRF.md)
- [Broadway in Love!](/playlists/pretty/37i9dQZF1DX888loZNVRav.md)
- [Broken Heart](/playlists/pretty/37i9dQZF1DXbrUpGvoi3TS.md)
- [Broker \(브로커\)](/playlists/pretty/37i9dQZF1DX5ZabZ8cxclR.md)
- [BrooklynVegan Weekly Playlist](/playlists/pretty/0ZQcCFqc1ziBiC1fvrrbsT.md)
- [Brown Noise](/playlists/pretty/37i9dQZF1DX4hpot8sYudB.md)
- [Brown and Black Excellence](/playlists/pretty/37i9dQZF1DWWwkbFYEItuo.md)
- [Brunch Jazz](/playlists/pretty/37i9dQZF1DX9BVquKzFnCW.md)
- [Brunch Latino](/playlists/pretty/37i9dQZF1DWZufbpO1g3tw.md)
- [Bråvalla Festival 2013](/playlists/pretty/74Wbo0ObpdSDnCIGvEDHOk.md)
- [Buchona Vibez](/playlists/pretty/37i9dQZF1DWZ2jQBazXjNj.md)
- [Buen Vibe](/playlists/pretty/37i9dQZF1DXbT1642xPu6H.md)
- [Buenas Noches](/playlists/pretty/37i9dQZF1DWVLoqOzktoRS.md)
- [Buenas Vibras](/playlists/pretty/37i9dQZF1DX3NRlBOcUOcY.md)
- [Buenos Días, Señor Sol](/playlists/pretty/37i9dQZF1DXba2RjGaSpS4.md)
- [Bugambilias](/playlists/pretty/37i9dQZF1DXd00BhHoAEOB.md)
- [Bullet for Hell](/playlists/pretty/1RKtKRcejWjN6ZOkghImIV.md)
- [Business Proposal \(사내 맞선\)](/playlists/pretty/37i9dQZF1DX4epI7cdLjJs.md)
- [Bésame Mucho](/playlists/pretty/37i9dQZF1DX9vgSlPsXGnX.md)
- [CAROLE & TUESDAY \-キャロル＆チューズデイ](/playlists/pretty/37i9dQZF1DXe7NNfgnTcIC.md)
- [CAZZETTE – Eject pt\. I](/playlists/pretty/1kPmmFOfrsEk7KzW46uo8m.md)
- [CLASS OF 2020 mixtape](/playlists/pretty/37i9dQZF1DWVhUYCGnZTnv.md)
- [CLASS OF 2022 mixtape](/playlists/pretty/37i9dQZF1DXcPYzOAWX8Wm.md)
- [CMA Awards 2021 Nominees](/playlists/pretty/37i9dQZF1DX8ZfTXESa5KP.md)
- [CMA Music Fest](/playlists/pretty/37i9dQZF1DX4yQ5BwwlSiC.md)
- [CODE GEASS SERIES \-コードギアスシリーズ\-](/playlists/pretty/37i9dQZF1DX05YNpFuDzLK.md)
- [COWBOY BEBOP \-カウボーイビバップ\-](/playlists/pretty/37i9dQZF1DX2niMzbAczXW.md)
- [CST](/playlists/pretty/37i9dQZF1DX91gZ5XTbTPm.md)
- [Caffè del Buongiorno](/playlists/pretty/37i9dQZF1DX7P3Ec4TfanK.md)
- [Café Bossa](/playlists/pretty/37i9dQZF1DX7ovYHwmjqZK.md)
- [Café Cubano](/playlists/pretty/37i9dQZF1DWZLN2cXno63R.md)
- [Café Revolución](/playlists/pretty/37i9dQZF1DXcViPZlF2qaM.md)
- [Café con Leche](/playlists/pretty/37i9dQZF1DXa3NnZWk6Z3T.md)
- [Café de Paris](/playlists/pretty/37i9dQZF1DX0ZO4kBlpsIH.md)
- [Café montréalais](/playlists/pretty/37i9dQZF1DXcgNXUHsZlwX.md)
- [Café, Libros.](/playlists/pretty/37i9dQZF1DWZkMGGysxknj.md)
- [Caipirinha](/playlists/pretty/37i9dQZF1DX11Pe3b7DsbG.md)
- [California Rock State](/playlists/pretty/37i9dQZF1DWTlgzqHpWg4m.md)
- [Calm](/playlists/pretty/37i9dQZF1DWTC99MCpbjP8.md)
- [Calm Before the Storm](/playlists/pretty/37i9dQZF1DWWTdxbiocWOL.md)
- [Calm Classics](/playlists/pretty/7A2YimOfIrmAWkCeSIY8Rq.md)
- [Calm Down](/playlists/pretty/37i9dQZF1DX5bjCEbRU4SJ.md)
- [Calm Kids](/playlists/pretty/37i9dQZF1DXcr2UzLGERUU.md)
- [Calm Vibes](/playlists/pretty/37i9dQZF1DX1s9knjP51Oa.md)
- [Calming Acoustic](/playlists/pretty/37i9dQZF1DXaImRpG7HXqp.md)
- [Calming Choir](/playlists/pretty/37i9dQZF1DX9WxEZbyU6MA.md)
- [Calming Classical](/playlists/pretty/37i9dQZF1DWVFeEut75IAL.md)
- [Calming Instrumental Covers](/playlists/pretty/37i9dQZF1DX9j444F9NCBa.md)
- [Calming Jazz](/playlists/pretty/37i9dQZF1DX0ZgPbUQ205W.md)
- [Calorcito](/playlists/pretty/37i9dQZF1DX7dXtI26GOnj.md)
- [Calvin Harris Guest List](/playlists/pretty/37i9dQZF1DWYzxqzx1puO0.md)
- [Calvin Harris presents Funk Wav Bounces](/playlists/pretty/37i9dQZF1DX2UC9XmF9YyX.md)
- [Canadian '90s](/playlists/pretty/37i9dQZF1DX9NmM48Aqz3e.md)
- [Canadian Gems](/playlists/pretty/37i9dQZF1DX1tOeW0T94Z0.md)
- [Canadian Weekend](/playlists/pretty/37i9dQZF1DX4JPdPsQxLCG.md)
- [Cancionero Juan Gabriel](/playlists/pretty/37i9dQZF1DX3hXmsXxRAC2.md)
- [Cancionero Marco Antonio Solis](/playlists/pretty/37i9dQZF1DWWl8jvdRonp8.md)
- [Cancionero Mexicano](/playlists/pretty/37i9dQZF1DWXP3HyjUhW1b.md)
- [Canciones del Recuerdo](/playlists/pretty/37i9dQZF1DX20VDU4OIBfS.md)
- [Canciones para sacar unos pasos prohibidos de enamorados](/playlists/pretty/37i9dQZF1DX1ohw129SftU.md)
- [Cancionistas](/playlists/pretty/37i9dQZF1DXcWcRIYY41Ix.md)
- [Canta Sotto La Doccia](/playlists/pretty/37i9dQZF1DWVPKP49DU8tu.md)
- [Cantamores](/playlists/pretty/37i9dQZF1DXdI8ULlW5VQp.md)
- [Cantando na Cozinha](/playlists/pretty/37i9dQZF1DXcq1sGjujDL0.md)
- [Cantando no Chuveiro](/playlists/pretty/37i9dQZF1DWWrDntpgyzu9.md)
- [Cantautores](/playlists/pretty/37i9dQZF1DX8oh7peUXg5S.md)
- [Canzoni Tristi](/playlists/pretty/37i9dQZF1DX0eXqYHdgDwI.md)
- [Cardio](/playlists/pretty/37i9dQZF1DWSJHnPb1f0X3.md)
- [Caribbean Calypso](/playlists/pretty/37i9dQZF1DX6QlnUtJCO12.md)
- [Carnatic Instrumental](/playlists/pretty/37i9dQZF1DX1VHgGvdVgaZ.md)
- [Carnita Asada](/playlists/pretty/37i9dQZF1DWY5Exaf30Ns0.md)
- [Carnita Asada Estilo Norteño](/playlists/pretty/37i9dQZF1DWXLjydKDJPFJ.md)
- [Carnival](/playlists/pretty/37i9dQZF1DX0rM1NjYKMJa.md)
- [Carpool Karaoke](/playlists/pretty/0NaXa68Xyo4wmMiun5Lqgm.md)
- [Carry Me Away Radio](/playlists/pretty/37i9dQZF1E8FdFKgRxUOJv.md)
- [Carta Malaysia 50](/playlists/pretty/37i9dQZF1DXb1RLKxkHZ77.md)
- [Casal Mandrake](/playlists/pretty/37i9dQZF1DX0prPGsXNyt4.md)
- [Catz 'n Dogz' track IDs](/playlists/pretty/37i9dQZF1DX6h7s1SXA0eN.md)
- [Celtic Punk](/playlists/pretty/37i9dQZF1DXb1IUaS6F7Z8.md)
- [Cena con Amigos](/playlists/pretty/37i9dQZF1DWWLmaNnR9HlL.md)
- [Cena con Guitarras](/playlists/pretty/37i9dQZF1DXd0RRszxFFrw.md)
- [Cena con Jazz](/playlists/pretty/37i9dQZF1DX4YnmTbpvHLN.md)
- [Cena con Piano](/playlists/pretty/37i9dQZF1DXeaTPCSrnmwu.md)
- [Chakra](/playlists/pretty/37i9dQZF1DX74VGmwslvwH.md)
- [Chambeando](/playlists/pretty/37i9dQZF1DX3ZcNPthhwgQ.md)
- [Changes](/playlists/pretty/37i9dQZF1DWXIuW81skHVz.md)
- [Channel\-X](/playlists/pretty/37i9dQZF1DX4y8h9WqDPAE.md)
- [Charles Dickens' Classics](/playlists/pretty/37i9dQZF1DX3pCvCNjYFEt.md)
- [Charros de Oro](/playlists/pretty/37i9dQZF1DWYC7hFn0j2HC.md)
- [Chicago Blues](/playlists/pretty/37i9dQZF1DX4rGCw5bMNp1.md)
- [Chill + Atmospheric](/playlists/pretty/37i9dQZF1DX79Y9Kr2M2tM.md)
- [Chill Beats](/playlists/pretty/37i9dQZF1DWZa8CSUr0hCY.md)
- [Chill Bops](/playlists/pretty/37i9dQZF1DX2YOadVouRc8.md)
- [Chill Covers](/playlists/pretty/37i9dQZF1DWXnscMH24yOc.md)
- [Chill Dinner](/playlists/pretty/37i9dQZF1DXb83YJL7gTWj.md)
- [Chill Folk](/playlists/pretty/37i9dQZF1DWVl5gPCRkquk.md)
- [Chill Gaming](/playlists/pretty/37i9dQZF1DWXpOtMyVOt4Q.md)
- [Chill Gaming \(2\)](/playlists/pretty/37i9dQZF1DX6LV3QymAMCD.md)
- [Chill Hits](/playlists/pretty/37i9dQZF1DX4WYpdgoIcn6.md)
- [Chill Lah](/playlists/pretty/37i9dQZF1DX2QWdoTGeQgx.md)
- [Chill Latino](/playlists/pretty/37i9dQZF1DWYzTSrc7SiSZ.md)
- [Chill Out Jazz](/playlists/pretty/37i9dQZF1DXdk2DZvqpqJY.md)
- [Chill Out Music](/playlists/pretty/37i9dQZF1DX32oVqaQE8BM.md)
- [Chill Pop](/playlists/pretty/37i9dQZF1DX0MLFaUdXnjA.md)
- [Chill Tracks](/playlists/pretty/37i9dQZF1DX6VdMW310YC7.md)
- [Chill Vibes](/playlists/pretty/37i9dQZF1DX889U0CL85jj.md)
- [Chill Waves](/playlists/pretty/6bvocDUOsyBDXvTWyQtvaH.md)
- [Chill as Folk](/playlists/pretty/43rSnXFDoctqiZxvEqH14P.md)
- [Chilled 80s](/playlists/pretty/37i9dQZF1DX6FdIcKzUp2r.md)
- [Chilled Blues](/playlists/pretty/37i9dQZF1DWXavtCg2Z6Ng.md)
- [Chilled Classical](/playlists/pretty/37i9dQZF1DWUvHZA1zLcjW.md)
- [Chilled Classical Covers](/playlists/pretty/37i9dQZF1DX21hEmly67Fg.md)
- [Chilled Dance Hits](/playlists/pretty/37i9dQZF1DXccH49bh52dB.md)
- [Chilled Drum & Bass](/playlists/pretty/37i9dQZF1DX1jlzMTQ2PY5.md)
- [Chilled Jazz](/playlists/pretty/37i9dQZF1DX2vYju3i0lNX.md)
- [Chilled R&B](/playlists/pretty/37i9dQZF1DX2UgsUIg75Vg.md)
- [Chilled Reggae](/playlists/pretty/37i9dQZF1DWYtKpmml7moA.md)
- [Chillin' on a Dirt Road](/playlists/pretty/37i9dQZF1DWTkxQvqMy4WW.md)
- [Chillout Classics](/playlists/pretty/37i9dQZF1DXcG4kXwIFULb.md)
- [Chillout Lounge](/playlists/pretty/37i9dQZF1DWTvNyxOwkztu.md)
- [Chillout Room Classics](/playlists/pretty/37i9dQZF1DXdFC1xcOhJZ9.md)
- [Choice Edit](/playlists/pretty/37i9dQZF1DX1aTyQ3Z9nTc.md)
- [Chopin Nocturnes](/playlists/pretty/37i9dQZF1DX99gNWyxQ2OR.md)
- [Chopin Piano](/playlists/pretty/37i9dQZF1DWVidGk00tysG.md)
- [Chopin Waltzes](/playlists/pretty/37i9dQZF1DXdVMvfFOkAX1.md)
- [Christian Dance Party](/playlists/pretty/37i9dQZF1DWUUPO0Sbx2CM.md)
- [Christian Kids Worship](/playlists/pretty/37i9dQZF1DXcC9sWdkmZbU.md)
- [Christian Lullabies](/playlists/pretty/37i9dQZF1DX2eGcUpDGev2.md)
- [Christian Mix](/playlists/pretty/37i9dQZF1DX5SzTPIoCKiv.md)
- [Christian Road Trip](/playlists/pretty/37i9dQZF1DWVPkWIRD16c8.md)
- [Christian Summer Camp](/playlists/pretty/37i9dQZF1DXcaKTBuc6XdP.md)
- [Christmas Blues](/playlists/pretty/37i9dQZF1DX1qSl6wHwkrJ.md)
- [Christmas Carols](/playlists/pretty/37i9dQZF1DX4jxmdWGk453.md)
- [Christmas Choir](/playlists/pretty/37i9dQZF1DX6FnQY7eQxRt.md)
- [Christmas Classics](/playlists/pretty/37i9dQZF1DX6R7QUWePReA.md)
- [Christmas Cocktail Jazz](/playlists/pretty/37i9dQZF1DWZv6UE8BMPO0.md)
- [Christmas Coffeehouse](/playlists/pretty/37i9dQZF1DXb7KOnsvmh8V.md)
- [Christmas Crooners](/playlists/pretty/37i9dQZF1DX7pYJHz6u9GC.md)
- [Christmas Favourites](/playlists/pretty/37i9dQZF1DWTCHbho2Bfok.md)
- [Christmas Hits](/playlists/pretty/37i9dQZF1DX0Yxoavh5qJV.md)
- [Christmas Jazz](/playlists/pretty/37i9dQZF1DX5D4gDh3HAsM.md)
- [Christmas K\-Pop](/playlists/pretty/37i9dQZF1DWVbb8LK4P3Mg.md)
- [Christmas Lullabies](/playlists/pretty/37i9dQZF1DXdRynaRsnoZs.md)
- [Christmas Party](/playlists/pretty/37i9dQZF1DX26MMm9GTjCc.md)
- [Christmas Peaceful Guitar](/playlists/pretty/37i9dQZF1DX6RK4iTHSRRX.md)
- [Christmas Peaceful Piano](/playlists/pretty/37i9dQZF1DXbPHTEEyQ6Hv.md)
- [Christmas Pop](/playlists/pretty/37i9dQZF1DX0A8zVl7p82B.md)
- [Christmas Spirit](/playlists/pretty/37i9dQZF1DWViXqZVTGO3Z.md)
- [Christmas Stories](/playlists/pretty/37i9dQZF1DWVzrEOEOM5Qu.md)
- [Christmas in Canada](/playlists/pretty/37i9dQZF1DX5T5XRP5VmUL.md)
- [Christmas is Coming](/playlists/pretty/37i9dQZF1DWWvHBEQLnV1N.md)
- [Cinco de Mayo](/playlists/pretty/37i9dQZF1DWW6FKfbzAFjW.md)
- [Cinematic Chillout](/playlists/pretty/37i9dQZF1DWVFJtzvDHN4L.md)
- [Cinematic Indie Folk](/playlists/pretty/37i9dQZF1DWZyQUsU1vj4x.md)
- [Circo Gitano](/playlists/pretty/37i9dQZF1DXdxLagECufdp.md)
- [City Pop '00s](/playlists/pretty/37i9dQZF1DX0cgcWoYFXZp.md)
- [City Pop '70s](/playlists/pretty/37i9dQZF1DX8zwfXO8sDE6.md)
- [City Pop '80s](/playlists/pretty/37i9dQZF1DWW28hvtiO3j9.md)
- [City Pop '90s](/playlists/pretty/37i9dQZF1DXcCtECOOdtm1.md)
- [City Pop Korea \(한국 씨티팝\)](/playlists/pretty/37i9dQZF1DX8cV4ZaSfaxp.md)
- [City Pop: シティ・ポップの今](/playlists/pretty/37i9dQZF1DXdY5tVYFPWb2.md)
- [City Sounds for Sleep](/playlists/pretty/37i9dQZF1DWZwRv0cVNFLv.md)
- [City to City](/playlists/pretty/37i9dQZF1DWWIfrT204w7E.md)
- [Classic Acoustic](/playlists/pretty/37i9dQZF1DX504r1DvyvxG.md)
- [Classic Afropop](/playlists/pretty/37i9dQZF1DXcIme26eJxid.md)
- [Classic Artists New Music](/playlists/pretty/37i9dQZF1DWX3wsvr7czQx.md)
- [Classic Blues Guitar](/playlists/pretty/37i9dQZF1DWWhiW4fdIska.md)
- [Classic Covers](/playlists/pretty/37i9dQZF1DWTVIaV4KJYuq.md)
- [Classic Family Flicks](/playlists/pretty/37i9dQZF1DWSKqMj3d8wqM.md)
- [Classic Hardcore](/playlists/pretty/37i9dQZF1DXaGNG7NmtmZv.md)
- [Classic Honky Tonk](/playlists/pretty/0NfjMqrzcGKVsbYZmhf4Md.md)
- [Classic Oldies](/playlists/pretty/37i9dQZF1DX56bqlsMxJYR.md)
- [Classic Punk](/playlists/pretty/37i9dQZF1DX3LDIBRoaCDQ.md)
- [Classic Road Trip Songs](/playlists/pretty/37i9dQZF1DX9wC1KY45plY.md)
- [Classic Rock Drive](/playlists/pretty/37i9dQZF1DXdOEFt9ZX0dh.md)
- [Classic Rock Now](/playlists/pretty/37i9dQZF1DX0fWtUuB7bFE.md)
- [Classic Rock Workout](/playlists/pretty/37i9dQZF1DWYNSm3Z3MxiM.md)
- [Classic Soul With Seth Rogen](/playlists/pretty/6GZ9F4MZpPdHJEwhq3kHKG.md)
- [Classical Ballet](/playlists/pretty/37i9dQZF1DXabrEiRjQMgs.md)
- [Classical Café](/playlists/pretty/0Tn4EK4iKI58XnvWHuMMm0.md)
- [Classical Christmas](/playlists/pretty/37i9dQZF1DX4P0ijJK5lUv.md)
- [Classical Cooking](/playlists/pretty/37i9dQZF1DXdLD1ufgw60J.md)
- [Classical Crossover](/playlists/pretty/37i9dQZF1DX8dPxJstGRJY.md)
- [Classical Era 50: Spotify Picks](/playlists/pretty/37i9dQZF1DX20xDs0SXeZu.md)
- [Classical Essentials](/playlists/pretty/37i9dQZF1DWWEJlAGA9gs0.md)
- [Classical Focus](/playlists/pretty/37i9dQZF1DXd5zUwdn6lPb.md)
- [Classical Garden](/playlists/pretty/37i9dQZF1DWUajed02NzWR.md)
- [Classical Halloween](/playlists/pretty/37i9dQZF1DXafCT9DHTijq.md)
- [Classical Is Universal](/playlists/pretty/57e4EUVfkABhbsT1i1rEtp.md)
- [Classical Lieder](/playlists/pretty/37i9dQZF1DX7uGAnVasG1a.md)
- [Classical Moments in Movies](/playlists/pretty/37i9dQZF1DX6K3W8KBiALe.md)
- [Classical Music for Babies](/playlists/pretty/37i9dQZF1DWVmyIPX2ivrY.md)
- [Classical New Releases](/playlists/pretty/37i9dQZF1DWV0gynK7G6pD.md)
- [Classical Piano](/playlists/pretty/37i9dQZF1DWUqIzZNMSCv3.md)
- [Classical Psalms](/playlists/pretty/37i9dQZF1DXaky0wMRgvaj.md)
- [Classical Reading](/playlists/pretty/37i9dQZF1DWYkztttC1w38.md)
- [Classical Romance](/playlists/pretty/37i9dQZF1DX4s3V2rTswzO.md)
- [Classical Running](/playlists/pretty/37i9dQZF1DXdYI8UeiFx9v.md)
- [Classical Sleep](/playlists/pretty/37i9dQZF1DX8Sz1gsYZdwj.md)
- [Classical Wedding](/playlists/pretty/37i9dQZF1DXbTR7abB7Ji7.md)
- [Classical X](/playlists/pretty/37i9dQZF1DX7dzHXrANAir.md)
- [Classical Yoga](/playlists/pretty/37i9dQZF1DX4QrK4j7ie9B.md)
- [Classically British](/playlists/pretty/37i9dQZF1DWVCndJIeGywh.md)
- [Classics For Crying](/playlists/pretty/37i9dQZF1DX15JKV0q7shD.md)
- [Clean Up](/playlists/pretty/37i9dQZF1DXcXIwKA4lGmV.md)
- [Cleaning Kit](/playlists/pretty/37i9dQZF1DX5oYC8mRiXUR.md)
- [Cleaning Kit en Español](/playlists/pretty/37i9dQZF1DX40AQSQVhD0g.md)
- [Close Harmony Vocals](/playlists/pretty/37i9dQZF1DWX4xqbJOskQD.md)
- [Cloud Rap](/playlists/pretty/37i9dQZF1DX5jNEiuvPyWr.md)
- [Club Rap](/playlists/pretty/37i9dQZF1DWWY5glQ3K3VV.md)
- [Club Resistance](/playlists/pretty/37i9dQZF1DWTLrNDPW5co2.md)
- [Clásicas Norteñas](/playlists/pretty/37i9dQZF1DWX6Kn8siboHN.md)
- [Clásicas de Banda](/playlists/pretty/37i9dQZF1DX5O5m2ypWiqa.md)
- [Clásicas del Mariachi](/playlists/pretty/37i9dQZF1DX6EM3TTcpK4b.md)
- [Clásicos del Hip Hop Latino](/playlists/pretty/37i9dQZF1DX7oE1ZquUHSd.md)
- [Clásicos del Pop Latino](/playlists/pretty/37i9dQZF1DWVpWZiQLVZtt.md)
- [Clásicos del Rock](/playlists/pretty/37i9dQZF1DX6tTgVVjGVN7.md)
- [Cobra Kai Official Playlist](/playlists/pretty/37i9dQZF1DXal36n8FZoQm.md)
- [Cocina Tradicional](/playlists/pretty/37i9dQZF1DXahoF6RyWHgS.md)
- [Cocina con Cumbia](/playlists/pretty/37i9dQZF1DX3spgx4EgoDM.md)
- [Cocina con Pop](/playlists/pretty/37i9dQZF1DWVNnJNkga1l5.md)
- [Cocina con Punk](/playlists/pretty/37i9dQZF1DXdMScvOPszco.md)
- [Cocina con Salsa](/playlists/pretty/37i9dQZF1DWVWDeQ3zOW6J.md)
- [Cocina con sabor](/playlists/pretty/37i9dQZF1DXdZy1l7SFkwm.md)
- [Cocktail Jazz](/playlists/pretty/37i9dQZF1DWU6MDxlH7Sr1.md)
- [Coco & Breezy DJ Mix](/playlists/pretty/37i9dQZF1DWZbLKYSaVqSx.md)
- [Cocoa Butter](/playlists/pretty/37i9dQZF1DWY3rhsGpsfCB.md)
- [Coding Mode](/playlists/pretty/37i9dQZF1DX5trt9i14X7j.md)
- [Coffee + Chill](/playlists/pretty/37i9dQZF1DXa1BeMIGX5Du.md)
- [Coffee Beats](/playlists/pretty/37i9dQZF1DX1uaml3UXYLk.md)
- [Coffee House Classical Guitar](/playlists/pretty/37i9dQZF1DWTJgU1HZwJwV.md)
- [Coffee Table Jazz](/playlists/pretty/37i9dQZF1DWVqfgj8NZEp1.md)
- [Coffee and Piano](/playlists/pretty/37i9dQZF1DX3TPMgP3ojGS.md)
- [Coke Studio: Season 14](/playlists/pretty/37i9dQZF1DXdQoEaDx51WH.md)
- [Coleção Hip Hop](/playlists/pretty/37i9dQZF1DX9FITd4oYs10.md)
- [Columbia Records: Weekly Mix](/playlists/pretty/4WDwW7forWdQWutkAEVZMR.md)
- [Comedy Top Tracks](/playlists/pretty/37i9dQZF1DWSRoT7QRAibZ.md)
- [Comfort Zone](/playlists/pretty/37i9dQZF1DWYWddJiPzbvb.md)
- [Commuter Flow \(That Fire For Your Aux Cord\)](/playlists/pretty/5wPUMOWXlhmk9XmGO4RtKz.md)
- [Complete Chaos](/playlists/pretty/37i9dQZF1DX1fmyMdW2PaL.md)
- [Composer Weekly: Michael Nyman](/playlists/pretty/37i9dQZF1DX21bRPJuEN7r.md)
- [Con Fe](/playlists/pretty/37i9dQZF1DX9uNKnwcoVm9.md)
- [Concentración Perfecta](/playlists/pretty/37i9dQZF1DX0MqBmOXvo6b.md)
- [Concentração Perfeita](/playlists/pretty/37i9dQZF1DX1zM9gA91vC5.md)
- [Conchita: Pride](/playlists/pretty/37i9dQZF1DX8SiEKUUEVVi.md)
- [Confidence Boost](/playlists/pretty/37i9dQZF1DX4fpCWaHOned.md)
- [Congratulations, Sofia and Daniel](/playlists/pretty/2vfyCK7WsXnVeItNwuiFFR.md)
- [Contemporary Blend](/playlists/pretty/37i9dQZF1DWViBxWcYEI1b.md)
- [Contemporary Chinese Classical](/playlists/pretty/37i9dQZF1DX5AviTMPF0km.md)
- [Contemporary Christian Christmas](/playlists/pretty/37i9dQZF1DX2sJGkrvCPgm.md)
- [Contemporary Christmas](/playlists/pretty/37i9dQZF1DWWTuLtC3XxmA.md)
- [Contemporary Folk](/playlists/pretty/37i9dQZF1DX1nqy6pUAoUv.md)
- [Cooking Jazz](/playlists/pretty/37i9dQZF1DXb1JVnfCng2p.md)
- [Cooking with Soul](/playlists/pretty/37i9dQZF1DWUQaB5AfW9Oa.md)
- [Cool Down](/playlists/pretty/37i9dQZF1DWUI1rlvkdQnb.md)
- [Cool Jazz](/playlists/pretty/37i9dQZF1DX6fO1VvuMVL0.md)
- [Cool Jazz \(2\)](/playlists/pretty/37i9dQZF1DWTG7FCdM1HiA.md)
- [Cool K'IDs Rock](/playlists/pretty/37i9dQZF1DX2SFBzpAPi7n.md)
- [Coping With Loss](/playlists/pretty/37i9dQZF1DWVxpHBekDUXK.md)
- [Copão na mão](/playlists/pretty/37i9dQZF1DXbTYpRASjxaF.md)
- [Corey Calliet's HIIT Playlist](/playlists/pretty/37i9dQZF1DXc6edLYxYHo9.md)
- [Cornerstones](/playlists/pretty/37i9dQZF1DWZCJsgK4Sw8Y.md)
- [Corre con Rock](/playlists/pretty/37i9dQZF1DX8ucVJaqqjpS.md)
- [Corridos 2022](/playlists/pretty/37i9dQZF1DX5471jEhaq8X.md)
- [Corridos Alterados](/playlists/pretty/37i9dQZF1DXaRkwbkfuyXo.md)
- [Corridos Nuevos 2022](/playlists/pretty/37i9dQZF1DWWX93cOoPbrf.md)
- [Corridos Perrones](/playlists/pretty/37i9dQZF1DX2shzuwwKw0y.md)
- [Corridos Prohibidos](/playlists/pretty/37i9dQZF1DWU43UtgmzCjN.md)
- [Corridos Tumbados](/playlists/pretty/37i9dQZF1DWWhMyyrqZlaY.md)
- [Corridos de Antaño](/playlists/pretty/37i9dQZF1DWUuQG5KIiBcn.md)
- [Corridos en Vivo](/playlists/pretty/37i9dQZF1DXdcb8m3Nt9YW.md)
- [Corriente Alternativa](/playlists/pretty/37i9dQZF1DX309NIG5AnQn.md)
- [Cosmic Country](/playlists/pretty/37i9dQZF1DX6sc3Xn6L2DK.md)
- [Cosquín Rock 2022](/playlists/pretty/37i9dQZF1DX1lrJMke0u5G.md)
- [Country 101: Rockabilly](/playlists/pretty/37i9dQZF1DX47i8ytbYGJE.md)
- [Country Cardio](/playlists/pretty/37i9dQZF1DX7DBYY9PSkix.md)
- [Country Christmas](/playlists/pretty/37i9dQZF1DX0MuOvUqmxDz.md)
- [Country Christmas Classics](/playlists/pretty/37i9dQZF1DX2C6Zlz76Dq4.md)
- [Country Club](/playlists/pretty/37i9dQZF1DXaa4ZtoHhRxv.md)
- [Country Coffeehouse](/playlists/pretty/37i9dQZF1DWYiR2Uqcon0X.md)
- [Country Cookout](/playlists/pretty/37i9dQZF1DXbIbVYph0Zr5.md)
- [Country Covers](/playlists/pretty/37i9dQZF1DX1KHLbhJkg7B.md)
- [Country Drive](/playlists/pretty/37i9dQZF1DXdfhOsjRMISB.md)
- [Country Favourites](/playlists/pretty/37i9dQZF1DX13ZzXoot6Jc.md)
- [Country Frequency](/playlists/pretty/37i9dQZF1DWY1wwcap53LA.md)
- [Country Gaming](/playlists/pretty/37i9dQZF1DXbFR6m9YbAYz.md)
- [Country Gold](/playlists/pretty/37i9dQZF1DWYnwbYQ5HnZU.md)
- [Country Heartache](/playlists/pretty/37i9dQZF1DXdmMcgFhLQ8u.md)
- [Country Is Universal](/playlists/pretty/50k252B7pn6AaVisjCIt9w.md)
- [Country Kids](/playlists/pretty/37i9dQZF1DWTKm45BTdcDy.md)
- [Country Kind of Love](/playlists/pretty/37i9dQZF1DX8WMG8VPSOJC.md)
- [Country Latino](/playlists/pretty/37i9dQZF1DX5U9LWxuimGj.md)
- [Country Live](/playlists/pretty/37i9dQZF1DXaDsAWldGrpI.md)
- [Country Lullabies](/playlists/pretty/37i9dQZF1DX6e85hOkilRL.md)
- [Country Music 101:  Funny Country](/playlists/pretty/37i9dQZF1DX1V02WRNSlSH.md)
- [Country Music 101:  Good Vibes](/playlists/pretty/37i9dQZF1DX28e329hmxEg.md)
- [Country Music 101:  Welcome to Brokenheartsville](/playlists/pretty/37i9dQZF1DXbo534XMsLSe.md)
- [Country Music 101:  Welcome to Hicktown](/playlists/pretty/37i9dQZF1DXcqeiTvluC9o.md)
- [Country Nights](/playlists/pretty/37i9dQZF1DWXi7h4mmmkzD.md)
- [Country Rock Classics](/playlists/pretty/37i9dQZF1DX4bf0P6HTTom.md)
- [Country Rocks](/playlists/pretty/37i9dQZF1DWWH0izG4erma.md)
- [Country Songwriters](/playlists/pretty/37i9dQZF1DX9nWj0Ba73K5.md)
- [Country Soul](/playlists/pretty/37i9dQZF1DWZv25tLhsWKX.md)
- [Country Wedding](/playlists/pretty/37i9dQZF1DX3qS3zyciZpU.md)
- [Country Workout](/playlists/pretty/37i9dQZF1DX5OrO2Jxuvdn.md)
- [Country Worldwide Hot 50](/playlists/pretty/37i9dQZF1DX7aUUBCKwo4Y.md)
- [Country by the Grace of God](/playlists/pretty/37i9dQZF1DWU2LcZVHsTdv.md)
- [Country's Greatest Hits](/playlists/pretty/37i9dQZF1DWZBCPUIUs2iR.md)
- [Coupé Décalé](/playlists/pretty/37i9dQZF1DX0z1epx5KTtS.md)
- [Covered In Punk](/playlists/pretty/37i9dQZF1DXaDzsRodF91I.md)
- [Covered in Country](/playlists/pretty/0jJQDST7bzwAYlN19tFLXw.md)
- [Covers Acústicos](/playlists/pretty/37i9dQZF1DWYbOY1zkU5qF.md)
- [Covers Padres](/playlists/pretty/37i9dQZF1DX0U9uWXLno47.md)
- [Cozinhando em Casa](/playlists/pretty/37i9dQZF1DWWA91mpJ5Ldc.md)
- [Cozy Acoustic Morning](/playlists/pretty/37i9dQZF1DWT3gM3xdPT0c.md)
- [Cozy Blend](/playlists/pretty/37i9dQZF1DXcxacyAXkQDu.md)
- [Cozy Christmas Jazz](/playlists/pretty/37i9dQZF1DWU0r6G8OGirN.md)
- [Cozy Christmas Pop](/playlists/pretty/37i9dQZF1DWSFWSTYGmXDl.md)
- [Cozy Jazz](/playlists/pretty/37i9dQZF1DX52ln8eMkne9.md)
- [Cranked Up](/playlists/pretty/37i9dQZF1DX5M59nhwFlWl.md)
- [Crash Course](/playlists/pretty/37i9dQZF1DX3YlUroplxjF.md)
- [Crate Diggin' Strictly Rhythm](/playlists/pretty/37i9dQZF1DWSuWb88xGwFB.md)
- [Crate Diggin' Sub Pop Records](/playlists/pretty/37i9dQZF1DX1GRgeFnUb3o.md)
- [Crazy In Love](/playlists/pretty/3wI0prya1veVHKQOtLbmxB.md)
- [Created by Women](/playlists/pretty/37i9dQZF1DX7JO5vzoPTXR.md)
- [Creative Focus](/playlists/pretty/37i9dQZF1DWWn6teJIIcfG.md)
- [Creative Writing](/playlists/pretty/37i9dQZF1DX1ACGg8vzTNZ.md)
- [Creativity Boost](/playlists/pretty/37i9dQZF1DX56qfiUZBncF.md)
- [Creepy, Stupid, Love](/playlists/pretty/37i9dQZF1DWWTA1Ie7iu8r.md)
- [Creo En Ti](/playlists/pretty/37i9dQZF1DWYcaB2B11tq2.md)
- [Crisp](/playlists/pretty/37i9dQZF1DXdb5FEvfgsH9.md)
- [Crooner Classics](/playlists/pretty/37i9dQZF1DX1cC4JrF1e4o.md)
- [Crossroad Blues](/playlists/pretty/37i9dQZF1DX5AuRugisweW.md)
- [Crxss Current](/playlists/pretty/37i9dQZF1DWVoRFkSJDMLO.md)
- [Cubatón](/playlists/pretty/37i9dQZF1DWWM5o62BfFWh.md)
- [Cuencos Tibetanos](/playlists/pretty/37i9dQZF1DX57hHpm3vGiU.md)
- [Cumbia 420](/playlists/pretty/37i9dQZF1DWSLzWG0oani3.md)
- [Cumbia Santafesina](/playlists/pretty/37i9dQZF1DXciANtXsejm4.md)
- [Cumbia Sonidera](/playlists/pretty/37i9dQZF1DWTmGGCbcoQhY.md)
- [Cumbia y Romance](/playlists/pretty/37i9dQZF1DX9o4SIlW5lWs.md)
- [Cumbias Para Bailar](/playlists/pretty/37i9dQZF1DX6XbKgPOSda8.md)
- [Cumbias Viejitas](/playlists/pretty/37i9dQZF1DWTW3H6N0Hkg4.md)
- [Cumbias de Microbús](/playlists/pretty/37i9dQZF1DWSJhvEbMTwW6.md)
- [Cumbias de Oro](/playlists/pretty/37i9dQZF1DX1fWwsbVMoI6.md)
- [Cumbias, Huapangos & Zapateados](/playlists/pretty/37i9dQZF1DWXXHuDNowP2z.md)
- [Cumbieras](/playlists/pretty/37i9dQZF1DX3JGBBuBxYKW.md)
- [Cyberpunk Synthwave](/playlists/pretty/5hnjEy2ZXUZcEcy8jT0Wiw.md)
- [DEAS' track IDs](/playlists/pretty/37i9dQZF1DWUBSyNvqfKld.md)
- [DECONSTRUCTED CLUB](/playlists/pretty/37i9dQZF1DX0dHY5yaDQQD.md)
- [DEN\-ON\-BU 電音部](/playlists/pretty/37i9dQZF1DWTtcnE4xlCDS.md)
- [DISCOLAND](/playlists/pretty/37i9dQZF1DX9ZAByPehUEa.md)
- [DJ D\-Nice's Homeschool](/playlists/pretty/37i9dQZF1DX8Lj01u3MgX5.md)
- [DOPAMINE](/playlists/pretty/37i9dQZF1DX0E9XMGembJo.md)
- [DOPE.](/playlists/pretty/37i9dQZF1DWSrdTgewhgZq.md)
- [DOWN LOW](/playlists/pretty/37i9dQZF1DXblmY5UIU3v3.md)
- [Dad Rock](/playlists/pretty/37i9dQZF1DX09NvEVpeM77.md)
- [Dada Life's DJ Mix](/playlists/pretty/37i9dQZF1DX4xjcl7upl9u.md)
- [Daily Hustle](/playlists/pretty/37i9dQZF1DWZ67NucVVTxV.md)
- [Daily Lift](/playlists/pretty/37i9dQZF1DWU13kKnk03AP.md)
- [Daily Rutina](/playlists/pretty/37i9dQZF1DX4y0nHzEAmnN.md)
- [Dale Flow](/playlists/pretty/37i9dQZF1DX6sLKL3qdVO1.md)
- [Dalkom Cafe](/playlists/pretty/37i9dQZF1DX5g856aiKiDS.md)
- [Dalkom Mukbang \(달콤먹방\)](/playlists/pretty/37i9dQZF1DWTdBIyTaKDBw.md)
- [Dame Más Cumbia](/playlists/pretty/37i9dQZF1DX8DBcbHcgPJw.md)
- [Dame Salsa](/playlists/pretty/37i9dQZF1DWUFmUp1ez7YB.md)
- [Dance Challenge](/playlists/pretty/37i9dQZF1DX8d55mkkrzwq.md)
- [Dance Classics](/playlists/pretty/37i9dQZF1DX8a1tdzq5tbM.md)
- [Dance Covers](/playlists/pretty/37i9dQZF1DX1OxnjWYRVU0.md)
- [Dance Duets](/playlists/pretty/37i9dQZF1DWTt3gMo0DLxA.md)
- [Dance Favourites](/playlists/pretty/37i9dQZF1DWU2jh5S7FvXl.md)
- [Dance For Days](/playlists/pretty/68bXT1MZWZvLOJc0FZrgf7.md)
- [Dance Hits](/playlists/pretty/37i9dQZF1DX0BcQWzuB7ZO.md)
- [Dance Party](/playlists/pretty/37i9dQZF1DXaXB8fQg7xif.md)
- [Dance Pop Hits](/playlists/pretty/37i9dQZF1DWZQaaqNMbbXa.md)
- [Dance Rising](/playlists/pretty/37i9dQZF1DX8tZsk68tuDw.md)
- [Dancehall Official](/playlists/pretty/37i9dQZF1DXan38dNVDdl4.md)
- [Dancehall Party](/playlists/pretty/37i9dQZF1DXe9hay4VT07f.md)
- [Dancehall Queen](/playlists/pretty/37i9dQZF1DX0cNYCfLOrsu.md)
- [Dancehall Station](/playlists/pretty/37i9dQZF1DX9QYRS3EMTFh.md)
- [Dancehall Throwback](/playlists/pretty/37i9dQZF1DWWDLvD3P5wOG.md)
- [Dancing Kizomba](/playlists/pretty/37i9dQZF1DX1l6qs3gcM4U.md)
- [Dangdut Top](/playlists/pretty/37i9dQZF1DWUWbdikWtt34.md)
- [Daniel Adams\-Ray](/playlists/pretty/6c51ZkUk7wO3Icy2sW3jvA.md)
- [Dans runt stången](/playlists/pretty/37i9dQZF1DWX6s7PHJnk94.md)
- [Danzón](/playlists/pretty/37i9dQZF1DXaEjxFSjeD5H.md)
- [Dançando com as Crianças](/playlists/pretty/37i9dQZF1DXbJvW0PWMXVv.md)
- [Dark & Gothic](/playlists/pretty/37i9dQZF1DX0Nb1cyWS6Tq.md)
- [Dark & Stormy](/playlists/pretty/37i9dQZF1DX2pSTOxoPbx9.md)
- [Dark Academia Classical](/playlists/pretty/37i9dQZF1DX17GkScaAekA.md)
- [Dark Ambient](/playlists/pretty/37i9dQZF1DX7XfRr4cb6cr.md)
- [Date Night At Home](/playlists/pretty/1MmXcTuWbvBApvUMIgxDhV.md)
- [Date Night Jazz](/playlists/pretty/37i9dQZF1DX6ZiG5Dz8cUM.md)
- [Dawn Richard Guest List](/playlists/pretty/37i9dQZF1DX3xUq432XGKB.md)
- [DayDreamer](/playlists/pretty/37i9dQZF1DXdbkmlag2h7b.md)
- [De Buenas](/playlists/pretty/37i9dQZF1DX0tkXsEpwo5J.md)
- [De Fiesta](/playlists/pretty/37i9dQZF1DX57NRq0pf7ea.md)
- [Dear Mama](/playlists/pretty/3D8eZBmcXjAjFzUjYtrl6f.md)
- [Deathcore](/playlists/pretty/37i9dQZF1DX1cJWWyylDuw.md)
- [Deep Dark Indie](/playlists/pretty/37i9dQZF1DWTtTyjgd08yp.md)
- [Deep Dive \- 00s Metal](/playlists/pretty/37i9dQZF1DWUrdml94k1Rt.md)
- [Deep Dive \- 90s Metal](/playlists/pretty/37i9dQZF1DWZ0C2766By5p.md)
- [Deep Dive: 00s Rock](/playlists/pretty/37i9dQZF1DX6HzfoNVFOPu.md)
- [Deep Dive: 10s Metal](/playlists/pretty/37i9dQZF1DX3G8VJf8uPvI.md)
- [Deep Dive: 10s Pop](/playlists/pretty/37i9dQZF1DX0KGZxcPEEqa.md)
- [Deep Dive: 10s Rock](/playlists/pretty/37i9dQZF1DWTdfmfhrL4fH.md)
- [Deep Dive: 70s Rock](/playlists/pretty/37i9dQZF1DX0XK1VdFMbTA.md)
- [Deep Dive: 80s Rock](/playlists/pretty/37i9dQZF1DWWhOxz0JuWS6.md)
- [Deep Dive: 90s Rock](/playlists/pretty/37i9dQZF1DX6YTj07PjLwE.md)
- [Deep Focus](/playlists/pretty/37i9dQZF1DWZeKCadgRdKQ.md)
- [Deep House Blend](/playlists/pretty/37i9dQZF1DX5xiztvBdlUf.md)
- [Deep House Relax](/playlists/pretty/37i9dQZF1DX2TRYkJECvfC.md)
- [Deep Listening](/playlists/pretty/37i9dQZF1DX5y2yPmGqrG8.md)
- [Deep Sleep](/playlists/pretty/37i9dQZF1DWYcDQ1hSjOpY.md)
- [Deep Study](/playlists/pretty/37i9dQZF1DWVtHcSjp0LID.md)
- [Delta Blues](/playlists/pretty/37i9dQZF1DWSTHVqvNCwNq.md)
- [Dembow Pegao](/playlists/pretty/37i9dQZF1DWWWpEY2WZLnS.md)
- [Demi Bagby's Vibes Playlist](/playlists/pretty/37i9dQZF1DX1CC59WvTBvm.md)
- [Demi Lovato: Being Seen & Heard](/playlists/pretty/37i9dQZF1DWU2Xvi7DdwYy.md)
- [Deserved](/playlists/pretty/37i9dQZF1DX1SbnWqcjJBz.md)
- [Desi Hip Hop](/playlists/pretty/37i9dQZF1DX2RahGIyQXcJ.md)
- [Desi Hits](/playlists/pretty/37i9dQZF1DWTwzVdyRpXm1.md)
- [Desi Indie](/playlists/pretty/37i9dQZF1DX9Kz7jBbxgYQ.md)
- [Despierta y Sonríe](/playlists/pretty/37i9dQZF1DWVhcOv4ieuap.md)
- [Det är så tråkigt och trist utan dig](/playlists/pretty/7qeSmszUjRBWOwHzlxfEXt.md)
- [Detox](/playlists/pretty/37i9dQZF1DXcBbGCLlic3p.md)
- [Detroit Techno](/playlists/pretty/37i9dQZF1DX1GT5IIzDqMe.md)
- [Detty December](/playlists/pretty/37i9dQZF1DWTKXbV17YqGw.md)
- [Deutschrap: Die Klassiker](/playlists/pretty/37i9dQZF1DWSzguhfGl55y.md)
- [Devastating](/playlists/pretty/37i9dQZF1DX33TfGBYPkRQ.md)
- [Dia de Chuva](/playlists/pretty/37i9dQZF1DWULHbs82dshJ.md)
- [Dia de Faxina](/playlists/pretty/37i9dQZF1DXdg3JLYhYrif.md)
- [Digster HITS \- Best of 2013](/playlists/pretty/6FzxUXXUk9bzWJ8d1NIGWy.md)
- [Dim Mak New Releases](/playlists/pretty/6Gp3E89xD6vRQtuAKFizMo.md)
- [Dimitri Vangelis & Wyman's DJ Mix](/playlists/pretty/37i9dQZF1DX3JjRskvOCSF.md)
- [Dinner Lounge](/playlists/pretty/37i9dQZF1DX6kz6Kli3wib.md)
- [Dinner Music](/playlists/pretty/37i9dQZF1DXatMjChPKgBk.md)
- [Dinner Piano](/playlists/pretty/37i9dQZF1DWZVU32KsYGUK.md)
- [Dinner Unplugged](/playlists/pretty/37i9dQZF1DWYQEbc2LcIWO.md)
- [Dinner with Friends](/playlists/pretty/37i9dQZF1DX4xuWVBs4FgJ.md)
- [Dinosaurs](/playlists/pretty/37i9dQZF1DX7gU1rnYEgSF.md)
- [Dirty Rock](/playlists/pretty/37i9dQZF1DWY6vTWIdZ54A.md)
- [Disclosure](/playlists/pretty/5grxWts6M4gvPZFrWSNOBl.md)
- [Disclosure's Spotify Playlist](/playlists/pretty/1npVCZGxmhbfhAyeDEqhwA.md)
- [Disco Beats](/playlists/pretty/0pHFNRP8qkYhal0q0Irp6D.md)
- [Disco Decadence](/playlists/pretty/37i9dQZF1DX0oFpWfPwcGv.md)
- [Disco Deewane](/playlists/pretty/37i9dQZF1DX4PMbm7GPN1x.md)
- [Disco Fever](/playlists/pretty/37i9dQZF1DX2GKumqRIZ7g.md)
- [Disco Forever](/playlists/pretty/37i9dQZF1DX1MUPbVKMgJE.md)
- [Disco Hi\-Life](/playlists/pretty/37i9dQZF1DXbS8bPVXXR2B.md)
- [Discover Weekly \(@catzs\)](/playlists/pretty/37i9dQZEVXcJR8Ys0NBejf.md)
- [Discover Weekly \(@mackorone\)](/playlists/pretty/37i9dQZEVXcRuMXvgjbNNg.md)
- [Disney Christmas](/playlists/pretty/37i9dQZF1DX10JY0qJoWDu.md)
- [Disney Classical](/playlists/pretty/37i9dQZF1DWVJd52AtCSiR.md)
- [Disney Favorites](/playlists/pretty/37i9dQZF1DWVs8I62NcHks.md)
- [Disney Hits](/playlists/pretty/37i9dQZF1DX8C9xQcOrE6T.md)
- [Disney Junior Hits](/playlists/pretty/37i9dQZF1DX4TzCf8od5BM.md)
- [Disney Love Songs](/playlists/pretty/37i9dQZF1DXauMQRH2JBCJ.md)
- [Disney Lullaby](/playlists/pretty/37i9dQZF1DX0zmsulfyDdq.md)
- [Disney Storytime](/playlists/pretty/37i9dQZF1DWUpLoMa4BXi9.md)
- [Distance Dandiya](/playlists/pretty/37i9dQZF1DWUQyIF4v1Ra3.md)
- [DistroKid Spotlight](/playlists/pretty/5uUVyS9PTP8pXBi5nuwLZP.md)
- [Divina MPB](/playlists/pretty/37i9dQZF1DWTWoEMrRMHZ8.md)
- [Domino Sound System](/playlists/pretty/2nSEYi9ueqDn2wxo1Tmceg.md)
- [Don't Mess With Texas](/playlists/pretty/1iiODxaiVpBp522dalIe9V.md)
- [Donne\-toé](/playlists/pretty/37i9dQZF1DWT8LCEj4KIhm.md)
- [Doo\-Wop Dee Doo](/playlists/pretty/37i9dQZF1DX9GxQjEBVviW.md)
- [Door Knockers](/playlists/pretty/37i9dQZF1DX9iGsUcr0Bpa.md)
- [Dope AF](/playlists/pretty/37i9dQZF1DX1kZBqCJkwLM.md)
- [Dos Iconos: Julio Iglesias y Raphael](/playlists/pretty/37i9dQZF1DX9osbRRf6xSX.md)
- [Dos Iconos: Rosalía y C\. Tangana](/playlists/pretty/37i9dQZF1DX2OeXDYwOkCD.md)
- [Dos Iconos: Serrat y Sabina](/playlists/pretty/37i9dQZF1DWU3gF0C6rGZR.md)
- [Dos Íconos: Celia Cruz x Tito Puente](/playlists/pretty/37i9dQZF1DWVjvpZJKWWzO.md)
- [Dos Íconos: Emmanuel x Mijares](/playlists/pretty/37i9dQZF1DX77dWUhnBuLs.md)
- [Dos Íconos: José José x Juan Gabriel](/playlists/pretty/37i9dQZF1DX43pSb7XuvgU.md)
- [Dos Íconos: Luis Miguel x Alejandro Fernández](/playlists/pretty/37i9dQZF1DWSXkKR3NnPZR.md)
- [Dos Íconos: Selena x Jenni Rivera](/playlists/pretty/37i9dQZF1DWYTyUvRwFpCv.md)
- [Dos Íconos: Shakira x Alejandro Sanz](/playlists/pretty/37i9dQZF1DXaKaZNQ3qx4Z.md)
- [Dos íconos: Daddy Yankee x Nicky Jam](/playlists/pretty/37i9dQZF1DXaB9aWy6BzCT.md)
- [Dose Trap](/playlists/pretty/37i9dQZF1DWWlW7KLhEhCZ.md)
- [Dramatic Classical](/playlists/pretty/37i9dQZF1DX2aCk0vzzaZQ.md)
- [Dreamcatcher](/playlists/pretty/37i9dQZF1DXb6LkIGouseT.md)
- [Dreampop](/playlists/pretty/37i9dQZF1DX6uhsAfngvaD.md)
- [Dreampop Classics](/playlists/pretty/37i9dQZF1DXcNf6sH1qnKU.md)
- [Dreamy Vibes](/playlists/pretty/37i9dQZF1DWSiZVO2J6WeI.md)
- [Drinkin' Songs](/playlists/pretty/37i9dQZF1DX3ph0alWhOXm.md)
- [Drinks no Sofá](/playlists/pretty/37i9dQZF1DWX9JsANXY37r.md)
- [Driving Songs • Best of Dad Rock](/playlists/pretty/3Nxv0V4YqRFTnmLyuKFKJk.md)
- [Drone](/playlists/pretty/37i9dQZF1DXbwRqtEuH2l7.md)
- [Drop The Bit \(드랍 더 비트\)](/playlists/pretty/37i9dQZF1DWZVoboXxeXW4.md)
- [Drum Mania](/playlists/pretty/37i9dQZF1DWXsvIAf8Ytjl.md)
- [Dub On The Beach](/playlists/pretty/37i9dQZF1DX6u62UVrRdZV.md)
- [Dub Zone](/playlists/pretty/0qNxhUDMiSLrSdTCYD87qn.md)
- [Dubstep Classics](/playlists/pretty/37i9dQZF1DX4arVIN5Cg4U.md)
- [Dubstep Don](/playlists/pretty/37i9dQZF1DX5Q27plkaOQ3.md)
- [Dubstep Origins](/playlists/pretty/37i9dQZF1DX06gZCH3HsWs.md)
- [Dunes](/playlists/pretty/37i9dQZF1DX3bxj1vnytuY.md)
- [Dwayne Johnson's Iron Paradise Tour Playlist](/playlists/pretty/37i9dQZF1DXcdGxYPVUKPf.md)
- [EDM](/playlists/pretty/37i9dQZF1DX1kCIzMYtzum.md)
- [EDM LUV <3](/playlists/pretty/37i9dQZF1DXdIugvVnxZNT.md)
- [EDM Samplings](/playlists/pretty/37i9dQZF1DXafD1g5rer7q.md)
- [EDM Telugu](/playlists/pretty/37i9dQZF1DX14rZPczlTBh.md)
- [EDM Top 100](/playlists/pretty/6P9kL0w6D5JnjAUGVQKXgD.md)
- [EL ROCK NO HA MUERTO](/playlists/pretty/37i9dQZF1DX11wyL5eCLSa.md)
- [EM Fotboll 2012](/playlists/pretty/0NYlvGXveeyvhb5G80LPtA.md)
- [EODM Play it Forward Campaign](/playlists/pretty/37i9dQZF1DWWpCjltOl2fU.md)
- [EPIC VIBES](/playlists/pretty/7wCNxGSjlhWAooeoqthbpT.md)
- [EQUAL AU & NZ](/playlists/pretty/37i9dQZF1DX74ozWuOfjjm.md)
- [EQUAL Africa](/playlists/pretty/37i9dQZF1DX35vibahyjHG.md)
- [EQUAL Ambient](/playlists/pretty/37i9dQZF1DWWwGws5Po6YO.md)
- [EQUAL Andes](/playlists/pretty/37i9dQZF1DX27DJRLhzQiD.md)
- [EQUAL Anime](/playlists/pretty/37i9dQZF1DXblYBkrEcpLK.md)
- [EQUAL Arabia](/playlists/pretty/37i9dQZF1DXbgtqUuhUMh3.md)
- [EQUAL Argentina](/playlists/pretty/37i9dQZF1DX2ArBUudJwM5.md)
- [EQUAL Belgium](/playlists/pretty/37i9dQZF1DX5YBM9tRiBVF.md)
- [EQUAL Blues](/playlists/pretty/37i9dQZF1DX8QB9Ys2nV17.md)
- [EQUAL Brasil](/playlists/pretty/37i9dQZF1DX8hUq3jyvfJh.md)
- [EQUAL CZ&SK](/playlists/pretty/37i9dQZF1DX5jr2ABRSBbi.md)
- [EQUAL Canada](/playlists/pretty/37i9dQZF1DX3vtLopew4fC.md)
- [EQUAL Centro & Caribe](/playlists/pretty/37i9dQZF1DX7D7lQhUs2b8.md)
- [EQUAL Chile](/playlists/pretty/37i9dQZF1DXaXeq4HFmqQR.md)
- [EQUAL Colombia](/playlists/pretty/37i9dQZF1DWSWHOzidsSnO.md)
- [EQUAL España](/playlists/pretty/37i9dQZF1DX6dANf8jNW4z.md)
- [EQUAL France](/playlists/pretty/37i9dQZF1DX4kZR8vL5oVX.md)
- [EQUAL GSA](/playlists/pretty/37i9dQZF1DWVA5o3WHL2eG.md)
- [EQUAL Global](/playlists/pretty/37i9dQZF1DWU8quswnFt3c.md)
- [EQUAL Greece](/playlists/pretty/37i9dQZF1DX9H4ZHqhys8z.md)
- [EQUAL Hong Kong](/playlists/pretty/37i9dQZF1DX6W1YbI0Nbnc.md)
- [EQUAL India](/playlists/pretty/37i9dQZF1DX5KJJSIYaNvs.md)
- [EQUAL Indie](/playlists/pretty/37i9dQZF1DX91UQmVbQYyN.md)
- [EQUAL Israel](/playlists/pretty/37i9dQZF1DWVbXsIvZBlOB.md)
- [EQUAL Italia](/playlists/pretty/37i9dQZF1DWUHxBb0SYtLj.md)
- [EQUAL Japan](/playlists/pretty/37i9dQZF1DX2K2376Q0zTJ.md)
- [EQUAL K\-Pop](/playlists/pretty/37i9dQZF1DX6Cy4Vr7Hu2y.md)
- [EQUAL Korea](/playlists/pretty/37i9dQZF1DWXLRnGRo8irv.md)
- [EQUAL México](/playlists/pretty/37i9dQZF1DWXoqmNKv7cNC.md)
- [EQUAL Netherlands](/playlists/pretty/37i9dQZF1DXaXn0hGbmLLg.md)
- [EQUAL New Age](/playlists/pretty/37i9dQZF1DX7QGYV9jyeOE.md)
- [EQUAL Polska](/playlists/pretty/37i9dQZF1DWWsiJMaq2jt5.md)
- [EQUAL Portugal](/playlists/pretty/37i9dQZF1DXa3XvSefBFmb.md)
- [EQUAL Russia](/playlists/pretty/37i9dQZF1DWWgdl6IRdIlO.md)
- [EQUAL Singapore & Malaysia](/playlists/pretty/37i9dQZF1DXdx7sCF75xKy.md)
- [EQUAL Taiwan](/playlists/pretty/37i9dQZF1DX2hEEH7Yc5Au.md)
- [EQUAL Türkiye](/playlists/pretty/37i9dQZF1DX3aD9A9aINSs.md)
- [EQUAL UK & Ireland](/playlists/pretty/37i9dQZF1DX9ptRQF1dOxS.md)
- [EQUAL US](/playlists/pretty/37i9dQZF1DWU86q8CK6tXo.md)
- [EQUAL Vietnam](/playlists/pretty/37i9dQZF1DXbbp0uiGXEBw.md)
- [EQUAL: Classical](/playlists/pretty/37i9dQZF1DX5hL1aT2vhMb.md)
- [EQUAL: Jazz](/playlists/pretty/37i9dQZF1DX5OepaGriAIm.md)
- [ESPN Music: College Football’s 2022 Soundtrack](/playlists/pretty/37i9dQZF1DX45xYefy6tIi.md)
- [EVANGELION『エヴァンゲリオン』シリーズ](/playlists/pretty/37i9dQZF1DWTIAgtZV6kbs.md)
- [Eagles & Beyond](/playlists/pretty/37i9dQZF1DXdzvUJyTnhLh.md)
- [Early Alternative](/playlists/pretty/37i9dQZF1DXdTCdwCKzXwo.md)
- [Early Classical](/playlists/pretty/37i9dQZF1DXbaZdHeCwl9C.md)
- [Early Morning Rise](/playlists/pretty/68oeNrImf1nxjL0RbpZkij.md)
- [Early New Age](/playlists/pretty/37i9dQZF1DX8ME1cOz1QtO.md)
- [Easter](/playlists/pretty/37i9dQZF1DWX1VaLD1v09s.md)
- [Easter Gospel](/playlists/pretty/37i9dQZF1DX3NF3yKN2rSH.md)
- [Easter Worship](/playlists/pretty/37i9dQZF1DX4kqCz1xEn1w.md)
- [Eastern Vibes](/playlists/pretty/37i9dQZF1DWVkyW4DM7wMY.md)
- [Easy](/playlists/pretty/37i9dQZF1DX2czWA9hqErK.md)
- [Easy 00s](/playlists/pretty/37i9dQZF1DX8j4KHUVrE2f.md)
- [Easy 10s](/playlists/pretty/37i9dQZF1DX7udthHrZCWz.md)
- [Easy 50s](/playlists/pretty/37i9dQZF1DX3EgfgehUd1l.md)
- [Easy 60s](/playlists/pretty/37i9dQZF1DWZWYUuTGjjhE.md)
- [Easy 70s](/playlists/pretty/37i9dQZF1DWSWNiyXQAvbl.md)
- [Easy 80s](/playlists/pretty/37i9dQZF1DX6l1fwN15uV5.md)
- [Easy 90s](/playlists/pretty/37i9dQZF1DWV8xrpik0esU.md)
- [Easy Acoustic](/playlists/pretty/37i9dQZF1DX4CgJVlGEIo5.md)
- [Easy Blues](/playlists/pretty/37i9dQZF1DWTLAuD69zHkT.md)
- [Easy Christmas](/playlists/pretty/37i9dQZF1DX5Ib6QBg3iKI.md)
- [Easy Classical](/playlists/pretty/37i9dQZF1DX0Aaer4Jzfgm.md)
- [Easy Jazz](/playlists/pretty/37i9dQZF1DWT4nLmUaFDGb.md)
- [Easy On Monday](/playlists/pretty/37i9dQZF1DWYlXpl3xXzDI.md)
- [Easy On Saturday](/playlists/pretty/37i9dQZF1DX79N7YUDFu8f.md)
- [Ecoscapes](/playlists/pretty/37i9dQZF1DWVoK39RtbDqZ.md)
- [Editor's Choice: Fiction](/playlists/pretty/37i9dQZF1DX4jokLVYoXC3.md)
- [Editor's Choice: Nonfiction](/playlists/pretty/37i9dQZF1DX3sMl692aSSY.md)
- [Edna St\. Vincent Millay](/playlists/pretty/37i9dQZF1DWU73wUKShGqj.md)
- [Ejercicio Total](/playlists/pretty/37i9dQZF1DX8Ni17TUudVB.md)
- [El Bar de la Soledad](/playlists/pretty/37i9dQZF1DXa9E5mH7sfUn.md)
- [El Barrio MP3](/playlists/pretty/37i9dQZF1DXbH5bzpmFWXy.md)
- [El Bordo: La serie](/playlists/pretty/37i9dQZF1DXdGmBAqGWLG1.md)
- [El Club de los Corazones Rotos](/playlists/pretty/37i9dQZF1DWY902or0QqdY.md)
- [El Junte](/playlists/pretty/37i9dQZF1DWYp0EKplWoKi.md)
- [El Ritmo](/playlists/pretty/37i9dQZF1DWVOLXBOylBUZ.md)
- [Electric Blues Classics](/playlists/pretty/37i9dQZF1DX9GnjlK17CLK.md)
- [Electric Relaxation](/playlists/pretty/37i9dQZF1DXboGlPhJFIp9.md)
- [Electric Zoo Guest List](/playlists/pretty/37i9dQZF1DX3FNkD0kDpDV.md)
- [Electro Swing](/playlists/pretty/37i9dQZF1DX3bH0P2uDnWA.md)
- [Electronic + Dance Frequency](/playlists/pretty/37i9dQZF1DXa1pcUVlBhYz.md)
- [Electronic Christmas](/playlists/pretty/37i9dQZF1DX2zhLcnFr1qI.md)
- [Electronic Circus](/playlists/pretty/37i9dQZF1DWVCHIm2MEeIy.md)
- [Electronic Focus](/playlists/pretty/37i9dQZF1DX0wMD4IoQ5aJ.md)
- [Electronic Rising](/playlists/pretty/37i9dQZF1DX8AliSIsGeKd.md)
- [Electronic X](/playlists/pretty/37i9dQZF1DWVXNkY9grbsT.md)
- [Electronica Romantica](/playlists/pretty/37i9dQZF1DXaRycgyh6kXP.md)
- [Electrónica & Dance Music](/playlists/pretty/37i9dQZF1DXdDh4h59PJIQ.md)
- [Elvis Party](/playlists/pretty/37i9dQZF1DWVL7BvDWdNBe.md)
- [Eléctrica Selvática](/playlists/pretty/37i9dQZF1DXacNXCQqbCEI.md)
- [Emerging Americana](/playlists/pretty/37i9dQZF1DX4WAExTTn6PI.md)
- [Emily Dickinson](/playlists/pretty/37i9dQZF1DWSZQ5nlFnjFF.md)
- [Emmaboda 2012](/playlists/pretty/4muFXNJjmJvLWdHmx0PKYO.md)
- [Emo Forever](/playlists/pretty/37i9dQZF1DX9wa6XirBPv8.md)
- [En el Trabajo](/playlists/pretty/37i9dQZF1DX62RIcEOaBWi.md)
- [Enamorándose](/playlists/pretty/37i9dQZF1DX14fkzxPABaL.md)
- [Encanto Official Playlist](/playlists/pretty/37i9dQZF1DWYMVEbshVhe1.md)
- [End in Tears](/playlists/pretty/37i9dQZF1DX16fznubzL23.md)
- [Energizing Classics](/playlists/pretty/37i9dQZF1DX3sXSrrk1ytC.md)
- [Energy + Positivity](/playlists/pretty/2YeGkAUQhmO8TCjSMbFYWf.md)
- [Energy Boost](/playlists/pretty/0Vjhah37el0Aq5yoRaujBz.md)
- [Energy Booster: Country](/playlists/pretty/37i9dQZF1DWXLSRKeL7KwM.md)
- [Energy Booster: Dance](/playlists/pretty/37i9dQZF1DX35X4JNyBWtb.md)
- [Energy Booster: Hip\-Hop](/playlists/pretty/37i9dQZF1DWZixSclZdoFE.md)
- [Energy Booster: Indie](/playlists/pretty/37i9dQZF1DX8hY56Fq3fM0.md)
- [Energy Booster: K\-Pop](/playlists/pretty/37i9dQZF1DWSnRSDTCsoPk.md)
- [Energy Booster: Metal](/playlists/pretty/37i9dQZF1DWTXGqmP0bfT3.md)
- [Energy Booster: Pop](/playlists/pretty/37i9dQZF1DX0vHZ8elq0UK.md)
- [Energy Booster: R&B](/playlists/pretty/37i9dQZF1DWTUHzPOW6Jl7.md)
- [Energy Booster: Rock](/playlists/pretty/37i9dQZF1DWZVAVMhIe3pV.md)
- [Energy Release](/playlists/pretty/37i9dQZF1DX0YwbagSTSJv.md)
- [Enganchados: Cumbianchas](/playlists/pretty/37i9dQZF1DXavAgzH4TQLa.md)
- [Enganchados: Latinos](/playlists/pretty/37i9dQZF1DX8kJmrTVx1yE.md)
- [Enganchados: Lentos](/playlists/pretty/37i9dQZF1DWSsv1Yhw5QfW.md)
- [Enganchados: Románticos](/playlists/pretty/37i9dQZF1DX12KGbWhMort.md)
- [Epic & Melodic](/playlists/pretty/37i9dQZF1DX37bXS7EGI3f.md)
- [Epic Classical](/playlists/pretty/37i9dQZF1DX9G9wwzwWL2k.md)
- [Escena Electrónica Experimental](/playlists/pretty/37i9dQZF1DWWzc8XPy0ntN.md)
- [Escena Pop Punk](/playlists/pretty/37i9dQZF1DXaDPSVSkBhhM.md)
- [Escuta as Minas](/playlists/pretty/37i9dQZF1DX9zF9ZmsyHKt.md)
- [Esenciales](/playlists/pretty/37i9dQZF1DX3omIq8ziEt6.md)
- [Esenciales Trova](/playlists/pretty/37i9dQZF1DWU1owuN89XHr.md)
- [Espíritu Setentista](/playlists/pretty/37i9dQZF1DWZsLcak1FuUD.md)
- [Esquenta Sertanejo](/playlists/pretty/37i9dQZF1DXdSjVZQzv2tl.md)
- [Essential Alternative](/playlists/pretty/37i9dQZF1DX9GRpeH4CL0S.md)
- [Essential Folk](/playlists/pretty/37i9dQZF1DWVmps5U8gHNv.md)
- [Essential Indie](/playlists/pretty/37i9dQZF1DX26DKvjp0s9M.md)
- [Esto es Cumbia](/playlists/pretty/37i9dQZF1DWT1viuVscXm2.md)
- [Et Alt](/playlists/pretty/37i9dQZF1DWZP6bJtKFz1V.md)
- [Ethereal](/playlists/pretty/37i9dQZF1DXao0JEaClQq9.md)
- [Ethio\-Pop](/playlists/pretty/37i9dQZF1DX8Q8vgP3md04.md)
- [Eurovision Party](/playlists/pretty/37i9dQZF1DX6BCd5Q12fpZ.md)
- [Evening Acoustic](/playlists/pretty/37i9dQZF1DXcWBRiUaG3o5.md)
- [Evening Commute](/playlists/pretty/37i9dQZF1DX3bSdu6sAEDF.md)
- [Evening Jazz](/playlists/pretty/37i9dQZF1DWXSyfX6gqDNp.md)
- [Evening Serenades](/playlists/pretty/2zlFpwRI7aroWy0ecv6O34.md)
- [Everyday Favorites](/playlists/pretty/37i9dQZF1DWWvoJqVv7uOD.md)
- [Everyday Inspiration](/playlists/pretty/37i9dQZF1DXbQ1kpdsa9FU.md)
- [Evolution Of Soul](/playlists/pretty/37i9dQZF1DWVGLWeeMNGcG.md)
- [Exospheres](/playlists/pretty/37i9dQZF1DX8OUvJF6ATAB.md)
- [Extreme Metal Workout](/playlists/pretty/37i9dQZF1DWY3PJWG3ogmJ.md)
- [FINAL FANTASY](/playlists/pretty/37i9dQZF1DX8wCc28V2cVW.md)
- [FINAL FANTASY \(2\)](/playlists/pretty/37i9dQZF1DWYnGFRu5xvi8.md)
- [FORYOU](/playlists/pretty/37i9dQZF1DX5PcuIKocvtW.md)
- [FRONTEO](/playlists/pretty/37i9dQZF1DX6jW9mPgBGv2.md)
- [Fairy Tales](/playlists/pretty/37i9dQZF1DX0gxuYiQFvQL.md)
- [Faith Finds](/playlists/pretty/37i9dQZF1DX82qPOvdCxxq.md)
- [Faithful Melodies](/playlists/pretty/37i9dQZF1DWW37fHr0rhOh.md)
- [Fall Asleep](/playlists/pretty/37i9dQZF1DX3WdioUzkg8I.md)
- [Falling In Love](/playlists/pretty/08vPKM3pmoyF6crB2EtASQ.md)
- [Family BBQ](/playlists/pretty/37i9dQZF1DX8U8pFd8VSmd.md)
- [Family Beach Time](/playlists/pretty/37i9dQZF1DXb3ZKiuF24g4.md)
- [Family Christmas Party](/playlists/pretty/37i9dQZF1DWYTNedJ22GVG.md)
- [Family Country](/playlists/pretty/37i9dQZF1DWWXUgpTTs0Pv.md)
- [Family Dance Party](/playlists/pretty/37i9dQZF1DX4cCqTKPWY5o.md)
- [Family Easter Worship](/playlists/pretty/37i9dQZF1DX9hS79sjNt2Z.md)
- [Family Folk](/playlists/pretty/37i9dQZF1DX3uZHsihe90o.md)
- [Family Game Time](/playlists/pretty/37i9dQZF1DX2cmh8SxTRyo.md)
- [Family Glue](/playlists/pretty/37i9dQZF1DX854liIXcOyw.md)
- [Family Meditation](/playlists/pretty/37i9dQZF1DWT3zm4DUSYTc.md)
- [Family Movie Hits](/playlists/pretty/37i9dQZF1DXd4bJEFQJTXh.md)
- [Family Road Trip](/playlists/pretty/37i9dQZF1DWTJ0ewkTmTo2.md)
- [Family TV Tunes](/playlists/pretty/37i9dQZF1DX6LFt5stenrC.md)
- [Family Yoga Time](/playlists/pretty/37i9dQZF1DX5wxtFbAW1CE.md)
- [Fan Noise](/playlists/pretty/37i9dQZF1DWUm4vT7WQxcD.md)
- [Fangirls Run the World](/playlists/pretty/37i9dQZF1DXboQCHLEaHcr.md)
- [Fantasy Board Gaming](/playlists/pretty/37i9dQZF1DWVdDMUimLXxx.md)
- [Fashion Forward](/playlists/pretty/37i9dQZF1DWWvGEj20FfCp.md)
- [Fast Pop Run](/playlists/pretty/37i9dQZF1DWVhQ5d3I6DeF.md)
- [Father's Day Love](/playlists/pretty/37i9dQZF1DWXakVTmpoTAP.md)
- [Faxina Nostalgia](/playlists/pretty/37i9dQZF1DXce9JMR6ngZx.md)
- [Faxina com Sofrência](/playlists/pretty/37i9dQZF1DWVCpC5RyKiLg.md)
- [Feel Good Acoustic](/playlists/pretty/37i9dQZF1DWXRvPx3nttRN.md)
- [Feel Good Beats](/playlists/pretty/37i9dQZF1DXcNb6Ba0LuVc.md)
- [Feel Good Christmas](/playlists/pretty/37i9dQZF1DX6piCqp6Q8ck.md)
- [Feel Good Classical](/playlists/pretty/37i9dQZF1DX5Lm1ZiObdc3.md)
- [Feel Good Classics](/playlists/pretty/37i9dQZF1DWVinJBuv0P4z.md)
- [Feel Good Dinner](/playlists/pretty/37i9dQZF1DXbm6HfkbMtFZ.md)
- [Feel Good Friday](/playlists/pretty/37i9dQZF1DX1g0iEXLFycr.md)
- [Feel Good Jazz](/playlists/pretty/37i9dQZF1DWZCkamcYMQkz.md)
- [Feel Good Piano](/playlists/pretty/37i9dQZF1DXcEKFjZJYZcc.md)
- [Feel Good Rock](/playlists/pretty/37i9dQZF1DXdowzKiHFkSQ.md)
- [Feel Good Soundtracks](/playlists/pretty/37i9dQZF1DWXahxq4Q8el6.md)
- [Feel Good Summer](/playlists/pretty/37i9dQZF1DX9fZ7amiNVu6.md)
- [Feel\-Good Indie Rock](/playlists/pretty/37i9dQZF1DX2sUQwD7tbmL.md)
- [Feelin' Good](/playlists/pretty/37i9dQZF1DX9XIFQuFvzM4.md)
- [Feelin' Myself](/playlists/pretty/37i9dQZF1DX6GwdWRQMQpq.md)
- [Feeling Accomplished](/playlists/pretty/37i9dQZF1DWTDafB3skWPN.md)
- [Feeling Good](/playlists/pretty/37i9dQZF1DX7xOpGPUVNE5.md)
- [Feliz Navidad](/playlists/pretty/37i9dQZF1DX4AZbjYNMlQK.md)
- [Femcees](/playlists/pretty/37i9dQZF1DWZRM5WD7taad.md)
- [Femme Fatale](/playlists/pretty/37i9dQZF1DX0IyMQV27EGn.md)
- [Fest!](/playlists/pretty/37i9dQZF1DWVcV87ePAqAq.md)
- [Festa na Praia](/playlists/pretty/37i9dQZF1DX41UmHm2vtav.md)
- [Field Party](/playlists/pretty/37i9dQZF1DXc0fQ4sGOnVJ.md)
- [Fierce](/playlists/pretty/37i9dQZF1DWZZCoBbLu26P.md)
- [Fierce Femmes](/playlists/pretty/37i9dQZF1DX5kjCvsC5isB.md)
- [Fiesta](/playlists/pretty/37i9dQZF1DX9vJ2U3sN7xj.md)
- [Fiesta & Karaoke](/playlists/pretty/37i9dQZF1DX0qVgUFKIZBO.md)
- [Fiesta 90era](/playlists/pretty/37i9dQZF1DWW7hJS3Xj96I.md)
- [Fiesta Pop](/playlists/pretty/37i9dQZF1DXe9UYa8hql9y.md)
- [Fiesta con Sabor](/playlists/pretty/37i9dQZF1DWSgM16hVIBq6.md)
- [Fiesta para Niños](/playlists/pretty/37i9dQZF1DXboDhSekKgFI.md)
- [Filipina\-American Women Creatives: Challenging the Arts & Society](/playlists/pretty/37i9dQZF1DWXl7YskCND7g.md)
- [Film & TV Favorites: 90s Black Cinema](/playlists/pretty/37i9dQZF1DWZC2yew0xGiz.md)
- [Filmy Party](/playlists/pretty/37i9dQZF1DWTUfv2yzHEe7.md)
- [Fino Al Mattino](/playlists/pretty/37i9dQZF1DX9xImy3px1J2.md)
- [Fire Force \-炎炎ノ消防隊\-](/playlists/pretty/37i9dQZF1DWZUtUMYwCnJI.md)
- [Fireside Acoustic](/playlists/pretty/37i9dQZF1DX05VdJQ1gtnD.md)
- [Fireside Christmas Jazz](/playlists/pretty/37i9dQZF1DWZy48MuOV69W.md)
- [Fleetwood Mac & Beyond](/playlists/pretty/37i9dQZF1DX9X62wFct8zv.md)
- [Flex & Flow](/playlists/pretty/2idQpnxeioGlOsW66uaQ3U.md)
- [Floating Through Space](/playlists/pretty/37i9dQZF1DX1n9whBbBKoL.md)
- [Floorfillers](/playlists/pretty/37i9dQZF1DWWXrKtH3fzUd.md)
- [Flow Cristiano](/playlists/pretty/37i9dQZF1DWVh9guDyUECQ.md)
- [Flow Dominicano](/playlists/pretty/37i9dQZF1DWZVuIRLEh0tE.md)
- [Flow Panamá](/playlists/pretty/37i9dQZF1DWYVseajANOFG.md)
- [Flow Romance](/playlists/pretty/37i9dQZF1DXaBt8AqnUnAs.md)
- [Flow Venezuela](/playlists/pretty/37i9dQZF1DWTtgIvO0zxTI.md)
- [Flow Vinyasa](/playlists/pretty/37i9dQZF1DX9Sl1oOOAZi8.md)
- [Flow al Sur](/playlists/pretty/37i9dQZF1DX6JcLkkShqRw.md)
- [Foam Party](/playlists/pretty/3L1KIXcFcHhfeMlf7pD7IB.md)
- [Foco com Energia](/playlists/pretty/37i9dQZF1DX8ZSkZGhJFi1.md)
- [Focus Flow](/playlists/pretty/37i9dQZF1DWZZbwlv3Vmtr.md)
- [Focus Guitar](/playlists/pretty/37i9dQZF1DXc6Umi4GHdr1.md)
- [Focus Jazz](/playlists/pretty/37i9dQZF1DX8wWHvPMMfNA.md)
- [Focus Piano](/playlists/pretty/37i9dQZF1DWZIOAPKUdaKS.md)
- [Folclor Nómada](/playlists/pretty/37i9dQZF1DX2XI8j0WLbht.md)
- [Folk & Friends](/playlists/pretty/37i9dQZF1DWWv6MSZULLBi.md)
- [Folk & Rock 200 favoriter](/playlists/pretty/3cC0Hnr7idCemR4JxOh2lI.md)
- [Folk Alliance 2022](/playlists/pretty/37i9dQZF1DX9x9vqRxMigR.md)
- [Folk Arc](/playlists/pretty/37i9dQZF1DWT9XEOPDgFX3.md)
- [Folk Favourites](/playlists/pretty/37i9dQZF1DX2PfO7FL9zWG.md)
- [Folk Feast](/playlists/pretty/37i9dQZF1DXdaMkR2m2cl5.md)
- [Folk Pop](/playlists/pretty/37i9dQZF1DWXJyjYpHunCf.md)
- [Folk Punjabi](/playlists/pretty/37i9dQZF1DX5lHBoCtADgQ.md)
- [Folk Rock Favorites](/playlists/pretty/37i9dQZF1DXat5j4Lk8UEj.md)
- [Folklore Romántico](/playlists/pretty/37i9dQZF1DWSRhcVioua5c.md)
- [Folklore de Siempre](/playlists/pretty/37i9dQZF1DX6o2KmaQFzHW.md)
- [Folksy Christmas](/playlists/pretty/37i9dQZF1DX8c93KtGDPub.md)
- [Folksy Covers](/playlists/pretty/37i9dQZF1DXcDxnC0UqHJa.md)
- [Follow Your Bliss](/playlists/pretty/2wqwH7uKckoLe7UVTx1RfO.md)
- [Footwork/Juke](/playlists/pretty/37i9dQZF1DX3nNRJvSufrk.md)
- [For Black Love, Living and Joy](/playlists/pretty/37i9dQZF1DWTWY70wFE0Rv.md)
- [Forecasting Love and Weather \(기상청 사람들\)](/playlists/pretty/37i9dQZF1DX4dJwhR3LtVd.md)
- [Forever Country](/playlists/pretty/37i9dQZF1DX9hWdQ46pHPo.md)
- [Found Them First](/playlists/pretty/3sJ6SlgRo56Oa7YhHcLK5l.md)
- [Foxall's track IDs](/playlists/pretty/37i9dQZF1DX2Jggz04vUOo.md)
- [Francos de Montréal 2022](/playlists/pretty/37i9dQZF1DWSuqJGcMjUOz.md)
- [Free & Easy](/playlists/pretty/37i9dQZF1DX6fhMYWIyuww.md)
- [Free Form](/playlists/pretty/37i9dQZF1DX6mMeq1VVekF.md)
- [French Jazz Café](/playlists/pretty/37i9dQZF1DXbehaqJzJXqw.md)
- [French Literature](/playlists/pretty/37i9dQZF1DWWhtNzColB0d.md)
- [French Noise](/playlists/pretty/37i9dQZF1DXcUF9GRO45to.md)
- [French Touch](/playlists/pretty/37i9dQZF1DX9cbNxuNYT3d.md)
- [Frequency UK & Ireland](/playlists/pretty/37i9dQZF1DWVHb9m5BD6ty.md)
- [Fresh & Chill](/playlists/pretty/37i9dQZF1DX5CdVP4rz81C.md)
- [Fresh Country](/playlists/pretty/37i9dQZF1DWXepGEFFmQXJ.md)
- [Fresh Dance Pop](/playlists/pretty/37i9dQZF1DWWOGXILUAh53.md)
- [Fresh Finds](/playlists/pretty/37i9dQZF1DWWjGdmeTyeJ6.md)
- [Fresh Finds AU & NZ](/playlists/pretty/37i9dQZF1DX8pdK1PVpBQz.md)
- [Fresh Finds Brasil](/playlists/pretty/37i9dQZF1DX5R53BjnKBjk.md)
- [Fresh Finds Country](/playlists/pretty/37i9dQZF1DWYUfsq4hxHWP.md)
- [Fresh Finds Dance](/playlists/pretty/37i9dQZF1DX6bBjHfdRnza.md)
- [Fresh Finds España](/playlists/pretty/37i9dQZF1DWVhn3qoy98w6.md)
- [Fresh Finds Experimental](/playlists/pretty/37i9dQZF1DX8C585qnMYHP.md)
- [Fresh Finds Folk](/playlists/pretty/37i9dQZF1DXdS3lvGe1GrT.md)
- [Fresh Finds GSA](/playlists/pretty/37i9dQZF1DX2ddCYH6QIK5.md)
- [Fresh Finds Hip\-Hop](/playlists/pretty/37i9dQZF1DWW4igXXl2Qkp.md)
- [Fresh Finds India](/playlists/pretty/37i9dQZF1DXaRf94BiB7fV.md)
- [Fresh Finds Indie](/playlists/pretty/37i9dQZF1DWT0upuUFtT7o.md)
- [Fresh Finds Indonesia](/playlists/pretty/37i9dQZF1DWSGWRWu30rg7.md)
- [Fresh Finds Italia](/playlists/pretty/37i9dQZF1DX0KBgD4Jf5tY.md)
- [Fresh Finds Jazz](/playlists/pretty/37i9dQZF1DXcWL5K0oNHcG.md)
- [Fresh Finds Korea](/playlists/pretty/37i9dQZF1DX7vZYLzFGQXc.md)
- [Fresh Finds Latin](/playlists/pretty/37i9dQZF1DXagUeYbNSnOA.md)
- [Fresh Finds Philippines](/playlists/pretty/37i9dQZF1DXd41OiKoLJY1.md)
- [Fresh Finds Polska](/playlists/pretty/37i9dQZF1DWTI0B69TStH2.md)
- [Fresh Finds Pop](/playlists/pretty/37i9dQZF1DX3u9TSHqpdJC.md)
- [Fresh Finds Presents..\. Class of 2019](/playlists/pretty/37i9dQZF1DXbDSHGzTpRHX.md)
- [Fresh Finds Presents..\. Fresh Finds Class of 2020](/playlists/pretty/37i9dQZF1DX7AIfEOAvuXp.md)
- [Fresh Finds R&B](/playlists/pretty/37i9dQZF1DWUFAJPVM3HTX.md)
- [Fresh Finds Rock](/playlists/pretty/37i9dQZF1DX78toxP7mOaJ.md)
- [Fresh Finds SG & MY](/playlists/pretty/37i9dQZF1DWWvrRGuT6dlZ.md)
- [Fresh Finds Türkiye](/playlists/pretty/37i9dQZF1DX1RLKir9EDRO.md)
- [Fresh Finds UK & IE](/playlists/pretty/37i9dQZF1DX7AqyNZFu97s.md)
- [Fresh Finds Vietnam](/playlists/pretty/37i9dQZF1DX34s4fg4Zx3Z.md)
- [Fresh Folk](/playlists/pretty/37i9dQZF1DXaUDcU6KDCj4.md)
- [Fresh Gospel](/playlists/pretty/37i9dQZF1DWUMIjnZuaulx.md)
- [Fresh Jazz \| The New Vanguard](/playlists/pretty/1Htq6RhM8B9MgMXdwqgPxW.md)
- [Fresh Morning](/playlists/pretty/37i9dQZF1DXau0XrWZpT93.md)
- [FriendsGiving](/playlists/pretty/7a80QjnKAMnZu5Lx50INeh.md)
- [Fright Fest](/playlists/pretty/37i9dQZF1DX6dCTsdzLHOw.md)
- [Friozinho](/playlists/pretty/37i9dQZF1DX6e81LupkkgG.md)
- [From the Delta to Chicago](/playlists/pretty/37i9dQZF1DXdkAbM8agIbA.md)
- [Front Left](/playlists/pretty/37i9dQZF1DX5WTH49Vcnqp.md)
- [Front Porch](/playlists/pretty/37i9dQZF1DXa2PsvJSPnPf.md)
- [Fuck Valentine!](/playlists/pretty/5Dn14a8hNIhT3NLLjUUBGL.md)
- [Fuego](/playlists/pretty/37i9dQZF1DX8sljIJzI0oo.md)
- [Full Volume](/playlists/pretty/37i9dQZF1DWUv0cTKdT8jJ.md)
- [Fun Run](/playlists/pretty/37i9dQZF1DXadOVCgGhS7j.md)
- [Funk & Disco Zamaan](/playlists/pretty/37i9dQZF1DX8SE5tIsUWTD.md)
- [Funk & Soul Classics](/playlists/pretty/37i9dQZF1DWWvhKV4FBciw.md)
- [Funk Hits](/playlists/pretty/37i9dQZF1DWTkIwO2HDifB.md)
- [Funk Live & Loud](/playlists/pretty/37i9dQZF1DX1tZzam7CfKP.md)
- [Funk Outta Here](/playlists/pretty/37i9dQZF1DX70TzPK5buVf.md)
- [Funk Rock](/playlists/pretty/37i9dQZF1DX23YPJntYMnh.md)
- [Funky Blues](/playlists/pretty/37i9dQZF1DWSTsQCBPjpyc.md)
- [Funky Heavy Bluesy](/playlists/pretty/37i9dQZF1DX9stbPFTxeaB.md)
- [Funky Jams](/playlists/pretty/37i9dQZF1DX6drTZKzZwSo.md)
- [Fusion Fest](/playlists/pretty/37i9dQZF1DX0aSJooo0zWR.md)
- [Future Funk](/playlists/pretty/37i9dQZF1DXbjGYBfEmjR5.md)
- [G.O.O.D\. Music](/playlists/pretty/37i9dQZF1DX83ZswDLVXae.md)
- [GHOST IN THE SHELL Series \-攻殻機動隊シリーズ\-](/playlists/pretty/37i9dQZF1DX9v9O7wB8rQi.md)
- [GO\-GO](/playlists/pretty/37i9dQZF1DXcLNIxmtGu8N.md)
- [GOOD GAME](/playlists/pretty/37i9dQZF1DWTKktnMCmHx1.md)
- [GUNDAM SERIES \-ガンダムシリーズ\-](/playlists/pretty/37i9dQZF1DX6aZ9vrXqd1U.md)
- [Gabry Ponte's DJ Mix](/playlists/pretty/37i9dQZF1DXcpzpfnVhpIz.md)
- [Gainsville Stockholm 2012](/playlists/pretty/6ClBNzH2PMh2jvkEuSFBFJ.md)
- [Gamble & Huff](/playlists/pretty/37i9dQZF1DWXutrsZUdv7b.md)
- [Game of Thrones: The Official Soundtrack](/playlists/pretty/37i9dQZF1DXdnZT5DhATDx.md)
- [Gameday](/playlists/pretty/37i9dQZF1DXdxTsNp0Bzwq.md)
- [Gamer Fuel: Level Up](/playlists/pretty/6LUikHsZgw4VLRsYg49YU0.md)
- [Gamer Gang](/playlists/pretty/37i9dQZF1DX7GWlXStIq5M.md)
- [Gaming Beats](/playlists/pretty/37i9dQZF1DWTpLDJazDBum.md)
- [Gaming Lounge](/playlists/pretty/37i9dQZF1DX9QWEVCu9UDA.md)
- [Gaming Music 2022](/playlists/pretty/2BvXXHZ3Hx4pS5OacZMVKc.md)
- [Ganda Cena](/playlists/pretty/37i9dQZF1DX59I2hjkhLtN.md)
- [Garage Rock Revival](/playlists/pretty/37i9dQZF1DXbMYUPb05hjJ.md)
- [Garden Indie](/playlists/pretty/37i9dQZF1DWVOwpsn6QxFY.md)
- [Garnachas](/playlists/pretty/37i9dQZF1DX7aH17k60Q9v.md)
- [Garota, o farol tá aceso](/playlists/pretty/37i9dQZF1DWXYjHx7A35pj.md)
- [Generación Verde](/playlists/pretty/37i9dQZF1DXc2p8xjyOmiI.md)
- [Generation Electronica](/playlists/pretty/37i9dQZF1DX1T3AaSrgy9r.md)
- [Gengeton Fire Presents..\. Best Gengetone Songs Of 2021](/playlists/pretty/37i9dQZF1DX3JL4x1IApCd.md)
- [Gengetone Fire](/playlists/pretty/37i9dQZF1DX80fLED6RkGS.md)
- [Genre Glitch](/playlists/pretty/37i9dQZF1DWUraJYejk11q.md)
- [Gentle Classical](/playlists/pretty/37i9dQZF1DX7cBprxbt1Fn.md)
- [Gentle Focus](/playlists/pretty/37i9dQZF1DXabek8EJisVH.md)
- [Gentle Jazz Saxophone](/playlists/pretty/37i9dQZF1DWXBvLQJVrYDy.md)
- [Gentle Lapping Waves](/playlists/pretty/37i9dQZF1DX3f9U3gq0DBT.md)
- [Gentle Rains](/playlists/pretty/37i9dQZF1DX2mFmJUZg4Mp.md)
- [Get Chores Done](/playlists/pretty/37i9dQZF1DXdVbxH0H5oTi.md)
- [Get Happy!](/playlists/pretty/4Buj61XKuhfVLsW8rPX8YQ.md)
- [Get Lifted](/playlists/pretty/6jbGdICAmvGjlURC1gcgRe.md)
- [Get Turnt](/playlists/pretty/37i9dQZF1DWY4xHQp97fN6.md)
- [Getaway Rock 2012](/playlists/pretty/4mM7tVGeVv4dOFPTlftofk.md)
- [Getaway Rock 2013](/playlists/pretty/4ftQXs8PU4QMqPLMaJG7QT.md)
- [Getting Around](/playlists/pretty/37i9dQZF1DWWJsezdoqh4Q.md)
- [Gigantes do Rap Nacional](/playlists/pretty/37i9dQZF1DXaljDe6fISR1.md)
- [Ginger Me](/playlists/pretty/37i9dQZF1DX0SlHbqMm3vJ.md)
- [Girl Krush](/playlists/pretty/37i9dQZF1DXbSWYCNwaARB.md)
- [Girl Power](/playlists/pretty/37i9dQZF1DX3jMMNK4VZkK.md)
- [Girls Night Out](/playlists/pretty/1Bxi8UJlVM7tLYDMOqsYYF.md)
- [Girls' Night](/playlists/pretty/37i9dQZF1DX0Uv9tZ47pWo.md)
- [Give Thanks](/playlists/pretty/37i9dQZF1DX6afkUGYYDyK.md)
- [Global Club Music](/playlists/pretty/37i9dQZF1DWVXBHEDDpqLs.md)
- [Global Dance Crossover](/playlists/pretty/37i9dQZF1DWSzHEab3T1o1.md)
- [Global Groove](/playlists/pretty/37i9dQZF1DWUS3jbm4YExP.md)
- [Global Music Day](/playlists/pretty/2EsohEQHsGn1LWNgOxnuoI.md)
- [Global X](/playlists/pretty/37i9dQZF1DWUxHPh2rEiHr.md)
- [Gnawa Music](/playlists/pretty/37i9dQZF1DWYCFWZy4Gz9M.md)
- [Goals](/playlists/pretty/37i9dQZF1DX4Xfg8JLDVt8.md)
- [Going Together](/playlists/pretty/37i9dQZF1DWYhr4P5Boce5.md)
- [Gold Beats](/playlists/pretty/37i9dQZF1DXcPGEMJEYxNg.md)
- [Gold Edition](/playlists/pretty/37i9dQZF1DWXnexX7CktaI.md)
- [Gold Instrumental Beats](/playlists/pretty/37i9dQZF1DX0dU0Z2LOkZN.md)
- [Gold School](/playlists/pretty/37i9dQZF1DWVA1Gq4XHa6U.md)
- [Gold Skool K\-Hip Hop](/playlists/pretty/37i9dQZF1DX17faKmFJMpl.md)
- [Gold Spot](/playlists/pretty/37i9dQZF1DXdcRZAcc2QFU.md)
- [Golden Era Focus](/playlists/pretty/37i9dQZF1DX45qfzFXwcta.md)
- [Golden Ghazals](/playlists/pretty/37i9dQZF1DXdsiL9gD4vAA.md)
- [Golden Instrumentals](/playlists/pretty/37i9dQZF1DXdlhitnpe6FT.md)
- [Gone Abroad](/playlists/pretty/37i9dQZF1DXcd9T7p9UGiW.md)
- [Good Father](/playlists/pretty/37i9dQZF1DX3RkXiUJ5aMs.md)
- [Good Feeling 00s](/playlists/pretty/37i9dQZF1DX21sNa02ZMU9.md)
- [Good Feeling 10s](/playlists/pretty/37i9dQZF1DX5wgkIjaIMie.md)
- [Good Feeling 70s](/playlists/pretty/37i9dQZF1DWWg3YRMu4AEF.md)
- [Good Feeling 80s](/playlists/pretty/37i9dQZF1DXbdTzLVot2nl.md)
- [Good Feeling 90s](/playlists/pretty/37i9dQZF1DX64nnRPoKA6J.md)
- [Good Morning Jazz](/playlists/pretty/37i9dQZF1DX71VcjjnyaBQ.md)
- [Good People Good Music](/playlists/pretty/37i9dQZF1DWZy0j22jjWNA.md)
- [Good Times, Great Oldies](/playlists/pretty/37i9dQZF1DXa19sXUAHiO1.md)
- [Good Vibes](/playlists/pretty/37i9dQZF1DWYBO1MoTDhZI.md)
- [Gospel Christmas](/playlists/pretty/37i9dQZF1DWSnpLW9iux5M.md)
- [Gospel Flow](/playlists/pretty/37i9dQZF1DXc6PRIxq2w5v.md)
- [Gospel Live](/playlists/pretty/37i9dQZF1DXbT5gAyEVKuo.md)
- [Got Blues](/playlists/pretty/37i9dQZF1DX0QNpebF7rcL.md)
- [Got Djent?](/playlists/pretty/37i9dQZF1DX6GRSnGELn7L.md)
- [Grade A](/playlists/pretty/37i9dQZF1DWT59aKliWtId.md)
- [Graduation](/playlists/pretty/5pxi1UkDk0BbUPDTPjmi4v.md)
- [Graduation Songs](/playlists/pretty/37i9dQZF1DXdfjr8o5AMIT.md)
- [Grand Hustle Gang Spotify Picks](/playlists/pretty/4C0S1zvtcMtk2notLxCL1J.md)
- [Grand Theft Auto](/playlists/pretty/37i9dQZF1DX6RSJAsEDz7H.md)
- [Grandes Unplugged](/playlists/pretty/37i9dQZF1DWWFNSpryCCH5.md)
- [Grandma's Home](/playlists/pretty/37i9dQZF1DXc2jw7z4RD7k.md)
- [Grass Roots](/playlists/pretty/37i9dQZF1DXa2HpTqP3clz.md)
- [Grazia Daily: Summer 2013](/playlists/pretty/2UwTnYkh7zZjMY6NEQdP95.md)
- [Grazia Daily: The Best of Primavera](/playlists/pretty/2ns4wV7T6X3vlCnzxYwagu.md)
- [Great Female Voices](/playlists/pretty/37i9dQZF1DX9loJQLuEvap.md)
- [Great Love Ballads](/playlists/pretty/1YGlW3ovCv9Vek4CPnV0mZ.md)
- [Greek Taverna](/playlists/pretty/37i9dQZF1DX3CjvCIWRfv0.md)
- [Green Day: The Early Years](/playlists/pretty/37i9dQZF1DX7iAOkSHdhFI.md)
- [Greener Pastures](/playlists/pretty/37i9dQZF1DXdDIhtzn7T2e.md)
- [Grime Shutdown](/playlists/pretty/37i9dQZF1DWSOkubnsDCSS.md)
- [Grimes Radio](/playlists/pretty/37i9dQZF1E4vLyj0srrBvo.md)
- [Groove Theory](/playlists/pretty/37i9dQZF1DX1tW4VlEfDSS.md)
- [Grrrls To The Front](/playlists/pretty/37i9dQZF1DXbKBGX7pVGFC.md)
- [Grunge Forever](/playlists/pretty/37i9dQZF1DX11ghcIxjcjE.md)
- [Guest List: Fito Paez](/playlists/pretty/37i9dQZF1DXap0h4PBqZpr.md)
- [Guest List: Orb](/playlists/pretty/2O0Nf9Mi5tM17PM7Ns6Fgu.md)
- [Guilty Pleasures](/playlists/pretty/37i9dQZF1DX4pUKG1kS0Ac.md)
- [Guitar Lullabies](/playlists/pretty/37i9dQZF1DX2UkbeRPWQqZ.md)
- [Guitar for Sleep](/playlists/pretty/37i9dQZF1DWTRnup1IgL4a.md)
- [Guitarra Mexicana](/playlists/pretty/37i9dQZF1DXeanowPcWEJB.md)
- [Guitarra Tranquila](/playlists/pretty/37i9dQZF1DX5dbJWdvTvOk.md)
- [Gulf & Western](/playlists/pretty/37i9dQZF1DWUPRADzDnbMq.md)
- [Gym Motivation](/playlists/pretty/37i9dQZF1DWVzL4bYZBn6V.md)
- [HAIM](/playlists/pretty/5hINCaYWvVwzzLmhh4y11x.md)
- [HATSUNE MIKU/ 初音ミク Project DIVA series](/playlists/pretty/37i9dQZF1DXd8cPo2t5Hqf.md)
- [HEADPHONES](/playlists/pretty/6ZWbm0tcNxeVmHdssy03yN.md)
- [HOT NOW: Nicki Nicole \- Nobody Like Yo](/playlists/pretty/37i9dQZF1DXc9orRugI29r.md)
- [Haitian Heat](/playlists/pretty/37i9dQZF1DX3XjJqhm9fqD.md)
- [Halftime Hits](/playlists/pretty/37i9dQZF1DWWNQEmXRHxVe.md)
- [Halftime Official Playlist](/playlists/pretty/37i9dQZF1DWTHhW4hDVUUi.md)
- [Halloween Monster Jams](/playlists/pretty/37i9dQZF1DX6SpcerLn1dx.md)
- [Halloween Party](/playlists/pretty/37i9dQZF1DX8S9gwdi7dev.md)
- [Hallyu Boy Bands](/playlists/pretty/37i9dQZF1DX1gjl24GAQC0.md)
- [Halo](/playlists/pretty/37i9dQZF1DX5YyEO1dtgbR.md)
- [Hanging Out & Relaxing](/playlists/pretty/37i9dQZF1DXci7j0DJQgGp.md)
- [Hank \- Gutsy](/playlists/pretty/2nRUp0P50ClCxPibGSfFcL.md)
- [Happy 80s](/playlists/pretty/37i9dQZF1DWYAcBZSAVhlf.md)
- [Happy Beats](/playlists/pretty/37i9dQZF1DWSf2RDTDayIx.md)
- [Happy Birthday](/playlists/pretty/37i9dQZF1DWYtQSOiZF6hj.md)
- [Happy Birthday Cheryl!](/playlists/pretty/7qLIVhpCFAiX1Teqf3L6Y4.md)
- [Happy Birthday George!](/playlists/pretty/2G5Wlqt6clkHH2KFK2LS5Q.md)
- [Happy Birthday Joe Cocker](/playlists/pretty/66uSq0mmMKat8vPRxsbmhp.md)
- [Happy Birthday Kanye!](/playlists/pretty/45Cyxm3R3Gpn2upYrjcPbc.md)
- [Happy Birthday Mollie!](/playlists/pretty/4njfFyb4EgzewhH9kTQuwN.md)
- [Happy Birthday Nicole!](/playlists/pretty/1dB0DjEsx9Gy0VG7Hmyc7Q.md)
- [Happy Birthday Prince!](/playlists/pretty/44uPoVqT6tOn5AphWVnSvu.md)
- [Happy Birthday Sir Paul!](/playlists/pretty/3npIV1kNBTG2NHwBfv4t5H.md)
- [Happy Birthday Sir Tom!](/playlists/pretty/5Ir6gs0eXKyPj3Qin8uEun.md)
- [Happy Birthday, Lionel](/playlists/pretty/13WGZTkVyBhWCD2z7wSwe7.md)
- [Happy Days](/playlists/pretty/37i9dQZF1DX84kJlLdo9vT.md)
- [Happy Drive](/playlists/pretty/37i9dQZF1DX1WSnLRtI26o.md)
- [Happy Favorites](/playlists/pretty/37i9dQZF1DWZKuerrwoAGz.md)
- [Happy Folk](/playlists/pretty/37i9dQZF1DWSkMjlBZAZ07.md)
- [Happy Hits!](/playlists/pretty/37i9dQZF1DXdPec7aLTmlC.md)
- [Happy Holidays](/playlists/pretty/37i9dQZF1DX0HWhBzpBj05.md)
- [Happy Jazz!](/playlists/pretty/37i9dQZF1DX5YTAi6JhwZm.md)
- [Happy Pop](/playlists/pretty/37i9dQZF1DX1H4LbvY4OJi.md)
- [Happy Songs](/playlists/pretty/1h90L3LP8kAJ7KGjCV2Xfd.md)
- [Happy Vibes](/playlists/pretty/37i9dQZF1DWTwbZHrJRIgD.md)
- [Hard Bop Classics](/playlists/pretty/37i9dQZF1DWZZfLKhEkflI.md)
- [Hard Rock](/playlists/pretty/37i9dQZF1DX1X7WV84927n.md)
- [Hard Rock Workout](/playlists/pretty/6kXNv8J3HCYztxjOIUzApv.md)
- [Hardly Strictly Bluegrass](/playlists/pretty/37i9dQZF1DWW3PJidfC26k.md)
- [Hardstyle Bangers](/playlists/pretty/37i9dQZF1DX0pH2SQMRXnC.md)
- [Hardwell DJ Mix: Rebels Never Die](/playlists/pretty/37i9dQZF1DX2lrAgcmlOuE.md)
- [Harp Lullabies](/playlists/pretty/37i9dQZF1DX2y5WZJJL4SF.md)
- [Hatha Yoga](/playlists/pretty/37i9dQZF1DWZvpVE2NxPV2.md)
- [Hats The Way I Like It: Ascot 2013](/playlists/pretty/2hirOuzhv3EK3AgEV2nKZn.md)
- [Haunting Vocals](/playlists/pretty/37i9dQZF1DX6QDedCAYqRI.md)
- [Hauntology](/playlists/pretty/37i9dQZF1DX9TOdl0GpvQm.md)
- [Have a Great Day!](/playlists/pretty/37i9dQZF1DX7KNKjOK0o75.md)
- [Hawaiian Dreams](/playlists/pretty/37i9dQZF1DX5FuBDzVtEFX.md)
- [Headliners](/playlists/pretty/37i9dQZF1DX8D2YR1GbW3K.md)
- [Headphones on, World Off](/playlists/pretty/37i9dQZF1DWU05aHRDUDnL.md)
- [Healin' Blues](/playlists/pretty/37i9dQZF1DX1STMhgdmNBY.md)
- [Healing Harps](/playlists/pretty/37i9dQZF1DX6dZ7oW0l88P.md)
- [Healing Rhythms](/playlists/pretty/37i9dQZF1DX3SEFZskKvKB.md)
- [Heard You](/playlists/pretty/37i9dQZF1DWVu3lAQuOIjU.md)
- [Heart Beats](/playlists/pretty/37i9dQZF1DWSRc3WJklgBs.md)
- [Heart Of Texas](/playlists/pretty/37i9dQZF1DX05oRSrPGj3d.md)
- [Heartache](/playlists/pretty/37i9dQZF1DX46zHlTTyolY.md)
- [Heartbreak Hotel](/playlists/pretty/37i9dQZF1DX5JHtri4qWRK.md)
- [Heartbreak Jazz](/playlists/pretty/37i9dQZF1DX70dqoLSWJrU.md)
- [Heartbreaker](/playlists/pretty/37i9dQZF1DWXxauMBOQPxX.md)
- [Heartland Country](/playlists/pretty/37i9dQZF1DX5iKSDtVcf7Q.md)
- [Heartstopper: Elle and Tao](/playlists/pretty/37i9dQZF1DWWKWmC5fAz6a.md)
- [Heartstopper: Nick and Charlie](/playlists/pretty/37i9dQZF1DXe7IKgrJ3ej1.md)
- [Heartstopper: Official Mixtape](/playlists/pretty/37i9dQZF1DX5KARSfd7WcM.md)
- [Heartstopper: Tara and Darcy](/playlists/pretty/37i9dQZF1DX2Ntl47Kk60U.md)
- [Heavy Dub](/playlists/pretty/37i9dQZF1DX9udeSemCofA.md)
- [Heavy Gamers](/playlists/pretty/37i9dQZF1DXcOYQJYGaYjk.md)
- [Heavy Metal](/playlists/pretty/37i9dQZF1DX9qNs32fujYe.md)
- [Heavy Queens](/playlists/pretty/37i9dQZF1DWXDJDWnzE39E.md)
- [Here Comes The Sun](/playlists/pretty/37i9dQZF1DXdwF9DytRe8w.md)
- [Highway to Yell](/playlists/pretty/37i9dQZF1DXdF699XuZIvg.md)
- [Hill Country Blues](/playlists/pretty/37i9dQZF1DX5e4G40ZHZd6.md)
- [Himnos de Estadio](/playlists/pretty/37i9dQZF1DX4oL1xd4OWmV.md)
- [Himnos de Resistencia Latinoamericana](/playlists/pretty/37i9dQZF1DX2u4EHuQcBWu.md)
- [Hindustani Classical](/playlists/pretty/37i9dQZF1DX6EUcyVKIE73.md)
- [Hindustani Instrumental](/playlists/pretty/37i9dQZF1DX6QsiGlwQqfw.md)
- [Hinos Pop](/playlists/pretty/37i9dQZF1DX9VAqVAZ6EMr.md)
- [Hip Hop Argento](/playlists/pretty/37i9dQZF1DX2v4h8QERQPb.md)
- [Hip Hop Christmas](/playlists/pretty/37i9dQZF1DX1qPYE0fcNDF.md)
- [Hip Hop Controller](/playlists/pretty/37i9dQZF1DWT5MrZnPU1zD.md)
- [Hip\-Hop Central](/playlists/pretty/37i9dQZF1DWY6tYEFs22tT.md)
- [Hip\-Hop Drive](/playlists/pretty/37i9dQZF1DWUFmyho2wkQU.md)
- [Hip\-Hop Favourites](/playlists/pretty/37i9dQZF1DX48TTZL62Yht.md)
- [Hip\-Hop MX 24k](/playlists/pretty/37i9dQZF1DWTe5ECpTKzMo.md)
- [Hip\-Hop Yoga](/playlists/pretty/37i9dQZF1DX4FJyIpen2Yf.md)
- [Hip\-Hopscotch & Reggae Recess](/playlists/pretty/37i9dQZF1DWX16Q183eyvd.md)
- [Hip\-Life Hits](/playlists/pretty/37i9dQZF1DX9Y4P09E4dNP.md)
- [Hipster K' Pack](/playlists/pretty/37i9dQZF1DWXfgmQDgebb6.md)
- [Historic Venue: Ryman Auditorium](/playlists/pretty/2lOMjzyPMlcIvcaWlaF6MB.md)
- [History of Country Music](/playlists/pretty/37i9dQZF1DXcYKwAtV4NDh.md)
- [Hit Rap Italiane](/playlists/pretty/37i9dQZF1DWSxF6XNtQ9Rg.md)
- [Hit Rewind](/playlists/pretty/37i9dQZF1DX0s5kDXi1oC5.md)
- [Hits Are Universal](/playlists/pretty/0RBvdfnbMgXjWu7ywqURZc.md)
- [Hits Mein Twist](/playlists/pretty/37i9dQZF1DWX7nMmBhSzhN.md)
- [Hits Románticos](/playlists/pretty/37i9dQZF1DX7Qo2zphj7u3.md)
- [Hits UP](/playlists/pretty/37i9dQZF1DX0gF89fU9TTk.md)
- [Hits Urbanos](/playlists/pretty/37i9dQZF1DWVskFRGurTfg.md)
- [Hits da Internet](/playlists/pretty/37i9dQZF1DXd2wJvXxyJb8.md)
- [Hits de Internet](/playlists/pretty/37i9dQZF1DX4KeocBrdbJg.md)
- [Hold Hope](/playlists/pretty/37i9dQZF1DWUSDYg6JTKFA.md)
- [Hollywood's Big Night](/playlists/pretty/37i9dQZF1DX2cW2nLJVrZg.md)
- [Homage](/playlists/pretty/37i9dQZF1DX6iFz8juuQdH.md)
- [Home Office](/playlists/pretty/37i9dQZF1DXatxKKvXOpbl.md)
- [Home Sweet Home](/playlists/pretty/37i9dQZF1DX3P56PKzFc9f.md)
- [Home at Last](/playlists/pretty/37i9dQZF1DX4BUmGJw1rT1.md)
- [Home for Christmas with Phil Wickham](/playlists/pretty/37i9dQZF1DX6vY2LqhGLU1.md)
- [Homework Beats](/playlists/pretty/37i9dQZF1DWXHS0n2OcMjx.md)
- [Honey Dijon's track IDs](/playlists/pretty/37i9dQZF1DWTYPRTIhI2jZ.md)
- [Honeysuckle Lazy](/playlists/pretty/6tLfPD2P9syvBV8rgO2Yq1.md)
- [Hora da Resenha](/playlists/pretty/37i9dQZF1DX5sOH3YgmxsX.md)
- [Hora de la Comida](/playlists/pretty/37i9dQZF1DXa0xldXwsLda.md)
- [Hora de la Lloración](/playlists/pretty/37i9dQZF1DX9235ICuUcIM.md)
- [Hot Acoustics](/playlists/pretty/37i9dQZF1DWY8U6Zq7nvbE.md)
- [Hot Arabic Hits \- Yalla يلا](/playlists/pretty/37i9dQZF1DX5cO1uP1XC1g.md)
- [Hot Club Swing](/playlists/pretty/37i9dQZF1DXdDe8IDhRIo5.md)
- [Hot Country](/playlists/pretty/37i9dQZF1DX1lVhptIYRda.md)
- [Hot Country Presents..\. Best Country Songs of 2021](/playlists/pretty/37i9dQZF1DWXuiFJj5T7Ii.md)
- [Hot Country Presents:  Best Country Songs of 2020](/playlists/pretty/37i9dQZF1DWYvU2z6HruAo.md)
- [Hot Hits Brasil](/playlists/pretty/37i9dQZF1DX03VbhoH7arm.md)
- [Hot Hits Canada](/playlists/pretty/37i9dQZF1DWXT8uSSn6PRy.md)
- [Hot Hits Hindi](/playlists/pretty/37i9dQZF1DX0XUfTFmNBRM.md)
- [Hot Hits Maghreb](/playlists/pretty/37i9dQZF1DWYHO8PTSQ9fM.md)
- [Hot Hits Pakistan](/playlists/pretty/37i9dQZF1DX8BmpQ9HroVZ.md)
- [Hot Hits Tamil](/playlists/pretty/37i9dQZF1DX1i3hvzHpcQV.md)
- [Hot Hits USA](/playlists/pretty/37i9dQZF1DX0kbJZpiYdZl.md)
- [Hot Rhythmic](/playlists/pretty/37i9dQZF1DWYs83FtTMQFw.md)
- [Hot Rods & Horror Shows](/playlists/pretty/37i9dQZF1DXb2cYklA89lm.md)
- [Hot\-Jazz Classics](/playlists/pretty/37i9dQZF1DWVfUtaeUAwqa.md)
- [Hours of Ours](/playlists/pretty/54LbSpjd64NjKPUyYAGkNU.md)
- [House Focus](/playlists/pretty/37i9dQZF1DX8wtrGDH81Oa.md)
- [House Origins](/playlists/pretty/37i9dQZF1DWWeWDl2F7vbH.md)
- [House Party](/playlists/pretty/37i9dQZF1DXaaLM83puGG5.md)
- [House Shift](/playlists/pretty/2vpAyuy9HOTPjygPl63QuH.md)
- [House Supreme](/playlists/pretty/37i9dQZF1DXacX3REVaOqV.md)
- [House of the Dragon: Official Playlist](/playlists/pretty/37i9dQZF1DXcP2rXJJ61py.md)
- [Housewerk](/playlists/pretty/37i9dQZF1DXa8NOEUWPn9W.md)
- [How to Write...](/playlists/pretty/37i9dQZF1DX0IquWoRS2Rk.md)
- [Huaynos Clásicos](/playlists/pretty/37i9dQZF1DX0dskKWpx62P.md)
- [Hultsfred 2012](/playlists/pretty/26yS4HN010lrCBBlCbjF2b.md)
- [Hultsfred 2013](/playlists/pretty/0pTJgTL7GIhxto5z35Rfwu.md)
- [Hustle Official Playlist](/playlists/pretty/37i9dQZF1DXbumjq5gXqxO.md)
- [Hype](/playlists/pretty/37i9dQZF1DX4eRPd9frC1m.md)
- [Hype List](/playlists/pretty/37i9dQZF1DXe74lXHc7E5A.md)
- [Hyperpop Classics](/playlists/pretty/37i9dQZF1DXakZCf7SV1CS.md)
- [Håkan Hellström](/playlists/pretty/2CTBt2glXb1wEzUa6wCbWU.md)
- [I Hate My Job.](/playlists/pretty/6cdV0hVW2suJaMOxzwE46S.md)
- [I Love My '00s R&B](/playlists/pretty/37i9dQZF1DWYmmr74INQlb.md)
- [I Love My '10s Funk](/playlists/pretty/37i9dQZF1DX2zVOKolQSzi.md)
- [I Love My '10s R&B](/playlists/pretty/37i9dQZF1DWXbttAJcbphz.md)
- [I Love My '60s Funk](/playlists/pretty/37i9dQZF1DX6vmXrF8Shld.md)
- [I Love My '70s Funk](/playlists/pretty/37i9dQZF1DWYOqWoDP009i.md)
- [I Love My '80s Funk](/playlists/pretty/37i9dQZF1DWVJ0TKGKfzgP.md)
- [I Love My '80s Hip\-Hop](/playlists/pretty/37i9dQZF1DX2XmsXL2WBQd.md)
- [I Love My '90s Hip\-Hop](/playlists/pretty/37i9dQZF1DX186v583rmzp.md)
- [I Love My '90s R&B](/playlists/pretty/37i9dQZF1DX6VDO8a6cQME.md)
- [I Love My 2000s Hip\-Hop](/playlists/pretty/37i9dQZF1DX1lHW2vbQwNN.md)
- [I Love My 2010s Hip\-Hop](/playlists/pretty/37i9dQZF1DX97h7ftpNSYT.md)
- [I Love My Down South Classics](/playlists/pretty/37i9dQZF1DWYok9l1JL7GM.md)
- [I Love My East Coast Classics](/playlists/pretty/37i9dQZF1DWYGxBNe4qojI.md)
- [I Love My HBCU](/playlists/pretty/37i9dQZF1DX7DCJxqVk5NA.md)
- [I Love My Midwest Classics](/playlists/pretty/37i9dQZF1DWTJzNR1J5ygQ.md)
- [I Love My Neo\-Soul](/playlists/pretty/37i9dQZF1DX8MbMfAHb8U0.md)
- [I Love My New Jack Swing](/playlists/pretty/37i9dQZF1DWU8UMqd36n1X.md)
- [I Love My Underground Classics](/playlists/pretty/37i9dQZF1DXdUAMxTn0rVu.md)
- [I Love My West Coast Classics](/playlists/pretty/37i9dQZF1DX9sQDbOMReFI.md)
- [I Love NYC](/playlists/pretty/37i9dQZF1DWXS0qyx76B7l.md)
- [I Love Rap 'n' Roll](/playlists/pretty/37i9dQZF1DX89XXHpIgTCJ.md)
- [I May Destroy You](/playlists/pretty/37i9dQZF1DWUcT0QzTFbgH.md)
- [I'M FINE, SOLO\. AND U?](/playlists/pretty/37i9dQZF1DXe8cdrgQYJ4n.md)
- [IDM Essentials](/playlists/pretty/37i9dQZF1DXbjZQOVqxNHv.md)
- [IDOL : The Coup](/playlists/pretty/37i9dQZF1DWTm9PQomW7Or.md)
- [INITIAL D \-頭文字D](/playlists/pretty/37i9dQZF1DWU4aFimZ74X3.md)
- [Ibiza Sunset](/playlists/pretty/37i9dQZF1DX9FIMhEujaK6.md)
- [Iconic Arab Women](/playlists/pretty/37i9dQZF1DX2n3M5TFjAxY.md)
- [Iconic Soundtracks](/playlists/pretty/37i9dQZF1DX1tz6EDao8it.md)
- [Iconically Trans](/playlists/pretty/37i9dQZF1DXdWPvraqd9Z2.md)
- [Iconos del Rock Argentino](/playlists/pretty/37i9dQZF1DWZU5DGR2xCSH.md)
- [Iconos del Rock Latinoamericano](/playlists/pretty/37i9dQZF1DWZeuoGxfO4e2.md)
- [Iconos del Rock Mexicano](/playlists/pretty/37i9dQZF1DWYMHB55fgZrY.md)
- [Idris Elba's DJ Mix](/playlists/pretty/37i9dQZF1DWU9MwLOqWTux.md)
- [Impulso Creativo](/playlists/pretty/37i9dQZF1DWWnMZKMl7SWB.md)
- [In English: Replay](/playlists/pretty/37i9dQZF1DX0rrtMTI2Ff5.md)
- [In The K\-Indie](/playlists/pretty/37i9dQZF1DXdTb8AG95jne.md)
- [In the Arms of a Woman](/playlists/pretty/37i9dQZF1DWTtOKhkK5Mem.md)
- [In the Mood for Jazz](/playlists/pretty/37i9dQZF1DX2iVTU1bf67i.md)
- [In the Name of the Blues](/playlists/pretty/37i9dQZF1DXcnkReojaCnV.md)
- [In the Queue](/playlists/pretty/37i9dQZF1DX3UGK5x74bMm.md)
- [Incoming](/playlists/pretty/79sVcfxVNazjyK2iBY9l3q.md)
- [Independent Music Friday](/playlists/pretty/3PF0U9lqNSODHjJq28lmvA.md)
- [IndiEnglish](/playlists/pretty/37i9dQZF1DX6sDj4CL6UK6.md)
- [Indian Chill](/playlists/pretty/37i9dQZF1DX3AQIJcCkXwU.md)
- [Indian Classical](/playlists/pretty/37i9dQZF1DX3LrQBSMX6aK.md)
- [Indian Classical Music For Studying](/playlists/pretty/37i9dQZF1DXbw9rGYPXetO.md)
- [Indica](/playlists/pretty/7cAAwixv4DI4AOR4qluYL3.md)
- [Indie All Stars](/playlists/pretty/37i9dQZF1DX7XNgsy4UFju.md)
- [Indie AlterLatino](/playlists/pretty/37i9dQZF1DX8HSZzYIDgBB.md)
- [Indie Ballads](/playlists/pretty/0aXP5u51kHZiKvxkUPq0IL.md)
- [Indie Bluegrass](/playlists/pretty/37i9dQZF1DX0yL7UvjSKZT.md)
- [Indie Brasil](/playlists/pretty/37i9dQZF1DWZi7MSnECo7D.md)
- [Indie Chile](/playlists/pretty/37i9dQZF1DWVxoleDT3ILq.md)
- [Indie Chill](/playlists/pretty/1jelEUwXFe9YeEjdAR3aC8.md)
- [Indie Chillout](/playlists/pretty/37i9dQZF1DX9B1hu73DioC.md)
- [Indie Christmas](/playlists/pretty/37i9dQZF1DWSt7oHsDTXzj.md)
- [Indie Classical: Composed In 21st Century](/playlists/pretty/37i9dQZF1DXcbK8HZQNxAq.md)
- [Indie Covers](/playlists/pretty/37i9dQZF1DXb67OkZ6150Z.md)
- [Indie Favourites](/playlists/pretty/37i9dQZF1DXcZ6y0ulQ9Gz.md)
- [Indie Folk for Focus](/playlists/pretty/37i9dQZF1DWU6Vfrf87eTG.md)
- [Indie Frequency](/playlists/pretty/37i9dQZF1DXafoakAmk88b.md)
- [Indie Gaming](/playlists/pretty/37i9dQZF1DX4geSlFB9288.md)
- [Indie Hip Hop Tamil](/playlists/pretty/37i9dQZF1DXc6qgnxonYgp.md)
- [Indie India](/playlists/pretty/37i9dQZF1DX5q67ZpWyRrZ.md)
- [Indie One Stop](/playlists/pretty/6OeIIMFsdtsL9VUyL6PDvX.md)
- [Indie Pop](/playlists/pretty/37i9dQZF1DWWEcRhUVtL8n.md)
- [Indie Pop 2010s](/playlists/pretty/37i9dQZF1DXaLaoaQqrfyO.md)
- [Indie Rock Club](/playlists/pretty/37i9dQZF1DX35DWKgAk2B5.md)
- [Indie Rock Road Trip](/playlists/pretty/37i9dQZF1DWUoqEG4WY6ce.md)
- [Indie Shuffle](/playlists/pretty/37i9dQZF1DWVbu3wLXA48X.md)
- [Indie Spirit](/playlists/pretty/37i9dQZF1DX0IXk7nnh7Jx.md)
- [Indie Strings](/playlists/pretty/0sDO43KAaJUWIYassTKWYf.md)
- [Indie Sunshine](/playlists/pretty/37i9dQZF1DWUWC0NIJDJKL.md)
- [Indie x Running](/playlists/pretty/37i9dQZF1DWZq91oLsHZvy.md)
- [Indiespensável](/playlists/pretty/37i9dQZF1DWXx6OpWBkqVv.md)
- [Indigenous](/playlists/pretty/37i9dQZF1DWYrH4yMJbkL8.md)
- [Indigo](/playlists/pretty/37i9dQZF1DWUgBy0IJPlHq.md)
- [Indipop Nostalgia](/playlists/pretty/37i9dQZF1DX0Uo5pVktwNd.md)
- [Industrial Bass](/playlists/pretty/37i9dQZF1DX9ilnsFNjAAc.md)
- [Industrial Metal](/playlists/pretty/37i9dQZF1DX29LQDcJ6Xy7.md)
- [Infinite Acoustic](/playlists/pretty/37i9dQZF1DX6z20IXmBjWI.md)
- [Infinite Indie Folk](/playlists/pretty/37i9dQZF1DX2taNm7KfjOX.md)
- [Inget är större än KÄRLEKEN](/playlists/pretty/2PMlGn5a2jxukdhCYQyQvG.md)
- [Inside Sports Minds with JRE](/playlists/pretty/37i9dQZF1DXa8nzolwWuPH.md)
- [Inspiración Tropical](/playlists/pretty/37i9dQZF1DXbK4SCc53BQf.md)
- [Inspiration for Kids](/playlists/pretty/37i9dQZF1DX0OG4PTOnovS.md)
- [Inspiring Latinas](/playlists/pretty/37i9dQZF1DX5AVYhCeISA6.md)
- [Instrumental Backdrop](/playlists/pretty/37i9dQZF1DWYmSg58uBxin.md)
- [Instrumental Bluegrass](/playlists/pretty/37i9dQZF1DXby9Yl80gEWW.md)
- [Instrumental Blues](/playlists/pretty/37i9dQZF1DXbUXCbzCkRVP.md)
- [Instrumental Christmas Hymns](/playlists/pretty/37i9dQZF1DWViKwLyOBsJF.md)
- [Instrumental Funk](/playlists/pretty/37i9dQZF1DX8f5qTGj8FYl.md)
- [Instrumental Jazz Standards](/playlists/pretty/37i9dQZF1DX5S7hzwhDSyV.md)
- [Instrumental Madness](/playlists/pretty/37i9dQZF1DWUk47CLxI4Uo.md)
- [Instrumental Reading](/playlists/pretty/37i9dQZF1DX7hmlhGsyxU0.md)
- [Instrumental Rock](/playlists/pretty/2uhsnHgI4F2eFyvoMHY0GR.md)
- [Instrumental Study](/playlists/pretty/37i9dQZF1DX9sIqqvKsjG8.md)
- [Instrumental Ukulele Covers](/playlists/pretty/37i9dQZF1DWUYPasrIWf5j.md)
- [Instrumentales Románticas](/playlists/pretty/37i9dQZF1DX1lskIHz70Ye.md)
- [Int 'o Rione](/playlists/pretty/37i9dQZF1DWYrg01Xmlew6.md)
- [Intense Studying](/playlists/pretty/37i9dQZF1DX8NTLI2TtZa6.md)
- [Internacional Mexicano](/playlists/pretty/37i9dQZF1DXbApqiewDQsL.md)
- [International Playboy](/playlists/pretty/73boXMJz9iBoXxQVFZ94r5.md)
- [Internet Famous](/playlists/pretty/37i9dQZF1DXcgqrBI8yRRa.md)
- [Internet People](/playlists/pretty/37i9dQZF1DX6OgmB2fwLGd.md)
- [Interstate Drive Songs](/playlists/pretty/0XDRWlx2B1C1OXlaLlld8t.md)
- [Intervju med Seinabo Sey](/playlists/pretty/2k9EArKbf7N3QUmuNJHSo8.md)
- [Into the Woods](/playlists/pretty/3fqSEmStIKS8s3mCCRQFid.md)
- [Inventing Anna Official Playlist](/playlists/pretty/37i9dQZF1DXdmaCKRqSTEw.md)
- [Irie](/playlists/pretty/37i9dQZF1DX7GUbRHVEX42.md)
- [Irish Folk](/playlists/pretty/37i9dQZF1DX9HwI3Crikcm.md)
- [Irish Folk \- Ballads](/playlists/pretty/37i9dQZF1DX2ULa1Ss8vbo.md)
- [Irish Lit](/playlists/pretty/37i9dQZF1DWV1duDvis8iF.md)
- [Irish Pub Songs](/playlists/pretty/37i9dQZF1DWUrmUI5ur5GK.md)
- [Irish Studies](/playlists/pretty/37i9dQZF1DX3HTCmWbhewZ.md)
- [Is it New Wave?](/playlists/pretty/37i9dQZF1DX3Gj7nguS95W.md)
- [Island Anthems](/playlists/pretty/37i9dQZF1DWZqbnP2e1SEM.md)
- [Island Pop](/playlists/pretty/37i9dQZF1DWX1DwkjCqoyw.md)
- [Island Reggae](/playlists/pretty/37i9dQZF1DX3mvx0imueXo.md)
- [It Only Takes Two](/playlists/pretty/5McngUiuALFIS4VVF4oko5.md)
- [It's ALT Good!](/playlists/pretty/37i9dQZF1DX2SK4ytI2KAZ.md)
- [It's Hits Sweden](/playlists/pretty/37i9dQZF1DWTMYgB8TqtmR.md)
- [It's Party Time](/playlists/pretty/37i9dQZF1DX8scDqTzxoFw.md)
- [It's a Boy!](/playlists/pretty/3KP0xIq8NrTP7BV2YhpHT5.md)
- [It's a Girl!](/playlists/pretty/52rJQYDn9Q5dufvGPqqzgf.md)
- [Italo Disco](/playlists/pretty/37i9dQZF1DX3jWba5xiDhV.md)
- [JD's Jook Joint](/playlists/pretty/37i9dQZF1DWUeUTA8xEERe.md)
- [JIRMP](/playlists/pretty/6r0dNjQD0WUHKs1gpMvpLk.md)
- [JRE Goes Extra\-Terrestrial](/playlists/pretty/37i9dQZF1DWTe1SQtSEkfX.md)
- [JRE Talks Comedy](/playlists/pretty/37i9dQZF1DX0FpedkNl6M0.md)
- [JRE Talks Health](/playlists/pretty/37i9dQZF1DWXmt3eyYYAW6.md)
- [JRE Talks with Academics](/playlists/pretty/37i9dQZF1DX455rqxvhRwQ.md)
- [JRE's Most Motivating Guests](/playlists/pretty/37i9dQZF1DX6gAnC9ioCxB.md)
- [Jad Halal track IDs](/playlists/pretty/37i9dQZF1DX3uM1d8KwMtp.md)
- [Jane Austen](/playlists/pretty/37i9dQZF1DWWC5ySVGqQA1.md)
- [Jangueo](/playlists/pretty/37i9dQZF1DX4TNDxNzIjRm.md)
- [Jaripeo](/playlists/pretty/37i9dQZF1DX4TXiF0EOUoR.md)
- [Jasmine](/playlists/pretty/37i9dQZF1DX5IOhx43PGIa.md)
- [Jazz Bar](/playlists/pretty/37i9dQZF1DWXwi9yXPDI9y.md)
- [Jazz Classics](/playlists/pretty/37i9dQZF1DXbITWG1ZJKYt.md)
- [Jazz Classics Blue Note Edition](/playlists/pretty/37i9dQZF1DWTR4ZOXTfd9K.md)
- [Jazz Club](/playlists/pretty/37i9dQZF1DX1S1NduGwpsa.md)
- [Jazz Guitar Classics](/playlists/pretty/37i9dQZF1DWV8SP2WsR9MK.md)
- [Jazz Live & Loud](/playlists/pretty/37i9dQZF1DXc5FgmqNGPLc.md)
- [Jazz Meets Classical](/playlists/pretty/37i9dQZF1DX2mmt7R81K2b.md)
- [Jazz Noir](/playlists/pretty/37i9dQZF1DWWR73B3Bnjfh.md)
- [Jazz Piano Classics](/playlists/pretty/37i9dQZF1DX5q7wCXFrkHh.md)
- [Jazz Piano Today](/playlists/pretty/37i9dQZF1DX43E1RoZ4lai.md)
- [Jazz Pop](/playlists/pretty/37i9dQZF1DWTsUzn4pp2rW.md)
- [Jazz Rap](/playlists/pretty/37i9dQZF1DX8Kgdykz6OKj.md)
- [Jazz Relax](/playlists/pretty/37i9dQZF1DXbOVU4mpMJjh.md)
- [Jazz Today](/playlists/pretty/37i9dQZF1DXdTVYB0r28zn.md)
- [Jazz Tranquilo](/playlists/pretty/37i9dQZF1DX05Q6G4VDGLq.md)
- [Jazz Trumpet](/playlists/pretty/37i9dQZF1DWXj0W55phbFm.md)
- [Jazz UK](/playlists/pretty/37i9dQZF1DXbHcQpOiXk1D.md)
- [Jazz Vibes](/playlists/pretty/37i9dQZF1DX0SM0LYsmbMT.md)
- [Jazz X\-Press](/playlists/pretty/37i9dQZF1DX85XJl1mZAlp.md)
- [Jazz for Autumn](/playlists/pretty/37i9dQZF1DX7UE7qrnkvsf.md)
- [Jazz for Beginners](/playlists/pretty/37i9dQZF1DX5gHOTs8Y9XY.md)
- [Jazz for Lovers](/playlists/pretty/37i9dQZF1DX76YsWjvbz9I.md)
- [Jazz for Reading](/playlists/pretty/37i9dQZF1DX72wBcERxgla.md)
- [Jazz for Sleep](/playlists/pretty/37i9dQZF1DXa1rZf8gLhyz.md)
- [Jazz for Study](/playlists/pretty/37i9dQZF1DX3SiCzCxMDOH.md)
- [Jazz in the Background](/playlists/pretty/37i9dQZF1DWV7EzJMK2FUI.md)
- [Jazz in the Car](/playlists/pretty/37i9dQZF1DX9n1kQRulpEn.md)
- [Jazz on the Rocks](/playlists/pretty/6juf9A1KL8naPZFa2YngsM.md)
- [Jazz\-Blues](/playlists/pretty/37i9dQZF1DX9GSZDbrndTa.md)
- [Jazz\-Funk](/playlists/pretty/37i9dQZF1DWUb0uBnlJuTi.md)
- [Jazztronica](/playlists/pretty/37i9dQZF1DX55dNU0PWnO5.md)
- [Jazzy Christmas Dinner](/playlists/pretty/37i9dQZF1DX4DJLSJvJ3bH.md)
- [Jazzy Dinner](/playlists/pretty/37i9dQZF1DWTALrdBtcXjw.md)
- [Jazzy Korea](/playlists/pretty/37i9dQZF1DX3Cii9ioWjQP.md)
- [Jazzy Morning](/playlists/pretty/37i9dQZF1DXdziGPHNE40t.md)
- [Jazzy Romance](/playlists/pretty/37i9dQZF1DWTbzY5gOVvKd.md)
- [Je me souviens: alternatif](/playlists/pretty/37i9dQZF1DXcSKbfhHetFR.md)
- [Je t'aime](/playlists/pretty/37i9dQZF1DXct2NyIphYfn.md)
- [Jeanette Jenkins' Stretch\. Yoga\. Playlist](/playlists/pretty/37i9dQZF1DX7FZ2SWo5dTJ.md)
- [Jennifer Cardini's track IDs](/playlists/pretty/37i9dQZF1DXcttP9IwoTTL.md)
- [Jeremy Olander DJ Mix: A Journey Through Melody](/playlists/pretty/37i9dQZF1DWY8Ji0aOP06u.md)
- [Jersey Club Heat](/playlists/pretty/37i9dQZF1DXajwQAxzrT4Q.md)
- [Jesse \- Street Smart](/playlists/pretty/10zBfLMB5ty2Pec5LYRcgI.md)
- [Jet Set](/playlists/pretty/37i9dQZF1DX42v3AOJvUpv.md)
- [Jock Jams](/playlists/pretty/37i9dQZF1DX4esiqDZ1sjJ.md)
- [Joda](/playlists/pretty/37i9dQZF1DWYNSDUeK85ev.md)
- [Joe Cocker](/playlists/pretty/2rdMSQHM9YryNLPnEbQ7g6.md)
- [John Dahlbäck's DJ Mix](/playlists/pretty/37i9dQZF1DWYdYNGDcCsRS.md)
- [Johnossi](/playlists/pretty/5MkJ5KSzz4wmCpIFvM6pFT.md)
- [Joie Chavis' Stronger You Playlist](/playlists/pretty/37i9dQZF1DWTKunwBLkjR6.md)
- [Jordan Sounds](/playlists/pretty/37i9dQZF1DWUlTJaFU1ddx.md)
- [Juan Gabriel Mexicano](/playlists/pretty/37i9dQZF1DX7NpTNK48oe2.md)
- [Jukebox Joint](/playlists/pretty/37i9dQZF1DXbvE0SE0Cczh.md)
- [Jump Blues](/playlists/pretty/37i9dQZF1DX7nt6DdNdydo.md)
- [Jump Up!](/playlists/pretty/37i9dQZF1DX4to60X6goeK.md)
- [JumpOff](/playlists/pretty/37i9dQZF1DX6tw5tib6ZrB.md)
- [June 10](/playlists/pretty/1pARmsw0z4yebhBtZKxAU0.md)
- [June 2](/playlists/pretty/5PzDJIsyNnFxgu0t6Lf41G.md)
- [Jungle Classics](/playlists/pretty/37i9dQZF1DWTv94Wk9KTkJ.md)
- [Just Good Music](/playlists/pretty/37i9dQZF1DX0b1hHYQtJjp.md)
- [Just Me and the Blues](/playlists/pretty/37i9dQZF1DWThcryaU9mXU.md)
- [Just Rock!](/playlists/pretty/37i9dQZF1DX2IvZJK5xwFt.md)
- [Just Smile](/playlists/pretty/37i9dQZF1DWVu0D7Y8cYcs.md)
- [K\-Are & Be](/playlists/pretty/37i9dQZF1DX089MWxS7QW5.md)
- [K\-Club Party](/playlists/pretty/37i9dQZF1DX4RDXswvP6Mj.md)
- [K\-Pop Acoustic](/playlists/pretty/37i9dQZF1DX1wdZM1FEz79.md)
- [K\-Pop Daebak Presents: Best K\-Pop Songs of 2O2O](/playlists/pretty/37i9dQZF1DWVHNixKGCLqw.md)
- [K\-Pop Duets \(러블리 듀엣\)](/playlists/pretty/37i9dQZF1DWZYjbSZYSpu6.md)
- [K\-Pop Fresh](/playlists/pretty/37i9dQZF1DX1LU4UHKqdtg.md)
- [K\-Pop Generations](/playlists/pretty/37i9dQZF1DX14fiWYoe7Oh.md)
- [K\-Pop Instruments \(가요 반주곡\)](/playlists/pretty/37i9dQZF1DX2TaeWblvPcE.md)
- [K\-Pop ON! \(온\)](/playlists/pretty/37i9dQZF1DX9tPFwDMOaN1.md)
- [K\-Pop Rising](/playlists/pretty/37i9dQZF1DX4FcAKI5Nhzq.md)
- [K\-Pop X\-Overs](/playlists/pretty/37i9dQZF1DX4IDaXtVjL83.md)
- [K\-Trot Stars](/playlists/pretty/37i9dQZF1DX6i7txhF59QA.md)
- [K\-Webtoon OSTs \(웹툰 OSTs\)](/playlists/pretty/37i9dQZF1DWZgZGWDUJK7v.md)
- [KENGAN ASHURA \-ケンガンアシュラ \-](/playlists/pretty/37i9dQZF1DX1jG0L1fT9fh.md)
- [KING](/playlists/pretty/37i9dQZF1DWYNNUgvFqsgZ.md)
- [K\`illin'](/playlists/pretty/37i9dQZF1DX1TqbmB34Bbs.md)
- [Kaadhal Vali](/playlists/pretty/37i9dQZF1DWVApiVwKelT7.md)
- [Kankyō Ongaku](/playlists/pretty/37i9dQZF1DX92T9KVmPAYW.md)
- [Kanye To The](/playlists/pretty/6Sz7KT9MhChZuAJDKEWiLF.md)
- [Karaoke Mexicano](/playlists/pretty/37i9dQZF1DX5ICoVUm52hQ.md)
- [Karaoke Regional Mexicano](/playlists/pretty/37i9dQZF1DXcHG4x5MYzpJ.md)
- [Karaoke en Español](/playlists/pretty/37i9dQZF1DWYOkVTse9lln.md)
- [Kathy Griffin \#PressPlayForPride](/playlists/pretty/37i9dQZF1DXajWk2WkW4sa.md)
- [Katie Austin's Hype HIITs Playlist](/playlists/pretty/37i9dQZF1DWZM5tnWlhywf.md)
- [Keep Calm](/playlists/pretty/37i9dQZF1DX5Ufz5ldo0J4.md)
- [Keep Fit Club](/playlists/pretty/37i9dQZF1DWZ2fb6SBrzTW.md)
- [Keep On Pushing: A Labour Playlist](/playlists/pretty/6WHZXvb7hEN5w9VMFWPm1x.md)
- [Keep it Low Key](/playlists/pretty/26AgqJwDHB7p2SKJFHrtte.md)
- [Kendrick Lamar](/playlists/pretty/4lwqQxljF1Rge3X4eMzdza.md)
- [Kickass Metal](/playlists/pretty/37i9dQZF1DWTcqUzwhNmKv.md)
- [Kids B\-day Party](/playlists/pretty/6PzNMpCPMDMo1pOUjNhDUC.md)
- [Kids Workout](/playlists/pretty/37i9dQZF1DWWdHnKrQaItY.md)
- [Kilig Pa More](/playlists/pretty/37i9dQZF1DX4cx0q5Jn2vp.md)
- [Killing It](/playlists/pretty/37i9dQZF1DXea2M7iVhM3V.md)
- [KimBops!](/playlists/pretty/37i9dQZF1DX0018ciYu6bM.md)
- [Kindie](/playlists/pretty/37i9dQZF1DX7cJrHxouIuL.md)
- [King Khan: The Best of SRK](/playlists/pretty/37i9dQZF1DWSxaFwRXIXnt.md)
- [King of Pop](/playlists/pretty/653U7cDBXXkPZ07Xk8kxL6.md)
- [Kiss Sixth Sense\(키스 식스 센스\)](/playlists/pretty/37i9dQZF1DWWaUALc1m7Xc.md)
- [Kitchen Swagger](/playlists/pretty/37i9dQZF1DX2FsCLsHeMrM.md)
- [Kitsuné's New, Hot & Fresh](/playlists/pretty/0cc8YMQWsSzODyTpdVB6mI.md)
- [Kollywood Cream](/playlists/pretty/37i9dQZF1DX0TyiNWW7uUQ.md)
- [Kollywood Queens](/playlists/pretty/37i9dQZF1DX8RXxAW8DgJV.md)
- [Kollywood Themes](/playlists/pretty/37i9dQZF1DWUptwB9dhZvQ.md)
- [Kora Chill](/playlists/pretty/37i9dQZF1DX8NCuSFtLG2H.md)
- [Korean OST Instrumentals](/playlists/pretty/37i9dQZF1DXbbMUWc2KuOB.md)
- [Korean OSTs](/playlists/pretty/37i9dQZF1DX2ohL85TE8TI.md)
- [Korean Old Vinyls \(통기타와 LP판\)](/playlists/pretty/37i9dQZF1DWX7FdKM0unn8.md)
- [Koven's DJ Mix](/playlists/pretty/37i9dQZF1DXcTGREYi2ti7.md)
- [KrOWN](/playlists/pretty/37i9dQZF1DWW46Vfs1oltB.md)
- [Krautrock Highway](/playlists/pretty/37i9dQZF1DWT9KDEHFNVYD.md)
- [Kvinnor att ha koll på 2014](/playlists/pretty/1m6DKwKNM1YLcm3OX6RzJg.md)
- [LOCKJAW](/playlists/pretty/37i9dQZF1DWSgQ5Y8XEtFi.md)
- [LP Giobbi's DJ Mix](/playlists/pretty/37i9dQZF1DXb6nc9KYeHHP.md)
- [LSP](/playlists/pretty/6cSrBkF4TPHetlU033IopA.md)
- [La + Chingona](/playlists/pretty/37i9dQZF1DWY7LJpmTFjnp.md)
- [La Cantina](/playlists/pretty/37i9dQZF1DWZLL3REk8t1E.md)
- [La Casa de Papel Official Playlist](/playlists/pretty/37i9dQZF1DX44eggCvVygr.md)
- [La Casa del Perreo](/playlists/pretty/37i9dQZF1DXb6wQUgoZzUc.md)
- [La Cocina de la Abuela](/playlists/pretty/37i9dQZF1DX8MdBxEdi0gp.md)
- [La Dinastía de..\. Los Fernández](/playlists/pretty/37i9dQZF1DWUCW9VX8yNjX.md)
- [La Frecuencia](/playlists/pretty/37i9dQZF1DX5fklOIFLGHF.md)
- [La Hit Liste](/playlists/pretty/37i9dQZF1DX7LjobXS2hzX.md)
- [La Lista Pop](/playlists/pretty/37i9dQZF1DWSpF87bP6JSF.md)
- [La Mamalona](/playlists/pretty/37i9dQZF1DX3dLAxDk6oKP.md)
- [La Marisquería con Banda MS de Sergio Lizárraga](/playlists/pretty/37i9dQZF1DWSujWHEEwoTJ.md)
- [La Nueva Ola: Música Mexicana](/playlists/pretty/37i9dQZF1DX3bSsPe97LMN.md)
- [La Pozoliza](/playlists/pretty/37i9dQZF1DX5ofUCE5KJAn.md)
- [La Reina: Éxitos de la Música Mexicana](/playlists/pretty/37i9dQZF1DX905zIRtblN3.md)
- [La Serenata](/playlists/pretty/37i9dQZF1DX127GJMzd1vB.md)
- [La Tamalera](/playlists/pretty/37i9dQZF1DWZjpQgC7Wtwz.md)
- [La Troca](/playlists/pretty/37i9dQZF1DX2pFh4sRdmEB.md)
- [La Vida Loca](/playlists/pretty/37i9dQZF1DWXHyhanaNMoy.md)
- [La littérature française](/playlists/pretty/37i9dQZF1DX8pbyATDkUwW.md)
- [La película que me pasé contigo](/playlists/pretty/37i9dQZF1DX8qc972EhRzd.md)
- [La poésie française](/playlists/pretty/37i9dQZF1DX7ufqCXkhnSb.md)
- [La vita è bella!](/playlists/pretty/37i9dQZF1DX9qUVnHy7VXV.md)
- [Lactic Acid Run](/playlists/pretty/37i9dQZF1DXcCEH5EfTtzp.md)
- [Lady Gaga Radio](/playlists/pretty/37i9dQZF1E4Aop0u3mbfpJ.md)
- [Laid\-Back Camp ゆるキャン△](/playlists/pretty/37i9dQZF1DWWosUgW8r4Gq.md)
- [Laidback Acoustic](/playlists/pretty/37i9dQZF1DXc3FQfFV3K6V.md)
- [Las 100 mejores baladas](/playlists/pretty/37i9dQZF1DX7hD3xpkU4gL.md)
- [Las Canciones Más Bonitas Del Mundo](/playlists/pretty/37i9dQZF1DX9CCxc3fffni.md)
- [Las Choppers](/playlists/pretty/37i9dQZF1DWYW4SraN7Va8.md)
- [Las Estrellas](/playlists/pretty/37i9dQZF1DX2PpQS44qqLL.md)
- [Las Favoritas](/playlists/pretty/37i9dQZF1DXanygmGYrrk3.md)
- [Las Micheladas](/playlists/pretty/37i9dQZF1DWT46DLgeBxAh.md)
- [Las Rancheras de Papá](/playlists/pretty/37i9dQZF1DXaqZ3USzRiOk.md)
- [Las Románticas de Mamá](/playlists/pretty/37i9dQZF1DWZa22FVzx47m.md)
- [Las Vegas Pool Party](/playlists/pretty/37i9dQZF1DXdMS2nFQ7EO0.md)
- [Laser Disco](/playlists/pretty/37i9dQZF1DX11pUHJdXMnN.md)
- [Late Night Jazz](/playlists/pretty/37i9dQZF1DX4wta20PHgwo.md)
- [Late Night Nature](/playlists/pretty/37i9dQZF1DX709Kv0V067V.md)
- [Latest Dance Tamil](/playlists/pretty/37i9dQZF1DX7vl8XKmpwdM.md)
- [Latest Kannada](/playlists/pretty/37i9dQZF1DWZqTcNLmb3sH.md)
- [Latest Romance Tamil](/playlists/pretty/37i9dQZF1DWWWpLwNv0bd2.md)
- [Latest Tamil](/playlists/pretty/37i9dQZF1DWVo4cdnikh7Z.md)
- [Latin Blues](/playlists/pretty/37i9dQZF1DXas3RS9LEsSS.md)
- [Latin Cardio](/playlists/pretty/37i9dQZF1DWXmQEAjlxGhi.md)
- [Latin Chillout 00s](/playlists/pretty/37i9dQZF1DWValJmYBKiAM.md)
- [Latin Chillout 10s](/playlists/pretty/37i9dQZF1DXbvzw24ukZEU.md)
- [Latin Christmas](/playlists/pretty/37i9dQZF1DX8qhRpXsdDY5.md)
- [Latin Dinner](/playlists/pretty/37i9dQZF1DX2zAr9vdmFlU.md)
- [Latin Drive](/playlists/pretty/37i9dQZF1DX8DSRR3tGze6.md)
- [Latin Frequency](/playlists/pretty/37i9dQZF1DWU65QzegR429.md)
- [Latin Gaming](/playlists/pretty/37i9dQZF1DX43v1NFXUzji.md)
- [Latin Hit Mix](/playlists/pretty/37i9dQZF1DXbLMw3ry7d7k.md)
- [Latin Hits 2000](/playlists/pretty/37i9dQZF1DWV4u7VWM4nPt.md)
- [Latin Hits 2004](/playlists/pretty/37i9dQZF1DWYYq2xQ4k84l.md)
- [Latin Hits 2018](/playlists/pretty/37i9dQZF1DWX47rExFRJv8.md)
- [Latin Indie Classics](/playlists/pretty/37i9dQZF1DX8RvHJklfhit.md)
- [Latin Is Universal](/playlists/pretty/5It2yyyMjbwbpSO7B4Mb0I.md)
- [Latin Jazz](/playlists/pretty/37i9dQZF1DX661EjJOj3Tu.md)
- [Latin Party Anthems](/playlists/pretty/37i9dQZF1DWVcbzTgVpNRm.md)
- [Latin Pop Classics](/playlists/pretty/37i9dQZF1DX6ThddIjWuGT.md)
- [Latin Pop Today](/playlists/pretty/37i9dQZF1DX1QnNyJOBQBv.md)
- [Latin Pride](/playlists/pretty/37i9dQZF1DX2lenzaqw2vs.md)
- [Latin R&B](/playlists/pretty/37i9dQZF1DX2MJVTOdWtbm.md)
- [Lava Lamp](/playlists/pretty/37i9dQZF1DWWtqHeytOZ8f.md)
- [Lavora col Sorriso](/playlists/pretty/37i9dQZF1DWT5DMeb1cFOV.md)
- [Lazy Afternoon](/playlists/pretty/37i9dQZF1DX7QUXSrhM7mI.md)
- [Lazy Afternoon \(2\)](/playlists/pretty/6QAwHYtCdTdrgX6wh1iE9H.md)
- [Lazy Chill Afternoon](/playlists/pretty/37i9dQZF1DXdL58DnQ4ZqM.md)
- [Lazy Jazz Cat](/playlists/pretty/37i9dQZF1DWTcEjayzrZ4x.md)
- [Le Hit Del 2001](/playlists/pretty/37i9dQZF1DX3xcBbv5juqM.md)
- [Le Hit Del 2003](/playlists/pretty/37i9dQZF1DX1EBIvjCbIEj.md)
- [Le Hit Del 2005](/playlists/pretty/37i9dQZF1DX1mDKG3HOIlV.md)
- [Le Hit Del 2006](/playlists/pretty/37i9dQZF1DWUSO9kvC46mW.md)
- [Le Hit Del 2007](/playlists/pretty/37i9dQZF1DWTIlGSTRox0A.md)
- [Le Hit Del 2008](/playlists/pretty/37i9dQZF1DWYVJTis2pglk.md)
- [Le Hit Del 2010](/playlists/pretty/37i9dQZF1DX8YAx9W4ZWqN.md)
- [Le Hit Del 2013](/playlists/pretty/37i9dQZF1DX7s5uLR8Bqkk.md)
- [Le Hit Del 2014](/playlists/pretty/37i9dQZF1DX6NcOqNgkoHE.md)
- [Le Hit Del 2015](/playlists/pretty/37i9dQZF1DXcROCUCQOBoF.md)
- [Le Hit Del 2016](/playlists/pretty/37i9dQZF1DX92LuBHmd192.md)
- [Le Hit Del 2017](/playlists/pretty/37i9dQZF1DWXunlM9audKP.md)
- [Le meilleur du rap québécois 2021](/playlists/pretty/37i9dQZF1DXcTuHVFoulvZ.md)
- [League of Legends Star Guardian Takeover](/playlists/pretty/37i9dQZF1DWVi45nh2EuPP.md)
- [Learn Chinese](/playlists/pretty/37i9dQZF1DX60lVXkfYly8.md)
- [Learn French](/playlists/pretty/37i9dQZF1DWTJSgpZmw7H2.md)
- [Learn German](/playlists/pretty/37i9dQZF1DWVrSKB2Pc3PY.md)
- [Learn Irish](/playlists/pretty/37i9dQZF1DWW6K9D6JN1rY.md)
- [Learn Italian](/playlists/pretty/37i9dQZF1DX0yHwYvqyUJQ.md)
- [Learn Portuguese](/playlists/pretty/37i9dQZF1DX2SgxzTVd6bU.md)
- [Learn Russian](/playlists/pretty/37i9dQZF1DWSsCx004HXRd.md)
- [Learn Spanish](/playlists/pretty/37i9dQZF1DXc6li3e9oatQ.md)
- [Learn Swedish](/playlists/pretty/37i9dQZF1DX1QCg8MO15wF.md)
- [Lebanon Sounds](/playlists/pretty/37i9dQZF1DXaywRlmHaP59.md)
- [Leche con Chocolate](/playlists/pretty/37i9dQZF1DXbLRILp4Jb3D.md)
- [Legacy of Laurel Canyon](/playlists/pretty/37i9dQZF1DWUKTqLl4oNGg.md)
- [Legendary](/playlists/pretty/37i9dQZF1DWWGFQLoP9qlv.md)
- [Legendary Country Live](/playlists/pretty/37i9dQZF1DWXjt5iSjw7DI.md)
- [Legendary Guitar Solos](/playlists/pretty/37i9dQZF1DWSlJG7YPUBHF.md)
- [Legendary Labels: Alligator](/playlists/pretty/37i9dQZF1DX1BcGDqSxiaP.md)
- [Legendary Labels: Tuff Gong](/playlists/pretty/37i9dQZF1DX38neNCcDGwC.md)
- [Legendary Labels: VP Records](/playlists/pretty/37i9dQZF1DX70zl2mz7vvV.md)
- [Legendary Labels: Verve Records](/playlists/pretty/37i9dQZF1DX74Skr7pPd2D.md)
- [Legendary Women of Country](/playlists/pretty/37i9dQZF1DWSCp8Clax7tf.md)
- [Legends Only](/playlists/pretty/37i9dQZF1DX5a39zUmS7Hn.md)
- [Lento.](/playlists/pretty/37i9dQZF1DX64myInc1vfu.md)
- [Leonard Cohen: Covered](/playlists/pretty/37i9dQZF1DWX8N4beMj76D.md)
- [Les beaux jours](/playlists/pretty/37i9dQZF1DWWAwsEEGEeag.md)
- [Les nouveaux classiques](/playlists/pretty/37i9dQZF1DXcZDqZiB24ZM.md)
- [Let Loose](/playlists/pretty/3Nh594yQ7PkhEPzUUAKlnH.md)
- [Let's Aikatsu! \-アイカツ\-！](/playlists/pretty/37i9dQZF1DX6gmUBAHLzQz.md)
- [Let's Eat!](/playlists/pretty/37i9dQZF1DXcB9sN6ZkZ58.md)
- [Let's See Them Aliens](/playlists/pretty/37i9dQZF1DX4wJiDXwIMDT.md)
- [Level Up Lofi](/playlists/pretty/37i9dQZF1DX1bJXtym592H.md)
- [Levitate](/playlists/pretty/37i9dQZF1DWVY5eNJoKHd2.md)
- [License To Chill](/playlists/pretty/37i9dQZF1DXa9xHlDa5fc6.md)
- [Life Sucks](/playlists/pretty/37i9dQZF1DX3YSRoSdA634.md)
- [Lifted Frequency](/playlists/pretty/37i9dQZF1DXaod7SIWA11W.md)
- [Light Academia](/playlists/pretty/37i9dQZF1DX1jDTenPbqLo.md)
- [Lighter Blue](/playlists/pretty/37i9dQZF1DX0dqF2kqDiBN.md)
- [Limelight](/playlists/pretty/37i9dQZF1DX5bKKZsnMo7c.md)
- [Limo Ride](/playlists/pretty/37i9dQZF1DX5AX8gioxrnN.md)
- [Liricisti](/playlists/pretty/37i9dQZF1DX5e23vWCjL5N.md)
- [Lista de LOS 40 \(Oficial\) \| 🇪🇸](/playlists/pretty/2z7k6r8z0OlXuDsIuy80ZN.md)
- [Little Mix: Pride](/playlists/pretty/37i9dQZF1DX7wHseZmxqFF.md)
- [Livet på Bøgda!](/playlists/pretty/37i9dQZF1DXa5zM0UrfG4s.md)
- [Living Christian](/playlists/pretty/2BZPS5jzzjcyPG7oqRXqMs.md)
- [Llamada de Medianoche](/playlists/pretty/37i9dQZF1DXbaeBomo9L1a.md)
- [Lluvia y Pop](/playlists/pretty/37i9dQZF1DX1QEsS6ekwbG.md)
- [Lo Mejor de MANSIÓN REGGAETÓN 2021](/playlists/pretty/37i9dQZF1DX54UIszz9BMX.md)
- [Lo Mejor de Pop Latino 2020](/playlists/pretty/37i9dQZF1DWWKaOrgsY8IF.md)
- [Lo Mejor del Indie/Alternativo 2020](/playlists/pretty/37i9dQZF1DX2PpgjSDZ3UJ.md)
- [Lo Que Suena](/playlists/pretty/37i9dQZF1DXctZGldNPWLR.md)
- [Lo mejor de La Lista Pop 2021](/playlists/pretty/37i9dQZF1DWXlWx1itq9S5.md)
- [Lo mejor del mes](/playlists/pretty/37i9dQZF1DWZoF06RIo9el.md)
- [Lo\-Fi Cool Down](/playlists/pretty/37i9dQZF1DX7vu1ck1olx9.md)
- [Lo\-Fi House](/playlists/pretty/37i9dQZF1DXbXD9pMSZomS.md)
- [Lo\-fi Indie](/playlists/pretty/37i9dQZF1DX0CIO5EOSHeD.md)
- [Local Hype](/playlists/pretty/37i9dQZF1DWUjxn1SsdJYZ.md)
- [Locked In](/playlists/pretty/37i9dQZF1DWTl4y3vgJOXW.md)
- [Locker Room](/playlists/pretty/37i9dQZF1DX8SaiEt4OVJw.md)
- [LolliPOP](/playlists/pretty/37i9dQZF1DWUEZXXfFphen.md)
- [Lone Star Blues](/playlists/pretty/37i9dQZF1DXeaMD6NdSui3.md)
- [Long Distance](/playlists/pretty/37i9dQZF1DWTaHkGYBpGRM.md)
- [Lorem](/playlists/pretty/37i9dQZF1DXdwmD5Q7Gxah.md)
- [Los Que Mandan](/playlists/pretty/37i9dQZF1DXb0COFso7q0D.md)
- [Lost In The Woods](/playlists/pretty/37i9dQZF1DWYm3dUe8iSaq.md)
- [Lost the Game? Drown Your Sorrows](/playlists/pretty/5sFZ3M4gXeYScR9VJTyBh2.md)
- [Lotic's track IDs](/playlists/pretty/37i9dQZF1DX6eScvf6tpFA.md)
- [Loud & Proud](/playlists/pretty/37i9dQZF1DXdMgrfZfBDFy.md)
- [Louis Tomlinson Change Over](/playlists/pretty/36h6nx6m9lMF0kfa4FHo7G.md)
- [Louisiana Blues](/playlists/pretty/37i9dQZF1DWWlFuMqPR3VO.md)
- [Lounge \- Soft House](/playlists/pretty/37i9dQZF1DX82pCGH5USnM.md)
- [Louvando e Louça](/playlists/pretty/37i9dQZF1DWY9crkqLGj4o.md)
- [Louça Infinita](/playlists/pretty/37i9dQZF1DWZFKJle6VhNB.md)
- [Love Ballads](/playlists/pretty/37i9dQZF1DWYMvTygsLWlG.md)
- [Love Coffee, Love Jesus](/playlists/pretty/37i9dQZF1DWXKWi9FunemC.md)
- [Love In Paris](/playlists/pretty/37i9dQZF1DX5SrscLLafXx.md)
- [Love Is...](/playlists/pretty/6uXTkT8st0AzDKBGr4Rqdo.md)
- [Love Island USA Official Playlist](/playlists/pretty/37i9dQZF1DXabZmhTI9fOC.md)
- [Love Language](/playlists/pretty/37i9dQZF1DXaPeYMCDRQeg.md)
- [Love Letter](/playlists/pretty/37i9dQZF1DX38lOuCWlLV1.md)
- [Love Live! Nijigasaki High School Idol Club ラブライブ!虹ヶ咲学園スクールアイドル同好会](/playlists/pretty/37i9dQZF1DX3Ele4FwgUgz.md)
- [Love Live! Sunshine!! \-ラブライブ！サンシャイン!!](/playlists/pretty/37i9dQZF1DX3xBFVLHVC4q.md)
- [Love Me Tender](/playlists/pretty/37i9dQZF1DWTyQKmHU6FcW.md)
- [Love Poems](/playlists/pretty/37i9dQZF1DXe8ssiX0naPV.md)
- [Love Pop](/playlists/pretty/37i9dQZF1DX50QitC6Oqtn.md)
- [Love Songs & Chill \| Valentine's Day](/playlists/pretty/4QuJ2DbcTe7R8lzqfNXz7v.md)
- [Lovin' Beats](/playlists/pretty/37i9dQZF1DX2bIhTmfM3ln.md)
- [Low Key Pop](/playlists/pretty/3pxwKjnmDg4kwTc5nItYcx.md)
- [Low Key Revelry](/playlists/pretty/67uEKAhAdvMJvumeC8ZgjB.md)
- [Lowkey](/playlists/pretty/37i9dQZF1DX2yvmlOdMYzV.md)
- [Lowkey Tech](/playlists/pretty/37i9dQZF1DX0r3x8OtiwEM.md)
- [Lucy In The Sky With Diamonds](/playlists/pretty/37i9dQZF1DWZreqadA03A8.md)
- [Luis Miguel \- Romances](/playlists/pretty/37i9dQZF1DX894PYVoChlV.md)
- [Lullabies for Little Ones](/playlists/pretty/37i9dQZF1DX3yw5kZsheMK.md)
- [Lullaby Baby](/playlists/pretty/37i9dQZF1DXbADqT0j1Cxt.md)
- [Lullaby Jazz](/playlists/pretty/37i9dQZF1DX2WtjAdkiMga.md)
- [Lunas de Folklore](/playlists/pretty/37i9dQZF1DWYLoJq8d80ds.md)
- [Lush + Ethereal](/playlists/pretty/37i9dQZF1DWZ0OzPeadl0h.md)
- [MANSIÓN REGGAETÓN](/playlists/pretty/37i9dQZF1DWZjqjZMudx9T.md)
- [MEXCLA](/playlists/pretty/37i9dQZF1DWVACbHMzNf0B.md)
- [MMG Spotify Picks](/playlists/pretty/2nZndNnauO6SID8cjf4C9F.md)
- [MNEK: Pride](/playlists/pretty/37i9dQZF1DWTWaD7ByJaBc.md)
- [MO Official Playlist](/playlists/pretty/37i9dQZF1DWSWpxxOIgP7o.md)
- [MORP](/playlists/pretty/37i9dQZF1DX7hVUrFvprfE.md)
- [MOTi's DJ Mix](/playlists/pretty/37i9dQZF1DX92PapbtyAWm.md)
- [MTV VMAs](/playlists/pretty/37i9dQZF1DWXXji4ucB51M.md)
- [Mac's Mixtape](/playlists/pretty/6JPMYu8YxGHBQ2Qv52JRaj.md)
- [Macy's Thanksgiving Day Parade 2013](/playlists/pretty/0TmNZR8QmL60k1gWWa37fg.md)
- [Mad Decent Weekly](/playlists/pretty/5IRdCjOHb6RwaIl1PaomPV.md)
- [Mad Scientist](/playlists/pretty/37i9dQZF1DWWYQim4OFxg7.md)
- [Made In South Africa](/playlists/pretty/37i9dQZF1DX9wXOYagay8L.md)
- [Made In Uganda](/playlists/pretty/37i9dQZF1DWXQaHIT8HMOV.md)
- [Made In Venezuela](/playlists/pretty/37i9dQZF1DWWekySnB4xpt.md)
- [Made in France](/playlists/pretty/37i9dQZF1DWSrj7tqQ9IOu.md)
- [Made in Sweden](/playlists/pretty/37i9dQZF1DX0ekBHz1NmKS.md)
- [Magical Mantras](/playlists/pretty/37i9dQZF1DX6o0zIiTnhmq.md)
- [Main Stage](/playlists/pretty/37i9dQZF1DX7ZUug1ANKRP.md)
- [Makaya McCraven Digs Jazz](/playlists/pretty/37i9dQZF1DWTtzPKJEaTC4.md)
- [Make Out Jams](/playlists/pretty/37i9dQZF1DXbEm2sKzgoJ8.md)
- [Mal de Amores](/playlists/pretty/37i9dQZF1DX68aCfKW9xMy.md)
- [Malandro Posturado](/playlists/pretty/37i9dQZF1DWUOuypaVNd01.md)
- [Maldita Hamburguesa](/playlists/pretty/37i9dQZF1DWVtFO27AQ6dF.md)
- [Malkia](/playlists/pretty/37i9dQZF1DX16usLA71XGW.md)
- [Mamivan](/playlists/pretty/37i9dQZF1DXa6LZpUXhjpy.md)
- [Mamá 70era](/playlists/pretty/37i9dQZF1DX5jXLyZM9dhV.md)
- [Mamá 80era](/playlists/pretty/37i9dQZF1DWV01pw5Lcxuv.md)
- [Mandarin Hip Hop Stars](/playlists/pretty/37i9dQZF1DWVNQeZtY2TDM.md)
- [Maneja con Reggaetón](/playlists/pretty/37i9dQZF1DX6W96LPxlVEm.md)
- [Manguito Enchilado](/playlists/pretty/37i9dQZF1DXaxwvKaY7HLh.md)
- [Manhã Relax](/playlists/pretty/37i9dQZF1DX47UHGK8zGt8.md)
- [Mapei & Timbuktu Lullabies](/playlists/pretty/37i9dQZF1DX5EArHoxaUqO.md)
- [Margaret Walker](/playlists/pretty/37i9dQZF1DX1pKjqvkDHkD.md)
- [Mariachi 2022](/playlists/pretty/37i9dQZF1DX7VikJCuOpfO.md)
- [Mariachi Pop](/playlists/pretty/37i9dQZF1DWT1J5CAuMUxr.md)
- [Marie \- Sassy](/playlists/pretty/423y0vzm6cfn0Q1o3JBUDR.md)
- [Marimba](/playlists/pretty/37i9dQZF1DX2tS0v7814se.md)
- [Mark Knight's DJ Mix](/playlists/pretty/37i9dQZF1DWUbKXPE8a2j2.md)
- [Martin Garrix DJ Mix: Sentio](/playlists/pretty/37i9dQZF1DWYIvtWSbA6Aj.md)
- [Martin Ikin DJ Mix: Feel The Vibe](/playlists/pretty/37i9dQZF1DWTvdcM9QUiSL.md)
- [Maskandi Favourites](/playlists/pretty/37i9dQZF1DX2xhOTSp6PjQ.md)
- [Massive Dance Hits](/playlists/pretty/37i9dQZF1DX5uokaTN4FTR.md)
- [Massive Drum & Bass](/playlists/pretty/37i9dQZF1DX5wDmLW735Yd.md)
- [Massive Soca Hits](/playlists/pretty/37i9dQZF1DWW7BONj8RiqI.md)
- [Mates y Música](/playlists/pretty/37i9dQZF1DWXTdx4nYEjeS.md)
- [Math Rock](/playlists/pretty/37i9dQZF1DWSsObZRzO8Xw.md)
- [May 20](/playlists/pretty/7IwNlM5pdX8XWPyhMRhq64.md)
- [Maya Jane Coles' track IDs](/playlists/pretty/37i9dQZF1DWZkxJwAfCZA3.md)
- [Medieval 50: Spotify Picks](/playlists/pretty/37i9dQZF1DWYZW76Iw4Lij.md)
- [Mediodía Acústico](/playlists/pretty/37i9dQZF1DWWoDbniQLBJY.md)
- [Meditate to the Sounds of Nature](/playlists/pretty/37i9dQZF1DX1tuUiirhaT3.md)
- [Meditative Guitar](/playlists/pretty/37i9dQZF1DWSAqa5cw6DxQ.md)
- [Meditative State of Mind](/playlists/pretty/37i9dQZF1DWTetfhmm3xOs.md)
- [Meditação e Relaxamento](/playlists/pretty/37i9dQZF1DXaKgOqDv3HpW.md)
- [Mega Hit Mix](/playlists/pretty/37i9dQZF1DXbYM3nMM0oPk.md)
- [Mega Pop Mix](/playlists/pretty/37i9dQZF1DX9L93gfg5cPa.md)
- [Mega Éxitos 2022](/playlists/pretty/37i9dQZF1DX21ow0o1PZDE.md)
- [Mehndi](/playlists/pretty/37i9dQZF1DWTL4zPbYeMFs.md)
- [Melancholy Instrumentals](/playlists/pretty/37i9dQZF1DWZrc3lwvImLj.md)
- [Melantronic](/playlists/pretty/37i9dQZF1DX39ATYW02fre.md)
- [Mellow Bars](/playlists/pretty/37i9dQZF1DWT6MhXz0jw61.md)
- [Mellow Beats](/playlists/pretty/37i9dQZF1DX3qCx5yEZkcJ.md)
- [Mellow Cello](/playlists/pretty/37i9dQZF1DX9dX3aBjsxqd.md)
- [Mellow Christmas](/playlists/pretty/37i9dQZF1DWSAQQD9XhcbP.md)
- [Mellow Classics](/playlists/pretty/37i9dQZF1DWTQwRw56TKNc.md)
- [Mellow Dinner](/playlists/pretty/37i9dQZF1DX4kJGZhtnOIh.md)
- [Mellow Drive](/playlists/pretty/37i9dQZF1DWUACcBjzMiIY.md)
- [Mellow Evening](/playlists/pretty/37i9dQZF1DX6XyOkZKBb24.md)
- [Mellow House](/playlists/pretty/37i9dQZF1DWWQp0YMTvpD3.md)
- [Mellow Lofi Morning](/playlists/pretty/37i9dQZF1DX6QClArDhvcW.md)
- [Mellow Meowsic](/playlists/pretty/37i9dQZF1DX5cXGtVmblSB.md)
- [Mellow Mood](/playlists/pretty/37i9dQZF1DX2n5hpuulC75.md)
- [Mellow Morning](/playlists/pretty/37i9dQZF1DWWzVPEmatsUB.md)
- [Mellow Pop](/playlists/pretty/37i9dQZF1DWYp3yzk1civi.md)
- [Melodic & Euphoric](/playlists/pretty/37i9dQZF1DWTiVLKoHQ1yC.md)
- [Melodic & Progressive Argentina](/playlists/pretty/37i9dQZF1DXdM3ZcJzlarB.md)
- [Memorindie](/playlists/pretty/37i9dQZF1DXaERaPeATJvJ.md)
- [Merengue Clásico](/playlists/pretty/37i9dQZF1DWSUo7EWzIcjZ.md)
- [Merengue De Amor](/playlists/pretty/37i9dQZF1DXbOKKEa4x1DK.md)
- [Merengue Mania](/playlists/pretty/37i9dQZF1DWVAa4Dwc5f7L.md)
- [Merengue Típico](/playlists/pretty/37i9dQZF1DX7rqPov2ZRCB.md)
- [Metal Ballads](/playlists/pretty/37i9dQZF1DX1kydukZhLms.md)
- [Metal Charge](/playlists/pretty/37i9dQZF1DX06VUQ1GoKge.md)
- [Metal Christmas](/playlists/pretty/37i9dQZF1DX0LctmTPNQ3v.md)
- [Metal Covers](/playlists/pretty/37i9dQZF1DWUJiNTfqDwyS.md)
- [Metal Empire](/playlists/pretty/37i9dQZF1DX4jCqmsDQR1i.md)
- [Metal Essentials](/playlists/pretty/37i9dQZF1DWWOaP4H0w5b0.md)
- [Metal Lords Official Playlist](/playlists/pretty/37i9dQZF1DX9J6gykuP8Cf.md)
- [Metal Rewind](/playlists/pretty/37i9dQZF1DWXHwQpcoF2cC.md)
- [Metal del Nuestro](/playlists/pretty/37i9dQZF1DX3gzwlIik99M.md)
- [Metalcore Classics](/playlists/pretty/37i9dQZF1DX6P51sFpSo2r.md)
- [Metallica: The Early Years](/playlists/pretty/056jpfChuMP5D1NMMaDXRR.md)
- [Metaltown 2012](/playlists/pretty/6cSO5pHOCQxoEiXYDPa3Uq.md)
- [Metaltown 2013](/playlists/pretty/7LxjY6mdINPgSVhILU2nk6.md)
- [Mexican Party Anthems](/playlists/pretty/37i9dQZF1DXbdrcAZnP3Cy.md)
- [Mexican Restaurant](/playlists/pretty/37i9dQZF1DWVtmGxs4S4N7.md)
- [Mexicano En Vivo](/playlists/pretty/37i9dQZF1DWVHIYChxh9sq.md)
- [Mezzanotte Chill Rap](/playlists/pretty/37i9dQZF1DX37pZLd58ED5.md)
- [Mi Razón de Ser](/playlists/pretty/37i9dQZF1DX9X4z5q6Ut6O.md)
- [Mia Lind's Hot Girl Walk Playlist](/playlists/pretty/37i9dQZF1DXbdNhlZLjJXz.md)
- [Michelle Obama's Workout Playlist](/playlists/pretty/37i9dQZF1DX2BCKQiTaN5o.md)
- [Middle Kids \- Complete Collection](/playlists/pretty/51txLi0Z6JdRmHNK98HitZ.md)
- [Midnight Blues](/playlists/pretty/37i9dQZF1DXcc6f6HRuPnq.md)
- [Miguel](/playlists/pretty/67zOV0qxT0TT8JEHZDCBDd.md)
- [Millennium K\-Pop](/playlists/pretty/37i9dQZF1DWUoY6Ih7vsxr.md)
- [Mind & Body](/playlists/pretty/37i9dQZF1DXdejmG21jbny.md)
- [Mind Right](/playlists/pretty/37i9dQZF1DX5hR0J49CmXC.md)
- [Minimal Tech](/playlists/pretty/37i9dQZF1DWSI21IGRaeuC.md)
- [Minimalism](/playlists/pretty/37i9dQZF1DX10uaP8FoDNe.md)
- [Minions Official Playlist](/playlists/pretty/37i9dQZF1DXdTBzNcDowKf.md)
- [Mix Universal](/playlists/pretty/37i9dQZF1DWZEa9Yw06mQB.md)
- [Mixto](/playlists/pretty/37i9dQZF1DX7qRKBHjmYIE.md)
- [Modern Blues Guitar](/playlists/pretty/37i9dQZF1DWZBWeillXfzX.md)
- [Modern Blues Rock](/playlists/pretty/37i9dQZF1DX7Y7BqFok9IQ.md)
- [Modern Chill Rock](/playlists/pretty/37i9dQZF1DX2UXfvEIZvDK.md)
- [Modern Eclectic](/playlists/pretty/37i9dQZF1DX28npkgy2RE4.md)
- [Modern Jam Band](/playlists/pretty/37i9dQZF1DWSk9DH2Upl3o.md)
- [Modern Jazz](/playlists/pretty/37i9dQZF1DX377iwEnODkR.md)
- [Modern Poetry](/playlists/pretty/37i9dQZF1DX26cFbtLr0Wn.md)
- [Modern Psychedelia](/playlists/pretty/37i9dQZF1DX8gDIpdqp1XJ.md)
- [Modernism 50: Spotify Picks](/playlists/pretty/37i9dQZF1DX8ONeLSIu0Ai.md)
- [Modhymns](/playlists/pretty/37i9dQZF1DX3ZaylsK87YU.md)
- [Modo Señora](/playlists/pretty/37i9dQZF1DXaBs3BbM19Ks.md)
- [Modular Synths](/playlists/pretty/37i9dQZF1DWYWA8YXAAo9Z.md)
- [Mollie King](/playlists/pretty/0dVRyMERU2g9M4tWEfaD5B.md)
- [Mollywood Gold](/playlists/pretty/37i9dQZF1DXaDDXaHNhJDD.md)
- [Monday Motivation](/playlists/pretty/37i9dQZF1DX1OY2Lp0bIPp.md)
- [Monster's track IDs](/playlists/pretty/37i9dQZF1DWSQxGzwb8MDD.md)
- [Montréal Chill](/playlists/pretty/37i9dQZF1DX1F430ihQKsD.md)
- [Mood Booster](/playlists/pretty/37i9dQZF1DX3rxVfibe1L0.md)
- [Mood Ring](/playlists/pretty/37i9dQZF1DX2PG4mbkilf3.md)
- [Mood Swing](/playlists/pretty/37i9dQZF1DXalD3w3b88aW.md)
- [MoogTube](/playlists/pretty/37i9dQZF1DWUG71vGUBGjh.md)
- [Moonlight Beats](/playlists/pretty/37i9dQZF1DXdipfKDeMPTE.md)
- [More Banjo!](/playlists/pretty/1W2XJETQjFYdzT4GuhBHmS.md)
- [Morning Acoustic](/playlists/pretty/37i9dQZF1DXdd3gw5QVjt9.md)
- [Morning Blues](/playlists/pretty/37i9dQZF1DX0vfpJ74tSuo.md)
- [Morning Classical](/playlists/pretty/37i9dQZF1DX9OZisIoJQhG.md)
- [Morning Coffee](/playlists/pretty/37i9dQZF1DXcgZcN2HVMoe.md)
- [Morning Coffee \- Wake Up](/playlists/pretty/3JBLiEySHqJWWGLw9VTxKd.md)
- [Morning Commute](/playlists/pretty/37i9dQZF1DX2MyUCsl25eb.md)
- [Morning Energía](/playlists/pretty/37i9dQZF1DXa3AAjWIbHAc.md)
- [Morning First Light](/playlists/pretty/37i9dQZF1DWSNeg74zvBUZ.md)
- [Morning K\-Pop!](/playlists/pretty/37i9dQZF1DX1uG5byNIgDA.md)
- [Morning Loud!!!](/playlists/pretty/37i9dQZF1DX2ENg5TiKRg4.md)
- [Morning Motivation](/playlists/pretty/37i9dQZF1DXc5e2bJhV6pu.md)
- [Morning Rhythm](/playlists/pretty/37i9dQZF1DX3ohNxI5tB79.md)
- [Morning Rituals](/playlists/pretty/7iJKTAmd5aP1opVYLB3XJ4.md)
- [Morning Run](/playlists/pretty/37i9dQZF1DX8E1Op3UZWf0.md)
- [Morning Workout](/playlists/pretty/7EYxnpva8IlIgJ42z96zXH.md)
- [Morocco Sounds](/playlists/pretty/37i9dQZF1DX4NdDHVFmygr.md)
- [Most Favored](/playlists/pretty/37i9dQZF1DXdgckExLlG1g.md)
- [Most Favoured](/playlists/pretty/37i9dQZF1DX8Dcuy1LwIn0.md)
- [Most Listened To British Dads on Spotify](/playlists/pretty/1k9jG0FUp7BcrAF1MZSabO.md)
- [Most Necessary](/playlists/pretty/37i9dQZF1DX2RxBh64BHjQ.md)
- [Mother Funk](/playlists/pretty/37i9dQZF1DXcyPBAlQvdpJ.md)
- [Mother Nature](/playlists/pretty/37i9dQZF1DX4If4OqUyC8k.md)
- [Mother's Day](/playlists/pretty/37i9dQZF1DWSoTL04mwiZp.md)
- [Motivation Mix](/playlists/pretty/37i9dQZF1DXdxcBWuJkbcy.md)
- [Motivation Montage](/playlists/pretty/2f4rXblveCedKdU2adFgC8.md)
- [Motor City Blues](/playlists/pretty/37i9dQZF1DXcgtZZKiQlS2.md)
- [Motown Family](/playlists/pretty/37i9dQZF1DX1en5gBpRe76.md)
- [Motown Soul Number Ones](/playlists/pretty/37i9dQZF1DX8xV1CEmgc1h.md)
- [Mountain Session](/playlists/pretty/6LY1QKuuZv6rtPKsHJSsnF.md)
- [Moving Castle Monthly](/playlists/pretty/0NKCe5F0ORuDO4sPmqhvcQ.md)
- [Mozart Piano](/playlists/pretty/37i9dQZF1DWZXEfPGehn06.md)
- [Mozart for Babies](/playlists/pretty/37i9dQZF1DWX7suNVq3K4h.md)
- [Mozart for Study](/playlists/pretty/37i9dQZF1DWXUpC6mczRpA.md)
- [Mucho Rap](/playlists/pretty/37i9dQZF1DWTgSTuHRv7LV.md)
- [Mujeres Bravías](/playlists/pretty/37i9dQZF1DX2dlPXwFl0rQ.md)
- [Mujeres del Folklore](/playlists/pretty/37i9dQZF1DWSwZRNpP8kqb.md)
- [Mujeres del Indie](/playlists/pretty/37i9dQZF1DXdHPp93Fnfds.md)
- [Mujeres del Pop Latino](/playlists/pretty/37i9dQZF1DWXYDb02ni3BM.md)
- [Mujeres del Tango](/playlists/pretty/37i9dQZF1DWZSDaI0ox0Nq.md)
- [Mujerones](/playlists/pretty/37i9dQZF1DX2QYsoI8NDDe.md)
- [Mundo Chamamé](/playlists/pretty/37i9dQZF1DWYxOYf3Bkbam.md)
- [Music Box Lullabies](/playlists/pretty/37i9dQZF1DX1Ew8a92fTdm.md)
- [Music For Concentration](/playlists/pretty/37i9dQZF1DX3PFzdbtx1Us.md)
- [Music Happens Here: The Music](/playlists/pretty/4se8FxjaBGTHCTXIPoJlc0.md)
- [Music Jokes](/playlists/pretty/37i9dQZF1DXdWZwKY7xcB3.md)
- [Music Lessons with Pete Seeger](/playlists/pretty/37i9dQZF1DX1uHtdQ6c5H9.md)
- [Music for Plants](/playlists/pretty/37i9dQZF1DXclWedfNUp3z.md)
- [Music for Writing](/playlists/pretty/37i9dQZF1DX52IXnX9fyzi.md)
- [Music for a Workday](/playlists/pretty/37i9dQZF1DXcsT4WKI8W8r.md)
- [Musica per Cucinare](/playlists/pretty/37i9dQZF1DWWHqd3RfK9kX.md)
- [Musical Comedy](/playlists/pretty/37i9dQZF1DXdBtoy268thT.md)
- [Musical Therapy](/playlists/pretty/37i9dQZF1DXcCnTAt8CfNe.md)
- [Musicaliza: Las Pelotas](/playlists/pretty/37i9dQZF1DWUbj4FOlcnLy.md)
- [Musicaliza: Poncho](/playlists/pretty/37i9dQZF1DXdTi4rHtlES7.md)
- [Musicaliza: Turf](/playlists/pretty/37i9dQZF1DXcX7ZBjTCIeL.md)
- [Musique Concrète](/playlists/pretty/37i9dQZF1DXdcgmlEJyzKw.md)
- [Mustard On The Beats](/playlists/pretty/37i9dQZF1DX3HHskiFSgKu.md)
- [Muted Jazz](/playlists/pretty/37i9dQZF1DX6sFBvPsTs0j.md)
- [Mutima](/playlists/pretty/37i9dQZF1DXbmINI7suDts.md)
- [My Liberation Notes \(나의 해방일지\)](/playlists/pretty/37i9dQZF1DXd4LoztuhuiY.md)
- [My Pets](/playlists/pretty/37i9dQZF1DXafnfRcoly0r.md)
- [Mythologies](/playlists/pretty/37i9dQZF1DWVMdJ6HSmTWs.md)
- [México Lindo y Querido](/playlists/pretty/37i9dQZF1DX1dJrNuyDEgy.md)
- [México\-Tenochtitlán](/playlists/pretty/37i9dQZF1DXbEuT2QnORVM.md)
- [Música Mexicana Rising](/playlists/pretty/37i9dQZF1DX10A9MXc7csF.md)
- [Música de Fonda](/playlists/pretty/37i9dQZF1DWZI7fwD69Nfv.md)
- [Música para Leer](/playlists/pretty/37i9dQZF1DX9MDcH3vBMo0.md)
- [Música para Meditar](/playlists/pretty/37i9dQZF1DWZYo1v54bwkI.md)
- [NARUTO \-ナルト\-シリーズ](/playlists/pretty/37i9dQZF1DXbjpNmyCn1gC.md)
- [NFL Draft 2021](/playlists/pretty/37i9dQZF1DXbmafsRvwS7L.md)
- [NIGHT TRAVELER Radio](/playlists/pretty/37i9dQZF1E4kTD46HZNyiq.md)
- [NIOH \-仁王\-](/playlists/pretty/37i9dQZF1DX9o0sjdAbiLJ.md)
- [Na Zona](/playlists/pretty/37i9dQZF1DXdpF2suW27SP.md)
- [NairoBae](/playlists/pretty/37i9dQZF1DX0JohQO7Ys7N.md)
- [Namaste](/playlists/pretty/0op6xwVK9pVhcxozSQPEsJ.md)
- [Nashville Stripped](/playlists/pretty/37i9dQZF1DX2ViysbCzMHO.md)
- [Nasty Bits](/playlists/pretty/37i9dQZF1DX2VvACCrgjrt.md)
- [National Blood Week](/playlists/pretty/2y74Ha0ztRUcIYmqITh0D4.md)
- [Nature Noise](/playlists/pretty/37i9dQZF1DWUKPeBypcpcP.md)
- [Nature Sounds](/playlists/pretty/37i9dQZF1DX4PP3DA4J0N8.md)
- [Navidad Cristiana](/playlists/pretty/37i9dQZF1DX4bpoWO7sjH5.md)
- [Nelson Mandela Tribute](/playlists/pretty/7iUOaMP7iKI22rBNflBwjX.md)
- [Neo\-Psychedelic Rock](/playlists/pretty/37i9dQZF1DX7k3T9O9bscd.md)
- [Neon Lights](/playlists/pretty/37i9dQZF1DWZQ9qjpEt3QA.md)
- [Nerding Around](/playlists/pretty/37i9dQZF1DX3YGn6btf5lC.md)
- [Netflix & Nostalgia](/playlists/pretty/37i9dQZF1DWU1ArdWOMZjR.md)
- [Netflix Family Dance Party Official Playlist](/playlists/pretty/37i9dQZF1DWZUxl2WH8cGS.md)
- [Netflix Jr\. Jams Official Playlist](/playlists/pretty/37i9dQZF1DWWTJqjNA6xi6.md)
- [Netflix Kids Official Playlist](/playlists/pretty/37i9dQZF1DXcDZqCc9qf3b.md)
- [Netflix Theater Kids Official Playlist](/playlists/pretty/37i9dQZF1DWY3587pT5PVA.md)
- [Netflix and Chills](/playlists/pretty/37i9dQZF1DX3qlqnyl4p68.md)
- [Netflix's most PLAYED](/playlists/pretty/37i9dQZF1DXc88qbKkzeR0.md)
- [Nevertheless, \(알고있지만,\)](/playlists/pretty/37i9dQZF1DWZmyMvDnABPu.md)
- [New & Bold](/playlists/pretty/37i9dQZF1DX7fPhUztqfIX.md)
- [New Age Classics](/playlists/pretty/37i9dQZF1DWTWhA27mtRFK.md)
- [New Alt\-Rock Mixtape](/playlists/pretty/37i9dQZF1DXa6YOhGMjjgx.md)
- [New Alternative: Pop Rock/Indie Rock/Punk Rock](/playlists/pretty/1cSCtZ3SgAV8pcjEfeiVdw.md)
- [New Blood](/playlists/pretty/37i9dQZF1DXdiUbJTV2anj.md)
- [New Boots](/playlists/pretty/37i9dQZF1DX8S0uQvJ4gaa.md)
- [New Jams](/playlists/pretty/37i9dQZF1DWUzFXarNiofw.md)
- [New Joints](/playlists/pretty/37i9dQZF1DX4SrOBCjlfVi.md)
- [New Music Friday](/playlists/pretty/37i9dQZF1DX4JAvHpjipBk.md)
- [New Music Friday \(2\)](/playlists/pretty/37i9dQZF1DWXJfnUiYjUKT.md)
- [New Music Friday Canada](/playlists/pretty/37i9dQZF1DX5DfG8gQdC3F.md)
- [New Music Friday Christian](/playlists/pretty/37i9dQZF1DWVtgG63SDdt8.md)
- [New Music Friday Country](/playlists/pretty/37i9dQZF1DWVn8zvR5ROMB.md)
- [New Music Friday Dance](/playlists/pretty/37i9dQZF1DXa41CMuUARjl.md)
- [New Music Friday Hindi](/playlists/pretty/37i9dQZF1DWVCuOatqCW5M.md)
- [New Music Friday Indonesia](/playlists/pretty/37i9dQZF1DX8vAahjzdXGC.md)
- [New Music Friday Latin](/playlists/pretty/37i9dQZF1DX1hVRardJ30X.md)
- [New Music Friday Malaysia](/playlists/pretty/37i9dQZF1DWZMWLrh2UzwC.md)
- [New Music Friday Sweden](/playlists/pretty/37i9dQZF1DXcecv7ESbOPu.md)
- [New Music Friday Switzerland](/playlists/pretty/37i9dQZF1DX3crNbt46mRU.md)
- [New Music Friday: The Popjustice Edit](/playlists/pretty/5s7cNVeGfehrRfCatNN43P.md)
- [New Music Holiday](/playlists/pretty/37i9dQZF1DX5vMTfJy5XKE.md)
- [New Music K\-Pop](/playlists/pretty/37i9dQZF1DXe5W6diBL5N4.md)
- [New Music Weekly \| Monstercat](/playlists/pretty/4kw9kdjzx1UmyWvpysl0y2.md)
- [New Música Mexicana](/playlists/pretty/37i9dQZF1DX6Adf5JEwIPs.md)
- [New Noise](/playlists/pretty/37i9dQZF1DWT2jS7NwYPVI.md)
- [New Orleans Brass](/playlists/pretty/37i9dQZF1DXbLsFIeybF20.md)
- [New Pop Picks](/playlists/pretty/37i9dQZF1DX11otjJ7crqp.md)
- [New Pop Revolution](/playlists/pretty/37i9dQZF1DWXetIPpoiRSb.md)
- [New Singles on Spotify](/playlists/pretty/5JOn3LSfpbCrOQ7azB4S6C.md)
- [New Tejano](/playlists/pretty/37i9dQZF1DX19FiqS4SYCP.md)
- [New Traditions Country Heroes](/playlists/pretty/37i9dQZF1DX24Kh15JFQJ0.md)
- [New Wave Of British Heavy Metal](/playlists/pretty/7yza99mVQaqnk4Hqs4T3kq.md)
- [New Year's 2015](/playlists/pretty/2FjbiwWYHqEifO3VY5LYP8.md)
- [New Year's Dance Floor](/playlists/pretty/37i9dQZF1DX1ZrmwZWFpDG.md)
- [New Years 2022](/playlists/pretty/37i9dQZF1DX1YMPNuWL6BX.md)
- [New year's eve by Icona Pop](/playlists/pretty/3ukqAcaahACMyRzpkwHXew.md)
- [Next Classical](/playlists/pretty/37i9dQZF1DX6Oqe1LC2A2s.md)
- [Next From Nashville](/playlists/pretty/37i9dQZF1DX0bUGQdz5BJG.md)
- [Next Gen Singer\-Songwriters](/playlists/pretty/37i9dQZF1DXdbTERrLjYkP.md)
- [Next Level](/playlists/pretty/37i9dQZF1DWUyj0bHlj8N3.md)
- [Next Wave Neo\-Soul](/playlists/pretty/37i9dQZF1DX44dZ4p5QLf4.md)
- [Nicholas Sparks \| Songs from the Soundtracks](/playlists/pretty/1scnlLVq91NGtsA9sh0hfw.md)
- [Nicky Romero's DJ Mix](/playlists/pretty/37i9dQZF1DWXc3wUzQ4Nr1.md)
- [Night Rain](/playlists/pretty/37i9dQZF1DXbcPC6Vvqudd.md)
- [Night Rider](/playlists/pretty/37i9dQZF1DX6GJXiuZRisr.md)
- [Night Vision](/playlists/pretty/37i9dQZF1DXcw3WHPsIeEB.md)
- [Nightly Meditations](/playlists/pretty/4MLFX9OXy9ncfBlTfei9Ok.md)
- [Nightstorms](/playlists/pretty/37i9dQZF1DX4aYNO8X5RpR.md)
- [Ninja Tune \- New Releases](/playlists/pretty/1rq5TZtl1Z46v2gRAMtmmW.md)
- [Nitroboost](/playlists/pretty/37i9dQZF1DWWpHR8v2FGW4.md)
- [No Borders](/playlists/pretty/37i9dQZF1DWTZ3p56HpBDG.md)
- [No Cap](/playlists/pretty/37i9dQZF1DX0Tkc6ltcBfU.md)
- [No Princípio Era o Verso](/playlists/pretty/37i9dQZF1DWYoltNfXbIx8.md)
- [No Stress](/playlists/pretty/37i9dQZF1DXc0aozDLZsk7.md)
- [No Wahala](/playlists/pretty/37i9dQZF1DXdl8xYyG9Dm1.md)
- [No corre](/playlists/pretty/37i9dQZF1DXb8e91bM8R51.md)
- [Noche de Amigas](/playlists/pretty/37i9dQZF1DX08TJyTsQLxe.md)
- [Nocturna Cinematica](/playlists/pretty/37i9dQZF1DX2a5qdpzYkGY.md)
- [Noise](/playlists/pretty/37i9dQZF1DWSjpFTBUEAj0.md)
- [Noises After Dark](/playlists/pretty/37i9dQZF1DX4fxf4OrMhXb.md)
- [Noisia DJ Mix: Retrospective](/playlists/pretty/37i9dQZF1DXcoeTjyAlVWI.md)
- [Noisy](/playlists/pretty/37i9dQZF1DX98f0uoU1Pcs.md)
- [Nolja!](/playlists/pretty/37i9dQZF1DXdR77H5Z8MIM.md)
- [Non\-Stop Pop](/playlists/pretty/37i9dQZF1DX5dyzSiETSEk.md)
- [Nordic Folk](/playlists/pretty/37i9dQZF1DX4jUyNIMkj6N.md)
- [Norske viser](/playlists/pretty/37i9dQZF1DWXBG5kM768S1.md)
- [Norteño 2022](/playlists/pretty/37i9dQZF1DWUvLASFobxmI.md)
- [Norteño Mix](/playlists/pretty/37i9dQZF1DWZmwe0RTeFj4.md)
- [Northern Bars](/playlists/pretty/37i9dQZF1DX59ogDi1Z2XL.md)
- [Northern Spirits](/playlists/pretty/37i9dQZF1DWXhcuQw7KIeM.md)
- [Nostalgia + Rock](/playlists/pretty/37i9dQZF1DWUE25YmPdDOO.md)
- [Not Quite Classical](/playlists/pretty/37i9dQZF1DWSw8liJZcPOI.md)
- [Nouveautés de la semaine Canada](/playlists/pretty/37i9dQZF1DX9SvXmR7wQty.md)
- [Novedades Cristianas](/playlists/pretty/37i9dQZF1DXceimpD9pJou.md)
- [Novedades Indie](/playlists/pretty/37i9dQZF1DXaaU1AaHpZeu.md)
- [Novedades Música Mexicana](/playlists/pretty/37i9dQZF1DWXvaphaClKD3.md)
- [Novedades Rock](/playlists/pretty/37i9dQZF1DX1MT1Ubz4wvO.md)
- [Novedades Tropicales](/playlists/pretty/37i9dQZF1DXatk5BgNhCd7.md)
- [Novedades Viernes Latinoamérica](/playlists/pretty/37i9dQZF1DX8O2z77nfMgH.md)
- [Novedades Viernes MX](/playlists/pretty/37i9dQZF1DWWZJHBoz7SEG.md)
- [Novidades da Semana](/playlists/pretty/37i9dQZF1DX34KNiFQJNVm.md)
- [Novità Rap Italiano](/playlists/pretty/37i9dQZF1DX1OQlaot30zi.md)
- [Now & Then Corridos](/playlists/pretty/37i9dQZF1DX7OMFcrBEcP3.md)
- [Now & Then Latin Pop](/playlists/pretty/37i9dQZF1DX44lGmJ4Etu1.md)
- [Now & Then Reggaeton](/playlists/pretty/37i9dQZF1DX1ziQH0F90kL.md)
- [Now Loading](/playlists/pretty/37i9dQZF1DX8GjsySWIS1x.md)
- [Now Playing at Warner Records](/playlists/pretty/4G8YMEnXpljdSERHuKCbxD.md)
- [Noël, Noël, Noël](/playlists/pretty/37i9dQZF1DWTEyr4JYwSa7.md)
- [Nu Metal Era](/playlists/pretty/37i9dQZF1DXcfZ6moR6J0G.md)
- [Nu\-Blue](/playlists/pretty/37i9dQZF1DXb3MZdETGqKB.md)
- [Nu\-Disco](/playlists/pretty/37i9dQZF1DXattPCMpISJh.md)
- [Nu\-Funk](/playlists/pretty/37i9dQZF1DWZgauS5j6pMv.md)
- [Nu\-Smooth](/playlists/pretty/37i9dQZF1DWTEbYi1zYy0Z.md)
- [Nuevo Rock Latino](/playlists/pretty/37i9dQZF1DWYZ2zzgvJZul.md)
- [Nursery Rhymes](/playlists/pretty/37i9dQZF1DXbwjaKZ52hOt.md)
- [O Drip](/playlists/pretty/37i9dQZF1DWT22037si3kl.md)
- [O Melhor da AULAS 2021](/playlists/pretty/37i9dQZF1DX8xOUcH7zbML.md)
- [O Melhor da MPB](/playlists/pretty/37i9dQZF1DX9FSYmdU9mbT.md)
- [O Melhor da Pop Brasil 2021](/playlists/pretty/37i9dQZF1DX1lt6pbD2kAi.md)
- [O Melhor da Trapperz Brasil 2021](/playlists/pretty/37i9dQZF1DWXYWzQ8keS6x.md)
- [OBSESSED](/playlists/pretty/37i9dQZF1DX7YE2tQ4q86h.md)
- [ONE PIECE FILM RED](/playlists/pretty/37i9dQZF1DWV2mRphxMWjR.md)
- [OPM Favorites](/playlists/pretty/37i9dQZF1DX4olOMiqFeqU.md)
- [Oblique](/playlists/pretty/37i9dQZF1DWWv8B5EWK7bn.md)
- [Ocean Escapes](/playlists/pretty/37i9dQZF1DX9if5QDLdzCa.md)
- [Of Monsters and Men](/playlists/pretty/4pL8YJw0ts5YcpxEgl1LiL.md)
- [Off Broadway](/playlists/pretty/37i9dQZF1DWZs0W69wXP5G.md)
- [Office Offensive](/playlists/pretty/37i9dQZF1DXdEXmWwCHnI5.md)
- [Old School Metal](/playlists/pretty/37i9dQZF1DX2LTcinqsO68.md)
- [Old is Gold](/playlists/pretty/37i9dQZF1DWYRTlrhMB12D.md)
- [On Fleek](/playlists/pretty/6j2ZnN1A2xcWQMELm6hcdI.md)
- [On Record](/playlists/pretty/37i9dQZF1EOxZYPW3mrF6K.md)
- [On Record \(2\)](/playlists/pretty/37i9dQZF1EOyGe4011iziL.md)
- [On Record \(3\)](/playlists/pretty/37i9dQZF1EOyQ41S5A0V74.md)
- [On The Farm](/playlists/pretty/37i9dQZF1DX3fBYada3bEd.md)
- [On to Something Good](/playlists/pretty/3FfBohQXFlgFnYubzrvoq4.md)
- [Once Upon A Time](/playlists/pretty/37i9dQZF1DX6ALixlKf7N8.md)
- [Onda Indietrónica](/playlists/pretty/37i9dQZF1DX31cAExLdyNB.md)
- [One Love](/playlists/pretty/37i9dQZF1DWSiyIBdVQrkk.md)
- [One More Rep](/playlists/pretty/37i9dQZF1DX5OUjSS1OMgV.md)
- [One Perfect Day](/playlists/pretty/6jUFiT3D8f4Rt9n6UnC1aB.md)
- [One\-Hit Wonders](/playlists/pretty/37i9dQZF1DX0Ew6u9sRtTY.md)
- [Only Lovers Left Alive \- Playlist by Jim Jarmusch and Carter Logan of SQÜRL](/playlists/pretty/0YX4v2yeHtc1Dz43CYfZub.md)
- [Open Air](/playlists/pretty/37i9dQZF1DWSYVW0BVc4a3.md)
- [Opera Classics](/playlists/pretty/37i9dQZF1DWVfS4Cdd3PNf.md)
- [Opera Divas](/playlists/pretty/37i9dQZF1DXbn7xTVabEKT.md)
- [Operator](/playlists/pretty/37i9dQZF1DWVY4eLfA3XFQ.md)
- [Operazione Buonumore!](/playlists/pretty/37i9dQZF1DWTpgpHHF8zH5.md)
- [Orbit](/playlists/pretty/37i9dQZF1DX1jtMPFVTOER.md)
- [Orchestra 100: Spotify Picks](/playlists/pretty/37i9dQZF1DXddGd6mP5X2a.md)
- [Orgullo Afro\-Latino](/playlists/pretty/37i9dQZF1DWTD6JPQU0gqz.md)
- [Orgánica](/playlists/pretty/37i9dQZF1DX2pprEpa9URZ.md)
- [Oscuros 80](/playlists/pretty/37i9dQZF1DX2F8x5aFp3aj.md)
- [Oscuros 90](/playlists/pretty/37i9dQZF1DWWLHV8zWnb0a.md)
- [Otis Redding: Covered](/playlists/pretty/37i9dQZF1DWYNrnYO4HTko.md)
- [Our Blues \(우리들의 블루스\)](/playlists/pretty/37i9dQZF1DX6uViAIcMm0n.md)
- [Our Roots](/playlists/pretty/37i9dQZF1DWWTyhpyCExup.md)
- [Our Wave, Nuestro Hip\-Hop](/playlists/pretty/37i9dQZF1DX14V0XKu8GA9.md)
- [Out Now](/playlists/pretty/37i9dQZF1DX3LyU0mhfqgP.md)
- [Out The Mud](/playlists/pretty/37i9dQZF1DXaxIqwkEGFEh.md)
- [Outer Banks Official Playlist](/playlists/pretty/37i9dQZF1DX5MYZm4P2AID.md)
- [Outliers](/playlists/pretty/37i9dQZF1DX7oMO417tEZs.md)
- [Over The Moon Official Playlist](/playlists/pretty/37i9dQZF1DX1izsHDxkdWu.md)
- [Oye Pop](/playlists/pretty/37i9dQZF1DX92MLsP3K1fI.md)
- [Ozark Official Playlist](/playlists/pretty/37i9dQZF1DXbnT3D0off4y.md)
- [PARTY MODE](/playlists/pretty/37i9dQZF1DX0MXH7aN4Pxn.md)
- [PAUSE: Productivity](/playlists/pretty/37i9dQZF1DX9UPbR7BUBxr.md)
- [PEGAO](/playlists/pretty/37i9dQZF1DX1HCSfq0nSal.md)
- [PF](/playlists/pretty/6kDXxWpyGJ2f7nQWQwOMBA.md)
- [POLLEN](/playlists/pretty/37i9dQZF1DWWBHeXOYZf74.md)
- [POST](/playlists/pretty/1OhJNFdK6FhLToiHmx7abI.md)
- [POV Official Playlist](/playlists/pretty/37i9dQZF1DWYAFgmYBmOiv.md)
- [PRIDE: A League Of Her Own](/playlists/pretty/37i9dQZF1DWXomWOJXYvzn.md)
- [PRIDE: Alibi Lounge](/playlists/pretty/37i9dQZF1DX8Lxclf3Lrlg.md)
- [PRIDE: Casita Del Campo](/playlists/pretty/37i9dQZF1DX4IkhbdzRjb2.md)
- [PRIDE: Detroit](/playlists/pretty/37i9dQZF1DWV5DYisaOw29.md)
- [PRIDE: Dublin](/playlists/pretty/37i9dQZF1DWT9PJEEEAh7g.md)
- [PRIDE: Glasgow](/playlists/pretty/37i9dQZF1DX0KsORvsQKOa.md)
- [PRIDE: Homoelectric](/playlists/pretty/37i9dQZF1DWZabLDQymgK1.md)
- [PRIDE: London](/playlists/pretty/37i9dQZF1DXbzDJ9T2RGq5.md)
- [PRIDE: Los Angeles](/playlists/pretty/37i9dQZF1DWV3qUY4KDZRH.md)
- [PRIDE: Manchester](/playlists/pretty/37i9dQZF1DX5s99CZPCFK4.md)
- [PRIDE: Nashville](/playlists/pretty/37i9dQZF1DX3DgvEv65pjR.md)
- [PRIDE: New Orleans](/playlists/pretty/37i9dQZF1DXd2wjSut3Yfb.md)
- [PRIDE: Punka](/playlists/pretty/37i9dQZF1DXdePw2uBvpYa.md)
- [PRIDE: Pxssy Palace](/playlists/pretty/37i9dQZF1DWWyLJd3LCGWc.md)
- [PUBG: BATTLEGROUNDS  Thank you, 5urvivors](/playlists/pretty/37i9dQZF1DWYRYaqBHPt12.md)
- [PVNCHLNRS](/playlists/pretty/37i9dQZF1DX1X23oiQRTB5.md)
- [Pa Planchar](/playlists/pretty/37i9dQZF1DXcxx3b1DguTJ.md)
- [Pa' Pistear](/playlists/pretty/37i9dQZF1DXaKCgD4mJwbN.md)
- [Pa'l Tráfico](/playlists/pretty/37i9dQZF1DX5Cpg5RfTEZl.md)
- [Pais e Filhos](/playlists/pretty/37i9dQZF1DX43r3DlKEVpO.md)
- [Pakistani Indie 101](/playlists/pretty/37i9dQZF1DX2E5psOxzjXz.md)
- [Palestine Sounds](/playlists/pretty/37i9dQZF1DX6qjeIoR93rs.md)
- [Panty & Stocking with Garterbelt  \-パンティ＆ストッキングwithガーターベルト\-](/playlists/pretty/37i9dQZF1DWZemQW6Onupx.md)
- [Para Enamorados](/playlists/pretty/37i9dQZF1DXa1S1d38suSz.md)
- [ParadoxLive \-パラライ\-](/playlists/pretty/37i9dQZF1DWY3izH056ADq.md)
- [Park Hangs](/playlists/pretty/37i9dQZF1DWSP55jZj2ES3.md)
- [Parterre Paradise](/playlists/pretty/37i9dQZF1DXcHuf9Jbw0pv.md)
- [Party Bangers](/playlists/pretty/0Rm77xvh8qMUOJ5pvmeoHm.md)
- [Party Cove](/playlists/pretty/37i9dQZF1DXcSzYlwgjiSi.md)
- [Party Hits](/playlists/pretty/37i9dQZF1DXa2PvUpywmrr.md)
- [Party Hits 2000s](/playlists/pretty/37i9dQZF1DX7e8TjkFNKWH.md)
- [Party Hits 2010s](/playlists/pretty/37i9dQZF1DWWylYLMvjuRG.md)
- [Party Jams](/playlists/pretty/0ZWYUjUMhaq0Rammqq3qu1.md)
- [Party Jazz](/playlists/pretty/37i9dQZF1DXcrFx9OjqPuj.md)
- [Pass The Chutney](/playlists/pretty/37i9dQZF1DWWXmRdYIgq8J.md)
- [Paul Simon: Covered](/playlists/pretty/37i9dQZF1DXb9WXpUmdSWn.md)
- [Peace](/playlists/pretty/37i9dQZF1DXdCsscAsbRNz.md)
- [Peace & Love 2012](/playlists/pretty/7DcfXNVB5WpzYwCkqBaVDx.md)
- [Peace & Love 2013](/playlists/pretty/5Q9dGaDLzwijaWkI4yFfSk.md)
- [Peace Of Mind](/playlists/pretty/37i9dQZF1DXaq9P62qly90.md)
- [Peaceful Guitar](/playlists/pretty/37i9dQZF1DX0jgyAiPl8Af.md)
- [Peaceful Hideaway](/playlists/pretty/37i9dQZF1DX4fQhfyVRsHW.md)
- [Peaceful Indie Ambient](/playlists/pretty/37i9dQZF1DX0x36cwEyOTG.md)
- [Peaceful Jazz Piano](/playlists/pretty/37i9dQZF1DWY3X53lmPYk9.md)
- [Peaceful Meditation](/playlists/pretty/37i9dQZF1DWZqd5JICZI0u.md)
- [Peaceful Piano](/playlists/pretty/37i9dQZF1DX4sWSpwq3LiO.md)
- [Peaceful Pop](/playlists/pretty/37i9dQZF1DXd96qtxaNwhT.md)
- [Peaceful Retreat](/playlists/pretty/37i9dQZF1DX1T2fEo0ROQ2.md)
- [Peaceful Rhythms](/playlists/pretty/37i9dQZF1DWUZBIhSC4FGF.md)
- [Peaceful Sleep](/playlists/pretty/37i9dQZF1DX2Aln4OdV8i6.md)
- [Peaceful Summer Nights](/playlists/pretty/37i9dQZF1DWTjLfR5thd2p.md)
- [Peppa Pig Storytime](/playlists/pretty/37i9dQZF1DX112MgKHIKSG.md)
- [Peppeh](/playlists/pretty/37i9dQZF1DX6036iaZ2MYP.md)
- [Pepplåtar till träningspasset](/playlists/pretty/37i9dQZF1DX7CB1M7sBt21.md)
- [Perfect Concentration](/playlists/pretty/37i9dQZF1DWSluGMsH1R9r.md)
- [Perrea en tu Cuarto](/playlists/pretty/37i9dQZF1DWUvCktKHpf5G.md)
- [Perrear y Llorar](/playlists/pretty/37i9dQZF1DWXYWuNDAdJsw.md)
- [Perreo City](/playlists/pretty/37i9dQZF1DWUlCmB8llCTB.md)
- [Perreo Viral](/playlists/pretty/37i9dQZF1DX8vTpEmKeKvc.md)
- [Perreo Workout](/playlists/pretty/37i9dQZF1DX9ZKyQHcEFXZ.md)
- [Perreo a Poca Luz](/playlists/pretty/37i9dQZF1DX0SZWVrotKn1.md)
- [Philly Soul](/playlists/pretty/37i9dQZF1DWYmZJhCzQOPD.md)
- [Piano Ballads](/playlists/pretty/37i9dQZF1DWVIzZt2GAU4X.md)
- [Piano Bar Classics](/playlists/pretty/37i9dQZF1DWUh7dobVCfAj.md)
- [Piano Comfort](/playlists/pretty/37i9dQZF1DWVEerxa93vDU.md)
- [Piano House](/playlists/pretty/37i9dQZF1DX8yrIP4lAga8.md)
- [Piano Massage](/playlists/pretty/37i9dQZF1DX1ifjh7WmfEU.md)
- [Piano Transcriptions](/playlists/pretty/37i9dQZF1DX1uiBEEB5wRG.md)
- [Piano Variations](/playlists/pretty/37i9dQZF1DWVlfUhqkKnT8.md)
- [Piano Yoga](/playlists/pretty/37i9dQZF1DX7R7Bjxm48PR.md)
- [Piano de Fondo](/playlists/pretty/37i9dQZF1DXa8Xx03D65RT.md)
- [Piano for Healing](/playlists/pretty/37i9dQZF1DX65caF1CvtIN.md)
- [Piano for Meditation](/playlists/pretty/37i9dQZF1DXb7eLtQI7KhP.md)
- [Piano in the Background](/playlists/pretty/37i9dQZF1DX7K31D69s4M1.md)
- [Piano to the World](/playlists/pretty/37i9dQZF1DWSMjACnTZm0X.md)
- [Pilates Acústico](/playlists/pretty/37i9dQZF1DWVroJq360LRh.md)
- [Pilates Lounge](/playlists/pretty/37i9dQZF1DX3PKEfo9uS5R.md)
- [Pink Floyd: Start Here](/playlists/pretty/4SJ51ZOUgnrv5GjY1GCZAL.md)
- [Pink Noise](/playlists/pretty/37i9dQZF1DWZhzMp90Opmn.md)
- [Pioneers of Electronic Music](/playlists/pretty/37i9dQZF1DWYnq334ufGOA.md)
- [Pisteando con Panchito Arredondo](/playlists/pretty/37i9dQZF1DX44QTuU3AFB6.md)
- [Pixel Garden](/playlists/pretty/37i9dQZF1DX3FJKV5EZtau.md)
- [Planetary Soul](/playlists/pretty/37i9dQZF1DWWvTQHhm7Jtf.md)
- [Plant Care](/playlists/pretty/37i9dQZF1DXd4CYaMhciae.md)
- [Plants & Chill](/playlists/pretty/37i9dQZF1DWVEcEOoB3Uwy.md)
- [Plugged In](/playlists/pretty/4hQEzUCJ0DCAgeDhWLUZhS.md)
- [Pluggfokus](/playlists/pretty/37i9dQZF1DX6DtDmlyZ4X7.md)
- [Plus Ultra](/playlists/pretty/37i9dQZF1DX14EWeH2Pwf3.md)
- [Pocket](/playlists/pretty/37i9dQZF1DX8PhKVl4Zniv.md)
- [Poems for Spring](/playlists/pretty/37i9dQZF1DX451eXIMllLB.md)
- [Poetry: In Their Own Voices](/playlists/pretty/37i9dQZF1DWWfysDOTP12D.md)
- [Political Punks](/playlists/pretty/37i9dQZF1DX1zG0qRnyaQ3.md)
- [Polly Wants to Sing\-Along](/playlists/pretty/37i9dQZF1DX9qyeQZ6gM81.md)
- [Pool Party](/playlists/pretty/37i9dQZF1DX4gOolUyeDaQ.md)
- [Poolside Disco](/playlists/pretty/37i9dQZF1DWSvfPiFfb8Mi.md)
- [Poolside Lounge](/playlists/pretty/37i9dQZF1DWZSdcRHMl2tT.md)
- [Pop 4 Kids](/playlists/pretty/37i9dQZF1DWZhxU4AiByxO.md)
- [Pop Acústico](/playlists/pretty/37i9dQZF1DX2d27idkCNWu.md)
- [Pop All Day](/playlists/pretty/37i9dQZF1DXarRysLJmuju.md)
- [Pop Brasil](/playlists/pretty/37i9dQZF1DWVLcZxJO5zyf.md)
- [Pop Chillout](/playlists/pretty/37i9dQZF1DXbIGqYf7WDxP.md)
- [Pop Covers](/playlists/pretty/37i9dQZF1DX2i24iHGhL24.md)
- [Pop Drive](/playlists/pretty/37i9dQZF1DWSThc8QnzIme.md)
- [Pop Frequency](/playlists/pretty/37i9dQZF1DX1UnoGuyf388.md)
- [Pop Goes Classical](/playlists/pretty/37i9dQZF1DWUPafHP1BJw1.md)
- [Pop Latino: Los 2000](/playlists/pretty/37i9dQZF1DX3jmuw06ffmz.md)
- [Pop Latino: Los 80](/playlists/pretty/37i9dQZF1DX64iuGKXnGvl.md)
- [Pop Latino: Los 90](/playlists/pretty/37i9dQZF1DWWlpl5PNGfZ9.md)
- [Pop Leve](/playlists/pretty/37i9dQZF1DX8mWv7JDZ0Ht.md)
- [Pop Live](/playlists/pretty/37i9dQZF1DWWnzeQw5ZMfu.md)
- [Pop Party](/playlists/pretty/37i9dQZF1DWXti3N4Wp5xy.md)
- [Pop Punk Powerhouses](/playlists/pretty/37i9dQZF1DXa9wYJr1oMFq.md)
- [Pop Punk's Not Dead](/playlists/pretty/37i9dQZF1DX1ewVhAJ17m4.md)
- [Pop Remix](/playlists/pretty/37i9dQZF1DXcZDD7cfEKhW.md)
- [Pop Right Now](/playlists/pretty/37i9dQZF1DWVlLVXKTOAYa.md)
- [Pop Rising](/playlists/pretty/37i9dQZF1DWUa8ZRTfalHk.md)
- [Pop Rock](/playlists/pretty/37i9dQZF1DXatFAWyNT5ad.md)
- [Pop Rock Party Time](/playlists/pretty/37i9dQZF1DXcvLz8zARcib.md)
- [Pop Rock Run](/playlists/pretty/37i9dQZF1DWV3VLITCZusq.md)
- [Pop Sauce](/playlists/pretty/37i9dQZF1DXaPCIWxzZwR1.md)
- [Pop Songs Based on Classical Music](/playlists/pretty/37i9dQZF1DWYtpM7d4h5Xa.md)
- [Pop Study](/playlists/pretty/37i9dQZF1DWSoyxGghlqv5.md)
- [Pop Up](/playlists/pretty/37i9dQZF1DX6aTaZa0K6VA.md)
- [Pop Up presents: Best of 2021](/playlists/pretty/37i9dQZF1DX7pbeEjdF4tQ.md)
- [Pop for Life](/playlists/pretty/37i9dQZF1DX03azgB68xev.md)
- [Pop para Niños](/playlists/pretty/37i9dQZF1DWXGjZNum410i.md)
- [PopCo](/playlists/pretty/37i9dQZF1DXadasIcsfbqh.md)
- [Popaganda 2012](/playlists/pretty/0mJut6QO3dUUAOJlBPujT1.md)
- [Popetón](/playlists/pretty/37i9dQZF1DWTPDzakLfYZr.md)
- [Positive Vibes](/playlists/pretty/37i9dQZF1DWUAZoWydCivZ.md)
- [Post Bop Essentials](/playlists/pretty/37i9dQZF1DX0wgMWPqc1oG.md)
- [Post Punk 2k](/playlists/pretty/37i9dQZF1DWYwMzXER4RFF.md)
- [Post\-Grunge Appreciation Society](/playlists/pretty/37i9dQZF1DWVwr24yj95lH.md)
- [Post/Trad](/playlists/pretty/37i9dQZF1DWT74qMgXYpy2.md)
- [Power Ballads](/playlists/pretty/44XJR1i3Vl2B3acOEYwinE.md)
- [Power Gaming](/playlists/pretty/37i9dQZF1DX6taq20FeuKj.md)
- [Power Hour](/playlists/pretty/37i9dQZF1DX32NsLKyzScr.md)
- [Power Hour \(2\)](/playlists/pretty/7wiCMbRM2F6PQYGLwnJ7GJ.md)
- [Power Pop](/playlists/pretty/37i9dQZF1DX5W4wuxak2hE.md)
- [Power To The People](/playlists/pretty/37i9dQZF1DXbWHkfjljXoE.md)
- [Power Training](/playlists/pretty/37i9dQZF1DX8v8B2bJN6zQ.md)
- [Power Workout](/playlists/pretty/37i9dQZF1DWUVpAXiEPK8P.md)
- [Powerwalk!](/playlists/pretty/37i9dQZF1DX9BXb6GsGCLl.md)
- [Premios Tu Música Urbano](/playlists/pretty/37i9dQZF1DX5qGup0t1SY0.md)
- [Present Moment](/playlists/pretty/37i9dQZF1DXcvykn1vm7iP.md)
- [Presença Hip Hop](/playlists/pretty/37i9dQZF1DX0jAiO33gxlI.md)
- [Pressure](/playlists/pretty/37i9dQZF1DWZwCeILEyQAy.md)
- [Pride Italia](/playlists/pretty/37i9dQZF1DXbj3m6LiQbmy.md)
- [Pride Party](/playlists/pretty/37i9dQZF1DX59HcpGmPXYR.md)
- [Pride Polska](/playlists/pretty/37i9dQZF1DWUN8lkHHQsn9.md)
- [Primavera](/playlists/pretty/37i9dQZF1DX5tzVwq5dYaq.md)
- [Prog Jazz](/playlists/pretty/37i9dQZF1DX9NNVWdU83m6.md)
- [Prog Rock](/playlists/pretty/37i9dQZF1DWXgtgITTKvYl.md)
- [Prog Rock Monsters](/playlists/pretty/37i9dQZF1DX0uqkwkR49kK.md)
- [Progressive House Festival Hits 2022 ⭐️ \| Starlight](/playlists/pretty/1y24lMaeLch6jPtLCqHgJz.md)
- [Progressive Metal](/playlists/pretty/37i9dQZF1DX5wgKYQVRARv.md)
- [Prom Night](/playlists/pretty/37i9dQZF1DXe9YJxYnhkr3.md)
- [Psych & Groove](/playlists/pretty/37i9dQZF1DX2FJ4E5eMYdk.md)
- [Psychedelic Rock](/playlists/pretty/37i9dQZF1DWSDoVybeQisg.md)
- [Psytrance Supernova](/playlists/pretty/37i9dQZF1DWXWbLEOaHnU3.md)
- [Pub Anthems](/playlists/pretty/37i9dQZF1DX5I05jXm1F2M.md)
- [Pueblos Indígenas: Legado Musical](/playlists/pretty/37i9dQZF1DX3nwrgSzvSMp.md)
- [Puella Magi Madoka Magica \-魔法少女まどか☆マギカ\-](/playlists/pretty/37i9dQZF1DX0g7dAq6cAPA.md)
- [Pulando da Cama](/playlists/pretty/37i9dQZF1DXa4ss91ghMY4.md)
- [Pulizie di Casa](/playlists/pretty/37i9dQZF1DWZIEvmu6sbiG.md)
- [Pump it Up](/playlists/pretty/37i9dQZF1DX3RR19vHNnb8.md)
- [Pumped Pop](/playlists/pretty/37i9dQZF1DX5gQonLbZD9s.md)
- [Punjabi 101](/playlists/pretty/37i9dQZF1DX5cZuAHLNjGz.md)
- [Punjabi Boliyan](/playlists/pretty/37i9dQZF1DWYvgG8eEwPaP.md)
- [Punjabi Pyar](/playlists/pretty/37i9dQZF1DWSKoG4oVafMt.md)
- [Punk Blues](/playlists/pretty/37i9dQZF1DWYV2xtYQARbp.md)
- [Punk Christmas](/playlists/pretty/37i9dQZF1DX3N4mXY2MuSz.md)
- [Punk Essentials](/playlists/pretty/37i9dQZF1DXd6tJtr4qeot.md)
- [Punk Japan](/playlists/pretty/37i9dQZF1DX7uwh9GrVLfz.md)
- [Punk Rock Workout](/playlists/pretty/37i9dQZF1DX0BZrbvIqxCd.md)
- [Punk Unplugged](/playlists/pretty/37i9dQZF1DXcBkxDaAQX0a.md)
- [Punkcake](/playlists/pretty/2Ky26QAfAYo2Zdlo8MqcdH.md)
- [Punta](/playlists/pretty/37i9dQZF1DWTOCFhDS6muW.md)
- [Punto Tropical](/playlists/pretty/37i9dQZF1DWZ1FUX6sM67g.md)
- [Pura Salsa](/playlists/pretty/37i9dQZF1DX1UHxedJfnRM.md)
- [Pure Pop Punk](/playlists/pretty/37i9dQZF1DXasneILDRM7B.md)
- [Pure Rock & Roll](/playlists/pretty/37i9dQZF1DWWRktbhJiuqL.md)
- [Pure Sunshine](/playlists/pretty/37i9dQZF1DXaSYtampkg5n.md)
- [Puro Perreo](/playlists/pretty/37i9dQZF1DWX5ZOsG2Ogi1.md)
- [Putte i Parken 2013](/playlists/pretty/3JqYduMX06DjhsJRBG4kN5.md)
- [Putte i parken 2012](/playlists/pretty/5eRHTcvWyEU0MEzNOiR2j1.md)
- [Pátria Rock](/playlists/pretty/37i9dQZF1DX2nd8BSnFnzT.md)
- [Quebradita](/playlists/pretty/37i9dQZF1DX8VyhWnVrn9d.md)
- [Queen](/playlists/pretty/37i9dQZF1DWSIO2QWRavWZ.md)
- [Queendom2 \(퀸덤2\)](/playlists/pretty/37i9dQZF1DWSluHnSzEAUI.md)
- [Queens of Disco](/playlists/pretty/37i9dQZF1DXdJyxIBq7Xdy.md)
- [Queens of the Blues](/playlists/pretty/37i9dQZF1DXbxvVclJxhEJ.md)
- [Queer As Folk](/playlists/pretty/37i9dQZF1DX5TMFhaZc9ov.md)
- [Queer Composers](/playlists/pretty/37i9dQZF1DX75gMjYMWCsk.md)
- [Queer Prom](/playlists/pretty/37i9dQZF1DX0g1UNPczC9q.md)
- [Queer Spaces](/playlists/pretty/37i9dQZF1DX3cRqTUHKctO.md)
- [Queercore](/playlists/pretty/37i9dQZF1DXa3ll4rE48Mv.md)
- [Quiet Hours](/playlists/pretty/37i9dQZF1DWVTkoPB1rnwz.md)
- [Quiet Moment](/playlists/pretty/37i9dQZF1DX7KrTMVQnM02.md)
- [Quintino's DJ Mix](/playlists/pretty/37i9dQZF1DXcLtS1nYvdS4.md)
- [Qué Chimba](/playlists/pretty/37i9dQZF1DX5UTavgI6ivn.md)
- [Qué Sad!](/playlists/pretty/37i9dQZF1DWT0qByOJYmmJ.md)
- [R&B Favourites](/playlists/pretty/37i9dQZF1DX7FY5ma9162x.md)
- [R&B Latino](/playlists/pretty/37i9dQZF1DXdqxfWN3raU3.md)
- [R&B Matters: The Playlist](/playlists/pretty/37i9dQZF1DWZKEBMCmjsXt.md)
- [R&B Right Now](/playlists/pretty/37i9dQZF1DX2WkIBRaChxW.md)
- [RADAR ARABIA](/playlists/pretty/37i9dQZF1DWSkSBnkXgB7J.md)
- [RADAR AU & NZ](/playlists/pretty/37i9dQZF1DWYIJ3HxqIxIJ.md)
- [RADAR BNLX](/playlists/pretty/37i9dQZF1DXaxwXKCsImRe.md)
- [RADAR Brasil](/playlists/pretty/37i9dQZF1DWTVE8ZCcLQ5Q.md)
- [RADAR Canada](/playlists/pretty/37i9dQZF1DX5WmphwNfZfk.md)
- [RADAR Centro & Caribe](/playlists/pretty/37i9dQZF1DWWyiRTvabqLE.md)
- [RADAR Country](/playlists/pretty/37i9dQZF1DX11Mx8sjx0nW.md)
- [RADAR FRANCE](/playlists/pretty/37i9dQZF1DWWNlI0CRgWup.md)
- [RADAR GSA](/playlists/pretty/37i9dQZF1DX3Vl51vsat7a.md)
- [RADAR Global](/playlists/pretty/37i9dQZF1DWTU63finroJM.md)
- [RADAR HK](/playlists/pretty/37i9dQZF1DX1OL0nzXOfhW.md)
- [RADAR Indonesia](/playlists/pretty/37i9dQZF1DWYxUz0Ouugmb.md)
- [RADAR Korea](/playlists/pretty/37i9dQZF1DX9IALXsyt8zk.md)
- [RADAR México](/playlists/pretty/37i9dQZF1DXbpJNWtkXDpL.md)
- [RADAR Philippines](/playlists/pretty/37i9dQZF1DWVp4cWdnm5ws.md)
- [RADAR US](/playlists/pretty/37i9dQZF1DWY0DyDKedRYY.md)
- [RADAR 新勢力](/playlists/pretty/37i9dQZF1DX2P3E6UOxZyt.md)
- [RADAR: Early Noise](/playlists/pretty/37i9dQZF1DX4OR8pnFkwhR.md)
- [RADAR: First Listen](/playlists/pretty/37i9dQZF1DX9be6QR3XeJp.md)
- [RAPública de Colombia](/playlists/pretty/37i9dQZF1DX2vnBrKB7FwM.md)
- [REM sleep](/playlists/pretty/37i9dQZF1DX3TRdW1ekdvM.md)
- [RIP James Gandolfini](/playlists/pretty/3l6cfhKgkSNxYydKiD9o4G.md)
- [ROCK 'N' RUN](/playlists/pretty/37i9dQZF1DWXx3Txis2L4x.md)
- [ROY G BIV](/playlists/pretty/37i9dQZF1DX6PiP84oEbKp.md)
- [Raaja Rules 90s](/playlists/pretty/37i9dQZF1DX7k1b9eIxnmB.md)
- [Raaja Rules!](/playlists/pretty/37i9dQZF1DX7iLHyU2xMyJ.md)
- [Radar Africa](/playlists/pretty/37i9dQZF1DWYc8Z858eGwP.md)
- [Radar Al Sur](/playlists/pretty/37i9dQZF1DX6nghHfwjiMg.md)
- [Radar Andinos](/playlists/pretty/37i9dQZF1DXbzFWXFlsp56.md)
- [Radar España](/playlists/pretty/37i9dQZF1DX2KWq7Xwva8j.md)
- [Radar India](/playlists/pretty/37i9dQZF1DWTAtTdFMiJYK.md)
- [Radar US Latin](/playlists/pretty/37i9dQZF1DXbSwbJpH6lAw.md)
- [Radiante](/playlists/pretty/37i9dQZF1DX9c9fpd0lxJ5.md)
- [Radici Hip Hop](/playlists/pretty/37i9dQZF1DWZMRmURm95Lk.md)
- [Radio Corazón](/playlists/pretty/37i9dQZF1DWSF59R74xaFB.md)
- [Radio Crime Dramas](/playlists/pretty/37i9dQZF1DXddisSfoYY5n.md)
- [Radio Latina](/playlists/pretty/37i9dQZF1DWUPj9VuIP3Gq.md)
- [Radio Rock](/playlists/pretty/37i9dQZF1DX1te6miphixI.md)
- [Raga Lounge](/playlists/pretty/37i9dQZF1DWXjoRs40XkRL.md)
- [Raga Rocks](/playlists/pretty/37i9dQZF1DX8pmtpgsUtwS.md)
- [Ragtime Piano](/playlists/pretty/37i9dQZF1DX0Qrm1eJnnVv.md)
- [Rahman Ruling 90s](/playlists/pretty/37i9dQZF1DX4Cmr6Ex5w24.md)
- [Rai Hits](/playlists/pretty/37i9dQZF1DXb7WmotStdsj.md)
- [Rain Sounds](/playlists/pretty/37i9dQZF1DX8ymr6UES7vc.md)
- [Rainy Day](/playlists/pretty/37i9dQZF1DXbvABJXBIyiY.md)
- [Rainy Day Blues](/playlists/pretty/37i9dQZF1DXakNfvv7h2fY.md)
- [Rainy Day Jazz](/playlists/pretty/37i9dQZF1DWYxwmBaMqxsl.md)
- [Raised on Country](/playlists/pretty/37i9dQZF1DWVFzWmxRnRJH.md)
- [Raised on Dance](/playlists/pretty/37i9dQZF1DX2xvXEv9NL2y.md)
- [Raised on Hip Hop](/playlists/pretty/37i9dQZF1DX3YSNrkBY3IB.md)
- [Raised on Indie](/playlists/pretty/37i9dQZF1DXd2whofuA2Kb.md)
- [Raised on Latin](/playlists/pretty/37i9dQZF1DX2EFHyiwqtE0.md)
- [Raised on Metal](/playlists/pretty/37i9dQZF1DWSEar7YuhxIt.md)
- [Raised on Motown](/playlists/pretty/37i9dQZF1DXbhIBJrK4xNB.md)
- [Raised on Pop](/playlists/pretty/37i9dQZF1DWWBZYt7rDYK4.md)
- [Raised on Punk](/playlists/pretty/37i9dQZF1DWXFLaJaASt2D.md)
- [Raised on Reggae](/playlists/pretty/37i9dQZF1DX8f4tKhI2axk.md)
- [Raised on Rock](/playlists/pretty/37i9dQZF1DX525kA8Naqsg.md)
- [Rancheras, Despecho & Licor](/playlists/pretty/37i9dQZF1DXa5GdOk4Dsb5.md)
- [Rap Acústico](/playlists/pretty/37i9dQZF1DWTf69iQOGkD2.md)
- [Rap Chileno](/playlists/pretty/37i9dQZF1DXdxFkXW4j8RX.md)
- [Rap Español](/playlists/pretty/37i9dQZF1DXcd2Vmhfon1w.md)
- [Rap Geek](/playlists/pretty/37i9dQZF1DX8dQ571UG10R.md)
- [Rap Internazionale](/playlists/pretty/37i9dQZF1DWXRPjCBAuFj3.md)
- [Rap Motivazionale](/playlists/pretty/37i9dQZF1DWYBofUhpgE88.md)
- [Rap Tuga Hits](/playlists/pretty/37i9dQZF1DX5nVsobG0zBp.md)
- [Rap Tuga: O melhor de 2021](/playlists/pretty/37i9dQZF1DXcyEXGEtvzUv.md)
- [Rap UK](/playlists/pretty/37i9dQZF1DX6PKX5dyBKeq.md)
- [Rap Workout](/playlists/pretty/37i9dQZF1DX76t638V6CA8.md)
- [Rap en Español](/playlists/pretty/37i9dQZF1DX40O80BIPklU.md)
- [Rap québ](/playlists/pretty/37i9dQZF1DWTZeTXqKTge4.md)
- [RapCaviar](/playlists/pretty/37i9dQZF1DX0XUsuxWHRQd.md)
- [RapCaviar Presents..\. Best Hip\-Hop Songs of 2021](/playlists/pretty/37i9dQZF1DWZFV9Asvj1J9.md)
- [Raptopia](/playlists/pretty/37i9dQZF1DWUQru3jd69v5.md)
- [Rare Soul Grooves](/playlists/pretty/37i9dQZF1DXc9NQwLalzEM.md)
- [Rave Classics](/playlists/pretty/37i9dQZF1DX8cbjeZ4UYIG.md)
- [Raw & Uncut](/playlists/pretty/37i9dQZF1DX3XgesiUXnsq.md)
- [Raw Expression](/playlists/pretty/3yUO32lGCEnAfFGORSEsy4.md)
- [Read & Unwind](/playlists/pretty/37i9dQZF1DXcY4tn4nPCV1.md)
- [Reading Adventure](/playlists/pretty/37i9dQZF1DWUWUfWSLE7dn.md)
- [Reading Chill Out](/playlists/pretty/37i9dQZF1DWXrDQedVqw6q.md)
- [Reading Soundtrack](/playlists/pretty/37i9dQZF1DWZwtERXCS82H.md)
- [Readings from Dylan Thomas](/playlists/pretty/37i9dQZF1DWSTOUZR8UoNY.md)
- [Ready for the Day](/playlists/pretty/37i9dQZF1DX6Rl8uES4jYu.md)
- [Rebecca & Fiona DJ Mix: Diamond Droppin Rave Spring Mix](/playlists/pretty/37i9dQZF1DXa4bGuyvrKl5.md)
- [Red Bull Batalla](/playlists/pretty/37i9dQZF1DXe4DdBWbLDpG.md)
- [Red Vox Recent Favorites](/playlists/pretty/5l8NqdrXc4JHxSu1arjWgC.md)
- [Red, White, & Blue](/playlists/pretty/3kt5kS8Xqjfh8olOS24HX4.md)
- [Redeemed](/playlists/pretty/37i9dQZF1DX9lAYMw7KoAO.md)
- [Reflection](/playlists/pretty/37i9dQZF1DWSZXCWJ6tnaz.md)
- [Refractions](/playlists/pretty/37i9dQZF1DWZ7mSWCFIT7v.md)
- [Reggae Al Sur](/playlists/pretty/37i9dQZF1DX20S3TU4dlyR.md)
- [Reggae BBQ](/playlists/pretty/37i9dQZF1DX44AF5xq04Oh.md)
- [Reggae Classics](/playlists/pretty/37i9dQZF1DXbSbnqxMTGx9.md)
- [Reggae Infusions](/playlists/pretty/37i9dQZF1DWSkkUxEhrBdF.md)
- [Reggae Luv](/playlists/pretty/37i9dQZF1DX3KVUA2wMxEf.md)
- [Reggae Party](/playlists/pretty/37i9dQZF1DXa8n42306eJB.md)
- [Reggae en Español](/playlists/pretty/37i9dQZF1DWVYs6zNzJ0ci.md)
- [Reggaeton Classics](/playlists/pretty/37i9dQZF1DX8SfyqmSFDwe.md)
- [Reggaeton: El Inicio](/playlists/pretty/37i9dQZF1DX0oAhAessKvf.md)
- [Reggaetón Argentino](/playlists/pretty/37i9dQZF1DXdoVgSepr1uh.md)
- [Reggaetón Chakalón](/playlists/pretty/37i9dQZF1DWUdsUUs0FzN4.md)
- [Reggaetón Chileno](/playlists/pretty/37i9dQZF1DX5hIsIIk6w1F.md)
- [Reggaetón Rewind](/playlists/pretty/37i9dQZF1DXco4ODkIraMD.md)
- [Reggaetón Viejito](/playlists/pretty/37i9dQZF1DWWU6Rfto8Ppm.md)
- [Reggaetón para Tu Ex](/playlists/pretty/37i9dQZF1DWT3qht9CfnL3.md)
- [Reiki Healing](/playlists/pretty/37i9dQZF1DWWvgjYSMUA0Z.md)
- [Reinas de la Canción Española](/playlists/pretty/37i9dQZF1DWVH0qr6kxbHI.md)
- [Reinas del Mariachi](/playlists/pretty/37i9dQZF1DXdC7eRcOJUCw.md)
- [Rejoice for Summer](/playlists/pretty/37i9dQZF1DWUzcqvqvxPQA.md)
- [Relax & Unwind](/playlists/pretty/37i9dQZF1DWU0ScTcjJBdj.md)
- [Relax Brunch](/playlists/pretty/37i9dQZF1DWVqFWv4EZA70.md)
- [Relaxing Bach](/playlists/pretty/37i9dQZF1DWU1JctQodQRj.md)
- [Relaxing Beethoven](/playlists/pretty/37i9dQZF1DXdTVW77weWfh.md)
- [Relaxing Blues Piano](/playlists/pretty/37i9dQZF1DWTK9gSXKWMMx.md)
- [Relaxing Chopin](/playlists/pretty/37i9dQZF1DWZYpU3rwrcAz.md)
- [Relaxing Christmas](/playlists/pretty/37i9dQZF1DX6pJ4E78jhBi.md)
- [Relaxing Classical Guitar](/playlists/pretty/37i9dQZF1DWXBq4mDDFnfA.md)
- [Relaxing Guitar Covers](/playlists/pretty/37i9dQZF1DWXRIPBpg9WV1.md)
- [Relaxing Jazz Piano](/playlists/pretty/37i9dQZF1DWWfxnl2EyBbd.md)
- [Relaxing Massage](/playlists/pretty/37i9dQZF1DXebxttQCq0zA.md)
- [Relaxing Mozart](/playlists/pretty/37i9dQZF1DX8qVlPzYQL5d.md)
- [Relaxing Piano Covers](/playlists/pretty/37i9dQZF1DWSADWNdZfn11.md)
- [Relaxing Reading](/playlists/pretty/37i9dQZF1DX3DZBe6wPMXo.md)
- [Relaxing Renaissance](/playlists/pretty/37i9dQZF1DX0CM2xT3aAkN.md)
- [Relaxing Spanish Guitar](/playlists/pretty/37i9dQZF1DX6BbeVFYBeZs.md)
- [Relaxing Vocal Jazz](/playlists/pretty/37i9dQZF1DX08n7V52Ynyb.md)
- [Remembering 2Pac](/playlists/pretty/6vpXSVefNo73POjhwyiWmu.md)
- [Remix Hits](/playlists/pretty/37i9dQZF1DX7D8GQsPKGvy.md)
- [Remixes Urbanos](/playlists/pretty/37i9dQZF1DWXbMxJaAyCq1.md)
- [Ren hygge](/playlists/pretty/37i9dQZF1DX6IdqACeHRY7.md)
- [Renegade Folk](/playlists/pretty/37i9dQZF1DWWHw0yK8z3Pm.md)
- [República Dembow](/playlists/pretty/37i9dQZF1DWU3iv5mH3inV.md)
- [Resenha na Praia](/playlists/pretty/37i9dQZF1DWXvzyniz2fv4.md)
- [Rest & Relaxation](/playlists/pretty/1uIp2WHCf6ODHxHRPmjWG5.md)
- [Retro Gaming](/playlists/pretty/37i9dQZF1DWYnY33e7En9e.md)
- [Retro Pop](/playlists/pretty/37i9dQZF1DXcTieYAg7jq1.md)
- [Retro Prom](/playlists/pretty/37i9dQZF1DX2Ft2Y1RF4jG.md)
- [Retro Running](/playlists/pretty/37i9dQZF1DX4osfY3zybD2.md)
- [Retro Soul](/playlists/pretty/37i9dQZF1DWT7oUl2XAhgF.md)
- [Retrowave // Outrun](/playlists/pretty/37i9dQZF1DXdLEN7aqioXM.md)
- [Return to the Rave](/playlists/pretty/37i9dQZF1DWXTfdxNcD5sS.md)
- [Rhythm & Praise](/playlists/pretty/37i9dQZF1DX35T8tss1Gxt.md)
- [Ridley Jones Official Playlist](/playlists/pretty/37i9dQZF1DWXdbjTtdRf2g.md)
- [Rima Avançada](/playlists/pretty/37i9dQZF1DX0EaLv8xHmij.md)
- [Rimas Pa'l Cora](/playlists/pretty/37i9dQZF1DXbMnDeC4VENb.md)
- [Rimas y Perreo](/playlists/pretty/37i9dQZF1DX5DeyeaDuJmw.md)
- [Riot Grrrl](/playlists/pretty/37i9dQZF1DXadlZCyb9AB3.md)
- [Ripple Effect](/playlists/pretty/37i9dQZF1DX5qjSia2PLFP.md)
- [Ripple Effect:  Midwest](/playlists/pretty/37i9dQZF1DX9Xlyj8WKw1E.md)
- [Ripple Effect: Bay to LA](/playlists/pretty/37i9dQZF1DX7q1woBjoKv7.md)
- [Ripple Effect: DMV](/playlists/pretty/37i9dQZF1DWWNlm4v5v5Qw.md)
- [Ripple Effect: New England](/playlists/pretty/37i9dQZF1DX37T6O68lz4o.md)
- [Ripple Effect: PNW](/playlists/pretty/37i9dQZF1DWVKZ0Z9y3Qew.md)
- [Ripple Effect: Texas](/playlists/pretty/37i9dQZF1DX4ve1H90mNWg.md)
- [Rise](/playlists/pretty/37i9dQZF1DWUOhRIDwDB7M.md)
- [Rise Up](/playlists/pretty/37i9dQZF1DX0KQrbsfHQvG.md)
- [Rise of the Underdog](/playlists/pretty/37i9dQZF1DX0IbLOJtWiun.md)
- [Road Trip Sing\-Along Songs](/playlists/pretty/68q3IjJ17gHA7r9NdijiUU.md)
- [Road Trip To Tokyo](/playlists/pretty/37i9dQZF1DWV8IND7NkP2W.md)
- [Road to Palomino](/playlists/pretty/37i9dQZF1DX0ltG5GWVFIX.md)
- [Roadrunner Records: Slaylist](/playlists/pretty/79vrB5Ei5Gk7BctdZesJJA.md)
- [Robo\-Funk](/playlists/pretty/37i9dQZF1DWUcRrhkfhG22.md)
- [Rocanlovers](/playlists/pretty/37i9dQZF1DX7yaR5d7FkNX.md)
- [Rock & Roll Party](/playlists/pretty/37i9dQZF1DWYE5MI4mMuii.md)
- [Rock & Roll en Español](/playlists/pretty/37i9dQZF1DWZRAOlygQnpT.md)
- [Rock & Roots](/playlists/pretty/7pD7pMFxcq8agMXqLQCggM.md)
- [Rock Ballads](/playlists/pretty/37i9dQZF1DWXs1L3AC0Xio.md)
- [Rock Barrial](/playlists/pretty/37i9dQZF1DXb9ynY7YLqCC.md)
- [Rock Chileno](/playlists/pretty/37i9dQZF1DX3TKWnpd3vOb.md)
- [Rock Christmas](/playlists/pretty/37i9dQZF1DXaf9K2UnDhgp.md)
- [Rock Classics](/playlists/pretty/37i9dQZF1DWXRqgorJj26U.md)
- [Rock Colombia](/playlists/pretty/37i9dQZF1DX5inPtxPHiuS.md)
- [Rock Covers](/playlists/pretty/37i9dQZF1DX2S9rTKTX6JP.md)
- [Rock Español](/playlists/pretty/37i9dQZF1DWUNNEvaozpW5.md)
- [Rock Frequency](/playlists/pretty/37i9dQZF1DX14rbJEM3cke.md)
- [Rock Hard](/playlists/pretty/37i9dQZF1DWWJOmJ7nRx0C.md)
- [Rock Icons](/playlists/pretty/5jNrphFqELVsvxDR3ZwSAx.md)
- [Rock Is Universal](/playlists/pretty/4xdNq2nL8N6vOtFnWrznjY.md)
- [Rock Italia](/playlists/pretty/37i9dQZF1DWViUlcvfltyZ.md)
- [Rock Love Songs](/playlists/pretty/37i9dQZF1DX7Z7kYpKKGTc.md)
- [Rock Me](/playlists/pretty/37i9dQZF1DWUCQ155jGb0U.md)
- [Rock Me Up](/playlists/pretty/37i9dQZF1DX0wiundViT27.md)
- [Rock Mexicano Avándaro](/playlists/pretty/37i9dQZF1DX7TZic46Z9vh.md)
- [Rock Nacional](/playlists/pretty/37i9dQZF1DWTMU14XJYy0g.md)
- [Rock Party](/playlists/pretty/37i9dQZF1DX8FwnYE6PRvL.md)
- [Rock Peruano](/playlists/pretty/37i9dQZF1DXca9fdfkadHF.md)
- [Rock Power Ballads](/playlists/pretty/37i9dQZF1DX82Zzp6AKx64.md)
- [Rock Rising](/playlists/pretty/37i9dQZF1DX2J9h4w9E0Xj.md)
- [Rock School](/playlists/pretty/37i9dQZF1DWWsq4e0rDzty.md)
- [Rock Solid](/playlists/pretty/37i9dQZF1DX49jUV2NfGku.md)
- [Rock Sónico](/playlists/pretty/37i9dQZF1DWT0pl0yubzJM.md)
- [Rock This](/playlists/pretty/37i9dQZF1DXcF6B6QPhFDv.md)
- [Rock This Presents..\. Best Rock & Alternative Songs of 2021](/playlists/pretty/37i9dQZF1DX8YNmLOBjUmx.md)
- [Rock This: Best of 2017](/playlists/pretty/37i9dQZF1DX1Jg9KZ76Rr9.md)
- [Rock Total](/playlists/pretty/37i9dQZF1DWU8yQ1nTMCfh.md)
- [Rock Urbano](/playlists/pretty/37i9dQZF1DX42a57xwmtrj.md)
- [Rock Your Block](/playlists/pretty/37i9dQZF1DX8jpyvTAre41.md)
- [Rock Your Body](/playlists/pretty/37i9dQZF1DXbFRZSqP41al.md)
- [Rock del Día](/playlists/pretty/37i9dQZF1DXc8YFRm3hen8.md)
- [Rock en Español](/playlists/pretty/37i9dQZF1DWYN0zdqzbEwl.md)
- [Rock en Español Acústico](/playlists/pretty/37i9dQZF1DX7eS6Eu8zMZN.md)
- [Rock en Español: Los 2000](/playlists/pretty/37i9dQZF1DX6RbMTl2YnQ8.md)
- [Rock en Español: Los 80](/playlists/pretty/37i9dQZF1DX7wcKDtt5TMP.md)
- [Rock en Español: Los 90](/playlists/pretty/37i9dQZF1DXabkBRQmempy.md)
- [Rock en tu Idioma](/playlists/pretty/37i9dQZF1DXdjpubZsBTg5.md)
- [Rock: i Classici](/playlists/pretty/37i9dQZF1DWZNFWEuVbQpD.md)
- [Rockabilly Mania](/playlists/pretty/37i9dQZF1DX0xLQsW8b5Zx.md)
- [Rockabilly Rebellion!](/playlists/pretty/37i9dQZF1DWUB167twpvS4.md)
- [Rockabilly Surf](/playlists/pretty/37i9dQZF1DWVhEq8aJ7AYV.md)
- [Rockeras](/playlists/pretty/37i9dQZF1DXbFNjGW0o442.md)
- [Rocket League Game Soundtrack \(Complete\)](/playlists/pretty/25eSdLvxjvwfev36rQY3xX.md)
- [Rocket League Soundtrack \(Complete OST\)](/playlists/pretty/5jSM6lE56BKLKRiavRO4Aw.md)
- [Rockin' Vibes](/playlists/pretty/37i9dQZF1DX2aneNMeYHQ8.md)
- [Rockola](/playlists/pretty/37i9dQZF1DWTphHAHFWZlz.md)
- [Rocksteady](/playlists/pretty/37i9dQZF1DXcYHsRTcIw5a.md)
- [Rocktail Hour](/playlists/pretty/37i9dQZF1DX8V6C5Nr1MvC.md)
- [Rocktronic](/playlists/pretty/37i9dQZF1DWTfrr8pte1rT.md)
- [Rocky's Pet Playlist](/playlists/pretty/37i9dQZF1DX52B5kz75WOP.md)
- [Rodriguez](/playlists/pretty/52JrW4dL2mDe1Dneq0vH1I.md)
- [Rollerskater](/playlists/pretty/37i9dQZF1DX7Nao6OTKc6W.md)
- [Rolling Loud Miami 2022](/playlists/pretty/37i9dQZF1DX2n3NOV9DaFp.md)
- [Romance Grupero](/playlists/pretty/37i9dQZF1DXaaA14YcUIMA.md)
- [Romance Rocanrol](/playlists/pretty/37i9dQZF1DX41Fp9G6874Y.md)
- [Romantic Anirudh](/playlists/pretty/37i9dQZF1DX5hlePrkMwGp.md)
- [Romantic Era 50: Spotify Picks](/playlists/pretty/37i9dQZF1DX8qDhzfjyTN6.md)
- [Romantic Smooth Jazz](/playlists/pretty/37i9dQZF1DWSUA8piie2LD.md)
- [Romantiqueo](/playlists/pretty/37i9dQZF1DX29qo6meCGNU.md)
- [Rompiendo: Los Angeles](/playlists/pretty/37i9dQZF1DWVIKVPO4xOlK.md)
- [Rompiendo: Miami](/playlists/pretty/37i9dQZF1DX2gAVR9iO3gH.md)
- [Rompiendo: Puerto Rico](/playlists/pretty/37i9dQZF1DX5Pek6YVkLnC.md)
- [Rooftop Sunset](/playlists/pretty/37i9dQZF1DX572PAi3rtlM.md)
- [Rookie Cops \(너와 나의 경찰수업\)](/playlists/pretty/37i9dQZF1DXaENnZYiwROL.md)
- [Roots Revival](/playlists/pretty/37i9dQZF1DX9crXQ0wuuXE.md)
- [Roots Rising](/playlists/pretty/37i9dQZF1DWYV7OOaGhoH0.md)
- [Roots Rising Presents..\. Best Folk & Americana Songs of 2021](/playlists/pretty/37i9dQZF1DXawR86Jfwxln.md)
- [Roots of Change](/playlists/pretty/37i9dQZF1DXbvfORzIlDQm.md)
- [Roots of Rock & Roll](/playlists/pretty/37i9dQZF1DX4PB22uESAd3.md)
- [Rosé on Tap](/playlists/pretty/37i9dQZF1DXdK49S1DyoyG.md)
- [Rotina de Beleza by @luizaakemi](/playlists/pretty/37i9dQZF1DWXxlTjrCu8cE.md)
- [Royalty](/playlists/pretty/37i9dQZF1DXaT0pyUaCzoO.md)
- [Rufus Wainwright: Pride](/playlists/pretty/37i9dQZF1DX5xCgFwl423z.md)
- [Ruleteando](/playlists/pretty/37i9dQZF1DWYP6zmGbwfYH.md)
- [Rumba Colombiana](/playlists/pretty/37i9dQZF1DWSIJCwMOQ10E.md)
- [Run 'N' Bass](/playlists/pretty/37i9dQZF1DX8jnAPF7Iiqp.md)
- [Run It Back](/playlists/pretty/37i9dQZF1DXaAXb45NEVkE.md)
- [Run This Town](/playlists/pretty/37i9dQZF1DWWPcvnOpPG3x.md)
- [Run Wild](/playlists/pretty/37i9dQZF1DX35oM5SPECmN.md)
- [Running to Rock 170\-190 BPM](/playlists/pretty/37i9dQZF1DWZUTt0fNaCPB.md)
- [Runway](/playlists/pretty/37i9dQZF1DXdGHH64iCtgA.md)
- [Russian Doll](/playlists/pretty/37i9dQZF1DWYNsv9jSVI53.md)
- [Russian Lit](/playlists/pretty/37i9dQZF1DXd6ydjpSDa3z.md)
- [Rustic Romance Wedding](/playlists/pretty/2Ph68VcwRfqRdnrKhY3oPS.md)
- [SA Gold](/playlists/pretty/37i9dQZF1DXcNdPSCaTGoa.md)
- [SA Rock Essentials](/playlists/pretty/37i9dQZF1DX9mHcd54VItZ.md)
- [SAHM Spotlight: Asim Azhar](/playlists/pretty/37i9dQZF1DWUQFf8ygD236.md)
- [SAHM Spotlight: Brown Girl Mag](/playlists/pretty/37i9dQZF1DX6DMDp286rY0.md)
- [SAHM Spotlight: Brown History](/playlists/pretty/37i9dQZF1DWT9G3ABmczo5.md)
- [SAHM Spotlight: Dastaangoi](/playlists/pretty/37i9dQZF1DWZmgVI3UNCd0.md)
- [SAHM Spotlight: Sharmeen Obaid Chinoy](/playlists/pretty/37i9dQZF1DX86uJ5hoOPYV.md)
- [SALT](/playlists/pretty/37i9dQZF1DX6tPTxr8qwRe.md)
- [SHADOWS HOUSE シャドーハウス](/playlists/pretty/37i9dQZF1DX01BMYuRJG8i.md)
- [SHERELLE's track IDs](/playlists/pretty/37i9dQZF1DX8NzAadCccWE.md)
- [SLAP!](/playlists/pretty/37i9dQZF1DX97SIuADeA1Y.md)
- [SPA Treatment](/playlists/pretty/37i9dQZF1DX4Q2SnB3glnP.md)
- [SPY×FAMILY](/playlists/pretty/37i9dQZF1DX8hWYpNQhxSa.md)
- [SUMMA](/playlists/pretty/37i9dQZF1DXbuS4aou8qH2.md)
- [SUPER BAND \(슈퍼밴드\)](/playlists/pretty/37i9dQZF1DX0DKm9RA9zpe.md)
- [SUPERNOVA](/playlists/pretty/37i9dQZF1DX82RdxyHKCWG.md)
- [SXSW Best Indie](/playlists/pretty/37i9dQZF1DX6CwQbybVjjk.md)
- [SXSW: HipHopUpNext](/playlists/pretty/37i9dQZF1DX5PuwKY2VZBZ.md)
- [SaGa  \-サガ\-](/playlists/pretty/37i9dQZF1DXazaFUkKf7jt.md)
- [Sad Beats](/playlists/pretty/37i9dQZF1DWVrtsSlLKzro.md)
- [Sad Bops](/playlists/pretty/37i9dQZF1DWZUAeYvs88zc.md)
- [Sad Bunny :\(](/playlists/pretty/37i9dQZF1DXaRGkpjDjLaB.md)
- [Sad Classical](/playlists/pretty/37i9dQZF1DXbm0dp7JzNeL.md)
- [Sad Covers](/playlists/pretty/37i9dQZF1DX64Y3du11rR1.md)
- [Sad Cuh Hours 🥀](/playlists/pretty/37i9dQZF1DXd6QWbEewZmM.md)
- [Sad Guitar Instrumentals](/playlists/pretty/37i9dQZF1DX3bgBpcV2oGY.md)
- [Sad Indie](/playlists/pretty/37i9dQZF1DWVV27DiNWxkR.md)
- [Sad Jazz](/playlists/pretty/37i9dQZF1DX0aiWQDFamDa.md)
- [Sad Piano](/playlists/pretty/37i9dQZF1DX9YGSllK2cJ4.md)
- [Sad Songs](/playlists/pretty/37i9dQZF1DX7qK8ma5wgG1.md)
- [Sad Soul](/playlists/pretty/37i9dQZF1DXchlyaSeZp0q.md)
- [Safe For Work](/playlists/pretty/0Gy1TwCxPFTMCiwxGLVkc1.md)
- [Sahara](/playlists/pretty/37i9dQZF1DWWuJFsTMqHYX.md)
- [Salam!](/playlists/pretty/37i9dQZF1DX38snDqzaVVW.md)
- [Salsa Classics](/playlists/pretty/37i9dQZF1DX7SeoIaFyTmA.md)
- [Salsa Cubana](/playlists/pretty/37i9dQZF1DWVSSKiqqNKSC.md)
- [Salsa Hits: Los 90s](/playlists/pretty/37i9dQZF1DX0ERdy9Swdy5.md)
- [Salsa Lessons](/playlists/pretty/37i9dQZF1DWZtHtrp0izBF.md)
- [Salsa Nation](/playlists/pretty/37i9dQZF1DX4qKWGR9z0LI.md)
- [Salsa Romántica](/playlists/pretty/37i9dQZF1DX2piJKuRdKIA.md)
- [Salsa de Oro](/playlists/pretty/37i9dQZF1DX35qF4A5M9ux.md)
- [Salsa: Los '70](/playlists/pretty/37i9dQZF1DX2zJGRjWhK7Q.md)
- [Salsa: Los '80](/playlists/pretty/37i9dQZF1DX49mfoIGumhI.md)
- [Salut les yéyés](/playlists/pretty/37i9dQZF1DX8OVycSP3AXz.md)
- [Sample School](/playlists/pretty/37i9dQZF1DX3KoYiZJ8DD4.md)
- [Sanación Profunda](/playlists/pretty/37i9dQZF1DWY6IkAj77bXq.md)
- [Sand Between My Toes](/playlists/pretty/37i9dQZF1DX3ayfz12wpQs.md)
- [Sang On Sunday](/playlists/pretty/37i9dQZF1DX4levbzTG2FX.md)
- [Satang Mix \(사탕 믹스\)](/playlists/pretty/37i9dQZF1DWTTHy0vndijk.md)
- [Sax and the City](/playlists/pretty/37i9dQZF1DWYgA6FKKHSd6.md)
- [Saxophone Classics](/playlists/pretty/37i9dQZF1DWZodX1hXiq9y.md)
- [Scary Stories](/playlists/pretty/37i9dQZF1DX0RGhgSIsFBm.md)
- [Scenic Route](/playlists/pretty/37i9dQZF1DX1adpUbAHocs.md)
- [Schlagerfest](/playlists/pretty/37i9dQZF1DWYgwF78otcGY.md)
- [School Rapper \(고등래퍼\)](/playlists/pretty/37i9dQZF1DWTzFjA6TS6P3.md)
- [Sci\-Fi Radio Dramas](/playlists/pretty/37i9dQZF1DXb0DT3bG5Uc1.md)
- [Sci\-Fi Scapes](/playlists/pretty/37i9dQZF1DX4ZEXyWinp6f.md)
- [Science Fiction](/playlists/pretty/37i9dQZF1DWVeoTQF8RBFh.md)
- [Scratchy Back Porch Blues](/playlists/pretty/37i9dQZF1DWXbxDw7wBcIC.md)
- [Sea Shanties](/playlists/pretty/37i9dQZF1DX8shr5OgBdbQ.md)
- [Seda](/playlists/pretty/37i9dQZF1DXcLnINu2mUk0.md)
- [Segue o Baile](/playlists/pretty/37i9dQZF1DWWmaszSfZpom.md)
- [Serenidad](/playlists/pretty/37i9dQZF1DX6FD2BSLFmYc.md)
- [Serotonin](/playlists/pretty/37i9dQZF1DWYMroOc5KTTh.md)
- [Sesame Street Stories](/playlists/pretty/37i9dQZF1DWSpCsFZJADb7.md)
- [Sex Education Official Playlist](/playlists/pretty/37i9dQZF1DWSjcafaN2Bom.md)
- [Sexy As Folk](/playlists/pretty/37i9dQZF1DX1BGjF5N5O7F.md)
- [Shady Records Spotify Picks](/playlists/pretty/3hR94iGaotWbCFv5eDe0gZ.md)
- [Shakespeare: The Comedies](/playlists/pretty/37i9dQZF1DX7ZEwRWHSfUr.md)
- [Shakespeare: The Histories](/playlists/pretty/37i9dQZF1DXbozqSbDnSno.md)
- [Shakespeare: The Poetry](/playlists/pretty/37i9dQZF1DWX5a9hO78SUQ.md)
- [Shakespeare: The Tragedies](/playlists/pretty/37i9dQZF1DX5lw1wrxWyPu.md)
- [Shatter the Glass](/playlists/pretty/37i9dQZF1DWZxJ6a8rr2bu.md)
- [She Rocks](/playlists/pretty/37i9dQZF1DX59CyY8YTix2.md)
- [Shermanology DJ Mix: The Sound of D'EAUPE](/playlists/pretty/37i9dQZF1DX50psLleaFxR.md)
- [Shimmer](/playlists/pretty/37i9dQZF1DWTDN0nsQnic1.md)
- [Shimmering Strings](/playlists/pretty/37i9dQZF1DX2XWJkYVfE4v.md)
- [Shingo Nakamura DJ Mix: Tokyo Glow](/playlists/pretty/37i9dQZF1DX2CGcax0KY23.md)
- [Shisha Lounge](/playlists/pretty/37i9dQZF1DX68x6hand0cN.md)
- [Shoegaze Classics](/playlists/pretty/37i9dQZF1DX6ujZpAN0v9r.md)
- [Shoegaze Now](/playlists/pretty/37i9dQZF1DWSluyUi4YGjq.md)
- [Short Stories](/playlists/pretty/37i9dQZF1DWXmUJqjFaQNQ.md)
- [Short Stories For Kids](/playlists/pretty/37i9dQZF1DX0XoBNTJR4ti.md)
- [Show Me The Money \(쇼미더머니\)](/playlists/pretty/37i9dQZF1DXbUvVRFYN2Rp.md)
- [Shuffle Syndrome](/playlists/pretty/37i9dQZF1DWUq3wF0JVtEy.md)
- [Shura \#PressPlayForPride](/playlists/pretty/37i9dQZF1DX6RDaNNfUPt3.md)
- [Sidetalk Radio](/playlists/pretty/37i9dQZF1DX9cjKvsL1KlZ.md)
- [Sierreñas Viejitas](/playlists/pretty/37i9dQZF1DWYNz9xcyse7Z.md)
- [Sierreño 2022](/playlists/pretty/37i9dQZF1DX37tvjlT1GSK.md)
- [Sierreño Mix](/playlists/pretty/37i9dQZF1DXdd5VomwKVY2.md)
- [Siesta en la Playa](/playlists/pretty/37i9dQZF1DX2w6jCwU2AgM.md)
- [Signed XOXO](/playlists/pretty/37i9dQZF1DX2A29LI7xHn1.md)
- [Signs & Wonders](/playlists/pretty/37i9dQZF1DX5pEiFLSS7sX.md)
- [Silk Sheets](/playlists/pretty/37i9dQZF1DWVGy1YP1ojM5.md)
- [Silliest Songs Ever](/playlists/pretty/37i9dQZF1DX2ls3pMfEx4A.md)
- [Sin Lipo](/playlists/pretty/37i9dQZF1DWTOPE5PGBHDN.md)
- [Sin Ti](/playlists/pretty/37i9dQZF1DX4yeSNLFx6qI.md)
- [Sing A New Song](/playlists/pretty/37i9dQZF1DWTSWzScBKziy.md)
- [Sing Along](/playlists/pretty/37i9dQZF1DWWu0xeeDiEZc.md)
- [Sing Along K\-Pop \(노래방 인기가요\)](/playlists/pretty/37i9dQZF1DWXaehqeJpkro.md)
- [Sing His Praises](/playlists/pretty/37i9dQZF1DWWL9d6xr614O.md)
- [Sing Official Playlist](/playlists/pretty/37i9dQZF1DX0Ky57Pu5u9G.md)
- [Sing\-Along Indie Hits](/playlists/pretty/37i9dQZF1DWYBF1dYDPlHw.md)
- [Singing in the Shower...](/playlists/pretty/5LtwydYUv9Um4D2toY3Wzh.md)
- [Singled Out](/playlists/pretty/37i9dQZF1DX8f6LHxMjnzD.md)
- [Sinhala Pop](/playlists/pretty/37i9dQZF1DWYfNJLV7OBMA.md)
- [Ska Around The Globe](/playlists/pretty/37i9dQZF1DX4mnAzYEyRVc.md)
- [Ska Mexa](/playlists/pretty/37i9dQZF1DXaMKckYawrgw.md)
- [Skatepark Punks](/playlists/pretty/37i9dQZF1DX3MU5XUozve7.md)
- [Skyler \- Strong](/playlists/pretty/08ySLuUm0jMf7lJmFwqRMu.md)
- [Sleep](/playlists/pretty/37i9dQZF1DWZd79rJ6a7lp.md)
- [Sleep Noise](/playlists/pretty/37i9dQZF1DWSW4ppn40bal.md)
- [Sleep Tight](/playlists/pretty/37i9dQZF1DWSUFOo47GEsI.md)
- [Sleep in the Rainforest](/playlists/pretty/37i9dQZF1DWWSads6V2oIk.md)
- [Sleep, Baby Sleep](/playlists/pretty/37i9dQZF1DXdJ5OFSzWeCS.md)
- [Sleepy Piano](/playlists/pretty/37i9dQZF1DX03b46zi3S82.md)
- [Slide Guitar Heroes](/playlists/pretty/37i9dQZF1DWTRcF9f9nEap.md)
- [Slow Cooking](/playlists/pretty/37i9dQZF1DX0VCBlAzi9Ve.md)
- [Slow Dance](/playlists/pretty/37i9dQZF1DX6mkT6beTY1k.md)
- [Slow Dancing in the Living Room](/playlists/pretty/37i9dQZF1DXaUvpePTXR1D.md)
- [Sludge](/playlists/pretty/37i9dQZF1DXaWgNWdGsjlE.md)
- [Slumber Party](/playlists/pretty/37i9dQZF1DX5wqhGxxo3uL.md)
- [Slushii's DJ Mix](/playlists/pretty/37i9dQZF1DWTA9xrja5XU1.md)
- [Small Chops](/playlists/pretty/37i9dQZF1DX18jYOKSXaB2.md)
- [Smells Like Stream Spirit](/playlists/pretty/37i9dQZF1DXbQQUna7yzAX.md)
- [Smokey's Songbook](/playlists/pretty/37i9dQZF1DX6eUekrgxJ8J.md)
- [Smooth Jazz](/playlists/pretty/37i9dQZF1DXdwTUxmGKrdN.md)
- [Smooth Jazz 2000](/playlists/pretty/37i9dQZF1DX5MImizrZfZg.md)
- [Smooth Jazz Chill](/playlists/pretty/37i9dQZF1DX6lttj7ulLd6.md)
- [Smooth Jazz Classics](/playlists/pretty/37i9dQZF1DWSSSls9eK29h.md)
- [Snack Time](/playlists/pretty/37i9dQZF1DWYieCBJS5DXo.md)
- [Snowdrop \(설강화\)](/playlists/pretty/37i9dQZF1DWSV7xFZCVx23.md)
- [So Kool Driving](/playlists/pretty/37i9dQZF1DX3sCx6B9EAOr.md)
- [Soak Up the Sun](/playlists/pretty/37i9dQZF1DX6ALfRKlHn1t.md)
- [Soca Bashment](/playlists/pretty/37i9dQZF1DX1aRHunsdRJB.md)
- [Soca Classics](/playlists/pretty/37i9dQZF1DX3s9lsTCJMPo.md)
- [Soda Stereo: 25 Esenciales](/playlists/pretty/37i9dQZF1DXdJXfCVYbEo4.md)
- [Soda Stereo: Bajo esta piel](/playlists/pretty/37i9dQZF1DX3XFWzluBEOt.md)
- [Soda Stereo: En la ciudad de la furia](/playlists/pretty/37i9dQZF1DX8QVP0Z2zS3B.md)
- [Soda Stereo: Para volar](/playlists/pretty/37i9dQZF1DX0WPkweAgNHO.md)
- [Soda Stereo: Un juego eléctrico](/playlists/pretty/37i9dQZF1DX9pbIXQgqLJ9.md)
- [Sofi Tukker DJ Mix: Summer in New York](/playlists/pretty/37i9dQZF1DX8cldCKQHv0t.md)
- [Soft + Slow](/playlists/pretty/37i9dQZF1DX0611i4oGheJ.md)
- [Soft 00s](/playlists/pretty/37i9dQZF1DXdGHPXiRsW3u.md)
- [Soft 10s](/playlists/pretty/37i9dQZF1DX1uHCeFHcn8X.md)
- [Soft 50s](/playlists/pretty/37i9dQZF1DWXcg95telZlE.md)
- [Soft 60s](/playlists/pretty/37i9dQZF1DWYzKmy0vGGcY.md)
- [Soft 70s](/playlists/pretty/37i9dQZF1DWTTn6daQVbOa.md)
- [Soft 80s](/playlists/pretty/37i9dQZF1DX4WELsJtFZjZ.md)
- [Soft 90s](/playlists/pretty/37i9dQZF1DX2syo5w7a1cu.md)
- [Soft Instrumental](/playlists/pretty/37i9dQZF1DXdPDLmy88MDk.md)
- [Soft Jazz](/playlists/pretty/37i9dQZF1DX949uWWpmTjT.md)
- [Soft Morning](/playlists/pretty/37i9dQZF1DXb5Mq0JeBbIw.md)
- [Soft Piano](/playlists/pretty/37i9dQZF1DX561TxkFttR4.md)
- [Soft Pop Hits](/playlists/pretty/37i9dQZF1DWTwnEm1IYyoj.md)
- [Soft Rock](/playlists/pretty/37i9dQZF1DX6xOPeSOGone.md)
- [Soirée](/playlists/pretty/37i9dQZF1DX4Vd1jJ7X9H8.md)
- [Sol de Domingo](/playlists/pretty/37i9dQZF1DWSRkJG9UvIz1.md)
- [Solo Jazz Piano](/playlists/pretty/37i9dQZF1DX2EXcndYUb2y.md)
- [Some Kinda Way](/playlists/pretty/37i9dQZF1DWW78Y3ocEppf.md)
- [Sones & Fusiones](/playlists/pretty/37i9dQZF1DX17ZoHNcnTgi.md)
- [SongCraft](/playlists/pretty/37i9dQZF1DX4cukhkYKVZW.md)
- [Songbirds](/playlists/pretty/5JXV7ioEqB9ZA1b1RjSLVg.md)
- [Songs To Test Headphones With](/playlists/pretty/37i9dQZF1DWZtZ8vUCzche.md)
- [Songs We Rocked Out To](/playlists/pretty/37i9dQZF1DWT3pfwRgyQMA.md)
- [Songs of Glory](/playlists/pretty/37i9dQZF1DWVlWpJblBvap.md)
- [Songs of Salvation](/playlists/pretty/37i9dQZF1DWZ4dtFEnppbd.md)
- [Songs to Sing in the Car](/playlists/pretty/37i9dQZF1DWWMOmoXKqHTD.md)
- [Songs to Sing in the Shower](/playlists/pretty/37i9dQZF1DWSqmBTGDYngZ.md)
- [Sonisphere](/playlists/pretty/2fC7gpl3V9MmCc8gBPHc66.md)
- [Soothing Strings For Sleeping Babies](/playlists/pretty/37i9dQZF1DX2C8CFEPyYmg.md)
- [Sopa y Seco](/playlists/pretty/37i9dQZF1DX48FwbwX2U8a.md)
- [Soul 'n' the City](/playlists/pretty/37i9dQZF1DWSXWSaQmvWOB.md)
- [Soul Blues](/playlists/pretty/37i9dQZF1DX4snGSoRjGMW.md)
- [Soul Coffee](/playlists/pretty/37i9dQZF1DXaXDsfv6nvZ5.md)
- [Soul Dance Party](/playlists/pretty/37i9dQZF1DXaYkQ0K2mhgZ.md)
- [Soul Food](/playlists/pretty/37i9dQZF1DXd9dy0tcoQft.md)
- [Soul Foodie](/playlists/pretty/37i9dQZF1DXbDiwzsFdvXP.md)
- [Soul Live](/playlists/pretty/37i9dQZF1DX4IKP8YpqoNQ.md)
- [Soul Lounge](/playlists/pretty/37i9dQZF1DX62Nfha2yFhL.md)
- [Soul Resistance](/playlists/pretty/37i9dQZF1DX8YFIEyRvxXj.md)
- [Soul Revived](/playlists/pretty/37i9dQZF1DWY12BqhkMFW2.md)
- [Soul Soothers](/playlists/pretty/3TymQFosH9UgfP5jV5mPEe.md)
- [Soulful](/playlists/pretty/37i9dQZF1DX2AHwa6tQ2Yy.md)
- [Soulful Blend](/playlists/pretty/37i9dQZF1DX8Md3JnnrexB.md)
- [Soulful Christmas](/playlists/pretty/37i9dQZF1DX4ELVW61Sklr.md)
- [Soulful Day](/playlists/pretty/37i9dQZF1DWYgsiQBNyGuA.md)
- [Soulful Disco](/playlists/pretty/37i9dQZF1DXcAiMO5AYxE8.md)
- [Soultronic](/playlists/pretty/37i9dQZF1DXdc0DUqaW3MZ.md)
- [Sound Bath](/playlists/pretty/37i9dQZF1DWVS1LdzBKmob.md)
- [Sound Of Motown](/playlists/pretty/37i9dQZF1DWYC7CaxNgoCg.md)
- [Sound Semester](/playlists/pretty/37i9dQZF1DX4eQiqG0uCMB.md)
- [Sounds of the Ocean](/playlists/pretty/37i9dQZF1DWV90ZWj21ygB.md)
- [Sounds of the Rain Forest](/playlists/pretty/37i9dQZF1DXaw68inx4UiN.md)
- [Soundtrack Love Songs](/playlists/pretty/37i9dQZF1DXar0WmW5YgAc.md)
- [Soundtracked](/playlists/pretty/37i9dQZF1DWW7gj0FcGEx6.md)
- [Soundtracks for Studying](/playlists/pretty/37i9dQZF1DWZ27zYbfKITD.md)
- [Soundtracks Épicos](/playlists/pretty/37i9dQZF1DXdEH86O6asrX.md)
- [South Asian Sufi](/playlists/pretty/37i9dQZF1DX9mwNrgNa73l.md)
- [Southern Comfort](/playlists/pretty/37i9dQZF1DX7GqyyDpXu1q.md)
- [Southern Crosses](/playlists/pretty/37i9dQZF1DXd3akpXniJCe.md)
- [Southern Gothic](/playlists/pretty/37i9dQZF1DX58NJL8iVBGW.md)
- [Southern Rock 101](/playlists/pretty/37i9dQZF1DXbDjX0hus3Iu.md)
- [Souvenirs](/playlists/pretty/37i9dQZF1DX8XxBtyUnC7B.md)
- [Space Disco](/playlists/pretty/37i9dQZF1DX4pbGJDhTXK3.md)
- [Space Out](/playlists/pretty/37i9dQZF1DX3QkuBdPimxi.md)
- [Spanish Tapas Bar](/playlists/pretty/37i9dQZF1DX5Vpt0fhumU1.md)
- [Speak Into Chaos](/playlists/pretty/37i9dQZF1DWZIzeeN1t2Mn.md)
- [Spela Shoreline!](/playlists/pretty/37i9dQZF1DX3IN93M08EFq.md)
- [Spiderhead Official Playlist](/playlists/pretty/37i9dQZF1DX67KMeDsV7oL.md)
- [Spilled Ink](/playlists/pretty/37i9dQZF1DWSTeI2WWFaia.md)
- [Spinnin' Records Brand New](/playlists/pretty/4173ENNA5eMzHrz9pipvxI.md)
- [Spooky](/playlists/pretty/37i9dQZF1DX5hol82XuK24.md)
- [Spooning](/playlists/pretty/37i9dQZF1DXawcx4otNoU1.md)
- [Spotify & Chill](/playlists/pretty/37i9dQZF1DX7ZnTv0GKubq.md)
- [Spotify Global Discoveries](/playlists/pretty/0aArwHugPhiiuaL8KxyVXQ.md)
- [Spotify Global Hits](/playlists/pretty/4nInziu6O7lNV0ucn8w7YV.md)
- [Spotify House Thursday](/playlists/pretty/6NjugpbMNtXAtbv3NIbb3j.md)
- [Spotify House at CMA Fest 2022](/playlists/pretty/37i9dQZF1DX6HIvDVo75RY.md)
- [Spotify Island on Roblox](/playlists/pretty/37i9dQZF1DX30Mgh34Cry8.md)
- [Spotify Sessions](/playlists/pretty/0tkdz9yYluhlxVE9BuJOPm.md)
- [Spotify Sessions \- Pop](/playlists/pretty/37i9dQZF1DX3qk5khmafw8.md)
- [Spotify Singles: Classics](/playlists/pretty/37i9dQZF1DX4nb8GbLLOhT.md)
- [Spotify Singles: Complete Collection](/playlists/pretty/37i9dQZF1DWTUm9HjVUKnL.md)
- [Spotify Singles: Country](/playlists/pretty/37i9dQZF1DXdXh4ecan7Hh.md)
- [Spotify Singles: Covers](/playlists/pretty/37i9dQZF1DWZqyWCBK6QTt.md)
- [Spotify Singles: Hits](/playlists/pretty/37i9dQZF1DWVP71DYelp29.md)
- [Spotify Singles: Holiday Collection](/playlists/pretty/37i9dQZF1DXdam5VrqMf3y.md)
- [Spotify Singles: Indie & Alternative](/playlists/pretty/37i9dQZF1DWXMetQrUYhar.md)
- [Spotify Singles: Latin](/playlists/pretty/37i9dQZF1DWSDautEwAKZB.md)
- [Spotify Singles: Love Edition](/playlists/pretty/37i9dQZF1DWSGaZLGlN26y.md)
- [Spotify Singles: Pride](/playlists/pretty/37i9dQZF1DXcaEXdyjLdxm.md)
- [Spotify Singles: Stripped](/playlists/pretty/37i9dQZF1DXdFhiq9L31be.md)
- [Spotlight: The Juggernaut](/playlists/pretty/37i9dQZF1DWWxJ7o7YYYQA.md)
- [Spread the Gospel](/playlists/pretty/37i9dQZF1DX7OIddoQVdRt.md)
- [Spring Garden](/playlists/pretty/6YMK6nqc1jS11fGraCU1o2.md)
- [Spring Loaded](/playlists/pretty/37i9dQZF1DWTLlRxFAxbpj.md)
- [Spécial soleil](/playlists/pretty/37i9dQZF1DXcEdamGPOi1T.md)
- [Squid Game \(오징어게임\)](/playlists/pretty/37i9dQZF1DWTThV2562fDa.md)
- [St\. Patrick's Day 2022](/playlists/pretty/37i9dQZF1DWSCaDvxADWZT.md)
- [Standards de la Chanson Française](/playlists/pretty/37i9dQZF1DWTypZHlgEy1G.md)
- [Stargazer](/playlists/pretty/37i9dQZF1DX1SGz4XfZKy2.md)
- [Starring Shah Rukh Khan](/playlists/pretty/37i9dQZF1DWZ2bQuX4pBHH.md)
- [Starring: Raj Kapoor](/playlists/pretty/37i9dQZF1DX56TbM1BxdqS.md)
- [StartSelect: HEL](/playlists/pretty/37i9dQZF1DX1xEPBKyoFUz.md)
- [State of Jazz](/playlists/pretty/37i9dQZF1DX7YCknf2jT6s.md)
- [State of Mind](/playlists/pretty/37i9dQZF1DX1YPTAhwehsC.md)
- [Stay in Bed](/playlists/pretty/37i9dQZF1DX6tTW0xDxScH.md)
- [Stay in the Know](/playlists/pretty/37i9dQZF1DX0BxHamIEkKV.md)
- [Steampunk](/playlists/pretty/37i9dQZF1DX1aYJMdIFYsC.md)
- [Stepping Out](/playlists/pretty/37i9dQZF1DWYzMfRQj22Nd.md)
- [Still Hot](/playlists/pretty/37i9dQZF1DX6rVyqO2FaN8.md)
- [Stockholm Music & Arts 2012](/playlists/pretty/6lrsZHHFL65pjpDcjv6sFi.md)
- [Stomp & Holler](/playlists/pretty/37i9dQZF1DX8gLrc0tlHvS.md)
- [Stoner Rock](/playlists/pretty/37i9dQZF1DXdpVGstUksUC.md)
- [Stoner Tracks For Everyone](/playlists/pretty/37i9dQZF1DX1WWRAxBsY0Y.md)
- [Stories for your Inner Child](/playlists/pretty/5TQKebIP2y3YGxoklr72aV.md)
- [Storsjöyran 2012](/playlists/pretty/2XQnLAZo27gz7VGRBl34l9.md)
- [Storybots Super Songs Official Playlist](/playlists/pretty/37i9dQZF1DX6qrEuz2goXu.md)
- [Straight Edge Anthems](/playlists/pretty/37i9dQZF1DWTOmS5hmD9Zf.md)
- [Stranger Ambient](/playlists/pretty/37i9dQZF1DX9aFcuM4nAnw.md)
- [Stranger Things Official Playlist](/playlists/pretty/37i9dQZF1DXc3KPAjGyPdm.md)
- [Street Culto](/playlists/pretty/37i9dQZF1DWXU2naFUn37x.md)
- [Street Dance Girls Fighter \(스트릿 댄스 걸스 파이터\)](/playlists/pretty/37i9dQZF1DX8PuH2xV18rB.md)
- [Street Soul](/playlists/pretty/37i9dQZF1DWTplaZ1W7ARf.md)
- [Street Woman Fighter](/playlists/pretty/37i9dQZF1DX0oyg6NiPryV.md)
- [Streets Of Gold](/playlists/pretty/37i9dQZF1DXdP7Xdr0y4p4.md)
- [Stress Relief](/playlists/pretty/37i9dQZF1DWXe9gFZP0gtP.md)
- [String Quartet 101](/playlists/pretty/37i9dQZF1DXbrSeoLHavML.md)
- [String Theory](/playlists/pretty/37i9dQZF1DX5Lf3LZ6Czqu.md)
- [Strings for Sleeping](/playlists/pretty/37i9dQZF1DWXIrropGBmnR.md)
- [Stripped Down](/playlists/pretty/37i9dQZF1DWXMJdkLQRrmg.md)
- [Study Music 2022](/playlists/pretty/24U0Ot6ffyRdCjR8IdPLTo.md)
- [Sub Low](/playlists/pretty/37i9dQZF1DWZtGWF9Ltb0N.md)
- [Sub Pop: The Grunge Years](/playlists/pretty/1s2jwVSrmxKxxvvDoMWl32.md)
- [Submerged](/playlists/pretty/37i9dQZF1DX1APnYcNumwP.md)
- [Sudan Sounds](/playlists/pretty/37i9dQZF1DX15iTqq2X8NE.md)
- [Sugar & Spice](/playlists/pretty/7MsOqrEv1TxiHPDiYlWVLx.md)
- [Summer Acoustic](/playlists/pretty/37i9dQZF1DWUNIrSzKgQbP.md)
- [Summer BBQ](/playlists/pretty/37i9dQZF1DWVAArCxuIRGQ.md)
- [Summer Camp](/playlists/pretty/37i9dQZF1DWY53P9WxRUop.md)
- [Summer Chill](/playlists/pretty/37i9dQZF1DX4psg7TSYpot.md)
- [Summer Chill House 2022](/playlists/pretty/62bReXvmroQzQfEUuTNe3Y.md)
- [Summer Cocktails](/playlists/pretty/37i9dQZF1DWWzhxZzVxMP3.md)
- [Summer Dance Hits](/playlists/pretty/37i9dQZF1DWZ7eJRBxKzdO.md)
- [Summer Days](/playlists/pretty/0nUPQhoNrmw7Kr7sOeUCQh.md)
- [Summer Heat](/playlists/pretty/37i9dQZF1DWX1UA045EoPG.md)
- [Summer Hits](/playlists/pretty/37i9dQZF1DX1gRalH1mWrP.md)
- [Summer Hits \(2\)](/playlists/pretty/37i9dQZF1DWZKxDdpAkEjR.md)
- [Summer Hits of the 00s](/playlists/pretty/37i9dQZF1DXb54TOYHv7Df.md)
- [Summer Hits of the 10s](/playlists/pretty/37i9dQZF1DXaTitkvoNNxt.md)
- [Summer Hits of the 70s](/playlists/pretty/37i9dQZF1DWZX4NmgTPdVb.md)
- [Summer Hits of the 80s](/playlists/pretty/37i9dQZF1DXbU2HfvNSMTH.md)
- [Summer Hits of the 80s \(2\)](/playlists/pretty/37i9dQZF1DWWsGacA3f5kN.md)
- [Summer Hits of the 90s](/playlists/pretty/37i9dQZF1DX4uU3TGzIPXL.md)
- [Summer House 2022](/playlists/pretty/37i9dQZF1DX05r4Oy3Ln97.md)
- [Summer Indie](/playlists/pretty/37i9dQZF1DWVsh2vXzlKFb.md)
- [Summer Jazz](/playlists/pretty/37i9dQZF1DWTKxc7ZObqeH.md)
- [Summer K\-Pop Hits \(썸머 히트\)](/playlists/pretty/37i9dQZF1DX1lU51fgoMhF.md)
- [Summer Party](/playlists/pretty/37i9dQZF1DX5Ozry5U6G0d.md)
- [Summer Reading](/playlists/pretty/37i9dQZF1DX51qI8MDEx8N.md)
- [Summer Rock](/playlists/pretty/37i9dQZF1DX72tt7n9B4TV.md)
- [Summer Rock Vibes](/playlists/pretty/37i9dQZF1DWU3bkMPOyjie.md)
- [Summer Throwback](/playlists/pretty/37i9dQZF1DXd1MXcE8WTXq.md)
- [Summer Throwbacks](/playlists/pretty/37i9dQZF1DWZg863fGtALu.md)
- [Summer Vibes](/playlists/pretty/37i9dQZF1DWVLVzn60NyuA.md)
- [Summer in the Garden](/playlists/pretty/37i9dQZF1DWSewYkkEomBp.md)
- [Summertime Blues](/playlists/pretty/37i9dQZF1DX4MTfCb9IRyO.md)
- [Summertime Steel Drums](/playlists/pretty/37i9dQZF1DXdGdxSMZnmHj.md)
- [Summertime Vibes](/playlists/pretty/5v2J2noHVxPWgSrOw6lZsp.md)
- [Sun & Surf](/playlists/pretty/37i9dQZF1DX6aqIZNmXBGU.md)
- [Sun Kissed](/playlists/pretty/37i9dQZF1DWYD2pxgooM7y.md)
- [Sun Salutation](/playlists/pretty/37i9dQZF1DWYMTWCt2y4ZJ.md)
- [Sunday Scaries](/playlists/pretty/37i9dQZF1DX9UhtB5CtZ7e.md)
- [Sundays Best](/playlists/pretty/37i9dQZF1DX5iwIl2oN1P1.md)
- [Sunny Beats](/playlists/pretty/37i9dQZF1DXbtuVQL4zoey.md)
- [Sunny Day](/playlists/pretty/37i9dQZF1DX1BzILRveYHb.md)
- [Sunny Day Jazz](/playlists/pretty/37i9dQZF1DX0tnKPLNG9Ld.md)
- [Sunny Side Up](/playlists/pretty/37i9dQZF1DX7zd1uDsK3tZ.md)
- [Sunrise Run](/playlists/pretty/37i9dQZF1DXcq57wSefud5.md)
- [Sunrise Yoga](/playlists/pretty/37i9dQZF1DXdVyc8LtLi96.md)
- [Sunset Chill](/playlists/pretty/37i9dQZF1DWVtzubo4lvxd.md)
- [Sunset in Austin](/playlists/pretty/1MXbpQ8OiNsYtQxiXexPJ7.md)
- [Sunshine Reggae](/playlists/pretty/37i9dQZF1DXbwoaqxaoAVr.md)
- [Super Cumbias](/playlists/pretty/37i9dQZF1DXbUMEWUyV9JB.md)
- [Super Songs](/playlists/pretty/37i9dQZF1DWU8An4lZhLWW.md)
- [Surf Rock Sunshine](/playlists/pretty/37i9dQZF1DWYzpSJHStHHx.md)
- [Svensk Punk](/playlists/pretty/37i9dQZF1DX4IkJGKNp9lO.md)
- [Svensk Reggae](/playlists/pretty/37i9dQZF1DX4OF8aCFCpJb.md)
- [Svensk jazz](/playlists/pretty/37i9dQZF1DX4roJ565TJ33.md)
- [Svenska sommarklassiker](/playlists/pretty/37i9dQZF1DX0ZFVMeJPr1Z.md)
- [Sveriges Nationaldag](/playlists/pretty/33eWAE7F4bBUAjGtJVtCYB.md)
- [Swaddled in Love](/playlists/pretty/37i9dQZF1DX2dBRZjmvIQV.md)
- [Swagger](/playlists/pretty/37i9dQZF1DWSlw12ofHcMM.md)
- [Swahili Praise](/playlists/pretty/37i9dQZF1DXa9bqOzK42BZ.md)
- [Sweat.](/playlists/pretty/37i9dQZF1DX4YipRSmIneQ.md)
- [Sweater Weather](/playlists/pretty/37i9dQZF1DXa8axQnFlj0R.md)
- [Sweater Weather Instrumentals](/playlists/pretty/37i9dQZF1DWUvZBXGjNCU4.md)
- [Sweden Rock 2013](/playlists/pretty/3PNltrHQaYdqO0FdTAZ3wB.md)
- [Sweden Rock Festival 2012](/playlists/pretty/2xxkK8eaOyM6JRhHOheZBZ.md)
- [Sweet Dreams](/playlists/pretty/37i9dQZF1DX7LJDigq6rCa.md)
- [Sweet Jazz](/playlists/pretty/37i9dQZF1DWWMGLiuK4OqL.md)
- [Sweet Lullabies](/playlists/pretty/37i9dQZF1DX8skPjZYk8mL.md)
- [Sweet September](/playlists/pretty/37i9dQZF1DX8eMyhtzAuvp.md)
- [Sweet Soul Chillout](/playlists/pretty/37i9dQZF1DXbcgQ8d7s0A0.md)
- [Sweet Winter Songs](/playlists/pretty/62Tpw0jhT8kxF3KPbGciTk.md)
- [Sweetgrass](/playlists/pretty/44Ht3IACEyKqiLBZupIhIk.md)
- [Swing Revival](/playlists/pretty/37i9dQZF1DWYotlhbgVGaH.md)
- [Swing in the New Year](/playlists/pretty/5zyeLrOc31CPX7uk9xNL7y.md)
- [Sword Art Online \-ソードアート・オンライン\-](/playlists/pretty/37i9dQZF1DX9xyC5aOjDHG.md)
- [Symphony of the Winds](/playlists/pretty/37i9dQZF1DWUfMnnPBigKP.md)
- [Synthpop Classics](/playlists/pretty/37i9dQZF1DWU1f2CQHNexG.md)
- [Synthwave \| Retro \| 80s Vaporwave](/playlists/pretty/3gWAZPuNWpELIhKNbnpfwk.md)
- [Syria Sounds](/playlists/pretty/37i9dQZF1DWUyqO4fBh3ob.md)
- [Só as Minas](/playlists/pretty/37i9dQZF1DXe4mpNXfrVqx.md)
- [Sólo Para Amarte](/playlists/pretty/37i9dQZF1DXdsE9t090bJT.md)
- [Sólo Pop](/playlists/pretty/37i9dQZF1DX4YhSbTs17ha.md)
- [T\-Pop Now](/playlists/pretty/37i9dQZF1DX8peoGqrSg0H.md)
- [TQM bb](/playlists/pretty/37i9dQZF1DXa5MzIRYT8hE.md)
- [TRAPPERZ](/playlists/pretty/37i9dQZF1DWUmxBdWX3Pp4.md)
- [TRAPPERZ Presenta: Lo mejor del 2020](/playlists/pretty/37i9dQZF1DX8Az5Y1rWM7C.md)
- [TRAPando](/playlists/pretty/37i9dQZF1DX6PsvyweoPP8.md)
- [TRIGUN \-トライガン\-](/playlists/pretty/37i9dQZF1DX39iJO9NeCvA.md)
- [Taco Placero](/playlists/pretty/37i9dQZF1DX5QNpvPWsGKY.md)
- [Tagga För OS](/playlists/pretty/0uZg7go8TKu5hpv1L6CJ4y.md)
- [Tailgate Party](/playlists/pretty/37i9dQZF1DXdgnLr18vPvu.md)
- [Take it Easy](/playlists/pretty/3vnx7BaCl3YmHrg3WGLedp.md)
- [Take it Slow](/playlists/pretty/37i9dQZF1DXblsWWYXYYVu.md)
- [Tall Girl 2 Official Playlist](/playlists/pretty/37i9dQZF1DWSJQ1Sv9Jjrl.md)
- [Tamales & Atole](/playlists/pretty/37i9dQZF1DX6B14ULPIeoA.md)
- [Tamil BAE 💕](/playlists/pretty/37i9dQZF1DX09enSktFOuB.md)
- [Tamil Indie](/playlists/pretty/37i9dQZF1DWVPZhZJQP9HE.md)
- [Tamil Party Time](/playlists/pretty/37i9dQZF1DX0nA91dV2ts4.md)
- [Tamil Romance](/playlists/pretty/37i9dQZF1DWYfvJNWU1bKi.md)
- [Tango Rock](/playlists/pretty/37i9dQZF1DXa6vwC7tN28X.md)
- [Tangos y Milongas](/playlists/pretty/37i9dQZF1DXcCT9tm6fRIV.md)
- [Tantalizers](/playlists/pretty/37i9dQZF1DWU4DdJqbjPl5.md)
- [Tantra](/playlists/pretty/37i9dQZF1DWSlskcBvOTt0.md)
- [Tarab](/playlists/pretty/37i9dQZF1DWZQ6UgJlQibR.md)
- [Tarea Casual](/playlists/pretty/37i9dQZF1DX0yN5997BIDH.md)
- [Taste](/playlists/pretty/37i9dQZF1DWSUur0QPPsOn.md)
- [Taylor Gang Spotify Picks](/playlists/pretty/5VvCwhF9WqXKUaJLtJfeXn.md)
- [Te quiero](/playlists/pretty/37i9dQZF1DX6rXTaz81RRT.md)
- [TeamSupreme Selects](/playlists/pretty/4A01B3wh6uv7yOpzYdVLR3.md)
- [Teasing Master Takagi\-san からかい上手の高木さん](/playlists/pretty/37i9dQZF1DWTAZo89d5U6t.md)
- [Techno Bunker](/playlists/pretty/37i9dQZF1DX6J5NfMJS675.md)
- [Techno State](/playlists/pretty/37i9dQZF1DX8ZMwsPgxIOs.md)
- [Techno Workout](/playlists/pretty/37i9dQZF1DX36TRAnIL92N.md)
- [Teen Spirit](/playlists/pretty/37i9dQZF1DX5drguwUcl5X.md)
- [Tegan and Sara: Pride](/playlists/pretty/37i9dQZF1DWZTHlwqNeZ4l.md)
- [Tejano Classics](/playlists/pretty/37i9dQZF1DX6wQVfUHI1zt.md)
- [Telenovelas](/playlists/pretty/37i9dQZF1DX219uawZE3sT.md)
- [Tender](/playlists/pretty/37i9dQZF1DXarebqD2nAVg.md)
- [Tenha um Ótimo Dia!](/playlists/pretty/37i9dQZF1DX7KTVQYEg01L.md)
- [Terra Incognita](/playlists/pretty/37i9dQZF1DX1lnB9anGfHa.md)
- [Texas Country Now](/playlists/pretty/37i9dQZF1DX3Ee0ngF5ZVQ.md)
- [Texas Country Rewind](/playlists/pretty/37i9dQZF1DX7M1twJ8D6TS.md)
- [Tezeta](/playlists/pretty/37i9dQZF1DXcadB69DKC8c.md)
- [Thankful](/playlists/pretty/37i9dQZF1DX09buIVUF0Gg.md)
- [Thara Local](/playlists/pretty/37i9dQZF1DXbVipT9CLvYD.md)
- [The '80s All Lined Up](/playlists/pretty/37i9dQZF1DXbB7yFaZiAQX.md)
- [The 11th Gaon Chart Music Awards](/playlists/pretty/37i9dQZF1DX4OyEPaWHBdk.md)
- [The 2000s Indie Scene](/playlists/pretty/37i9dQZF1DX9LbdoYID5v7.md)
- [The 2016 AMAs](/playlists/pretty/0tdTsuJmnf6cRE22DMcgIq.md)
- [The Adam Project Official Playlist](/playlists/pretty/37i9dQZF1DXcGFLus6X9T4.md)
- [The Adventures of Sherlock Holmes](/playlists/pretty/37i9dQZF1DWY3FN0WeKCeB.md)
- [The Ballroom \(Vogue\)](/playlists/pretty/37i9dQZF1DX147VuwpqwJX.md)
- [The Beach Boys: The Real Best Of...](/playlists/pretty/1omLAKnMAhhkMSe2IGisUZ.md)
- [The Beatles & Beyond](/playlists/pretty/37i9dQZF1DX9IlPkA8ovHw.md)
- [The Beats](/playlists/pretty/37i9dQZF1DXaUR9QvMCPsb.md)
- [The Best Bands In The Universe 🪐](/playlists/pretty/37i9dQZF1DWT6zAeOrK0H1.md)
- [The Best of Viva Latino 2021](/playlists/pretty/37i9dQZF1DWT2aDOU7r4aV.md)
- [The Birth of Rhythm & Blues](/playlists/pretty/37i9dQZF1DXaOWYud3Cg4V.md)
- [The Black Power Mixtape 1967–1975](/playlists/pretty/37i9dQZF1DX94QVAxB7Dum.md)
- [The Blues Skies](/playlists/pretty/070FVPBKvfu6M5tf4I9rt2.md)
- [The Bridge](/playlists/pretty/4qq3MCSLrDgYx7RfJBDvij.md)
- [The Brontës](/playlists/pretty/37i9dQZF1DX8uVDy7wwKj9.md)
- [The Classical Takeover: Lang Lang](/playlists/pretty/37i9dQZF1DWXtBjoO4Thyy.md)
- [The Cole Porter Songbook](/playlists/pretty/37i9dQZF1DX8HwEXibv1ID.md)
- [The Cookout](/playlists/pretty/37i9dQZF1DXab8DipvnuNU.md)
- [The Core](/playlists/pretty/37i9dQZF1DWXIcbzpLauPS.md)
- [The Critics Choice 2012](/playlists/pretty/24HEIuw8etbkitpDCxZ1dQ.md)
- [The Essential Edgar Allan Poe](/playlists/pretty/37i9dQZF1DWVezbGpUvpz7.md)
- [The Essential Ska](/playlists/pretty/37i9dQZF1DX7WJ4yDmRK8R.md)
- [The Flow](/playlists/pretty/37i9dQZF1DXc4BD3pzYdKY.md)
- [The Frontier](/playlists/pretty/37i9dQZF1DX6JJBnsLRONu.md)
- [The Funny Thing About Football Is...](/playlists/pretty/37i9dQZF1DWWsTBFM3ksVb.md)
- [The GRAMMYs Official Playlist](/playlists/pretty/37i9dQZF1DX5FyxM4IcLn6.md)
- [The Glow Up](/playlists/pretty/37i9dQZF1DWZ0Y50OtuhLO.md)
- [The Good Cup](/playlists/pretty/37i9dQZF1DWUEbH7oMQunS.md)
- [The Graveyard](/playlists/pretty/37i9dQZF1DXbuQyuab5Cy4.md)
- [The Grove](/playlists/pretty/5H22bACwDGRsIQQyE9oy3I.md)
- [The H\. P\. Lovecraft Compendium](/playlists/pretty/37i9dQZF1DX7QXVqVJ8y93.md)
- [The Hawaiian Party](/playlists/pretty/37i9dQZF1DWZZA4G4jVRXy.md)
- [The Hot Sounds of 1926](/playlists/pretty/3rMnCpY0WEROlje2b8Bjdn.md)
- [The Jazz Escape](/playlists/pretty/7hjaw2oDqkMS2uDk5vmzAu.md)
- [The Life Eclectic](/playlists/pretty/35HteeTTB5NE0hsliZ77H1.md)
- [The Listening Room](/playlists/pretty/37i9dQZF1DX4CZc00Cxa3X.md)
- [The Locker](/playlists/pretty/37i9dQZF1DWYmDNATMglFU.md)
- [The Lofi Garden](/playlists/pretty/37i9dQZF1DX4t95PAs1EpY.md)
- [The Long and Winding Road](/playlists/pretty/37i9dQZF1DWYHkSks5rujC.md)
- [The Lot](/playlists/pretty/37i9dQZF1DX4EFbXknq73d.md)
- [The Lovely Little Playlist](/playlists/pretty/37i9dQZF1DXbZndSu0dHeI.md)
- [The Midnight Hour](/playlists/pretty/37i9dQZF1DXea80XwOJRgD.md)
- [The Midnight Radio](/playlists/pretty/37i9dQZF1E4Dmnn4U23IpI.md)
- [The Most Beautiful Songs in the World](/playlists/pretty/37i9dQZF1DX9Z3vMB2b8im.md)
- [The Most Beautiful Songs of the Night](/playlists/pretty/37i9dQZF1DXcKqNbvMHxoI.md)
- [The Most Romantic Songs in the World](/playlists/pretty/37i9dQZF1DWXb9I5xoXLjp.md)
- [The New Alt](/playlists/pretty/37i9dQZF1DX82GYcclJ3Ug.md)
- [The New Bohemian](/playlists/pretty/1IKDP8o4UvpfLh0SJX2e1b.md)
- [The New Standards](/playlists/pretty/5ahhg3aywppGeJs8tXvZOo.md)
- [The New Waltz](/playlists/pretty/37i9dQZF1DWZel4xa7wX1s.md)
- [The Newness](/playlists/pretty/37i9dQZF1DWUbo613Z2iWO.md)
- [The Nordic Notes](/playlists/pretty/37i9dQZF1DX3joPD88EypN.md)
- [The Obamas' 2019 Summer Favorites](/playlists/pretty/37i9dQZF1DWSnWpuB1FNVp.md)
- [The Other List](/playlists/pretty/37i9dQZF1DXazOBCyyv15E.md)
- [The PMS Playlist](/playlists/pretty/37i9dQZF1DWSEMER0I7qzl.md)
- [The Pentaverate Official Playlist](/playlists/pretty/37i9dQZF1DWXTsdpx69Vjw.md)
- [The Perfect Crafternoon](/playlists/pretty/0BbcjurkvWrkWxKKLzcqIP.md)
- [The Perfect Italian Dinner](/playlists/pretty/37i9dQZF1DWT1R6bXL4dyW.md)
- [The Piano Bar](/playlists/pretty/37i9dQZF1DWVvXA824aCbn.md)
- [The Piano Lounge](/playlists/pretty/37i9dQZF1DWVUSF6gmaR8i.md)
- [The Picnic List](/playlists/pretty/37i9dQZF1DXcyiNvJqewCy.md)
- [The Pulse of Americana](/playlists/pretty/37i9dQZF1DX3Fzl4v4w9Zp.md)
- [The Quiet Club](/playlists/pretty/37i9dQZF1DWUt6s1pWAnvP.md)
- [The Quintessential Quintuplets \-五等分の花嫁\-](/playlists/pretty/37i9dQZF1DWX48bLeZRpmd.md)
- [The RCA\-List](/playlists/pretty/3QiPV2C1uJQ3L8sKaykshJ.md)
- [The Real Beast Mode](/playlists/pretty/37i9dQZF1DX8kehMXAAgpt.md)
- [The Rhythm](/playlists/pretty/37i9dQZF1DWSRMdeGCgprt.md)
- [The Road to Punk Rock](/playlists/pretty/37i9dQZF1DWU0FBqUeZYeN.md)
- [The Robert Frost Reading Room](/playlists/pretty/37i9dQZF1DX3OlXSlU6epG.md)
- [The Roller Rink](/playlists/pretty/37i9dQZF1DWZXHVUlGM9Wp.md)
- [The Romantics](/playlists/pretty/37i9dQZF1DWZDPloxGJ3JZ.md)
- [The Roots of..\. Mumford & Sons](/playlists/pretty/78Afk1ZdGIAwEG8s3hq49D.md)
- [The Roots of..\. Vampire Weekend](/playlists/pretty/52FOMIrumGaNXnwKfrlAVf.md)
- [The Scene](/playlists/pretty/37i9dQZF1DWZkHEX2YHpDV.md)
- [The Scenic Route](/playlists/pretty/6pn7MZpvAxlKPzspzMR6T6.md)
- [The Selected D\. H\. Lawrence](/playlists/pretty/37i9dQZF1DXdOlMB0hApiu.md)
- [The Selected W\. B\. Yeats](/playlists/pretty/37i9dQZF1DWZFQPyPt2dUz.md)
- [The Skate Shop](/playlists/pretty/37i9dQZF1DX2Q2blQJBfBS.md)
- [The Sleep Machine: Waterscapes](/playlists/pretty/37i9dQZF1DWXzR2GKEiHgT.md)
- [The Sound of Bounce](/playlists/pretty/37i9dQZF1DWXzvsDswCrbR.md)
- [The Sound of Medieval](/playlists/pretty/6ckHBekHAoozIV6ISOmvq1.md)
- [The Stress Buster](/playlists/pretty/37i9dQZF1DWUvQoIOFMFUT.md)
- [The Sweet Suite](/playlists/pretty/37i9dQZF1DX2Ma8k80RiMN.md)
- [The Ultimate Hit Mix](/playlists/pretty/37i9dQZF1DWUZMtnnlvJ9p.md)
- [The Umbrella Academy Official Playlist](/playlists/pretty/37i9dQZF1DWUMu4FjR9Tt6.md)
- [The Victorians](/playlists/pretty/37i9dQZF1DWZxkZk4wnQ5T.md)
- [The Warm\-Up](/playlists/pretty/37i9dQZF1DWXZua9Shbhpk.md)
- [The Wilds](/playlists/pretty/37i9dQZF1DWUDoJcM4v6Tm.md)
- [The Wind Down](/playlists/pretty/37i9dQZF1DWYYeI1QdFxzU.md)
- [The Writer's Playlist](/playlists/pretty/37i9dQZF1DWYckg2NJborB.md)
- [The Yule Log](/playlists/pretty/37i9dQZF1DX7Mv4BQ3Z4nC.md)
- [The official Bråvalla Festival playlist 2017](/playlists/pretty/5sk53m6HgZorO1RDUkaiIZ.md)
- [Thirty\-Nine \(서른, 아홉\)](/playlists/pretty/37i9dQZF1DX06shnsLNU84.md)
- [This Is \(G\)I\-DLE](/playlists/pretty/37i9dQZF1DXdRupnl9NVKn.md)
- [This Is 2Baba](/playlists/pretty/37i9dQZF1DZ06evO1m1kAx.md)
- [This Is A$AP Mob](/playlists/pretty/37i9dQZF1DWXmxXDRgAKVq.md)
- [This Is A.R\. Rahman](/playlists/pretty/37i9dQZF1DX6WjBAV6orkC.md)
- [This Is AB6IX](/playlists/pretty/37i9dQZF1DWXZYiAIXe47k.md)
- [This Is AC/DC](/playlists/pretty/37i9dQZF1DZ06evO49hLQA.md)
- [This Is AC/DC \(2\)](/playlists/pretty/37i9dQZF1DXec50AjHrNTq.md)
- [This Is ATEEZ](/playlists/pretty/37i9dQZF1DXdlpBrO6fF3s.md)
- [This Is Adele](/playlists/pretty/37i9dQZF1DWZUozJiHy44Y.md)
- [This Is Aimer](/playlists/pretty/37i9dQZF1DZ06evO02uS96.md)
- [This Is Akari Kito](/playlists/pretty/37i9dQZF1DZ06evO3r997y.md)
- [This Is Akon](/playlists/pretty/37i9dQZF1DZ06evO0gCG2c.md)
- [This Is Al Green](/playlists/pretty/37i9dQZF1DWZMCPjHG57gq.md)
- [This Is Alan Hawkshaw](/playlists/pretty/37i9dQZF1DZ06evO2F2K1f.md)
- [This Is Alessandro Cortini](/playlists/pretty/37i9dQZF1DZ06evO3F09JR.md)
- [This Is Alesso](/playlists/pretty/37i9dQZF1DX7nGw3hwYw03.md)
- [This Is Ali Farka Touré](/playlists/pretty/37i9dQZF1DZ06evO1Xa1Op.md)
- [This Is Alka Yagnik](/playlists/pretty/37i9dQZF1DWWaVVA0KKQMp.md)
- [This Is Alok](/playlists/pretty/37i9dQZF1DWZUWZIwpqsT3.md)
- [This Is Angelique Kidjo](/playlists/pretty/37i9dQZF1DZ06evO2WUSS8.md)
- [This Is Angus & Julia Stone](/playlists/pretty/37i9dQZF1DX0hImzzXX6Mw.md)
- [This Is Aphex Twin](/playlists/pretty/37i9dQZF1DZ06evO3JKYkV.md)
- [This Is Apink](/playlists/pretty/37i9dQZF1DX9kARsEuLzU3.md)
- [This Is Arcade Fire](/playlists/pretty/37i9dQZF1DX1rUeB7HjgUL.md)
- [This Is Arch Enemy](/playlists/pretty/37i9dQZF1DZ06evO0jmCg8.md)
- [This Is Architects](/playlists/pretty/37i9dQZF1DZ06evO2kuq2c.md)
- [This Is Aretha Franklin](/playlists/pretty/37i9dQZF1DX6bJVMtDYJHx.md)
- [This Is Ariel Camacho y Los Plebes Del Rancho](/playlists/pretty/37i9dQZF1DZ06evO1AJHvq.md)
- [This Is Arijit Singh](/playlists/pretty/37i9dQZF1DWYztMONFqfvX.md)
- [This Is Arvo Pärt](/playlists/pretty/37i9dQZF1DWXWpqXjufFrg.md)
- [This Is Asha Bhosle](/playlists/pretty/37i9dQZF1DXcaxFdaLtowG.md)
- [This Is Autechre](/playlists/pretty/37i9dQZF1DZ06evO46FPXj.md)
- [This Is Avenged Sevenfold](/playlists/pretty/37i9dQZF1DZ06evO09Ahq0.md)
- [This Is Axwell Λ Ingrosso](/playlists/pretty/37i9dQZF1DWW3gTjSx5Dc7.md)
- [This Is B.B\. King](/playlists/pretty/37i9dQZF1DXbahoSMxtpoF.md)
- [This Is BIGBANG](/playlists/pretty/37i9dQZF1DZ06evO2MKBFK.md)
- [This Is BLACKPINK](/playlists/pretty/37i9dQZF1DX8kP0ioXjxIA.md)
- [This Is BOL4](/playlists/pretty/37i9dQZF1DWSwoxNySMdrh.md)
- [This Is BTS](/playlists/pretty/37i9dQZF1DX08mhnhv6g9b.md)
- [This Is Babyface](/playlists/pretty/37i9dQZF1DZ06evO1Q10Zy.md)
- [This Is Bach](/playlists/pretty/37i9dQZF1DWZnzwzLBft6A.md)
- [This Is Bad Bunny](/playlists/pretty/37i9dQZF1DX2apWzyECwyZ.md)
- [This Is Banda Carnaval](/playlists/pretty/37i9dQZF1DZ06evO408cU0.md)
- [This Is Banda Los Recoditos](/playlists/pretty/37i9dQZF1DZ06evO2rRImQ.md)
- [This Is Banda Los Sebastianes](/playlists/pretty/37i9dQZF1DZ06evO0lyJt6.md)
- [This Is Banda MS](/playlists/pretty/37i9dQZF1DX2rFMAzWFwNe.md)
- [This Is Banda Machos](/playlists/pretty/37i9dQZF1DZ06evO4BSRFe.md)
- [This Is Banda Maguey](/playlists/pretty/37i9dQZF1DZ06evO1Nfadn.md)
- [This Is Banda Pequeños Musical](/playlists/pretty/37i9dQZF1DZ06evO2oVGJD.md)
- [This Is Banda Rafaga](/playlists/pretty/37i9dQZF1DZ06evO4s7DZn.md)
- [This Is Banda Toro](/playlists/pretty/37i9dQZF1DZ06evO4dQL3v.md)
- [This Is Banda Vallarta Show](/playlists/pretty/37i9dQZF1DZ06evO1rZXin.md)
- [This Is Banda Zarape](/playlists/pretty/37i9dQZF1DZ06evO2ejNXe.md)
- [This Is Banda Zeta](/playlists/pretty/37i9dQZF1DZ06evO45UHxY.md)
- [This Is Barry White](/playlists/pretty/37i9dQZF1DZ06evO1ZPPgY.md)
- [This Is Bartók](/playlists/pretty/37i9dQZF1DX5ZPNS2aXuN4.md)
- [This Is Beethoven](/playlists/pretty/37i9dQZF1DX12YIlzNkccL.md)
- [This Is Beyoncé](/playlists/pretty/37i9dQZF1DX2oU49YwtXI2.md)
- [This Is Biffy Clyro](/playlists/pretty/37i9dQZF1DX7yNDQ30MDO6.md)
- [This Is Big Mama Thornton](/playlists/pretty/37i9dQZF1DZ06evO3EuBHZ.md)
- [This Is Billy Paul](/playlists/pretty/37i9dQZF1DZ06evO0BIvvE.md)
- [This Is Biosphere](/playlists/pretty/37i9dQZF1DZ06evO1ov2lQ.md)
- [This Is Black Coffee](/playlists/pretty/37i9dQZF1DZ06evO3R5f8c.md)
- [This Is BoA](/playlists/pretty/37i9dQZF1DWVcZmFvFFJ5L.md)
- [This Is Boards of Canada](/playlists/pretty/37i9dQZF1DZ06evO1GMSJj.md)
- [This Is Bob Dylan](/playlists/pretty/37i9dQZF1DX8f6VxHEcGCN.md)
- [This Is Bobby Pulido](/playlists/pretty/37i9dQZF1DZ06evO2Jdbs4.md)
- [This Is Bon Iver](/playlists/pretty/37i9dQZF1DXaSQZr9c1SpZ.md)
- [This Is Bonnie Raitt](/playlists/pretty/37i9dQZF1DZ06evO2MOc1x.md)
- [This Is Bonobo](/playlists/pretty/37i9dQZF1DZ06evO02Y0rS.md)
- [This Is Bonobo \(2\)](/playlists/pretty/37i9dQZF1DWZais6SIaMts.md)
- [This Is Brahms](/playlists/pretty/37i9dQZF1DXaQQM8OxjxoC.md)
- [This Is Brandi Carlile](/playlists/pretty/37i9dQZF1DX5IsxYrftjp3.md)
- [This Is Brenda Fassie](/playlists/pretty/37i9dQZF1DZ06evO00eJOV.md)
- [This Is Brian Eno](/playlists/pretty/37i9dQZF1DZ06evO4C4Xm0.md)
- [This Is Britney Spears](/playlists/pretty/37i9dQZF1DWXcA2XXbXQ3d.md)
- [This Is Bruce Springsteen](/playlists/pretty/37i9dQZF1DZ06evO1S7maQ.md)
- [This Is Bruno Mars](/playlists/pretty/37i9dQZF1DX177vQ7mVRmP.md)
- [This Is Buddy Guy](/playlists/pretty/37i9dQZF1DZ06evO1i8qVD.md)
- [This Is Burna Boy](/playlists/pretty/37i9dQZF1DZ06evO22OCjn.md)
- [This Is CHUNG HA](/playlists/pretty/37i9dQZF1DXdYwX3Ds2dLJ.md)
- [This Is CHiCO with HoneyWorks](/playlists/pretty/37i9dQZF1DZ06evO4oyOhG.md)
- [This Is Calle 13](/playlists/pretty/37i9dQZF1DXcWxfOAOwuqj.md)
- [This Is Capcom Sound Team](/playlists/pretty/37i9dQZF1DX6CfJlSXEcCA.md)
- [This Is Cardenales De Nuevo León](/playlists/pretty/37i9dQZF1DZ06evO0l2yKk.md)
- [This Is Carin Leon](/playlists/pretty/37i9dQZF1DZ06evO3B9t7y.md)
- [This Is Carlos Y Jose](/playlists/pretty/37i9dQZF1DZ06evO1z7Tel.md)
- [This Is Celia Cruz](/playlists/pretty/37i9dQZF1DZ06evO1rwPYs.md)
- [This Is Celia Cruz \(2\)](/playlists/pretty/37i9dQZF1DWZGJs84R82Xg.md)
- [This Is Chief Commander Ebenezer Obey](/playlists/pretty/37i9dQZF1DZ06evO2W8xb0.md)
- [This Is Chopin](/playlists/pretty/37i9dQZF1DWV7cvDzE3MOI.md)
- [This Is Chuck Berry](/playlists/pretty/37i9dQZF1DX0LonJ1uN97e.md)
- [This Is Clara Rockmore](/playlists/pretty/37i9dQZF1DZ06evO3CknpS.md)
- [This Is ClariS](/playlists/pretty/37i9dQZF1DZ06evO36zBDs.md)
- [This Is Coldplay](/playlists/pretty/37i9dQZF1DXaQm3ZVg9Z2X.md)
- [This Is Crush](/playlists/pretty/37i9dQZF1DX1uFbqkOlzEH.md)
- [This Is Cultura Profética](/playlists/pretty/37i9dQZF1DZ06evO3AMXrG.md)
- [This Is DAY6](/playlists/pretty/37i9dQZF1DX3Ucx6LaTP5S.md)
- [This Is Daddy Lumba](/playlists/pretty/37i9dQZF1DZ06evO3gEzVb.md)
- [This Is Daft Punk](/playlists/pretty/37i9dQZF1DWZAkrucRF6Gq.md)
- [This Is David Bowie](/playlists/pretty/37i9dQZF1DWTTthpScXd3v.md)
- [This Is David Mancuso](/playlists/pretty/37i9dQZF1DWY1XXKzcWtF3.md)
- [This Is Davido](/playlists/pretty/37i9dQZF1DZ06evO0vEAMw.md)
- [This Is Debussy](/playlists/pretty/37i9dQZF1DWXnRw5VvmZDb.md)
- [This Is Deftones](/playlists/pretty/37i9dQZF1DZ06evO3WNHaM.md)
- [This Is Deftones \(2\)](/playlists/pretty/37i9dQZF1DX6zPl1mbTZSq.md)
- [This Is Delia Derbyshire](/playlists/pretty/37i9dQZF1DZ06evO4t4K4x.md)
- [This Is Depeche Mode](/playlists/pretty/37i9dQZF1DX3BSwupE5hR7.md)
- [This Is Deuter](/playlists/pretty/37i9dQZF1DZ06evO25w5pM.md)
- [This Is Diljit Dosanjh](/playlists/pretty/37i9dQZF1DX0GO2iStOATx.md)
- [This Is Drake](/playlists/pretty/37i9dQZF1DX7QOv5kjbU68.md)
- [This Is Dreamcatcher](/playlists/pretty/37i9dQZF1DX7yD3GiuEB7x.md)
- [This Is Dvořák](/playlists/pretty/37i9dQZF1DWZwvaSJuR2fl.md)
- [This Is EGOIST](/playlists/pretty/37i9dQZF1DZ06evO07DtzR.md)
- [This Is ENHYPEN](/playlists/pretty/37i9dQZF1DX0q3zClOVaZA.md)
- [This Is Eagles](/playlists/pretty/37i9dQZF1DX9AUVnnnNUND.md)
- [This Is Earth, Wind & Fire](/playlists/pretty/37i9dQZF1DX3yvjXSVJwJV.md)
- [This Is Ed Sheeran](/playlists/pretty/37i9dQZF1DWWxPM4nWdhyI.md)
- [This Is Eir Aoi](/playlists/pretty/37i9dQZF1DZ06evO0BRqs5.md)
- [This Is El Alfa](/playlists/pretty/37i9dQZF1DWYl3xONiBhif.md)
- [This Is El Chapo De Sinaloa](/playlists/pretty/37i9dQZF1DZ06evO31TGEC.md)
- [This Is El Coyote Y Su Banda Tierra Santa](/playlists/pretty/37i9dQZF1DZ06evO4q1hR2.md)
- [This Is El Potro De Sinaloa](/playlists/pretty/37i9dQZF1DZ06evO0iB3OE.md)
- [This Is El de La Guitarra](/playlists/pretty/37i9dQZF1DZ06evO0oey9L.md)
- [This Is Elliott Smith](/playlists/pretty/37i9dQZF1DWZkGQGk1ZjrI.md)
- [This Is Elton John](/playlists/pretty/37i9dQZF1DX7VulteLVOkq.md)
- [This Is Emmylou Harris](/playlists/pretty/37i9dQZF1DX8kcxLFdICLh.md)
- [This Is Epik High](/playlists/pretty/37i9dQZF1DWY2WP80JpJnY.md)
- [This Is Eric Clapton](/playlists/pretty/37i9dQZF1DZ06evO42oITu.md)
- [This Is Eslabon Armado](/playlists/pretty/37i9dQZF1DZ06evO0valoY.md)
- [This Is FLOW](/playlists/pretty/37i9dQZF1DZ06evO22IRjV.md)
- [This Is Father John Misty](/playlists/pretty/37i9dQZF1DX3Y4Bt8VdicW.md)
- [This Is First Aid Kit](/playlists/pretty/37i9dQZF1DWSMzsi7xJUqJ.md)
- [This Is Five Finger Death Punch](/playlists/pretty/37i9dQZF1DZ06evO3dwoSs.md)
- [This Is Fleet Foxes](/playlists/pretty/37i9dQZF1DWWpEiFt0w46m.md)
- [This Is Frank Sinatra](/playlists/pretty/37i9dQZF1DX4H3NUOwVLXj.md)
- [This Is Future](/playlists/pretty/37i9dQZF1DWVstK6FYh8Nw.md)
- [This Is GOT7](/playlists/pretty/37i9dQZF1DX4AYptQIdI2R.md)
- [This Is George Harrison](/playlists/pretty/37i9dQZF1DWVDVRzaLYm4M.md)
- [This Is Ghost](/playlists/pretty/37i9dQZF1DZ06evO12mjqo.md)
- [This Is Girls' Generation](/playlists/pretty/37i9dQZF1DX0sGSAwFMowZ.md)
- [This Is Gojira](/playlists/pretty/37i9dQZF1DZ06evO0lb5gk.md)
- [This Is Gondwana](/playlists/pretty/37i9dQZF1DZ06evO2z72hy.md)
- [This Is Gorillaz](/playlists/pretty/37i9dQZF1DWSxQLa5KoDYW.md)
- [This Is Green Day](/playlists/pretty/37i9dQZF1DZ06evO4nBpII.md)
- [This Is Green Day \(2\)](/playlists/pretty/37i9dQZF1DWVPJN9etkrEa.md)
- [This Is Grieg](/playlists/pretty/37i9dQZF1DX8hzQwGhYRlj.md)
- [This Is Grimes](/playlists/pretty/37i9dQZF1DWY6vYEZez2Jm.md)
- [This Is Grouper](/playlists/pretty/37i9dQZF1DZ06evO1KlcOx.md)
- [This Is Grupo Firme](/playlists/pretty/37i9dQZF1DXdH7LJU45tsM.md)
- [This Is Handel](/playlists/pretty/37i9dQZF1DX9ZP5oobcNgA.md)
- [This Is Hans Zimmer](/playlists/pretty/37i9dQZF1DWWF3yivn1m3D.md)
- [This Is Harold Budd](/playlists/pretty/37i9dQZF1DZ06evO21YUWA.md)
- [This Is Harold Melvin & The Blue Notes](/playlists/pretty/37i9dQZF1DZ06evO2mDwdN.md)
- [This Is Haydn](/playlists/pretty/37i9dQZF1DX16wERbfwQvR.md)
- [This Is Howlin' Wolf](/playlists/pretty/37i9dQZF1DZ06evO0uKvcl.md)
- [This Is Hugh Masekela](/playlists/pretty/37i9dQZF1DX0do1Z6kTyyR.md)
- [This Is HyunA](/playlists/pretty/37i9dQZF1DWTQlAcQVKgKf.md)
- [This Is ITZY](/playlists/pretty/37i9dQZF1DX7ZHn4SQHDIn.md)
- [This Is IU](/playlists/pretty/37i9dQZF1DX0y9CwEpdGpz.md)
- [This Is Incubus](/playlists/pretty/37i9dQZF1DWUYsleI0H271.md)
- [This Is Iron Maiden](/playlists/pretty/37i9dQZF1DZ06evO3KIUZW.md)
- [This Is Iron Maiden \(2\)](/playlists/pretty/37i9dQZF1DXagb3XZSnOQ8.md)
- [This Is J Balvin](/playlists/pretty/37i9dQZF1DX7HGyCQ2dcNx.md)
- [This Is Jack Johnson](/playlists/pretty/37i9dQZF1DXe1eE6Gj3EKS.md)
- [This Is Jacob Banks](/playlists/pretty/37i9dQZF1DZ06evO0hk7Li.md)
- [This Is James Arthur](/playlists/pretty/37i9dQZF1DX3Csy1LFxjkI.md)
- [This Is Jane's Addiction](/playlists/pretty/37i9dQZF1DZ06evNZXcOE4.md)
- [This Is Jane's Addiction \(2\)](/playlists/pretty/37i9dQZF1DXcGV9sg8bMdx.md)
- [This Is Jay Park](/playlists/pretty/37i9dQZF1DX2CLoLFwNFP1.md)
- [This Is Joan Baez](/playlists/pretty/37i9dQZF1DX0ylvIHUvZdj.md)
- [This Is Joe Bonamassa](/playlists/pretty/37i9dQZF1DZ06evO1F6PJe.md)
- [This Is John Coltrane](/playlists/pretty/37i9dQZF1DWVx3vT1QCKCV.md)
- [This Is John Lee Hooker](/playlists/pretty/37i9dQZF1DZ06evO0RLWgA.md)
- [This Is John Legend](/playlists/pretty/37i9dQZF1DX8DxW4iib3Eq.md)
- [This Is John Mayer](/playlists/pretty/37i9dQZF1DWYrlaUEYy4Vg.md)
- [This Is John Prine](/playlists/pretty/37i9dQZF1DWWYlokKRoQoC.md)
- [This Is Jon Hassell](/playlists/pretty/37i9dQZF1DZ06evO38zEjl.md)
- [This Is Joni Mitchell](/playlists/pretty/37i9dQZF1DX94esvuBEVw6.md)
- [This Is Judas Priest](/playlists/pretty/37i9dQZF1DZ06evO1q6zh6.md)
- [This Is Julión Álvarez Y Su Norteño Banda](/playlists/pretty/37i9dQZF1DXaUrtTPbi5Xt.md)
- [This Is Justin Bieber](/playlists/pretty/37i9dQZF1DXc2aPBXGmXrt.md)
- [This Is KIDZ BOP Kids](/playlists/pretty/37i9dQZF1DWWi0hHcPHnic.md)
- [This Is KISS](/playlists/pretty/37i9dQZF1DZ06evO00jzcA.md)
- [This Is KISS \(2\)](/playlists/pretty/37i9dQZF1DX5L9gRaHajqj.md)
- [This Is Katy Perry](/playlists/pretty/37i9dQZF1DZ06evO3Jefw4.md)
- [This Is Katy Perry \(2\)](/playlists/pretty/37i9dQZF1DX2jD2cAwnIit.md)
- [This Is Kelly Khumalo](/playlists/pretty/37i9dQZF1DX3VxoFMom3BD.md)
- [This Is Kendrick Lamar](/playlists/pretty/37i9dQZF1DX5EkyRFIV92g.md)
- [This Is King Sunny Ade](/playlists/pretty/37i9dQZF1DZ06evO043912.md)
- [This Is Korn](/playlists/pretty/37i9dQZF1DZ06evO2fOjra.md)
- [This Is LANY](/playlists/pretty/37i9dQZF1DX1xlmTNXq2Qg.md)
- [This Is LCD Soundsystem](/playlists/pretty/37i9dQZF1DX4jsulumEbDn.md)
- [This Is LOONA](/playlists/pretty/37i9dQZF1DXcVhobq00UmD.md)
- [This Is La Original Banda El Limón de Salvador Lizárraga](/playlists/pretty/37i9dQZF1DZ06evO1hVM8E.md)
- [This Is Labi Siffre](/playlists/pretty/37i9dQZF1DZ06evO3jgeSr.md)
- [This Is Lady Gaga](/playlists/pretty/37i9dQZF1DXc7FZ2VBjaeT.md)
- [This Is Ladysmith Black Mambazo](/playlists/pretty/37i9dQZF1DZ06evO28fcwD.md)
- [This Is Lalo Mora](/playlists/pretty/37i9dQZF1DZ06evO4dhOKA.md)
- [This Is Lamb of God](/playlists/pretty/37i9dQZF1DZ06evO2aV0uA.md)
- [This Is Langston Hughes](/playlists/pretty/37i9dQZF1DX7R9e00hBCQT.md)
- [This Is Larkin Poe](/playlists/pretty/37i9dQZF1DZ06evO4gv01w.md)
- [This Is Lata Mangeshkar](/playlists/pretty/37i9dQZF1DX4Y3BGcCFrIX.md)
- [This Is Laura Marling](/playlists/pretty/37i9dQZF1DX3Hdbt1R3mYP.md)
- [This Is Lenin Ramírez](/playlists/pretty/37i9dQZF1DZ06evO1UcSd2.md)
- [This Is Leonard Cohen](/playlists/pretty/37i9dQZF1DWVpFvorxSZ6K.md)
- [This Is LiSA](/playlists/pretty/37i9dQZF1DX01AtpaIYjQE.md)
- [This Is Liszt](/playlists/pretty/37i9dQZF1DX93wmY669mVj.md)
- [This Is Little Mix](/playlists/pretty/37i9dQZF1DWY24WaVcCqqH.md)
- [This Is Little Walter](/playlists/pretty/37i9dQZF1DZ06evO19MmWO.md)
- [This Is London Grammar](/playlists/pretty/37i9dQZF1DX7FLzW9rNIxr.md)
- [This Is Los Alegres De Teran](/playlists/pretty/37i9dQZF1DZ06evO29E6gJ.md)
- [This Is Los Cadetes De Linares](/playlists/pretty/37i9dQZF1DZ06evO0I5DUY.md)
- [This Is Los Cafres](/playlists/pretty/37i9dQZF1DZ06evO1Fa8jC.md)
- [This Is Los Dareyes De La Sierra](/playlists/pretty/37i9dQZF1DZ06evO180nDR.md)
- [This Is Los Dos Carnales](/playlists/pretty/37i9dQZF1DZ06evO1bH9ni.md)
- [This Is Los Invasores De Nuevo León](/playlists/pretty/37i9dQZF1DZ06evO3jkCWI.md)
- [This Is Los Plebes del Rancho de Ariel Camacho](/playlists/pretty/37i9dQZF1DZ06evO3EO5KU.md)
- [This Is Los Relampagos Del Norte](/playlists/pretty/37i9dQZF1DZ06evO0OlVrN.md)
- [This Is Los Rieleros Del Norte](/playlists/pretty/37i9dQZF1DZ06evO31N4w8.md)
- [This Is Los Tiranos Del Norte](/playlists/pretty/37i9dQZF1DZ06evO0Pawqn.md)
- [This Is Los Traileros Del Norte](/playlists/pretty/37i9dQZF1DZ06evO3SlD0O.md)
- [This Is Lou Rawls](/playlists/pretty/37i9dQZF1DZ06evO0SkALb.md)
- [This Is Lou Reed](/playlists/pretty/37i9dQZF1DXdVelxaccCqL.md)
- [This Is Luis R Conriquez](/playlists/pretty/37i9dQZF1DZ06evO0aI7Qc.md)
- [This Is MAPPA](/playlists/pretty/37i9dQZF1DWYXEO3u0YOMv.md)
- [This Is MINO](/playlists/pretty/37i9dQZF1DWWKavYU3DLE1.md)
- [This Is Ma Rainey](/playlists/pretty/37i9dQZF1DZ06evO0RsbvN.md)
- [This Is Maaya Sakamoto](/playlists/pretty/37i9dQZF1DZ06evO2GlwF5.md)
- [This Is Mac DeMarco](/playlists/pretty/37i9dQZF1DXe8E8oqpmTDI.md)
- [This Is Machine Head](/playlists/pretty/37i9dQZF1DZ06evO08InPG.md)
- [This Is Madonna](/playlists/pretty/37i9dQZF1DWTQllLRMgY9S.md)
- [This Is Mahler](/playlists/pretty/37i9dQZF1DWYFH7pZ5xe7h.md)
- [This Is Manu Dibango](/playlists/pretty/37i9dQZF1DZ06evO1JZBOa.md)
- [This Is Marc Anthony](/playlists/pretty/37i9dQZF1DX8evYJzHX5bn.md)
- [This Is Marca MP](/playlists/pretty/37i9dQZF1DZ06evO2nnqru.md)
- [This Is Margo Price](/playlists/pretty/37i9dQZF1DX5P58TnuVGha.md)
- [This Is Maroon 5](/playlists/pretty/37i9dQZF1DX7KWRIlkUpsl.md)
- [This Is Martin Garrix](/playlists/pretty/37i9dQZF1DX94qaYRnkufr.md)
- [This Is Mastodon](/playlists/pretty/37i9dQZF1DZ06evO0UB5PW.md)
- [This Is Megadeth](/playlists/pretty/37i9dQZF1DZ06evO17aFuo.md)
- [This Is Mendelssohn](/playlists/pretty/37i9dQZF1DWSQ26whVULj0.md)
- [This Is Metallica](/playlists/pretty/37i9dQZF1DZ06evO1sJmec.md)
- [This Is Metallica \(2\)](/playlists/pretty/37i9dQZF1DXbj9Ksq4BAdj.md)
- [This Is Mi Banda El Mexicano](/playlists/pretty/37i9dQZF1DZ06evO0pMfpd.md)
- [This Is Michael Bublé](/playlists/pretty/37i9dQZF1DX5kVmFQxhnLW.md)
- [This Is Michael Jackson](/playlists/pretty/37i9dQZF1DXaTIN6XNquoW.md)
- [This Is Miles Davis](/playlists/pretty/37i9dQZF1DX3BqHI5fuXWV.md)
- [This Is Miranda Lambert](/playlists/pretty/37i9dQZF1DWULYh276RumE.md)
- [This Is Miriam Makeba](/playlists/pretty/37i9dQZF1DZ06evO0Ca06w.md)
- [This Is Monsta X](/playlists/pretty/37i9dQZF1DX44JzWntsLKr.md)
- [This Is Mozart](/playlists/pretty/37i9dQZF1DX8qqIDAkKiQg.md)
- [This Is Mr Eazi](/playlists/pretty/37i9dQZF1DZ06evO2Sc0Gk.md)
- [This Is Muddy Waters](/playlists/pretty/37i9dQZF1DZ06evO2FgIak.md)
- [This Is Muse](/playlists/pretty/37i9dQZF1DZ06evO0yp56w.md)
- [This Is Muse \(2\)](/playlists/pretty/37i9dQZF1DWTG97QsiXgEX.md)
- [This Is NCT](/playlists/pretty/37i9dQZF1DX7bgKEb1LOV6.md)
- [This Is NCT 127](/playlists/pretty/37i9dQZF1DX78tHDcKCzXN.md)
- [This Is NCT DREAM](/playlists/pretty/37i9dQZF1DWVZj12Ektr6v.md)
- [This Is NOFX](/playlists/pretty/37i9dQZF1DX6KE9M7aTCxK.md)
- [This Is NU'EST](/playlists/pretty/37i9dQZF1DWXYltn5FtH0l.md)
- [This Is Nana Mizuki](/playlists/pretty/37i9dQZF1DZ06evO0urPQk.md)
- [This Is Nasty C](/playlists/pretty/37i9dQZF1DX9gDTB1VLIIh.md)
- [This Is Neil Young](/playlists/pretty/37i9dQZF1DWT6VDwxLyl0W.md)
- [This Is New Edition](/playlists/pretty/37i9dQZF1DWThFkopzOaNW.md)
- [This Is New Found Glory](/playlists/pretty/37i9dQZF1DX6sa8XjvdJIf.md)
- [This Is Nick Cave](/playlists/pretty/37i9dQZF1DWYEHBVWXZn8H.md)
- [This Is Nickelback](/playlists/pretty/37i9dQZF1DX6JuPU62sIoU.md)
- [This Is Nicky Romero](/playlists/pretty/37i9dQZF1DZ06evO3j5vfW.md)
- [This Is Nina Simone](/playlists/pretty/37i9dQZF1DX8OYzU0lx5hL.md)
- [This Is Nirvana](/playlists/pretty/37i9dQZF1DZ06evO3M0Fbi.md)
- [This Is Nirvana \(2\)](/playlists/pretty/37i9dQZF1DX82CY3GzF2m6.md)
- [This Is Oasis](/playlists/pretty/37i9dQZF1DZ06evO1vHAZO.md)
- [This Is Oasis \(2\)](/playlists/pretty/37i9dQZF1DWXupFIUw7TOC.md)
- [This Is Odetta](/playlists/pretty/37i9dQZF1DX41xCOSePXnM.md)
- [This Is One Direction](/playlists/pretty/37i9dQZF1DX6p4TJxzMRDe.md)
- [This Is OneRepublic](/playlists/pretty/37i9dQZF1DXbZBKpgxsyXU.md)
- [This Is PSY](/playlists/pretty/37i9dQZF1DXdoZRFedvgBm.md)
- [This Is Pancho Barraza](/playlists/pretty/37i9dQZF1DZ06evO3463WU.md)
- [This Is Pantera](/playlists/pretty/37i9dQZF1DZ06evO0zub2o.md)
- [This Is Parkway Drive](/playlists/pretty/37i9dQZF1DZ06evO0zVFVC.md)
- [This Is Patoranking](/playlists/pretty/37i9dQZF1DZ06evO1iOLV6.md)
- [This Is Paul Simon](/playlists/pretty/37i9dQZF1DWXEb535ZGeRC.md)
- [This Is Pauline Oliveros](/playlists/pretty/37i9dQZF1DZ06evO1cRKhO.md)
- [This Is Perdidos De Sinaloa](/playlists/pretty/37i9dQZF1DZ06evO407nKU.md)
- [This Is Philip Glass](/playlists/pretty/37i9dQZF1DX30FdZ6jR5Gl.md)
- [This Is Phyllis Hyman](/playlists/pretty/37i9dQZF1DZ06evO1Y8O2w.md)
- [This Is Portugal\. The Man](/playlists/pretty/37i9dQZF1DWUbOQi4OiTx4.md)
- [This Is Prince](/playlists/pretty/37i9dQZF1DX6JzJ8vAK836.md)
- [This Is Pritam](/playlists/pretty/37i9dQZF1DX654XADbS8bL.md)
- [This Is Prokofiev](/playlists/pretty/37i9dQZF1DX1tT8vLysk8r.md)
- [This Is Puccini](/playlists/pretty/37i9dQZF1DWXN6CDDJDZSt.md)
- [This Is RBD](/playlists/pretty/37i9dQZF1DWUnwXAaJZdpo.md)
- [This Is Rachmaninoff](/playlists/pretty/37i9dQZF1DX5Flpl98I3He.md)
- [This Is Radiohead](/playlists/pretty/37i9dQZF1DX1XDyq5cTk95.md)
- [This Is Raffi](/playlists/pretty/37i9dQZF1DX4dWEvmDfGoP.md)
- [This Is Rammstein](/playlists/pretty/37i9dQZF1DZ06evO3RbzfW.md)
- [This Is Ramon Ayala Y Sus Bravos Del Norte](/playlists/pretty/37i9dQZF1DZ06evO37Acog.md)
- [This Is Ramones](/playlists/pretty/37i9dQZF1DZ06evO0EhHXi.md)
- [This Is Ramones \(2\)](/playlists/pretty/37i9dQZF1DWWc7UGhP4Mpw.md)
- [This Is Ravel](/playlists/pretty/37i9dQZF1DWZhMbcax6CUd.md)
- [This Is Red Hot Chili Peppers](/playlists/pretty/37i9dQZF1DXbuvTm9NMIGt.md)
- [This Is Red Velvet](/playlists/pretty/37i9dQZF1DX4NMZ4UC3NCh.md)
- [This Is Reik](/playlists/pretty/37i9dQZF1DX5zmILo1UjGp.md)
- [This Is ReoNa](/playlists/pretty/37i9dQZF1DZ06evO1F3ObS.md)
- [This Is Residente](/playlists/pretty/37i9dQZF1DX5xV5uMmkUPl.md)
- [This Is Rev\. Gary Davis](/playlists/pretty/37i9dQZF1DZ06evO4wpPxg.md)
- [This Is Rhiannon Giddens](/playlists/pretty/37i9dQZF1DX3BGNfdmZK0t.md)
- [This Is Richard Strauss](/playlists/pretty/37i9dQZF1DX37CqNpZIOOZ.md)
- [This Is Rihanna](/playlists/pretty/37i9dQZF1DWWhBhYl3ZMvY.md)
- [This Is Ringo Starr](/playlists/pretty/37i9dQZF1DWULtPSrLama7.md)
- [This Is Rob Zombie](/playlists/pretty/37i9dQZF1DZ06evO29RPTW.md)
- [This Is Rodrigo](/playlists/pretty/37i9dQZF1DX03IosU2q8j1.md)
- [This Is Rossini](/playlists/pretty/37i9dQZF1DX0VplLa7NC0a.md)
- [This Is Roxette](/playlists/pretty/37i9dQZF1DX8IAL5KfmFJA.md)
- [This Is Rush](/playlists/pretty/37i9dQZF1DX9E92APFiTvV.md)
- [This Is Ryan Adams](/playlists/pretty/37i9dQZF1DZ06evO1nTCV2.md)
- [This Is Ryan Adams \(2\)](/playlists/pretty/37i9dQZF1DXdXKIWnpyigm.md)
- [This Is SEGA SOUND TEAM](/playlists/pretty/37i9dQZF1DX2CtuHQcongT.md)
- [This Is SHINee](/playlists/pretty/37i9dQZF1DX8To4GlhTfpA.md)
- [This Is SPYAIR](/playlists/pretty/37i9dQZF1DZ06evO4iOisK.md)
- [This Is SUNMI](/playlists/pretty/37i9dQZF1DX5wTRh9H8LSC.md)
- [This Is Sade](/playlists/pretty/37i9dQZF1DZ06evO2piM6c.md)
- [This Is Salif Keita](/playlists/pretty/37i9dQZF1DZ06evO0unpD0.md)
- [This Is Sampha](/playlists/pretty/37i9dQZF1DX86aPVQf2emM.md)
- [This Is Sarkodie](/playlists/pretty/37i9dQZF1DZ06evNZWvDTe.md)
- [This Is Satie](/playlists/pretty/37i9dQZF1DWVTUSNpU0pKJ.md)
- [This Is Schubert](/playlists/pretty/37i9dQZF1DWY3VlkBR4Jhb.md)
- [This Is Schumann](/playlists/pretty/37i9dQZF1DX1W7If2h64K3.md)
- [This Is Selena](/playlists/pretty/37i9dQZF1DZ06evO3YdXS8.md)
- [This Is Sergio Vega ""El Shaka""](/playlists/pretty/37i9dQZF1DZ06evO3wDj1z.md)
- [This Is Shankar\-Ehsaan\-Loy](/playlists/pretty/37i9dQZF1DWTSjoMyJoVXv.md)
- [This Is Sharon Jones](/playlists/pretty/37i9dQZF1DWXIPSKePHmRn.md)
- [This Is Shemekia Copeland](/playlists/pretty/37i9dQZF1DZ06evO2I5NIp.md)
- [This Is Shreya Ghoshal](/playlists/pretty/37i9dQZF1DXc0BeAqkMlJ0.md)
- [This Is Sibelius](/playlists/pretty/37i9dQZF1DXcetdKlCf0VE.md)
- [This Is Silverchair](/playlists/pretty/37i9dQZF1DX9DuoVJ0dR3g.md)
- [This Is Sister Rosetta Tharpe](/playlists/pretty/37i9dQZF1DZ06evO1gxbKi.md)
- [This Is Slipknot](/playlists/pretty/37i9dQZF1DZ06evNZYGncI.md)
- [This Is Sonny Okosun](/playlists/pretty/37i9dQZF1DZ06evO2x3RAa.md)
- [This Is Soundgarden](/playlists/pretty/37i9dQZF1DX024QaIPhrkq.md)
- [This Is Spice Girls](/playlists/pretty/37i9dQZF1DWWUJdr9ahsbf.md)
- [This Is Stevie Ray Vaughan](/playlists/pretty/37i9dQZF1DZ06evO35m9Q4.md)
- [This Is Stevie Wonder](/playlists/pretty/37i9dQZF1DWWYIyS8LLUDj.md)
- [This Is Stormzy](/playlists/pretty/37i9dQZF1DX9AFOBBZSMWw.md)
- [This Is Stray Kids](/playlists/pretty/37i9dQZF1DWWqjEVD8TBr9.md)
- [This Is Sum 41](/playlists/pretty/37i9dQZF1DX4gScoXV8KpV.md)
- [This Is Super Junior](/playlists/pretty/37i9dQZF1DX7h06zz0VktL.md)
- [This Is Suzanne Ciani](/playlists/pretty/37i9dQZF1DZ06evO3VuT4I.md)
- [This Is System Of A Down](/playlists/pretty/37i9dQZF1DZ06evO34PI4g.md)
- [This Is TAEYEON](/playlists/pretty/37i9dQZF1DXcNVMy4Nf9Si.md)
- [This Is TK from 凛として時雨 \(TK from Ling tosite sigure\)](/playlists/pretty/37i9dQZF1DWWwPz6HmZIAM.md)
- [This Is TOMORROW X TOGETHER](/playlists/pretty/37i9dQZF1DX2pmk7QemwOu.md)
- [This Is TOOL](/playlists/pretty/37i9dQZF1DZ06evO1sZyol.md)
- [This Is TWICE](/playlists/pretty/37i9dQZF1DWYlCv3D85m6m.md)
- [This Is Taio Cruz](/playlists/pretty/37i9dQZF1DZ06evO40DPwJ.md)
- [This Is Take That](/playlists/pretty/37i9dQZF1DX5joH2aOAS4r.md)
- [This Is Tchaikovsky](/playlists/pretty/37i9dQZF1DX2kvBlhyEkb6.md)
- [This Is Teddy Pendergrass](/playlists/pretty/37i9dQZF1DZ06evO3Cn8UU.md)
- [This Is Terry Riley](/playlists/pretty/37i9dQZF1DZ06evO4wmvjq.md)
- [This Is The Beach Boys](/playlists/pretty/37i9dQZF1DXaZan2kzvaVc.md)
- [This Is The Beatles](/playlists/pretty/37i9dQZF1DXdLtD0qszB1w.md)
- [This Is The Black Keys](/playlists/pretty/37i9dQZF1DZ06evO4m87u0.md)
- [This Is The Black Keys \(2\)](/playlists/pretty/37i9dQZF1DX2rBR3X9E86S.md)
- [This Is The Chainsmokers](/playlists/pretty/37i9dQZF1DX46HBMApdlID.md)
- [This Is The Delfonics](/playlists/pretty/37i9dQZF1DZ06evO47XPI3.md)
- [This Is The Doors](/playlists/pretty/37i9dQZF1DZ06evO19UBIk.md)
- [This Is The Doors \(2\)](/playlists/pretty/37i9dQZF1DX95gx8SY6DLX.md)
- [This Is The Fall](/playlists/pretty/37i9dQZF1DX7mMRxgkst0Y.md)
- [This Is The Flaming Lips](/playlists/pretty/37i9dQZF1DX79Q60SopbIW.md)
- [This Is The Intruders](/playlists/pretty/37i9dQZF1DZ06evO1JHaiA.md)
- [This Is The Jones Girls](/playlists/pretty/37i9dQZF1DZ06evO4f6gXS.md)
- [This Is The Laurie Berkner Band](/playlists/pretty/37i9dQZF1DX2pVaiZBrrqq.md)
- [This Is The Lumineers](/playlists/pretty/37i9dQZF1DXdxZQJxjFMLO.md)
- [This Is The O'Jays](/playlists/pretty/37i9dQZF1DZ06evO1Oq1nW.md)
- [This Is The Orb](/playlists/pretty/37i9dQZF1DZ06evO3mhuR7.md)
- [This Is The Rolling Stones](/playlists/pretty/37i9dQZF1DZ06evO19s0CZ.md)
- [This Is The Rolling Stones \(2\)](/playlists/pretty/37i9dQZF1DX5COO9vTaRpO.md)
- [This Is The Shins](/playlists/pretty/37i9dQZF1DWZyp9KgPL31Y.md)
- [This Is The Three Degrees](/playlists/pretty/37i9dQZF1DZ06evO1trEdl.md)
- [This Is The Used](/playlists/pretty/37i9dQZF1DZ06evO2ZCBBm.md)
- [This Is The Weeknd](/playlists/pretty/37i9dQZF1DX6bnzK9KPvrz.md)
- [This Is The xx](/playlists/pretty/37i9dQZF1DWSp9aN7lDNHp.md)
- [This Is Thomas Rhett](/playlists/pretty/37i9dQZF1DXctzlWgrxNLn.md)
- [This Is Timaya](/playlists/pretty/37i9dQZF1DZ06evO4iGtt9.md)
- [This Is Tina Turner](/playlists/pretty/37i9dQZF1DX4UK2Qu9x6KC.md)
- [This Is Tiësto](/playlists/pretty/37i9dQZF1DX1nSIVoqxfC0.md)
- [This Is Tom Petty](/playlists/pretty/37i9dQZF1DWUlZhYdX0uqM.md)
- [This Is Tom Petty and the Heartbreakers](/playlists/pretty/37i9dQZF1DZ06evO2CLCA8.md)
- [This Is Tony Bennett](/playlists/pretty/37i9dQZF1DX4c84KflUhSt.md)
- [This Is Trentemøller](/playlists/pretty/37i9dQZF1DX4cEqBpR9k1C.md)
- [This Is Trivium](/playlists/pretty/37i9dQZF1DZ06evO1cr4xG.md)
- [This Is U2](/playlists/pretty/37i9dQZF1DX8kI525v95Yu.md)
- [This Is UVERworld](/playlists/pretty/37i9dQZF1DZ06evO3KBMI1.md)
- [This Is Ulices Chaidez](/playlists/pretty/37i9dQZF1DZ06evO3a8KAu.md)
- [This Is Uptown Records](/playlists/pretty/37i9dQZF1DX7zDoGkCTwrF.md)
- [This Is Valentín Elizalde](/playlists/pretty/37i9dQZF1DZ06evO26EKuA.md)
- [This Is Van Morrison](/playlists/pretty/37i9dQZF1DWUHyTgDVMaG1.md)
- [This Is Vangelis](/playlists/pretty/37i9dQZF1DZ06evO2Pv5ZK.md)
- [This Is Verdi](/playlists/pretty/37i9dQZF1DX0FIO61wizta.md)
- [This Is Vesa\-Matti Loiri](/playlists/pretty/37i9dQZF1DWSz9jLisK0Gm.md)
- [This Is Vicente Fernández](/playlists/pretty/37i9dQZF1DX8pVA3Hx6Sbo.md)
- [This Is Vivaldi](/playlists/pretty/37i9dQZF1DWTBNkoD4HmYd.md)
- [This Is Volbeat](/playlists/pretty/37i9dQZF1DWYrXu9rm1zUZ.md)
- [This Is WINNER](/playlists/pretty/37i9dQZF1DX6thHZc9sy7P.md)
- [This Is WOS](/playlists/pretty/37i9dQZF1DX7FSN9zgNE0f.md)
- [This Is Wagner](/playlists/pretty/37i9dQZF1DX6Hln2awUHXX.md)
- [This Is Within Temptation](/playlists/pretty/37i9dQZF1DX50YO169g6dw.md)
- [This Is WizKid](/playlists/pretty/37i9dQZF1DZ06evO21rV4I.md)
- [This Is Zona Ganjah](/playlists/pretty/37i9dQZF1DZ06evO24f0z5.md)
- [This Is Zonke](/playlists/pretty/37i9dQZF1DWWxuZGEYY4h1.md)
- [This Is aespa](/playlists/pretty/37i9dQZF1DX5CHJY6ZqPPz.md)
- [This Is alt\-J](/playlists/pretty/37i9dQZF1DWXMmak2OV7PN.md)
- [This Is blink\-182](/playlists/pretty/37i9dQZF1DZ06evO3WooFO.md)
- [This Is blink\-182 \(2\)](/playlists/pretty/37i9dQZF1DX4EKARgqYPFZ.md)
- [This Is deadmau5](/playlists/pretty/37i9dQZF1DX87JE1B72J6C.md)
- [This Is iKON](/playlists/pretty/37i9dQZF1DWYCAWH52fMdQ.md)
- [This Is j\-hope](/playlists/pretty/37i9dQZF1DX9owDoKZZXV5.md)
- [This Is スタジオ地図 \-Studio Chizu\-](/playlists/pretty/37i9dQZF1DX0Bpaa30mJRd.md)
- [This Is 初音ミク \(HATSUNE MIKU\)](/playlists/pretty/37i9dQZF1DWZipvLjDtZYe.md)
- [This Is 星野源 \(Gen Hoshino\)](/playlists/pretty/37i9dQZF1DX1WBmdWaXNNZ.md)
- [This Is:  Johnny Cash](/playlists/pretty/37i9dQZF1DX1kw8OX1mNoI.md)
- [This Is: Animal Collective](/playlists/pretty/37i9dQZF1DX76V4s7Zffmt.md)
- [This Is: BIGBANG](/playlists/pretty/37i9dQZF1DWVw3oyaj4jsN.md)
- [This Is: Bryan Adams](/playlists/pretty/37i9dQZF1DWXRAIdXzR5R1.md)
- [This Is: David Axelrod](/playlists/pretty/37i9dQZF1DX4n3DaGTtM0p.md)
- [This Is: Dirty Projectors](/playlists/pretty/37i9dQZF1DX7FW3TjTduV4.md)
- [This Is: Dispatch](/playlists/pretty/37i9dQZF1DWVRrLXgTbWFy.md)
- [This Is: EXO](/playlists/pretty/37i9dQZF1DX5JcPJgYjGcf.md)
- [This Is: Fela Kuti](/playlists/pretty/37i9dQZF1DXajE2Hhh3n7i.md)
- [This Is: George Michael](/playlists/pretty/37i9dQZF1DXcIVSTUG9zAG.md)
- [This Is: Gillian Welch](/playlists/pretty/37i9dQZF1DWUifRttnt99X.md)
- [This Is: Glenn Gould](/playlists/pretty/37i9dQZF1DWSL7w3snV7Gw.md)
- [This Is: Heitor Villa\-Lobos](/playlists/pretty/37i9dQZF1DX5jgHoqkhgYj.md)
- [This Is: Iron & Wine](/playlists/pretty/37i9dQZF1DWTMS5dxv72g0.md)
- [This Is: John Williams](/playlists/pretty/37i9dQZF1DWSQeR9oTmnyj.md)
- [This Is: London Symphony Orchestra](/playlists/pretty/37i9dQZF1DX9l01QzlK1Yo.md)
- [This Is: Los Pericos](/playlists/pretty/37i9dQZF1DWXPkHOSaSEjs.md)
- [This Is: Luciano Pereyra](/playlists/pretty/37i9dQZF1DX1N4LABjaIvi.md)
- [This Is: Max Martin](/playlists/pretty/37i9dQZF1DWXDAhqlN7e6W.md)
- [This Is: Merle Haggard](/playlists/pretty/37i9dQZF1DWU1xHgjMaSpW.md)
- [This Is: Olga Tanon](/playlists/pretty/37i9dQZF1DXbicEtPvsx8f.md)
- [This Is: Passenger](/playlists/pretty/37i9dQZF1DWSRWLBFM7Ydi.md)
- [This Is: Paul McCartney](/playlists/pretty/37i9dQZF1DX2PB4Qx11qXU.md)
- [This Is: Pavarotti](/playlists/pretty/37i9dQZF1DX5M3XSYkKZCl.md)
- [This Is: R.E.M.](/playlists/pretty/37i9dQZF1DWSNpCo0vJUOm.md)
- [This Is: Rag'n'Bone Man](/playlists/pretty/37i9dQZF1DWXqcBHh7a68E.md)
- [This Is: Rombai](/playlists/pretty/37i9dQZF1DX8AjME0HhWBt.md)
- [This Is: Ryuichi Sakamoto](/playlists/pretty/37i9dQZF1DXa9Q01E86Ntt.md)
- [This Is: Skepta](/playlists/pretty/37i9dQZF1DX5WbJFtYTzv7.md)
- [This Is: Status Quo](/playlists/pretty/37i9dQZF1DX1zj9CzXszqD.md)
- [This Is: The Head and the Heart](/playlists/pretty/37i9dQZF1DX6UeaeNdzizB.md)
- [This Is: Tinie Tempah](/playlists/pretty/37i9dQZF1DX2YQ2Ju3gagO.md)
- [This Is: Trey Songz](/playlists/pretty/37i9dQZF1DX5xFQkXoZxdM.md)
- [This Is: Troye Sivan](/playlists/pretty/37i9dQZF1DXaEC8MQ0kjtY.md)
- [This Is: Vance Joy](/playlists/pretty/37i9dQZF1DWVzMOBac4fUJ.md)
- [This Is: Victor Manuelle](/playlists/pretty/37i9dQZF1DX16jhUDf29DN.md)
- [This Is: Xavier Omär](/playlists/pretty/37i9dQZF1DX7W9NinHzoYY.md)
- [This is BAEKHYUN](/playlists/pretty/37i9dQZF1DX82z3m3RyeLu.md)
- [This is Bruce Springsteen](/playlists/pretty/37i9dQZF1DX9qkL85stcHs.md)
- [This is Deep Purple](/playlists/pretty/37i9dQZF1DX5WtNRbfbuUo.md)
- [This is Eric Nam](/playlists/pretty/37i9dQZF1DWSvP5HMve5xc.md)
- [This is Frequency](/playlists/pretty/37i9dQZF1DWVgsJtp58d1t.md)
- [This is Gershwin](/playlists/pretty/37i9dQZF1DXdcNhMtmDJe1.md)
- [This is Jerry Garcia](/playlists/pretty/37i9dQZF1DX8N0xov3IdrH.md)
- [This is LeeHi](/playlists/pretty/37i9dQZF1DWWWwqfy8EHP6.md)
- [This is MAMAMOO](/playlists/pretty/37i9dQZF1DWW5pERGrNVob.md)
- [This is MILOŠ](/playlists/pretty/37i9dQZF1DX82KQhRWvaIs.md)
- [This is Max Richter](/playlists/pretty/37i9dQZF1DXe2SymtxlfwF.md)
- [This is Of Monsters and Men](/playlists/pretty/37i9dQZF1DWWlQuz77tGe5.md)
- [This is SEVENTEEN](/playlists/pretty/37i9dQZF1DWXa2ShUct1Fm.md)
- [This is Sting](/playlists/pretty/37i9dQZF1DX8yMCqd4JdaS.md)
- [This is SuperM](/playlists/pretty/37i9dQZF1DWYK17xtyYDId.md)
- [This is Valerie June](/playlists/pretty/37i9dQZF1DX50ihgd9HUcT.md)
- [This is: Carole King](/playlists/pretty/37i9dQZF1DX6GiJlVeD6Ou.md)
- [This is: Cher](/playlists/pretty/37i9dQZF1DX3w9f3pg1Dyc.md)
- [This is: Coke Studio Pakistan](/playlists/pretty/37i9dQZF1DX8D7KQ5MCl7U.md)
- [This is: Emeli Sandé](/playlists/pretty/37i9dQZF1DXdRITMyVwc9y.md)
- [This is: Jamiroquai](/playlists/pretty/37i9dQZF1DX9OTdoPfdJpF.md)
- [This is: Maxwell](/playlists/pretty/37i9dQZF1DWTqZKf590Jo5.md)
- [This is: Sir George Martin](/playlists/pretty/37i9dQZF1DX5CrSNP0mzoZ.md)
- [This is: Wiley](/playlists/pretty/37i9dQZF1DXbW9wx2hgf03.md)
- [Thomas & Friends](/playlists/pretty/37i9dQZF1DXdDLDbdNxXQX.md)
- [Thrash Metal Essentials](/playlists/pretty/37i9dQZF1DXbyrUWMp2Tkr.md)
- [Thrashers](/playlists/pretty/37i9dQZF1DWZdFtcHGe8ED.md)
- [Thrifted](/playlists/pretty/37i9dQZF1DX7ygx34a8k2z.md)
- [Throwback Jams](/playlists/pretty/37i9dQZF1DX8ky12eWIvcW.md)
- [Throwback Party](/playlists/pretty/37i9dQZF1DX7F6T2n2fegs.md)
- [Throwback R&B](/playlists/pretty/37i9dQZF1DX9zR5aXbFFRA.md)
- [Throwback Thursday](/playlists/pretty/37i9dQZF1DWWwaxRea1LWS.md)
- [Throwback Workout](/playlists/pretty/37i9dQZF1DX8CwbNGNKurt.md)
- [Tibetan Bowls](/playlists/pretty/37i9dQZF1DX3JNwc30ddaO.md)
- [Tim: The Extended Story](/playlists/pretty/37i9dQZF1DX1N9hVU2pAoX.md)
- [Timeless Love Songs](/playlists/pretty/37i9dQZF1DX7rOY2tZUw1k.md)
- [Timeless Soul Ballads](/playlists/pretty/37i9dQZF1DWY8GmMJbmnsS.md)
- [Tirade](/playlists/pretty/37i9dQZF1DWWXzA48d9shL.md)
- [To All The Boys Official Playlist](/playlists/pretty/37i9dQZF1DWVdxPuMYBuAk.md)
- [To Your Limit](/playlists/pretty/37i9dQZF1DWUdtoEryrppL.md)
- [Today's Indie Rock](/playlists/pretty/37i9dQZF1DX30HHrCAl4ZG.md)
- [Today's Singer\-Songwriters](/playlists/pretty/37i9dQZF1DWTyjRnMgESue.md)
- [Today's Top Hits](/playlists/pretty/37i9dQZF1DXcBWIGoYBM5M.md)
- [Tokyo Rising](/playlists/pretty/37i9dQZF1DWX9u2doQ8Q2L.md)
- [Tokyo Super Hits!](/playlists/pretty/37i9dQZF1DXafb0IuPwJyF.md)
- [Tollywood Divas](/playlists/pretty/37i9dQZF1DX442zFw7L5ce.md)
- [Tollywood Pearls](/playlists/pretty/37i9dQZF1DX5VOFoIqmrOV.md)
- [Tony Hawk's Pro Skater 1 + 2](/playlists/pretty/37i9dQZF1DX6F6y6vVLZ8H.md)
- [Top 100 tracks of 2014 \- Sweden](/playlists/pretty/23sHdrU9wnUTqYjHZQ101O.md)
- [Top 50 \- Argentina](/playlists/pretty/37i9dQZEVXbMMy2roB9myp.md)
- [Top 50 \- Australia](/playlists/pretty/37i9dQZEVXbJPcfkRz0wJ0.md)
- [Top 50 \- Austria](/playlists/pretty/37i9dQZEVXbKNHh6NIXu36.md)
- [Top 50 \- Belgium](/playlists/pretty/37i9dQZEVXbJNSeeHswcKB.md)
- [Top 50 \- Bolivia](/playlists/pretty/37i9dQZEVXbJqfMFK4d691.md)
- [Top 50 \- Brazil](/playlists/pretty/37i9dQZEVXbMXbN3EUUhlg.md)
- [Top 50 \- Bulgaria](/playlists/pretty/37i9dQZEVXbNfM2w2mq1B8.md)
- [Top 50 \- Canada](/playlists/pretty/37i9dQZEVXbKj23U1GF4IR.md)
- [Top 50 \- Chile](/playlists/pretty/37i9dQZEVXbL0GavIqMTeb.md)
- [Top 50 \- Colombia](/playlists/pretty/37i9dQZEVXbOa2lmxNORXQ.md)
- [Top 50 \- Costa Rica](/playlists/pretty/37i9dQZEVXbMZAjGMynsQX.md)
- [Top 50 \- Czech Republic](/playlists/pretty/37i9dQZEVXbIP3c3fqVrJY.md)
- [Top 50 \- Denmark](/playlists/pretty/37i9dQZEVXbL3J0k32lWnN.md)
- [Top 50 \- Dominican Republic](/playlists/pretty/37i9dQZEVXbKAbrMR8uuf7.md)
- [Top 50 \- Ecuador](/playlists/pretty/37i9dQZEVXbJlM6nvL1nD1.md)
- [Top 50 \- Egypt](/playlists/pretty/37i9dQZEVXbLn7RQmT5Xv2.md)
- [Top 50 \- El Salvador](/playlists/pretty/37i9dQZEVXbLxoIml4MYkT.md)
- [Top 50 \- Estonia](/playlists/pretty/37i9dQZEVXbLesry2Qw2xS.md)
- [Top 50 \- Finland](/playlists/pretty/37i9dQZEVXbMxcczTSoGwZ.md)
- [Top 50 \- France](/playlists/pretty/37i9dQZEVXbIPWwFssbupI.md)
- [Top 50 \- Germany](/playlists/pretty/37i9dQZEVXbJiZcmkrIHGU.md)
- [Top 50 \- Global](/playlists/pretty/37i9dQZEVXbMDoHDwVN2tF.md)
- [Top 50 \- Greece](/playlists/pretty/37i9dQZEVXbJqdarpmTJDL.md)
- [Top 50 \- Guatemala](/playlists/pretty/37i9dQZEVXbLy5tBFyQvd4.md)
- [Top 50 \- Honduras](/playlists/pretty/37i9dQZEVXbJp9wcIM9Eo5.md)
- [Top 50 \- Hong Kong](/playlists/pretty/37i9dQZEVXbLwpL8TjsxOG.md)
- [Top 50 \- Hungary](/playlists/pretty/37i9dQZEVXbNHwMxAkvmF8.md)
- [Top 50 \- Iceland](/playlists/pretty/37i9dQZEVXbKMzVsSGQ49S.md)
- [Top 50 \- India](/playlists/pretty/37i9dQZEVXbLZ52XmnySJg.md)
- [Top 50 \- Indonesia](/playlists/pretty/37i9dQZEVXbObFQZ3JLcXt.md)
- [Top 50 \- Ireland](/playlists/pretty/37i9dQZEVXbKM896FDX8L1.md)
- [Top 50 \- Israel](/playlists/pretty/37i9dQZEVXbJ6IpvItkve3.md)
- [Top 50 \- Italy](/playlists/pretty/37i9dQZEVXbIQnj7RRhdSX.md)
- [Top 50 \- Japan](/playlists/pretty/37i9dQZEVXbKXQ4mDTEBXq.md)
- [Top 50 \- Latvia](/playlists/pretty/37i9dQZEVXbJWuzDrTxbKS.md)
- [Top 50 \- Lithuania](/playlists/pretty/37i9dQZEVXbMx56Rdq5lwc.md)
- [Top 50 \- Luxembourg](/playlists/pretty/37i9dQZEVXbKGcyg6TFGx6.md)
- [Top 50 \- Malaysia](/playlists/pretty/37i9dQZEVXbJlfUljuZExa.md)
- [Top 50 \- Mexico](/playlists/pretty/37i9dQZEVXbO3qyFxbkOE1.md)
- [Top 50 \- Morocco](/playlists/pretty/37i9dQZEVXbJU9eQpX8gPT.md)
- [Top 50 \- Netherlands](/playlists/pretty/37i9dQZEVXbKCF6dqVpDkS.md)
- [Top 50 \- New Zealand](/playlists/pretty/37i9dQZEVXbM8SIrkERIYl.md)
- [Top 50 \- Nicaragua](/playlists/pretty/37i9dQZEVXbISk8kxnzfCq.md)
- [Top 50 \- Norway](/playlists/pretty/37i9dQZEVXbJvfa0Yxg7E7.md)
- [Top 50 \- Panama](/playlists/pretty/37i9dQZEVXbKypXHVwk1f0.md)
- [Top 50 \- Paraguay](/playlists/pretty/37i9dQZEVXbNOUPGj7tW6T.md)
- [Top 50 \- Peru](/playlists/pretty/37i9dQZEVXbJfdy5b0KP7W.md)
- [Top 50 \- Philippines](/playlists/pretty/37i9dQZEVXbNBz9cRCSFkY.md)
- [Top 50 \- Poland](/playlists/pretty/37i9dQZEVXbN6itCcaL3Tt.md)
- [Top 50 \- Portugal](/playlists/pretty/37i9dQZEVXbKyJS56d1pgi.md)
- [Top 50 \- Romania](/playlists/pretty/37i9dQZEVXbNZbJ6TZelCq.md)
- [Top 50 \- Russia](/playlists/pretty/37i9dQZEVXbL8l7ra5vVdB.md)
- [Top 50 \- Saudi Arabia](/playlists/pretty/37i9dQZEVXbLrQBcXqUtaC.md)
- [Top 50 \- Singapore](/playlists/pretty/37i9dQZEVXbK4gjvS1FjPY.md)
- [Top 50 \- Slovakia](/playlists/pretty/37i9dQZEVXbKIVTPX9a2Sb.md)
- [Top 50 \- South Africa](/playlists/pretty/37i9dQZEVXbMH2jvi6jvjk.md)
- [Top 50 \- South Korea](/playlists/pretty/37i9dQZEVXbNxXF4SkHj9F.md)
- [Top 50 \- Spain](/playlists/pretty/37i9dQZEVXbNFJfN1Vw8d9.md)
- [Top 50 \- Sweden](/playlists/pretty/37i9dQZEVXbLoATJ81JYXz.md)
- [Top 50 \- Switzerland](/playlists/pretty/37i9dQZEVXbJiyhoAPEfMK.md)
- [Top 50 \- Taiwan](/playlists/pretty/37i9dQZEVXbMnZEatlMSiu.md)
- [Top 50 \- Thailand](/playlists/pretty/37i9dQZEVXbMnz8KIWsvf9.md)
- [Top 50 \- Turkey](/playlists/pretty/37i9dQZEVXbIVYVBNw9D5K.md)
- [Top 50 \- UAE](/playlists/pretty/37i9dQZEVXbM4UZuIrvHvA.md)
- [Top 50 \- USA](/playlists/pretty/37i9dQZEVXbLRQDuF5jeBp.md)
- [Top 50 \- Ukraine](/playlists/pretty/37i9dQZEVXbKkidEfWYRuD.md)
- [Top 50 \- United Kingdom](/playlists/pretty/37i9dQZEVXbLnolsZ8PSNw.md)
- [Top 50 \- Uruguay](/playlists/pretty/37i9dQZEVXbMJJi3wgRbAy.md)
- [Top 50 \- Vietnam](/playlists/pretty/37i9dQZEVXbLdGSmz6xilI.md)
- [Top Boy Official Playlist](/playlists/pretty/37i9dQZF1DWTuEPedcYvVB.md)
- [Top Brasil](/playlists/pretty/37i9dQZF1DX0FOF1IUWK1W.md)
- [Top Christian & Gospel](/playlists/pretty/37i9dQZF1DXcb6CQIjdqKy.md)
- [Top Christian Contemporary](/playlists/pretty/37i9dQZF1DWUileP28ODwg.md)
- [Top Christian Presents..\. Best Christian & Gospel Songs of 2021](/playlists/pretty/37i9dQZF1DXbrknLz4Do7C.md)
- [Top Christian Rock](/playlists/pretty/37i9dQZF1DX0N57moxx9BL.md)
- [Top Christian presents..\. Best Christian & Gospel Songs of the 2010s](/playlists/pretty/37i9dQZF1DXaJDplEJVP32.md)
- [Top Dads on Spotify](/playlists/pretty/5lMXuhAFbG0xiAw0XiYKAP.md)
- [Top Female Artists of 2016 \- USA](/playlists/pretty/37i9dQZF1DWWoCDtOBjhpE.md)
- [Top Gaming Tracks](/playlists/pretty/37i9dQZF1DWTyiBJ6yEqeu.md)
- [Top Gaming Tracks: One Year Together](/playlists/pretty/2FmMinHNFfX3Apt34AwEqc.md)
- [Top K\-Pop Artists of 2O2O](/playlists/pretty/37i9dQZF1DWT1zrjQN7E2v.md)
- [Top K\-Pop Tracks of 2O2O](/playlists/pretty/37i9dQZF1DX8NzI27ip7J0.md)
- [Top Latin Classical](/playlists/pretty/37i9dQZF1DXajUXy2f1Dsi.md)
- [Top Latin Hits](/playlists/pretty/3vWayw42WNrZX1NdMZBSgZ.md)
- [Top Male Artists of 2017: USA](/playlists/pretty/37i9dQZF1DX2SAJ4GmhZC1.md)
- [Top Misquoted Song Lyrics](/playlists/pretty/4nGMejqlEJh82huRHZ19cE.md)
- [Top México](/playlists/pretty/37i9dQZF1DWZKpHIbfDI1i.md)
- [Top Of The Core](/playlists/pretty/37i9dQZF1DXakaomPRkkDa.md)
- [Top Party Hits of 2021](/playlists/pretty/37i9dQZF1DX7h5mLM5Kq4G.md)
- [Top Picks Chill](/playlists/pretty/2b5yd7Ox7vb4OcPOOVYwFZ.md)
- [Top Picks Classical](/playlists/pretty/3jh9R9uXIoozPA0uccJt2C.md)
- [Top Picks Club](/playlists/pretty/285xVjuyHG2CusStdc8kCS.md)
- [Top Picks Country](/playlists/pretty/7hx7ugiU2MaeXOjQRVDzdk.md)
- [Top Picks Decades](/playlists/pretty/0q2dbyUyAuUkW3ec6XRwJD.md)
- [Top Picks Events](/playlists/pretty/2Mecjd64RGHE4vLDMuX88V.md)
- [Top Picks Groove](/playlists/pretty/38ZGEwSsiHoOEOu446h75W.md)
- [Top Picks Jazz and Blues](/playlists/pretty/5LrQkRUFFuKWAJCECd2X9y.md)
- [Top Picks Kids](/playlists/pretty/4ruhrP9ntTdDMpjrk22v9u.md)
- [Top Picks Mood](/playlists/pretty/1EQVvrXxgoWdqUHni1LOgm.md)
- [Top Picks Party](/playlists/pretty/2WIkzIBRwM9wRD9innJ8b7.md)
- [Top Picks Pop](/playlists/pretty/3xGWOQUB6jgHd4PLVQvbfG.md)
- [Top Picks Pop Culture](/playlists/pretty/5QZZbWjNVjynssxTuO3f0f.md)
- [Top Picks Rock](/playlists/pretty/5QOzTki17fEWKoUVcvTrI2.md)
- [Top Picks Romance](/playlists/pretty/4tSzT9BRuf3qRJDbPz4SlS.md)
- [Top Picks Toplists](/playlists/pretty/4lCv0oN3gPxoqvXmA3cDjS.md)
- [Top Picks Travel](/playlists/pretty/4NAi06Izmj4CPqmMuY1RsE.md)
- [Top Picks Urban](/playlists/pretty/6spPs4oxQEPSWXyXzqg8CR.md)
- [Top Picks Workout](/playlists/pretty/45mRKVQrL1pK9tbRp25yro.md)
- [Top Picks holiday](/playlists/pretty/4uLnCAHJw65SyFXXmBSuc0.md)
- [Top Sharqi Hits](/playlists/pretty/37i9dQZF1DXe3aCmUoBd8n.md)
- [Top Shower Songs](/playlists/pretty/0RTz1jFo5BXGPfI8eVf8sj.md)
- [Top Streaming Artists of 2021](/playlists/pretty/0mfbHbmy45RZa77K1Us3cd.md)
- [Top Tracks for Children 2021](/playlists/pretty/37i9dQZF1DXdYpPM74QBGK.md)
- [Top Tracks for Kids and Families 2021](/playlists/pretty/37i9dQZF1DXbfRwViuerGJ.md)
- [Top Tracks in Kids](/playlists/pretty/5BQyCxfPfCno0PuTqkZUgb.md)
- [Top Tracks in Popculture](/playlists/pretty/6dvI9YLz5JyXhoUo0eQJze.md)
- [Top Tracks in Travel](/playlists/pretty/2Hg4Q2t6mD8PITWKAQCMFD.md)
- [Top Tracks in Workout](/playlists/pretty/7s0efM9c1ZS427tw2B6wEF.md)
- [Top Trending: Hip\-Hop](/playlists/pretty/6PPav6OOdBg3kTIyyCqeDw.md)
- [Top Trending: Pop](/playlists/pretty/3U6hsbkXCoetMh9khioWQX.md)
- [Top Trending: R&B / Soul](/playlists/pretty/3wjPs3pZiBROjNC2sgWJbN.md)
- [Totally 80's Summer Hits](/playlists/pretty/1VoxprVZJXLqp9yp6Shxjq.md)
- [Totally Stress Free](/playlists/pretty/37i9dQZF1DWT7XSlwvR1ar.md)
- [Tout doux](/playlists/pretty/37i9dQZF1DX5eku7F05o6O.md)
- [Tra Amiche](/playlists/pretty/37i9dQZF1DX5HvC37O9DNe.md)
- [Trabalhando de Casa](/playlists/pretty/37i9dQZF1DWXhBG1ELU1nr.md)
- [Tradición Mexicana](/playlists/pretty/37i9dQZF1DWXdotmDZv5uE.md)
- [Traditional Country](/playlists/pretty/37i9dQZF1DXaiEFNvQPZrM.md)
- [Traffic Jam](/playlists/pretty/37i9dQZF1DWUafMg94PbK3.md)
- [Traffic Jams](/playlists/pretty/0mY9BQvlpraYLzg9BfKuVa.md)
- [Traffic Jams Naija](/playlists/pretty/37i9dQZF1DX4NsREGkRuCe.md)
- [Train Sounds](/playlists/pretty/37i9dQZF1DX9mxKt6WorzQ.md)
- [Trance Classics](/playlists/pretty/37i9dQZF1DXbtYAdenGE9U.md)
- [Trance Latino](/playlists/pretty/37i9dQZF1DX4MAWmETv8JA.md)
- [Trance Mission](/playlists/pretty/37i9dQZF1DX91oIci4su1D.md)
- [Tranqui](/playlists/pretty/37i9dQZF1DWVt7Sb7a9kCb.md)
- [Tranquility](/playlists/pretty/37i9dQZF1DX4FLflF8wPKE.md)
- [Transcend](/playlists/pretty/37i9dQZF1DWViyN2b86Qnu.md)
- [Trap Classe](/playlists/pretty/37i9dQZF1DXbbBJ8C1wekz.md)
- [Trap Classics](/playlists/pretty/37i9dQZF1DX9ru0ROInnew.md)
- [Trap Corridos](/playlists/pretty/37i9dQZF1DXaz6AvnkzW9m.md)
- [Trap Land](/playlists/pretty/37i9dQZF1DXde9tuMHuIsj.md)
- [Trap Luv](/playlists/pretty/37i9dQZF1DWTLxOkM7PwUb.md)
- [Trap Mojito](/playlists/pretty/37i9dQZF1DX1OIMC8iDi74.md)
- [Trap Nation](/playlists/pretty/0NCspsyf0OS4BsPgGhkQXM.md)
- [Trap Ouro](/playlists/pretty/37i9dQZF1DWYBXtbGSCurj.md)
- [Trap Rewind](/playlists/pretty/37i9dQZF1DX0JcH25923HT.md)
- [Trap Workout Beats](/playlists/pretty/37i9dQZF1DWZqUHC2tviPw.md)
- [Trapperz Andinos](/playlists/pretty/37i9dQZF1DXdqrBLlPKz6L.md)
- [Trapperz Argentina](/playlists/pretty/37i9dQZF1DWXrVH01e3PIE.md)
- [Trapperz Brasil](/playlists/pretty/37i9dQZF1DWWr5uieiPUVM.md)
- [Trapperz Chile](/playlists/pretty/37i9dQZF1DWZRy1LwINMSK.md)
- [Trapperz Uruguay](/playlists/pretty/37i9dQZF1DX5DGKC3XcKsx.md)
- [Trapstorno](/playlists/pretty/37i9dQZF1DX4nGm7tTyA78.md)
- [Trattoria Italiana](/playlists/pretty/37i9dQZF1DWSy1uHq5qF1L.md)
- [TrenChill K\-Hip Hop](/playlists/pretty/37i9dQZF1DWWvmOXYvR5a6.md)
- [TrenChill K\-R&B](/playlists/pretty/37i9dQZF1DXbirtHQBuwCo.md)
- [Trick or Treat](/playlists/pretty/37i9dQZF1DX6IZDpJNxVZP.md)
- [Trip Hop](/playlists/pretty/37i9dQZF1DWVXbA4kjkg6G.md)
- [Trolls Official Playlist](/playlists/pretty/37i9dQZF1DWSXn51Tv3nWo.md)
- [Trophy Room](/playlists/pretty/37i9dQZF1DX8dTWjpijlub.md)
- [Tropical Hits](/playlists/pretty/37i9dQZF1DWYey22ryYM8U.md)
- [Tropical House](/playlists/pretty/37i9dQZF1DX0AMssoUKCz7.md)
- [Troski Rhythms](/playlists/pretty/37i9dQZF1DX8tCg29z8GX8.md)
- [Träning](/playlists/pretty/37i9dQZF1DX4TXm6C4J2mM.md)
- [Tríos y Boleros Románticos](/playlists/pretty/37i9dQZF1DX2QXdeI8K6lP.md)
- [Tulum Party](/playlists/pretty/37i9dQZF1DX4IlXDVSi4zz.md)
- [Tulum Vibes](/playlists/pretty/37i9dQZF1DX9pP7cC2liKw.md)
- [Tunigo Live](/playlists/pretty/5rqcJUB5ox8BK3L3Ki7gfF.md)
- [Tunisia Sounds](/playlists/pretty/37i9dQZF1DX9HeUXWsJonl.md)
- [Turnt Mode](/playlists/pretty/4UeRg7G4h9gxqlonlifPEn.md)
- [Turntable](/playlists/pretty/37i9dQZF1DX6AWGsjpYHPA.md)
- [Twee](/playlists/pretty/37i9dQZF1DWUhWIpUC7Aq1.md)
- [Twist and Shout](/playlists/pretty/37i9dQZF1DXcHV6YH5zTsV.md)
- [Two Good: Lata & Mukesh](/playlists/pretty/37i9dQZF1DXbis4ynuZ7ck.md)
- [UK Funky](/playlists/pretty/37i9dQZF1DX2JKi7oFC6Jv.md)
- [UK House Music](/playlists/pretty/37i9dQZF1DWSrVdvTl1tVY.md)
- [US Exclusives](/playlists/pretty/3kNL4k3rmfGRfx577lL715.md)
- [Ultimate Christian Alternative](/playlists/pretty/37i9dQZF1DX3XfcfEnrDRE.md)
- [Ultimate Covers](/playlists/pretty/37i9dQZF1DXe5Q8muTQked.md)
- [Ultimate Halloween](/playlists/pretty/37i9dQZF1DXarlH9zHuV0v.md)
- [Ultimate Indie](/playlists/pretty/37i9dQZF1DX2Nc3B70tvx0.md)
- [Ultimate Indie Presents..\. Best Indie Tracks of the 2010s](/playlists/pretty/37i9dQZF1DWTHM4kX49UKs.md)
- [Ultimate Indie Presents..\. Best Tracks of 2019](/playlists/pretty/37i9dQZF1DWTc5QDlvD7t0.md)
- [Ultimate Latin Indie](/playlists/pretty/37i9dQZF1DX4V5eXk4NKqu.md)
- [Ultimate Live Jams](/playlists/pretty/5bjjHyKeiGnYdupfr3UUCW.md)
- [Ultimate Party Classics](/playlists/pretty/37i9dQZF1DX0IlCGIUGBsA.md)
- [Ultimate Performances](/playlists/pretty/37i9dQZF1DWY58YgA8d6HG.md)
- [Ultimate Pop Gaming](/playlists/pretty/37i9dQZF1DWYRNXjFoiid2.md)
- [Ultimate Rock Gaming](/playlists/pretty/37i9dQZF1DWZjmJmeiazwd.md)
- [Ultra Gaming](/playlists/pretty/37i9dQZF1DWYN9NBqvY7Tx.md)
- [Una Carica di Espresso!](/playlists/pretty/37i9dQZF1DWVTAn6Oz7Zf1.md)
- [Una de Traileros](/playlists/pretty/37i9dQZF1DX3LJg0ziYmU4.md)
- [Under the Covers](/playlists/pretty/37i9dQZF1DX9xJGcbAX1KJ.md)
- [Unplugged](/playlists/pretty/37i9dQZF1DWWxrt1tiKYiX.md)
- [Unshaming](/playlists/pretty/37i9dQZF1DWWGquR9lelQD.md)
- [Unsolicited Advice](/playlists/pretty/37i9dQZF1DX8NZFqAdV1lo.md)
- [Unwind 00s](/playlists/pretty/37i9dQZF1DX07vKD9l5Yfi.md)
- [Up & Out](/playlists/pretty/2udwObkzQEPQWbUi95SzGM.md)
- [Upbeat Blues](/playlists/pretty/37i9dQZF1DXaPpS4GmGB4L.md)
- [Uplifting Soul Classics](/playlists/pretty/37i9dQZF1DWTx0xog3gN3q.md)
- [Upside Down Playlist](/playlists/pretty/37i9dQZF1EZT8cSzhJA9lL.md)
- [Urbano Fresh](/playlists/pretty/37i9dQZF1DX5hrSNdL1ktS.md)
- [Urbano Rising](/playlists/pretty/37i9dQZF1DX4OjfOteYnH8.md)
- [Urkult 2012](/playlists/pretty/7b1rMSnmiYfj8nH8spIjxF.md)
- [V\-Pop Không Thể Thiếu](/playlists/pretty/37i9dQZF1DX4g8Gs5nUhpp.md)
- [VOL.4](/playlists/pretty/25wn6E4IiaAaTH6HBnGJ8y.md)
- [VOLAC's DJ Mix](/playlists/pretty/37i9dQZF1DWUmMjKFzN3Ka.md)
- [Vacation Bible School](/playlists/pretty/37i9dQZF1DX4WTGgxIlIhQ.md)
- [Valentine anger](/playlists/pretty/1apRF10Iufr0NBBiF1u7E5.md)
- [Valentine's Day Love](/playlists/pretty/37i9dQZF1DX4pAtJteyweQ.md)
- [Van Life](/playlists/pretty/37i9dQZF1DX2ogDiL6nZJr.md)
- [Varsity Bars](/playlists/pretty/37i9dQZF1DXdWMJMjqz9bm.md)
- [Veranito a la Española](/playlists/pretty/37i9dQZF1DX73CRmw4CiSI.md)
- [Verano Forever](/playlists/pretty/37i9dQZF1DXdnGF35OawbN.md)
- [Very Nearly Nashville](/playlists/pretty/37i9dQZF1DWXU4C3nPzApC.md)
- [Verzuz: 112 vs\. Jagged Edge](/playlists/pretty/37i9dQZF1DX6Mi3Mw1YGw5.md)
- [Verzuz: Erykah Badu vs\. Jill Scott](/playlists/pretty/37i9dQZF1DX3ZKargsaFiQ.md)
- [Verzuz: Ne\-Yo vs\. Johnta Austin](/playlists/pretty/37i9dQZF1DX2N4Bvb5aSXB.md)
- [Verzuz: The\-Dream vs\. Sean Garrett](/playlists/pretty/37i9dQZF1DWVCnP7z928RW.md)
- [Verão 2022](/playlists/pretty/37i9dQZF1DWVeItqkdELaR.md)
- [Viaje en Carretera Nostalgia](/playlists/pretty/37i9dQZF1DX02pmAaEbu9H.md)
- [Viaje en Carretera: Rock](/playlists/pretty/37i9dQZF1DWULcjjSkTbWc.md)
- [Vibes Right Now](/playlists/pretty/37i9dQZF1DWXqzQh2VQNvW.md)
- [Vibra Tropical](/playlists/pretty/37i9dQZF1DX3fXJqxGjuEP.md)
- [Vibras](/playlists/pretty/37i9dQZF1DWT34oeYRnJ0R.md)
- [Video Game Soundtracks](/playlists/pretty/37i9dQZF1DXdfOcg1fm0VG.md)
- [Viejitas pero Bonitas](/playlists/pretty/37i9dQZF1DX05XOaKL5GVe.md)
- [Villain Mode](/playlists/pretty/37i9dQZF1DX3R7OWWGN4gH.md)
- [Vintage Blues Folk](/playlists/pretty/6zcjhNUkQ6taQK9hxhweCj.md)
- [Vintage Radio Dramas](/playlists/pretty/37i9dQZF1DWZ8QVh1ew4PD.md)
- [Vintage Vibes](/playlists/pretty/37i9dQZF1DX6dvuioZhoLo.md)
- [Vintage Vibes: Sunny Reggae](/playlists/pretty/37i9dQZF1DWWgsG1xGbDd1.md)
- [Vinyasa Flow](/playlists/pretty/37i9dQZF1DWTofcvJ2Dvma.md)
- [Vinyasa Flow \(2\)](/playlists/pretty/2B64RN7KJte5x6iXgg02tv.md)
- [Viral 50 \- Brazil](/playlists/pretty/37i9dQZEVXbMOkSwG072hV.md)
- [Viral 50 \- Canada](/playlists/pretty/37i9dQZEVXbKfIuOAZrk7G.md)
- [Viral 50 \- Chile](/playlists/pretty/37i9dQZEVXbJs8e2vk15a8.md)
- [Viral 50 \- Costa Rica](/playlists/pretty/37i9dQZEVXbKOefHPXPMyf.md)
- [Viral 50 \- Global](/playlists/pretty/37i9dQZEVXbLiRSasKsNU9.md)
- [Viral 50 \- Honduras](/playlists/pretty/37i9dQZEVXbNpKdqfZ9Upp.md)
- [Viral 50 \- Mexico](/playlists/pretty/37i9dQZEVXbLuUZrygauiA.md)
- [Viral 50 \- Slovakia](/playlists/pretty/37i9dQZEVXbK3Iy2zvpfp4.md)
- [Viral 50 \- USA](/playlists/pretty/37i9dQZEVXbKuaTI1Z1Afx.md)
- [Viral Country](/playlists/pretty/37i9dQZF1DX8OjqpsBZy3r.md)
- [Viral Dance](/playlists/pretty/37i9dQZF1DX6C8II7sX76D.md)
- [Viral Hits](/playlists/pretty/37i9dQZF1DX2L0iB23Enbq.md)
- [Viral JRE Episodes](/playlists/pretty/37i9dQZF1DWV9nLxMZM7Cj.md)
- [Viral Latino](/playlists/pretty/37i9dQZF1DX5y71ufjoyXC.md)
- [Virgin River Official Playlist](/playlists/pretty/37i9dQZF1DWZWf7hUnPGOw.md)
- [Virtual Reality](/playlists/pretty/37i9dQZF1DWVF0pvJ1YrL7.md)
- [Vital Voices](/playlists/pretty/37i9dQZF1DWUEOhBtBn64i.md)
- [Viva Latino](/playlists/pretty/37i9dQZF1DX10zKzsJ2jva.md)
- [Viva Latino Billion Streams Club](/playlists/pretty/37i9dQZF1DXb39rhYOQBVZ.md)
- [Vivo de Cumbia](/playlists/pretty/37i9dQZF1DWXeDU5PJuUQs.md)
- [Vivo de Rock](/playlists/pretty/37i9dQZF1DWW6E2JpQb9U9.md)
- [Vocal Acrobats](/playlists/pretty/2JskSjr3Rl0LAv05L0hjV4.md)
- [Vocal Jazz](/playlists/pretty/37i9dQZF1DX2kt7dB63bU1.md)
- [Vocal Jazz Classics](/playlists/pretty/37i9dQZF1DX3Sx2mAdbEvx.md)
- [Voces Añejas de Iberoamérica](/playlists/pretty/37i9dQZF1DWYtLQ6jk5kQG.md)
- [Voglia di Sole](/playlists/pretty/37i9dQZF1DWVE0GbO5rNDb.md)
- [Vogue Travel: The Sound of the Upper East Side](/playlists/pretty/61T3llVc7dJDCZf1SR72c0.md)
- [Volando con Reggae](/playlists/pretty/37i9dQZF1DX4Ux6OGNoFON.md)
- [Volume Máximo](/playlists/pretty/37i9dQZF1DX4908CEYEdlz.md)
- [Về Quê](/playlists/pretty/37i9dQZF1DX1kCQJbQlZlA.md)
- [WOR K  OUT](/playlists/pretty/37i9dQZF1DX3ZeFHRhhi7Y.md)
- [Wake Up Gently](/playlists/pretty/37i9dQZF1DX7cZxYLqLUJl.md)
- [Wake Up Happy](/playlists/pretty/37i9dQZF1DX0UrRvztWcAU.md)
- [Walk Like A Badass](/playlists/pretty/37i9dQZF1DX1tyCD9QhIWF.md)
- [Walk The Dog](/playlists/pretty/2mADaSxlIcxRDSG9e9vLlh.md)
- [Walk a Country Mile](/playlists/pretty/4p3lupatTubTWpTgCZjgpk.md)
- [Walking & Strolling](/playlists/pretty/37i9dQZF1DX1bomZH0Sueq.md)
- [Walt Jr\. \- Innocent](/playlists/pretty/7dRuhLsXe96SgjYtPvMEcL.md)
- [Walter \- Dangerous](/playlists/pretty/53yqWl4VM0iD34tl27ABhY.md)
- [Warehouse Breaks](/playlists/pretty/37i9dQZF1DX0cgootvTU8I.md)
- [Warehouse Party](/playlists/pretty/37i9dQZF1DX5hHfOi73rY3.md)
- [Warm Fuzzy Feeling](/playlists/pretty/37i9dQZF1DX5IDTimEWoTd.md)
- [Wax Motif's DJ Mix](/playlists/pretty/37i9dQZF1DXc6MmasnAO5O.md)
- [Way Out West 2013](/playlists/pretty/2IBmQa3jJULanJldYav1jW.md)
- [We Dem Girlz](/playlists/pretty/3g2dsbLbtpOz0Gpo4W50QK.md)
- [We Everywhere](/playlists/pretty/37i9dQZF1DWT6SJaitNDax.md)
- [We Love Elmo!](/playlists/pretty/2KSySxa7iudjK0IsgFxuaW.md)
- [We Rise](/playlists/pretty/37i9dQZF1DWSzuTydUOXRi.md)
- [We The People](/playlists/pretty/37i9dQZF1DWVnnLLPsf7sZ.md)
- [Wedding Party](/playlists/pretty/37i9dQZF1DX1tLHZHOkEVR.md)
- [Wedding Songs](/playlists/pretty/37i9dQZF1DX3Z99viCDp7Q.md)
- [Wedding Songs 2022](/playlists/pretty/43eWkIiNDbimyD35iong1G.md)
- [Weightless](/playlists/pretty/37i9dQZF1DXe2zbyJVaPNZ.md)
- [Welcome Baby Kimye!](/playlists/pretty/5zpAWvvDe0Q8TXjrgInIke.md)
- [Welcome Home](/playlists/pretty/0LqjAibgbS9ep32zZrDcAN.md)
- [Welcome To Zamrock](/playlists/pretty/37i9dQZF1DWY7TEf86LRjN.md)
- [West Coast Jazz](/playlists/pretty/37i9dQZF1DWYuZvbpQVftE.md)
- [Westside Story](/playlists/pretty/37i9dQZF1DWSvKsRPPnv5o.md)
- [Whale Sounds](/playlists/pretty/37i9dQZF1DX60xkhEfNtud.md)
- [When We Were Young Radio](/playlists/pretty/37i9dQZF1E8LEwyPvT2AXf.md)
- [White Noise](/playlists/pretty/37i9dQZF1DWUZ5bk6qqDSy.md)
- [Who We Be](/playlists/pretty/37i9dQZF1DXcDoDDetPsEg.md)
- [Wholesome](/playlists/pretty/37i9dQZF1DXaiLfJ2acJnZ.md)
- [Wicked Wives Wine Party](/playlists/pretty/2EcSH9oZNzBmGDNqoTdvBJ.md)
- [Wide Awake](/playlists/pretty/37i9dQZF1DWXsTPi6XhWl6.md)
- [Wild + Free](/playlists/pretty/37i9dQZF1DX5Q5wA1hY6bS.md)
- [Wild Ambience](/playlists/pretty/37i9dQZF1DXbpYC8go5XtU.md)
- [Wild Country](/playlists/pretty/37i9dQZF1DX5mB2C8gBeUM.md)
- [Winding Roads](/playlists/pretty/1JuraqRjLX4CmhyvvuXiPF.md)
- [Wine & Dine](/playlists/pretty/37i9dQZF1DWTJNOeepZTGy.md)
- [Winter Classical](/playlists/pretty/37i9dQZF1DX0ynPp7KaiSY.md)
- [With Love, A Changemaker](/playlists/pretty/37i9dQZF1DWZdp0QTOUSvS.md)
- [With Love, A Storyteller](/playlists/pretty/37i9dQZF1DWSqkyNSQUvSz.md)
- [With Love, An Artist](/playlists/pretty/37i9dQZF1DX49H7UBWpZWR.md)
- [Women Of Motown](/playlists/pretty/37i9dQZF1DX3z6D2ln0Hqx.md)
- [Women in Music \| Stories & Songs](/playlists/pretty/1zriHsmiRJmTThtQk8UWPk.md)
- [Women of Acoustic](/playlists/pretty/37i9dQZF1DX7XF2hFaHoss.md)
- [Women of Comedy](/playlists/pretty/37i9dQZF1DX9O8pzsnCkf6.md)
- [Women of Country](/playlists/pretty/37i9dQZF1DX49poIUZYXp7.md)
- [Women of Electronic](/playlists/pretty/37i9dQZF1DX9WbnZpHWMaI.md)
- [Women of Experimental](/playlists/pretty/37i9dQZF1DWY7uXxMycXfq.md)
- [Women of Folk](/playlists/pretty/37i9dQZF1DWSIcimvN18p3.md)
- [Women of Hip\-Hop](/playlists/pretty/37i9dQZF1DX5l9rcXWdrth.md)
- [Women of Indie](/playlists/pretty/37i9dQZF1DWWW53w3AslFX.md)
- [Women of Latin](/playlists/pretty/37i9dQZF1DXb1fcDuOYLYU.md)
- [Women of Philly Soul](/playlists/pretty/37i9dQZF1DX5UvejH8n2BC.md)
- [Women of Pop](/playlists/pretty/37i9dQZF1DX3WvGXE8FqYX.md)
- [Women of R&B](/playlists/pretty/37i9dQZF1DX1wNY9tfWQsS.md)
- [Women of Rock](/playlists/pretty/37i9dQZF1DXd0ZFXhY0CRF.md)
- [Women of Soundtracks](/playlists/pretty/37i9dQZF1DXcj60FvXn3Et.md)
- [Women of Spotify Singles](/playlists/pretty/37i9dQZF1DWVf3wNLVwo2g.md)
- [Women of Sweden](/playlists/pretty/2EaYMuzaVSdPjJOqg77E2E.md)
- [Women of Worship](/playlists/pretty/37i9dQZF1DWVrSccL9KVUt.md)
- [Women of: Coke Studio Pakistan](/playlists/pretty/37i9dQZF1DWZ6Old3hrPIh.md)
- [Women's Lit](/playlists/pretty/37i9dQZF1DX5nERjWj1zmg.md)
- [Women's Voice](/playlists/pretty/37i9dQZF1DWTD6tHjIApT3.md)
- [Woodstock](/playlists/pretty/37i9dQZF1DX6WdWXzlAP9E.md)
- [Word of Mouth](/playlists/pretty/2VxQy0Q22k1gP542tzaMCN.md)
- [Work From Home](/playlists/pretty/37i9dQZF1DWTLSN7iG21yC.md)
- [Work It, Own It](/playlists/pretty/37i9dQZF1DXbmCTvLQy5AO.md)
- [Workday \- Country](/playlists/pretty/6MtNKlWguIlTJ6Q7WAcDtU.md)
- [Workday \- Singer\-songwriter](/playlists/pretty/3TurM2x1HaeNEztqBnomV6.md)
- [Workday Jazz](/playlists/pretty/37i9dQZF1DX41cLva7hoYQ.md)
- [Workday K\-Pop](/playlists/pretty/37i9dQZF1DX5eq3AONkaho.md)
- [Workday Lounge](/playlists/pretty/37i9dQZF1DWT5lkChsPmpy.md)
- [Workday – Zen](/playlists/pretty/1oDFttzXiLUJLjMyulUugY.md)
- [Workday: Rock Classics](/playlists/pretty/37i9dQZF1DX1lwxXvReaux.md)
- [Workout](/playlists/pretty/37i9dQZF1DX70RN3TfWWJh.md)
- [Workout Bangers](/playlists/pretty/7DaNB3xvJ4F96C66mQgmpS.md)
- [Workout Beats](/playlists/pretty/37i9dQZF1DWUSyphfcc6aL.md)
- [Workout Latino](/playlists/pretty/37i9dQZF1DWYK2yx0OW9Kj.md)
- [Workout Twerkout](/playlists/pretty/37i9dQZF1DX0HRj9P7NxeE.md)
- [World Folk](/playlists/pretty/0ByLkBLDx1AS5yXJuBTyCd.md)
- [World's Best Dad](/playlists/pretty/37i9dQZF1DX3XHbM3c2ftZ.md)
- [Worship 2022](/playlists/pretty/61xuizm8At6DCwGHJZTmB7.md)
- [Worship Wednesdays](/playlists/pretty/37i9dQZF1DWZ4eoHSGpAXu.md)
- [WorshipNow](/playlists/pretty/37i9dQZF1DWVYgpMbMPJMz.md)
- [Written By Alex Eskeerdo Izquierdo](/playlists/pretty/37i9dQZF1EFQW1ZXEpcxgt.md)
- [Written By Alex Hope](/playlists/pretty/37i9dQZF1EFy48Gq7cnnlI.md)
- [Written By Biff Stannard](/playlists/pretty/37i9dQZF1EFAu0bePhLMSX.md)
- [Written By Charlene Meulenberg](/playlists/pretty/37i9dQZF1EFIT9yLhyYuHE.md)
- [Written By Chris Jedi](/playlists/pretty/37i9dQZF1EFDNUPYP4SXhD.md)
- [Written By Emily Falvey](/playlists/pretty/37i9dQZF1EFJilMkRJCY5M.md)
- [Written By Emy Perez](/playlists/pretty/37i9dQZF1EFEWwyyANPUmc.md)
- [Written By Gaby Music](/playlists/pretty/37i9dQZF1EFLhxeP4NjhU5.md)
- [Written By Gloria Trevi](/playlists/pretty/37i9dQZF1EFOrrk2jG75Lb.md)
- [Written By Hananiel Eduardo](/playlists/pretty/37i9dQZF1EFFhg9UVfjzNc.md)
- [Written By Hannah Wilson](/playlists/pretty/37i9dQZF1EFRBrkYMAxqIw.md)
- [Written By Helio Bentes](/playlists/pretty/37i9dQZF1EFG2kfqqpW4za.md)
- [Written By Ink](/playlists/pretty/37i9dQZF1EFFNsuSPMFRwX.md)
- [Written By Jenny Owen Youngs](/playlists/pretty/37i9dQZF1EFCxRaSiD7V2s.md)
- [Written By Jessie Reyez](/playlists/pretty/37i9dQZF1EFDdN3ZRC5EmY.md)
- [Written By JonTheProducer](/playlists/pretty/37i9dQZF1EFHZUVUe4PgUG.md)
- [Written By Jotta A](/playlists/pretty/37i9dQZF1EFEQV17m4HQRw.md)
- [Written By Julio Reyes](/playlists/pretty/37i9dQZF1EFR5DqccfWxWe.md)
- [Written By Kadhja Bonet](/playlists/pretty/37i9dQZF1EFFzE2VgSszpf.md)
- [Written By Kaydence](/playlists/pretty/37i9dQZF1EFR1DGWR7P5Kh.md)
- [Written By Leland](/playlists/pretty/37i9dQZF1EFE4tqXM95AGH.md)
- [Written By Lucas Kastrup](/playlists/pretty/37i9dQZF1EFFFC1lIRMlcB.md)
- [Written By Luiz de Assis](/playlists/pretty/37i9dQZF1EFyV9fxDBL8dp.md)
- [Written By Michael Pollack](/playlists/pretty/37i9dQZF1EFxKmdex5v5ih.md)
- [Written By Natali Noor](/playlists/pretty/37i9dQZF1EFLCxccHYZAKZ.md)
- [Written By Sarah Aarons](/playlists/pretty/37i9dQZF1EFzD9XKRPIjnv.md)
- [Written By Secret Code](/playlists/pretty/37i9dQZF1EFKmVW6fwfVy7.md)
- [Written By Sigourney Korper](/playlists/pretty/37i9dQZF1EFSbtdIJNST3R.md)
- [Written By Trey Campbell](/playlists/pretty/37i9dQZF1EFHZvY2t6fRcn.md)
- [Written By sad alex](/playlists/pretty/37i9dQZF1EFG3OLQwpOmPq.md)
- [XFM JUNE 26](/playlists/pretty/31agQ1yW51tGsDIFZbAZMl.md)
- [XL Play](/playlists/pretty/1IUF5q4IvkjylMhd9P0urE.md)
- [Xport](/playlists/pretty/37i9dQZF1DX9MrAJRR2Zxk.md)
- [YUMI's Cells \(유미의 세포들\)](/playlists/pretty/37i9dQZF1DX3fIjdSCaFr8.md)
- [Yacht Rock](/playlists/pretty/37i9dQZF1DXb3m918yXHxA.md)
- [Yalla Gaming](/playlists/pretty/37i9dQZF1DXdj3JotSexPH.md)
- [Year In Metal 2015](/playlists/pretty/37i9dQZF1DXdzj8PwvwjTT.md)
- [Year in Metal 2014](/playlists/pretty/7buHbubC96caOTOSQQJ4pl.md)
- [Year in Metal 2016](/playlists/pretty/37i9dQZF1DX0FNUL0tXob1.md)
- [Years & Years: Pride](/playlists/pretty/37i9dQZF1DX4yLn8TpmS3h.md)
- [Yemen Sounds](/playlists/pretty/37i9dQZF1DX2LJXoyg2yd7.md)
- [Yoga & Meditation](/playlists/pretty/37i9dQZF1DX9uKNf5jGX6m.md)
- [Yoga Acoustics](/playlists/pretty/37i9dQZF1DWUPAFOWtSz6P.md)
- [Yoga em Casa](/playlists/pretty/37i9dQZF1DX7FHvpgVaLRV.md)
- [You & Me](/playlists/pretty/37i9dQZF1DX6mvEU1S6INL.md)
- [You Can Do It](/playlists/pretty/37i9dQZF1DX1gcrZ1xC96D.md)
- [Young Nashville](/playlists/pretty/37i9dQZF1DWTvM9hRJYH10.md)
- [Your Alternative](/playlists/pretty/37i9dQZF1DX2G2VrXHSPQG.md)
- [Your Daily Routine](/playlists/pretty/37i9dQZF1DWWVwtV5Pv39d.md)
- [Your Favorite Coffeehouse](/playlists/pretty/37i9dQZF1DX6ziVCJnEm59.md)
- [Your Kitchen Stereo](/playlists/pretty/37i9dQZF1DX2B3xivNXPeb.md)
- [Your Office Stereo](/playlists/pretty/37i9dQZF1DX31KQt69Gaqf.md)
- [Your Time Capsule](/playlists/pretty/37i9dQZF1EuT9FSDEyfZnw.md)
- [Your Time Capsule \(2\)](/playlists/pretty/37i9dQZF1EuGR7rEA0UUF1.md)
- [Youth Group Throwback](/playlists/pretty/37i9dQZF1DWZnA0FshBt4S.md)
- [Ystad Sweden Jazzfestival 2012](/playlists/pretty/0DH66SG2vZ7dIocTxxA5q9.md)
- [Yung Bae's DJ Mix](/playlists/pretty/37i9dQZF1DX3VVyN3qcV0Q.md)
- [Zero Gravity](/playlists/pretty/37i9dQZF1DWV15Do5xY4up.md)
- [Zumba® Beats](/playlists/pretty/37i9dQZF1DX7cmFV9rWM0u.md)
- [aesthetic](/playlists/pretty/37i9dQZF1DX8uc99HoZBLU.md)
- [after school club 🪄](/playlists/pretty/37i9dQZF1DX24HW7kIIcEV.md)
- [aloe](/playlists/pretty/37i9dQZF1DX80MfQNTNVNZ.md)
- [amor = <3](/playlists/pretty/37i9dQZF1DXbTQNLzhgvdh.md)
- [amor tóxico](/playlists/pretty/37i9dQZF1DXa5voeWIyAtr.md)
- [anima R&B](/playlists/pretty/37i9dQZF1DWZuIX5Q3yUjF.md)
- [anti pop](/playlists/pretty/37i9dQZF1DWWqNV5cS50j6.md)
- [awitado](/playlists/pretty/37i9dQZF1DX5ft2KOkJpRg.md)
- [bad bunny perreo mix](/playlists/pretty/37i9dQZF1DWWIAiOhAAyKX.md)
- [badass](/playlists/pretty/37i9dQZF1DX2I7Ykltk83m.md)
- [big on the internet](/playlists/pretty/37i9dQZF1DX5Vy6DFOcx00.md)
- [bohemia tranqui](/playlists/pretty/37i9dQZF1DX27Vvs8ZCWJn.md)
- [borderless](/playlists/pretty/37i9dQZF1DWZJmo7mlltU6.md)
- [boys cast](/playlists/pretty/0kfqBZx9obUKiLVDwTqGly.md)
- [braids](/playlists/pretty/4fFfXVLYv59XIfPdUvMqKC.md)
- [brisa](/playlists/pretty/37i9dQZF1DX2vsux22VuNL.md)
- [cachondea](/playlists/pretty/37i9dQZF1DWYVWAmUGhHXx.md)
- [chill lofi study beats](/playlists/pretty/37i9dQZF1DX8Uebhn9wzrS.md)
- [chill/DnB](/playlists/pretty/3g1eliu8IsLV3pW4Otv0Te.md)
- [cloud gazing](/playlists/pretty/37i9dQZF1DWYoDXiQsd3D2.md)
- [coconut girl vibes](/playlists/pretty/37i9dQZF1DWWS2jhzRuNba.md)
- [creamy](/playlists/pretty/37i9dQZF1DXdgz8ZB7c2CP.md)
- [creme](/playlists/pretty/37i9dQZF1DX7f8PyAQL3rz.md)
- [crying on the dance floor](/playlists/pretty/37i9dQZF1DXayr1BrK1OaY.md)
- [cursi](/playlists/pretty/37i9dQZF1DX7MuRzJ3KiMb.md)
- [dear diary](/playlists/pretty/37i9dQZF1DX1vEe0OWx8Fn.md)
- [dengo](/playlists/pretty/37i9dQZF1DXco6WE2xPt0R.md)
- [desi lofi](/playlists/pretty/37i9dQZF1DWWlfVnonJ8S6.md)
- [domingo de bajón](/playlists/pretty/37i9dQZF1DXbpHTpY5uC1T.md)
- [dosmileras](/playlists/pretty/37i9dQZF1DXaN3n8Umehd8.md)
- [dw\-c](/playlists/pretty/5ji4GZJpll6twskFvKxiHx.md)
- [dw\_g](/playlists/pretty/40VxbK9NqccdUDUpiUXmbp.md)
- [el nuevo indie](/playlists/pretty/37i9dQZF1DWU6aakG7fctq.md)
- [el nuevo pop](/playlists/pretty/37i9dQZF1DX8womvTyUjrN.md)
- [el nuevo tropical](/playlists/pretty/37i9dQZF1DX07X8UDWKEwP.md)
- [el nuevo urbano](/playlists/pretty/37i9dQZF1DWZdsS73T1ogG.md)
- [en mis feelings](/playlists/pretty/37i9dQZF1DX2RpH7VWNzJa.md)
- [epicPRAISE](/playlists/pretty/37i9dQZF1DWZoR0U5SzE1r.md)
- [ethereal voices](/playlists/pretty/37i9dQZF1DWSnDyPAn5upE.md)
- [faz a trend](/playlists/pretty/37i9dQZF1DXdNL0ldoQCGi.md)
- [floating](/playlists/pretty/37i9dQZF1DXdEZt3tTR001.md)
- [foodora dinner playlist](/playlists/pretty/4lgseztVwmKQ8MNETPVIny.md)
- [free refills](/playlists/pretty/37i9dQZF1DX3Tjn540kLxZ.md)
- [gloomcore](/playlists/pretty/37i9dQZF1DXbENHm2OgowX.md)
- [golden hour](/playlists/pretty/37i9dQZF1DWUE76cNNotSg.md)
- [goosebumps](/playlists/pretty/37i9dQZF1DXdl6IPOySdX4.md)
- [gris](/playlists/pretty/37i9dQZF1DX1PiujNwN5Yy.md)
- [homework vibes](/playlists/pretty/37i9dQZF1DX3csziQj0d5b.md)
- [hopeless romantic](/playlists/pretty/37i9dQZF1DX6DLB6M8zkNk.md)
- [hot latina summer](/playlists/pretty/37i9dQZF1DWUArRC04H8rI.md)
- [hyperpop](/playlists/pretty/37i9dQZF1DX7HOk71GPfSw.md)
- [idk.](/playlists/pretty/37i9dQZF1DX59NCqCqJtoH.md)
- [indie pop & chill](/playlists/pretty/37i9dQZF1DX5y8xoSWyhcz.md)
- [internet crush](/playlists/pretty/37i9dQZF1DX2lVtkHKv2NU.md)
- [internet rewind](/playlists/pretty/37i9dQZF1DWSPMbB1kcXmo.md)
- [just hits](/playlists/pretty/37i9dQZF1DXcRXFNfZr7Tp.md)
- [kryptogram's DJ Mix](/playlists/pretty/37i9dQZF1DWVfaWXjwoSGX.md)
- [la mia testa:](/playlists/pretty/37i9dQZF1DX0ZlYzzoHCEv.md)
- [la pop\~wave](/playlists/pretty/37i9dQZF1DWYEIx04mlcFR.md)
- [late night vibes](/playlists/pretty/37i9dQZF1DXdQvOLqzNHSW.md)
- [liminal](/playlists/pretty/37i9dQZF1DWZ7VnoXD1s7S.md)
- [llorando en el club🥲](/playlists/pretty/37i9dQZF1DWXDwGIM6EwQS.md)
- [lo hice por el punk](/playlists/pretty/37i9dQZF1DX3pffHgMaYQp.md)
- [lofi + chill](/playlists/pretty/37i9dQZF1DWYoYGBbGKurt.md)
- [lofi beats](/playlists/pretty/37i9dQZF1DWWQRwui0ExPn.md)
- [lofi cafe](/playlists/pretty/37i9dQZF1DX9RwfGbeGQwP.md)
- [lofi hip hop chill/study music](/playlists/pretty/0Wd4x2oJ5GDXP6QXroSGD9.md)
- [lofi rap](/playlists/pretty/37i9dQZF1DX67OeJYvkpAy.md)
- [lofi sleep](/playlists/pretty/37i9dQZF1DX2PQDq3PdrHQ.md)
- [lofi summer haze](/playlists/pretty/37i9dQZF1DX8NMUtC3b3gL.md)
- [lush lofi](/playlists/pretty/37i9dQZF1DXc8kgYqQLMfH.md)
- [mEMOries](/playlists/pretty/37i9dQZF1DWYAyGN1XM1YS.md)
- [madera y miel](/playlists/pretty/37i9dQZF1DX2xKqsL1SVWb.md)
- [mamá cool](/playlists/pretty/37i9dQZF1DWVuraZzTY0LP.md)
- [mandarina](/playlists/pretty/37i9dQZF1DX6LVkNunXMAU.md)
- [me right now](/playlists/pretty/37i9dQZF1DWTBz12MDeCuX.md)
- [medieval vibes](/playlists/pretty/37i9dQZF1DWXi6GqUgtvam.md)
- [mercury in retrograde](/playlists/pretty/37i9dQZF1DWXBrhp0Cvkwt.md)
- [metaverses](/playlists/pretty/37i9dQZF1DX0Uh73O0FmIK.md)
- [metropolis](/playlists/pretty/37i9dQZF1DX8CopunbDxgW.md)
- [mexican doomer](/playlists/pretty/37i9dQZF1DX4Csi2otB2wp.md)
- [mid:nite storm](/playlists/pretty/37i9dQZF1DWYiatDTQvsFP.md)
- [minha party pfta](/playlists/pretty/37i9dQZF1DX9mwdmcCXQM1.md)
- [mint](/playlists/pretty/37i9dQZF1DX4dyzvuaRJ0n.md)
- [mint Acoustic](/playlists/pretty/37i9dQZF1DX5GiUwx1edLZ.md)
- [mint Canada](/playlists/pretty/37i9dQZF1DXdIpacQDPDV5.md)
- [mint India](/playlists/pretty/37i9dQZF1DXdMbUSbTOEeW.md)
- [mint Latin](/playlists/pretty/37i9dQZF1DX07RJCJCOYpi.md)
- [mint MX](/playlists/pretty/37i9dQZF1DX11Ia2xt6mrG.md)
- [mint Presents..\. Best Dance of 2021](/playlists/pretty/37i9dQZF1DWUn2FwhH1fMF.md)
- [mint Remix](/playlists/pretty/37i9dQZF1DWSXOoXnGnOId.md)
- [mint South Africa](/playlists/pretty/37i9dQZF1DWX4IFcj5utrY.md)
- [mint brasil](/playlists/pretty/37i9dQZF1DXd14ByHZraz1.md)
- [mint نعنع](/playlists/pretty/37i9dQZF1DX4rmnjMBxfCv.md)
- [misfits 2.0](/playlists/pretty/37i9dQZF1DXciq74vrQmM8.md)
- [misfits 2.0 presents..\. Best of 2021](/playlists/pretty/37i9dQZF1DX238lkgUuFzI.md)
- [mood.](/playlists/pretty/37i9dQZF1DWYtDSKIiDhua.md)
- [mosaic](/playlists/pretty/37i9dQZF1DXd9vfK9DV3I6.md)
- [murga](/playlists/pretty/5htE97xLVu4akvNcmhLien.md)
- [my life is a movie](/playlists/pretty/37i9dQZF1DX4OzrY981I1W.md)
- [míticas](/playlists/pretty/37i9dQZF1DX2EiUAL7Wdfc.md)
- [nashville for the weekend](/playlists/pretty/37i9dQZF1DXa86veiIta9X.md)
- [neon cowgirl](/playlists/pretty/37i9dQZF1DXa90jZU6E5GN.md)
- [night light](/playlists/pretty/37i9dQZF1DXdnMiSD7sWFC.md)
- [night pop](/playlists/pretty/37i9dQZF1DXbcP8BbYEQaO.md)
- [noir](/playlists/pretty/37i9dQZF1DX9LT7r8qPxfa.md)
- [noisy voices](/playlists/pretty/37i9dQZF1DWTvAMsEfpIPP.md)
- [noventeras](/playlists/pretty/37i9dQZF1DX3FbSX4ewlys.md)
- [oiii](/playlists/pretty/37i9dQZF1DXcSVNtcbJ15L.md)
- [omw](/playlists/pretty/37i9dQZF1DX8OR0U4UGusN.md)
- [perdón](/playlists/pretty/37i9dQZF1DWSEjz7TrmLMY.md)
- [phonk](/playlists/pretty/37i9dQZF1DWWY64wDtewQt.md)
- [planet rave](/playlists/pretty/37i9dQZF1DWW1XLSH8Oafp.md)
- [pov](/playlists/pretty/37i9dQZF1DX54NB08XsyEC.md)
- [pov \(2\)](/playlists/pretty/37i9dQZF1DX01LszHBn1s8.md)
- [pov: te enamoras de tu bestie](/playlists/pretty/37i9dQZF1DX1vH2ylOhtch.md)
- [pov: te rompió el corazón](/playlists/pretty/37i9dQZF1DWSCmQCuAzM4J.md)
- [pov: u borrowed an alien's headphones](/playlists/pretty/37i9dQZF1DWW9lEco8NkcU.md)
- [pov: ur slow dancing with your love at midnight](/playlists/pretty/37i9dQZF1DWZcQCn3wRBSc.md)
- [pulp](/playlists/pretty/37i9dQZF1DX3IplhwNexYg.md)
- [pumpkin spice](/playlists/pretty/37i9dQZF1DX6cFbK8tUIPC.md)
- [ragazzo triste](/playlists/pretty/37i9dQZF1DX7JWqNxz28IX.md)
- [reblog](/playlists/pretty/37i9dQZF1DWSMyFeHM3son.md)
- [regency vibes](/playlists/pretty/37i9dQZF1DWUqr1os0aCxH.md)
- [reposaito](/playlists/pretty/37i9dQZF1DX7IVTXIV4emO.md)
- [rock X rock](/playlists/pretty/37i9dQZF1DX402XqlJHYcQ.md)
- [royalcore](/playlists/pretty/37i9dQZF1DX7Ope5RE4ePQ.md)
- [sad girl country](/playlists/pretty/37i9dQZF1DWU4lunzhQdRx.md)
- [sad girl starter pack](/playlists/pretty/37i9dQZF1DWW2hj3ZtMbuO.md)
- [sad grupero](/playlists/pretty/37i9dQZF1DWSKj6yrmnSvg.md)
- [sad hour](/playlists/pretty/37i9dQZF1DWSqBruwoIXkA.md)
- [sad sierreño](/playlists/pretty/37i9dQZF1DWZQGZ7yvpH00.md)
- [sad sla](/playlists/pretty/37i9dQZF1DX0H97kz3DdJ6.md)
- [sanguegiovane](/playlists/pretty/37i9dQZF1DWW9tK1GiTdMf.md)
- [scorned](/playlists/pretty/37i9dQZF1DX02pE0Dxwufo.md)
- [sentimiento.](/playlists/pretty/37i9dQZF1DX4Ghyz32wen4.md)
- [shōnen](/playlists/pretty/37i9dQZF1DX89EkrAT8Z6U.md)
- [skad'aká](/playlists/pretty/37i9dQZF1DXdNw9eeM3mpo.md)
- [slowcore](/playlists/pretty/37i9dQZF1DX30gKInBBe5k.md)
- [slowed and reverbed](/playlists/pretty/37i9dQZF1DX0h2LvJ7ZJ15.md)
- [sneakerhead](/playlists/pretty/37i9dQZF1DX41uhnJlpNx4.md)
- [soda](/playlists/pretty/37i9dQZF1DXaK0O81Xtkis.md)
- [soft life](/playlists/pretty/37i9dQZF1DX5biIUI9J7lF.md)
- [songs to scream in the car](/playlists/pretty/37i9dQZF1DX4mWCZw6qYIw.md)
- [soundbeams](/playlists/pretty/37i9dQZF1DWWpPDyGY7zGd.md)
- [soundtrack\#1 \(サウンドトラック\#1\)](/playlists/pretty/37i9dQZF1DX2DC6dl7R20G.md)
- [sped up songs](/playlists/pretty/37i9dQZF1DX0mWZXNs0ArA.md)
- [sped up songs \(2\)](/playlists/pretty/6r8hObcpBOeuCd7Zua3L5E.md)
- [study mode](/playlists/pretty/37i9dQZF1DWSSrwtip3vZP.md)
- [suave](/playlists/pretty/37i9dQZF1DWSjuSq42neMu.md)
- [supermoon](/playlists/pretty/37i9dQZF1DX1mk3h024lZT.md)
- [tamo flex](/playlists/pretty/37i9dQZF1DX9QOccjUUyGN.md)
- [tapioca](/playlists/pretty/37i9dQZF1DX6KwoIt0pZYP.md)
- [tear drop](/playlists/pretty/37i9dQZF1DX6xZZEgC9Ubl.md)
- [teen angst](/playlists/pretty/37i9dQZF1DWY1j3jZdCWOQ.md)
- [teen beats](/playlists/pretty/37i9dQZF1DWWvvyNmW9V9a.md)
- [text me back](/playlists/pretty/37i9dQZF1DXcbAIldMQMIs.md)
- [the INDIEnet](/playlists/pretty/37i9dQZF1DXaRL7xbcDl7X.md)
- [the locker\_ presents..\. Best Of 2021](/playlists/pretty/37i9dQZF1DWZUtjhu2IHar.md)
- [the new retro](/playlists/pretty/37i9dQZF1DWV5vqkTng2MA.md)
- [theremin](/playlists/pretty/37i9dQZF1DX9FavclD4O50.md)
- [toybox](/playlists/pretty/37i9dQZF1DX6r25lY14UGk.md)
- [tqm](/playlists/pretty/37i9dQZF1DX68lbF0lqCZV.md)
- [tranquilito](/playlists/pretty/37i9dQZF1DX3s5RJAUX1SI.md)
- [una playlist felice](/playlists/pretty/37i9dQZF1DWT888el8RDPq.md)
- [undercurrents](/playlists/pretty/37i9dQZF1DX9myttyycIxA.md)
- [unleashed](/playlists/pretty/37i9dQZF1DXdJa941ExayM.md)
- [v o K a l](/playlists/pretty/37i9dQZF1DX8eqay1FtdMm.md)
- [vamos pal prom](/playlists/pretty/37i9dQZF1DXd659n2DsKUL.md)
- [vaporwave](/playlists/pretty/37i9dQZF1DWU4EQPjP9ZpS.md)
- [virales viejitas](/playlists/pretty/37i9dQZF1DXcuJfJUfXtde.md)
- [wanderlust](/playlists/pretty/37i9dQZF1DWWpO97CaFM3p.md)
- [webcore](/playlists/pretty/37i9dQZF1DX9D5dmCM8Lo3.md)
- [windows down](/playlists/pretty/37i9dQZF1DWVRCxkZCaEUc.md)
- [y2k](/playlists/pretty/37i9dQZF1DX6MAQN3OnFEl.md)
- [young & free](/playlists/pretty/37i9dQZF1DXca8AyWK6Y7g.md)
- [young, wild & free](/playlists/pretty/37i9dQZF1DX843Qf4lrFtZ.md)
- [¡A Limpiar con Ritmo!](/playlists/pretty/37i9dQZF1DX1bl63ywBBgC.md)
- [¡A limpiar con Pop!](/playlists/pretty/37i9dQZF1DWZuieNT0Gy18.md)
- [¡Chicas Ye\-yé!](/playlists/pretty/37i9dQZF1DWUES7kJcgJ4x.md)
- [¡Guajira!](/playlists/pretty/37i9dQZF1DWV5sGFwUJeqR.md)
- [¡Let's Aprender!](/playlists/pretty/37i9dQZF1DX7sSQjtZZJpz.md)
- [¡Pop Latino!](/playlists/pretty/37i9dQZF1DWYRAyj7EtEk1.md)
- [¡Viva Iguana!](/playlists/pretty/37i9dQZF1DWYklOp8hhjCw.md)
- [¡Viva México!](/playlists/pretty/37i9dQZF1DX53wq0WYtg5L.md)
- [Éxitos Argentina](/playlists/pretty/37i9dQZF1DXbbu94YBG7Ye.md)
- [Éxitos Centroamérica](/playlists/pretty/37i9dQZF1DX1KN7YrOIxQD.md)
- [Éxitos Chile](/playlists/pretty/37i9dQZF1DXclgCwbk0uat.md)
- [Éxitos Cristianos](/playlists/pretty/37i9dQZF1DWUjxqgjSiQ9K.md)
- [Éxitos México](/playlists/pretty/37i9dQZF1DX5BAPG29mHS8.md)
- [Éxitos USA](/playlists/pretty/37i9dQZF1DX4oUPBOaEkL6.md)
- [Éxitos del Ayer](/playlists/pretty/37i9dQZF1DX4Ma23gvJILl.md)
- [Ídolos del Mariachi](/playlists/pretty/37i9dQZF1DWTyvco9C4Og0.md)
- [أجدد الأغاني](/playlists/pretty/37i9dQZF1DWXJnW46G73SM.md)
- [أجمل الشيلات](/playlists/pretty/37i9dQZF1DWTZ8jTY8g4MU.md)
- [أفضل الأغاني الخليجية](/playlists/pretty/37i9dQZF1DWU486KSiznWZ.md)
- [أفضل الأغاني العراقية](/playlists/pretty/37i9dQZF1DX657Vh1lw2BF.md)
- [أقوى المهرجانات](/playlists/pretty/37i9dQZF1DX4qF0846GNk8.md)
- [التوب](/playlists/pretty/37i9dQZF1DXd3AhRYJnfcl.md)
- [خليجي جديد](/playlists/pretty/37i9dQZF1DWWQRKXabpuS2.md)
- [دبكة ‎ Dabke](/playlists/pretty/37i9dQZF1DXchFDa0CQ44k.md)
- [شعبي مصري](/playlists/pretty/37i9dQZF1DX7Gwi28HhdBP.md)
- [عراقي جديد](/playlists/pretty/37i9dQZF1DWVSIz2AGspV4.md)
- [ملكات العالم العربي](/playlists/pretty/37i9dQZF1DXcZXC7Soywtq.md)
- [ملوك السين](/playlists/pretty/37i9dQZF1DWZyonhntyFxW.md)
- [’80s Hard Rock](/playlists/pretty/37i9dQZF1DX68H8ZujdnN7.md)
- [’80s Jam Session](/playlists/pretty/37i9dQZF1DX0H8hDpv38Ju.md)
- [✨ dreamy ✨](/playlists/pretty/37i9dQZF1DXecqWg9vXl0U.md)
- [すとぷり \-Strawberry Prince\-](/playlists/pretty/37i9dQZF1DXaMXPT7ghdqO.md)
- [アイドリッシュセブン \-IDOLiSH7\-](/playlists/pretty/37i9dQZF1DXd7fmFWnsK8n.md)
- [キラキラポップ：ジャパン](/playlists/pretty/37i9dQZF1DWVlypmfyCIGr.md)
- [ドラえもん／ジャイアンのうた\- Gian’s Recital \-](/playlists/pretty/37i9dQZF1DWSM7w8HbieGZ.md)
- [ヒプノシスマイク Hypnosismic \-Division Rap Battle\-](/playlists/pretty/37i9dQZF1DX8f9ryYBYPg3.md)
- [ヒャダイン Works](/playlists/pretty/37i9dQZF1DWY4uCaILJDKP.md)
- [リスアニ！最強アニソンプレイリスト](/playlists/pretty/37i9dQZF1DXcpS9SoNtuO7.md)
- [上班輕聽](/playlists/pretty/37i9dQZF1DX71sJP2OzuBP.md)
- [刀剣乱舞\-ONLINE\- TOUKEN RANBU](/playlists/pretty/37i9dQZF1DX3FlJOXGyE6c.md)
- [君が生きてなくてよかった](/playlists/pretty/37i9dQZF1DX4OQqDGyEiDU.md)
- [告別前](/playlists/pretty/37i9dQZF1DWYCBGFNlTmIS.md)
- [呪術廻戦 \- Jujutsu Kaisen \-](/playlists/pretty/37i9dQZF1DWYFFegQlq0Hb.md)
- [声優、歌う \-Sing Like Talking\-](/playlists/pretty/37i9dQZF1DXc7RvXTzD4rW.md)
- [大石昌良 Masayoshi Oishi Works](/playlists/pretty/37i9dQZF1DX0j8ATpV1eln.md)
- [天籟美聲](/playlists/pretty/37i9dQZF1DWXxk55r8Lbgr.md)
- [太陽を見てしまった](/playlists/pretty/37i9dQZF1DX1KJ0jRmRVDZ.md)
- [心情大振](/playlists/pretty/37i9dQZF1DX6AozTSWwAdQ.md)
- [悲傷釋放](/playlists/pretty/37i9dQZF1DWV3IJ2kse1M3.md)
- [想愛就愛](/playlists/pretty/37i9dQZF1DWVrewvmoU2pr.md)
- [我的微醺夜](/playlists/pretty/37i9dQZF1DWU2UWGeVtJ2M.md)
- [擁抱單身的你](/playlists/pretty/37i9dQZF1DX7QHBSGN4rag.md)
- [昭和仮面ライダー](/playlists/pretty/37i9dQZF1DX6w9umnoLA0o.md)
- [暖心情歌](/playlists/pretty/37i9dQZF1DX7pGtIaS1UoB.md)
- [梶浦由記 Yuki Kajiura Works](/playlists/pretty/37i9dQZF1DXaYP4U0VPZgc.md)
- [消除壓力](/playlists/pretty/37i9dQZF1DX8gS5vh05dnc.md)
- [澤野弘之 Hiroyuki Sawano Works](/playlists/pretty/37i9dQZF1DX78L8foCBod1.md)
- [煲劇進行曲](/playlists/pretty/37i9dQZF1DXcklpCH5705e.md)
- [畑 亜貴 Works](/playlists/pretty/37i9dQZF1DX4w7ghxoWOTa.md)
- [群星報喜：屬雞歌手](/playlists/pretty/37i9dQZF1DX654l3fFiq56.md)
- [花草下午茶](/playlists/pretty/37i9dQZF1DWXzhlHao91lq.md)
- [菅野よう子 Yoko Kanno Works](/playlists/pretty/37i9dQZF1DX9xbwLJcOKSh.md)
- [見字撐住](/playlists/pretty/37i9dQZF1DXcTD0JQo9KB9.md)
- [返家輕聽](/playlists/pretty/37i9dQZF1DX74DDhiuyXIl.md)
- [週末清聽](/playlists/pretty/37i9dQZF1DWYfYI76iYkKK.md)
- [鋼の錬金術師 FULLMETAL ALCHEMIST / FULLMETAL ALCHEMIST BROTHERHOOD](/playlists/pretty/37i9dQZF1DX6EruMUbdfEp.md)
- [雨中旋律](/playlists/pretty/37i9dQZF1DX4NBorsTLJKk.md)
- [香港散步](/playlists/pretty/37i9dQZF1DX3lmnsqvYpgD.md)
- [龍が如く \-Yakuza: Like a Dragon\-](/playlists/pretty/37i9dQZF1DX40xbLWvaxZD.md)
- [괜히 센치해](/playlists/pretty/37i9dQZF1DX5a7mln8z0Su.md)
- [국내 R&B 메가 히트](/playlists/pretty/37i9dQZF1DXe4qmDjDW0Ug.md)
- [나 혼자 좋아해](/playlists/pretty/37i9dQZF1DX4zvnN9RL36v.md)
- [나의 우울은,](/playlists/pretty/37i9dQZF1DXb5KQr73mtTz.md)
- [뉴트로 댄스 뮤\-직](/playlists/pretty/37i9dQZF1DX0C07QWzaEB5.md)
- [디즈니+ 인기곡](/playlists/pretty/37i9dQZF1DWVLLXSxmZy0O.md)
- [바닥에서 위로](/playlists/pretty/37i9dQZF1DWXUijuqw3Znk.md)
- [발라드, 려요 \(K\-Pop Ballad Hits\)](/playlists/pretty/37i9dQZF1DX5LEXW9eXA0n.md)
- [봄같은 설레임](/playlists/pretty/37i9dQZF1DX5r2dSnnMHnG.md)
- [빗 속으로 뛰어들어](/playlists/pretty/37i9dQZF1DXaw0Z91oVe88.md)
- [사랑하는 너에게.](/playlists/pretty/37i9dQZF1DXaHbNgKAMWAM.md)
- [섹시 & 로맨틱](/playlists/pretty/37i9dQZF1DWTKHCqejn1Vg.md)
- [스물다섯 스물하나 \(Twenty\-Five Twenty\-One\)](/playlists/pretty/37i9dQZF1DX3f6ejuDaRcD.md)
- [썸](/playlists/pretty/37i9dQZF1DWSwNzYQXHuHY.md)
- [우산 아래](/playlists/pretty/37i9dQZF1DXbpaEv4bXhFx.md)
- [유명가수전\-배틀어게인 \(Famous Singers2\-Battle Again\)](/playlists/pretty/37i9dQZF1DWSWjDbo5NM3H.md)
- [인기가요 Hot Now](/playlists/pretty/37i9dQZF1DX0sa2Fqej3CR.md)
- [재즈맛 힙합](/playlists/pretty/37i9dQZF1DX5x5ck36i2uO.md)
- [포근 편안 폭신](/playlists/pretty/37i9dQZF1DWSvk1AxYsbvo.md)
- [힐링 힙합](/playlists/pretty/37i9dQZF1DWZiWafrEIdA8.md)
"
99,spicetify/spicetify-cli,JavaScript,"<h3 align=""center""><a href=""https://spicetify.app/""><img src=""https://i.imgur.com/iwcLITQ.png"" width=""600px""></a></h3>
<p align=""center"">
  <a href=""https://goreportcard.com/report/github.com/spicetify/spicetify-cli""><img src=""https://goreportcard.com/badge/github.com/spicetify/spicetify-cli""></a>
  <a href=""https://github.com/spicetify/spicetify-cli/releases/latest""><img src=""https://img.shields.io/github/release/spicetify/spicetify-cli/all.svg?colorB=97CA00?label=version""></a>
  <a href=""https://github.com/spicetify/spicetify-cli/releases""><img src=""https://img.shields.io/github/downloads/spicetify/spicetify-cli/total.svg?colorB=97CA00""></a>
  <a href=""https://discord.gg/VnevqPp2Rr""><img src=""https://img.shields.io/discord/842219447716151306?label=chat&logo=discord&logoColor=discord""></a>
  <a href=""https://www.reddit.com/r/spicetify""><img src=""https://img.shields.io/reddit/subreddit-subscribers/spicetify?logo=reddit""></a>
</p>

---


Command-line tool to customize the official Spotify client.
Supports Windows, MacOS and Linux.

<img src="".github/assets/logo.png"" alt=""img"" align=""right"" width=""560px"" height=""400px"">  

### Features
- Change colors whole UI
- Inject CSS for advanced customization
- Inject Extensions (Javascript script) to extend functionalities, manipulate UI and control player.
- Inject Custom apps
- Remove bloated components to improve performance


### Links
- [Installation](https://spicetify.app/docs/getting-started)
- [Basic Usage](https://spicetify.app/docs/getting-started#basic-usage)
- [FAQ](https://spicetify.app/docs/faq)
  
"
100,nimiology/spotify_downloader_telegram__bot,Python,"# spotify-downloader 🎵

<b>DISCLAIMER : THIS SCRIPTS ARE FOR EDUCATION PURPOSES ONLY AND ARE NOT INTENDED TO PROMOTE ANY ILLEGAL ACTIVITIES. THE AUTHOR WILL NOT BE HELD RESPONSIBLE FOR ANY MISUSE OF THE INFORMATION PROVIDED<br><br>This Python script lets you download mp3 with a Spotify link or song name from YouTube.<br>
## Deploy to Heroku Fast 👇
[![Deploy](https://www.herokucdn.com/deploy/button.svg)](https://heroku.com/deploy?template=https://github.com/nimiology/spotify_downloader_telegram__bot/tree/Heroku)





       
<h1>usage👤</h1>
<h3>
Make sure you have FFmpeg on the same folder as the script file if you are on Linux or Mac
</h3>
<p>
Get it from FFmpeg's official site (www.ffmpeg.org)
</p> 
<h3>open terminal and write this command</h3>
<pre>pip install -r requirements.txt</pre>
<h3>open @BotFather(t.me/BotFather) bot in telegram and create your new bot and add your token here in main.py and spotify.py
</h3>
<pre>token = 'token bot'</pre>

<b>now run the Script ;)</b>
"
101,JMPerez/c,JavaScript,"# C - A collaborative listening room using Spotify

This project is a site where multiple users can propose songs and vote for them, having them played in a synchronised way through Spotify.

## Setting up

The server can be run locally and also deployed to Heroku. You will need to register your own Spotify app and set the credentials in a couple of config files. For that:

1. Create an application on [Spotify's Developer Site](https://developer.spotify.com/my-applications/).

2. Add as redirect uris both http://localhost:3000/auth/callback (for development) and <production_domain>/auth/callback (if you want to deploy your app somewhere).

3. Create a `.env` file in the root of the project with the following variables;

    - `HOST`
    - `CLIENT_ID`
    - `CLIENT_SECRET`

Example:
```
HOST=http://localhost:3000
CLIENT_ID=<your_client_id>
CLIENT_SECRET=<your_client_secret>
```



## Dependencies

Install the dependencies running `npm install`.

## Running

During development, run `npm run dev`.

When running on production, run `npm run build && npm run start`.


### Run with Docker

To run this app in Docker use the following steps

1. Build the image run:
`docker build -t c .`

2. Run the image:
```
docker run -p 3000:3000 \
    -e HOST=http://localhost:3000 \
    -e CLIENT_ID=<your_client_id> \
    -e CLIENT_SECRET=<your_client_secret> \
    c
```
"
102,schollz/spotifydownload,Shell,"<p align=""center"">
<img
    src="".github/logo.png""
    width=""260"" border=""0"" alt=""spotifydownload"">
<br>
<a href=""https://travis-ci.org/schollz/spotifydownload""><img
src=""https://img.shields.io/travis/schollz/spotifydownload.svg?style=flat-square""
alt=""Build Status""></a> 
<a href=""https://gocover.io/github.com/schollz/getsong""><img src=""https://img.shields.io/badge/coverage-82%25-brightgreen.svg?style=flat-square"" alt=""Coverage""></a> </p>

<p align=""center"">Automatically download your Spotify playlists.</p>

*spotifydownload* is an [open-source](https://github.com/schollz/spotifydownload) tool that makes it easy to download your Spotify playlists, using [getsong](https://github.com/schollz/getsong) to find the correct song and download it and convert it to an m4a.

![Example](.github/1.gif)

Unlike other downloaders, there are no dependencies (other than ffmpeg which will automatically be installed onto your system when running the first time).

**Disclaimer:** Downloading copyright songs may be illegal in your country. This tool is for educational purposes only and was created only to show how Spotify's API can be used to download music from YouTube. Please support the artists by buying their music.



# Install

Install by downloading [latest release](https://github.com/schollz/spotifydownload/releases/latest).

Or install with bash:

```
curl https://getspotifydownload.schollz.com | bash
```

Or install with `go get`:

```
go get github.com/schollz/spotifydownload
```

# Usage


To run simply do

```bash
$ spotifydownload
```

and you'll be prompted with instructions to get the Spotify URL link. To get the Spotify URL link you can right click on the playlist. If you are using the Desktop client, then you'll see a button ""Shared > 🔗 Copy Playlist Link"", or in the Web browser you'll see ""Copy Playlist Link"". Clicking that will copy the Spotify Playlist link to the clipboard.


If you already know your playlist URL you can enter it:

```bash
$ spotifydownload -playlist PLAYLIST_URL
```

Now you can easily schedule this to run using `crontab`, just edit it with `crontab -e` and add the line:

```
0 0 * * 0 cd /folder/to/spotifydownload &&  ./spotifydownload --playlist PLAYLIST_URL
```

which will execute it every 7 days so that you will never lose any songs in your Release Radar or Discover Weekly.

## Contributing

Pull requests are welcome. Feel free to...

- Revise documentation
- Add new features
- Fix bugs
- Suggest improvements


## License

MIT

"
103,spotify/HubFramework,Objective-C,"<img alt=""The Hub Framework"" src=""readme-banner.jpg"" width=""100%"" max-width=1008>

[![Build Status](https://travis-ci.org/spotify/HubFramework.svg?branch=master)](https://travis-ci.org/spotify/HubFramework/branches)
[![Coverage Status](https://codecov.io/github/spotify/HubFramework/coverage.svg?branch=master)](https://codecov.io/github/spotify/HubFramework?branch=master)
[![Documentation website](https://img.shields.io/badge/Documentation-website-blue.svg)](https://spotify.github.io/HubFramework)
[![Spotify FOSS Slack](https://slackin.spotify.com/badge.svg)](https://slackin.spotify.com)

## Deprecated

The Hub Framework is being phased out at Spotify, and therefore we will not be maintaining it further.

---

Welcome to the Hub Framework - a toolkit for building native, component-driven UIs on iOS. It is designed to enable teams of any size to quickly build, tweak and ship new UI features, in either new or existing apps. It also makes it easy to build backend-driven UIs.

The Hub Framework has two core concepts - **Components** & **Content Operations**.

## Components

Instead of building `UIViewControllers` that each have hard-wired behaviors for UI in terms of controls, data binding & selection handling - a Hub Framework-powered UI is all about components.

Components can be reused and rearranged in any way, and render any model. They each define a rectangle on the screen in which anything can be rendered, making it easy to quickly iterate on UI and creating modular building blocks that reduce the need for code duplication.

The good news is that you don't have to rewrite your existing `UIViews` to start using the Hub Framework, instead, the architecture of the framework is completely protocol oriented, making it easy to add compatibility to existing UI.

To learn more about components, check out the [Component programming guide](https://spotify.github.io/HubFramework/component-programming-guide.html).

## Content Operations

To match the highly dynamic component-driven UIs, content operations define what content to render in a declarative fashion. Content can either be defined in code, running locally in the application, or through JSON that is provided by a backend system. This enables you to easily aggregate data from multiple sources, and to change your UI and its content directly from the backend.

Each feature of an application can define its own content operations, and put them together to form a **content loading chain**. Each operation can perform an atomic mutation of the UI state, enabling easy implementation of things like A/B testing or providing system-wide functionality like caching or loading indicators.

To learn more about content operations, check out the [Content programming guide](https://spotify.github.io/HubFramework/content-programming-guide.html).

## Background story

So, why did we build this? At Spotify, we love to experiment with our UI, to present content in new exciting ways - and to continue to learn what works and what doesn't.

However, the traditional way of building and shipping UIs on iOS was slowing us down. Always having to write `UIViewControllers` from scratch, hard-wiring behaviors and tying specific models to specific views lead to slow iteration times and a lot of duplicate work.

So, we did what we always do - we started experimenting. The Hub Framework is the result of those experiments. We realized that by building our UIs as *""hubs of content""* using components as building blocks, and by fully decoupling our model code from our UI using content operations - our app became a lot more dynamic and easier to work with. What's more, by letting our backend JSON data contain additional metadata and fully localized strings, we could render responses directly. Instead of having to do lots of custom mapping and transforms in all views.

The result is that we are now free to experiment and try out new UI ideas quicker than ever - all while having a lot less code to maintain. By sharing the Hub Framework with you - the open source community - we hope that more apps and teams can benefit from using this type of architecture.

## How does Spotify use this?

This framework is used in production in the Spotify iOS app, which is used by many millions of users every day. We use it to build views like Browse, Running, Party, Genre Pages and more. Important to note is also that we don't keep an internal mirror of this repo - all development on the Hub Framework is done in the open.

## Compatibility

The Hub Framework is compatible with **iOS 8 or later**, and can be used from either Objective-C or Swift. In Swift, the API has been annotated to feel Swift-native, with proper nullability and API refinements for Swift 3.

While the framework itself is written entirely in Objective-C, the [demo app](https://github.com/spotify/HubFramework/tree/master/demo) is written in Swift 3.

## Installation

You can choose to install the Hub Framework either manually, or through a dependency manager.

#### Manually

- Clone this repo (for example, add it as a submodule).
- Drag the project `HubFramework.xcproj` into Xcode as a subproject of your app project.
- Link with `HubFramework` by adding it in ""Linked Frameworks and Libaries"", under the ""General"" tab in your app's project settings.

#### Using CocoaPods

*To use CocoaPods, first make sure you have installed it and updated it to the latest version by following their instructions on [cocoapods.org](https://cocoapods.org)*

Add `HubFramework` to your `Podfile`:

```
pod 'HubFramework'
```

Update your pods:

```
$ pod update
```

#### Using Carthage

*To use Carthage, first make sure you have installed it and updated it to the latest version by following their instructions on [their repo](https://github.com/Carthage/Carthage)*

First, add `HubFramework` to your `Cartfile`:

```
github ""spotify/HubFramework"" ~> 2.0
```

Then, run Carthage:

```
$ carthage update
```

#### Link with `SystemConfiguration`

Once you've installed the Hub Framework, link your app with Apple's `SystemConfiguration` framework. This is done by adding it in ""Linked Frameworks and Libaries"", under the ""General"" tab in your app's project settings. This framework is used to determine the connectivity state of an app using the Hub Framework.

## Importing the framework

In Objective-C:

```objective-c
#import <HubFramework/HubFramework.h>
```

In Swift:

```swift
import HubFramework
```

## Getting started

To enable you to quickly get started using the Hub Framework, we've created a [**setup guide**](https://spotify.github.io/HubFramework/setup-guide.html) that walks you through how to set it up in an application, as well as a [**getting started guide**](https://spotify.github.io/HubFramework/getting-started-guide.html) that will give you a step-by-step tutorial to building your first view using it.

There are also a series of **programming guides** that each introduce you to different aspects of the framework.

- [Component programming guide](https://spotify.github.io/HubFramework/component-programming-guide.html)
- [Content programming guide](https://spotify.github.io/HubFramework/content-programming-guide.html)
- [Layout programming guide](https://spotify.github.io/HubFramework/layout-programming-guide.html)
- [JSON programming guide](https://spotify.github.io/HubFramework/json-programming-guide.html)
- [Action programming guide](https://spotify.github.io/HubFramework/action-programming-guide.html)

## Hub Framework Sessions

To make it easier for you to learn some of the core concepts of the framework, we've started creating a series of YouTube videos that each explain one of those concepts. They're called ""Hub Framework Sessions"" and can be found here:

- [Episode 1: Content Loading Chain](https://youtu.be/XbMFPtxk_4Q)
- [Episode 2: Creating Components](https://youtu.be/JpeQhKAen8M)

## Demo app

To see an example implementation of the Hub Framework, open up the [demo app](https://github.com/spotify/HubFramework/tree/master/demo) that has a few different features, showcasing some of the capabilities of the framework.

## Documentation

The Hub Framework’s API is well documented and we generate both a [documentation website](https://spotify.github.io/HubFramework/) as well as a DocSet for the documentation app [Dash](https://kapeli.com/dash). The documentation is also written in such a way that Xcode will present it on usage.

The Dash documentation is updated automatically for you on any changes to the framework. Get it by subscribing to the [https://spotify.github.io/HubFramework/docsets/HubFramework.xml](dash-feed://https%3A%2F%2Fspotify%2Egithub%2Eio%2FHubFramework%2Fdocsets%2FHubFramework%2Exml) feed.

## Live editing

Since the Hub Framework enables UIs to be defined using JSON data, it also enables you to quickly build or prototype UIs using a local JSON file. It includes a command line tool (`hublive`) that, when run, enables you to see changes you make in that local JSON file rendered live in your application. For more information about how to use live editing, see the [Live editing guide](https://spotify.github.io/HubFramework/live-editing-guide.html)

## Xcode file templates

The Hub Framework contains a set of Xcode file templates that make it easy to create the boilerplate for components, content operations, etc.

To install them, simply copy the `Hub Framework` folder located in `templates/xcode` to `~/Library/Developer/Xcode/Templates/File Templates` (You may need to create the last two folders in that path).

## Help & Bug Reporting

In case you need help or want to report a bug - please [file an issue](https://github.com/spotify/HubFramework/issues/new). Make sure to provide us with as much debuggable information as you can, like iOS version used and any reproduction steps. Sample code also makes it a lot easier for us to help you.

You can also chat with the team behind the Hub Framework directly! The Spotify FOSS community has a [Slack Group](https://slackin.spotify.com/) that you can join. Once you've joined, head over to the `hubframework` channel to chat with us!

## Contributing

Anyone is more than welcome to contribute to the Hub Framework! Together we can make the framework even more capable, and help each other fix any issues that we might find. However, before you contribute, please read [our contribution guidlines](CONTRIBUTING.md).

## Authors

The Hub Framework was built at [Spotify](www.spotify.com) by [John Sundell](https://twitter.com/johnsundell), [Aron Cedercrantz](https://twitter.com/rastersize), [Robin Goos](https://github.com/Goos) and [several others](https://github.com/spotify/HubFramework/graphs/contributors).
"
104,Hexxeh/spotify-websocket-api,Python,"Spotify WebSocket API [![Build Status](https://travis-ci.org/Hexxeh/spotify-websocket-api.png?branch=master)](https://travis-ci.org/Hexxeh/spotify-websocket-api)
=====================

Getting started
---------------

NOTE: This API will only work with paid Spotify accounts. I'm perfectly fine with this restriction and won't be attempting to circumvent it, nor will I merge patches that do. It'd only end in a game of cat and mouse which is a waste of everyone's time. If you like Spotify, buy a Premium account and tell the industry that it's a great payment model for music.

Firstly, try out the demo script to make sure you've got the dependencies installed properly:

* requests >= 1.0
* ws4py
* protobuf
* lxml

Then you can try one of the example scripts

<pre>
cd examples
python blocking.py &lt;username&gt; &lt;password&gt; album
</pre>

This should show an album title and a list of track titles for it.

Using the API is pretty simple, here's the basics:

<pre>
sp = Spotify(""username"", ""password"")
results = sp.search(""carly rae jepsen"")
for track in results.getTrack()
  print track
</pre>

Experimental client
-------------------

Included is an experimental client called respotify, based on this API. It's almost identical to
despotify-simple in terms of functionality. Be sure to have the following additional dependencies installed:

* cherrypy
* web.py

Once you've installed these, you can run the client like this:

<pre>
cd clients/respotify
./respotify.py &lt;username&gt; &lt;password&gt;

                                   _    ___       
                               _  (_)  / __)      
  ____ _____  ___ ____   ___ _| |_ _ _| |__ _   _ 
 / ___) ___ |/___)  _ \ / _ (_   _) (_   __) | | |
| |   | ____|___ | |_| | |_| || |_| | | |  | |_| |
|_|   |_____|___/|  __/ \___/  \__)_| |_|   \__  |
                 |_|                       (____/ 

	
info		shows account information
play		plays the track with given index
help		shows help information
stop		stops any currently playing track
album		view the album for a specific track
quit		quits the application
artist		view the artist for a specific track
list		lists your rootlist or a playlist
uri		lists metadata for a URI (album)
next		plays the next track in the current playlist
current		shows the current playlist we're playing
prev		plays the previous track in the current playlist

>
</pre>

What's implemented?
-------------------

* Login via username/password
* Metadata retrieval (track/album/artist)
* Playlist and rootlist support (add/remove tracks, creation/renaming/deletion)
* Toplists for both regions and users (track/album/artist only)
* Starring/unstarring tracks
* MP3 playback URL retrieval

What's NOT implemented?
-----------------------
* Inbox (not currently supported via the web client it appears)
* Subscribing to playlist updates
* Social functionality

TODO
----

Want to help out? Great! Here's a a list of things that need doing or improving:

* An example graphical client using the API (preferably multi-platform, OSX/Linux)
* Anything from the unimplemented list above

Want to write a library in another language?
--------------------------------------------

If you'd like to help out with this library or write a new one for another language do let me know and pop into #despotify on EFnet. I'm aware of people working on Java and Node.js libraries currently, more are of course welcome.
"
105,pixelcog/parallax.js,JavaScript,"Parallax.js
===========

Simple parallax scrolling implemented as a jQuery plugin.  
[http://pixelcog.com/parallax.js/](http://pixelcog.com/parallax.js/)


Please also check our [v2.0.0-alpha](https://github.com/pixelcog/parallax.js/tree/v2.0.0-alpha)! We'd be happy to receive your feedback!

**ATTENTION:** please use the issue tracker for bug reports and feature requests ONLY! For questions and topics which go along the lines ""I cannot get this to work"" please turn to [stackoverflow.com](https://stackoverflow.com/questions/tagged/parallax.js) for help and use the tag [parallax.js](https://stackoverflow.com/questions/tagged/parallax.js). Thank you for your understanding!


## Installation

### NPM

```bash
npm i --save jquery-parallax.js
```

### Yarn

```bash
yarn add jquery-parallax.js
```

### Bower

Please note that although Bower is still maintained, they recommend Yarn for new projects.

```bash
$ bower i --save parallax.js
```

### Setup

Include `parallax.min.js` in your document after including jQuery (compatible with jQuery >= 1.7).

```html
<script src=""https://ajax.googleapis.com/ajax/libs/jquery/3.2.1/jquery.min.js""></script>
<script src=""/path/to/parallax.min.js""></script>
```

Use these CDN links, provided by jsDelivr.com
```html
<script src=""https://ajax.googleapis.com/ajax/libs/jquery/1.11.0/jquery.min.js""></script>
<script src=""https://cdn.jsdelivr.net/parallax.js/1.4.2/parallax.min.js""></script>
```

## Usage

Please note, that `<!DOCTYPE html>` on top of your document is required!

### Simple version via data attributes

*Note: for more complex requirements we recommend using the [inner HTML markup](#using-inner-html-for-complex-content) below! With that it's possible to use the parallax effect with almost any HTML content*

To easily add a parallax effect behind an element, add `data-parallax=""scroll""` to the element you want to use, and specify an image with `data-image-src=""/path/to/image.jpg""`.

```html
<div class=""parallax-window"" data-parallax=""scroll"" data-image-src=""/path/to/image.jpg""></div>
```

### Via JavaScript

To call the parallax plugin manually, simply select your target element with jQuery and do the following:

```javascript
$('.parallax-window').parallax({imageSrc: '/path/to/image.jpg'});
```

### Notes

What parallax.js will do is create a fixed-position element for each parallax image at the start of the document's body (or another configurable container). This mirror element will sit behind the other elements and match the position and dimensions of its target object.

Due to the nature of this implementation, you must ensure that these parallax objects and any layers below them are transparent so that you can see the parallax effect underneath.  Also, if there is no other content in this element, you will need to ensure that it has some fixed dimensions otherwise you won't see anything.

```css
.parallax-window {
	min-height: 400px;
	background: transparent;
}
```

Also, keep in mind that once initialized, the parallax plugin presumes a fixed page layout unless it encounters a `scroll` or `resize` event.  If you have a dynamic page in which another javascript method may alter the DOM, you must manually refresh the parallax effect with the following commands:

```javascript
jQuery(window).trigger('resize').trigger('scroll');
```

### Using inner HTML for complex content

You can use the following syntax to enable complex content for the parallax:

```html
<div class=""parallax-window"">
  <div class=""parallax-slider"">
    <span style=""position:absolute; top: 400px; left: 400px;"">Some Text</span>
	<p>Some other Content</p>
  </div>
</div>
```
Please note, that the div with class ""parallax-slider"" is essential here.

You then need to initialize it through JS and provide the naturalWidth and naturalHeight options in order to be rendered correctly.

```
$('.parallax-window').parallax({
    naturalWidth: 600,
    naturalHeight: 400
  });
```

This also makes it possible to use responsive images in the slider:

```html
<div class=""parallax-window"">
  <div class=""parallax-slider"">
    <img src=""/path/to/image.jpg"" srcset=""/path/to/image-400px.jpg 400w, /path/to/image-800px.jpg 800w, /path/to/image-1200px.jpg 1200w"" sizes=""100vw"">
  </div>
</div>
```

## Options

Options can be passed in via data attributes of JavaScript.  For data attributes, append the option name to `data-`, as in `data-image-src=""""`.

Note that when specifying these options as html data-attributes, you should convert ""camelCased"" variable names into ""dash-separated"" lower-case names (e.g. `zIndex` would be `data-z-index=""""`).

<table class=""table table-bordered table-striped"">
	<thead>
		<tr>
			<th style=""width: 100px;"">Name</th>
			<th style=""width: 100px;"">type</th>
			<th style=""width: 50px;"">default</th>
			<th>description</th>
		</tr>
	</thead>
	<tbody>
		<tr>
			<td>imageSrc</td>
			<td>path</td>
			<td>null</td>
			<td>You must provide a path to the image you wish to apply to the parallax effect.</td>
		</tr>
		<tr>
			<td>naturalWidth</td>
			<td>number</td>
			<td>auto</td>
			<td rowspan=""2"">You can provide the natural width and natural height of an image to speed up loading and reduce error when determining the correct aspect ratio of the image.</td>
		</tr>
		<tr>
			<td>naturalHeight</td>
			<td>number</td>
			<td>auto</td>
		</tr>
		<tr>
			<td>position</td>
			<td>xPos yPos</td>
			<td>center center</td>
			<td rowspan=""3"">This is analogous to the background-position css property. Specify coordinates as top, bottom, right, left, center, or pixel values (e.g. -10px 0px). The parallax image will be positioned as close to these values as possible while still covering the target element.</td>
		</tr>
		<tr>
			<td>positionX</td>
			<td>xPos</td>
			<td>center</td>
		</tr>
		<tr>
			<td>positionY</td>
			<td>yPos</td>
			<td>center</td>
		</tr>
		<tr>
			<td>speed</td>
			<td>float</td>
			<td>0.2</td>
			<td>The speed at which the parallax effect runs. 0.0 means the image will appear fixed in place, and 1.0 the image will flow at the same speed as the page content.</td>
		</tr>
		<tr>
			<td>zIndex</td>
			<td>number</td>
			<td>-100</td>
			<td>The z-index value of the fixed-position elements.  By default these will be behind everything else on the page.</td>
		</tr>
		<tr>
			<td>bleed</td>
			<td>number</td>
			<td>0</td>
			<td>You can optionally set the parallax mirror element to extend a few pixels above and below the mirrored element.  This can hide slow or stuttering scroll events in certain browsers.</td>
		</tr>
		<tr>
			<td>iosFix</td>
			<td>boolean</td>
			<td>true</td>
			<td>If true, this option will set the parallax image as a static, centered background image whenever it detects an iOS user agent. You also need to set iosDisabled option true to make this option works. Disable this if you wish to implement your own graceful degradation.</td>
		</tr>
		<tr>
			<td>iosDisabled</td>
			<td>boolean</td>
			<td>true</td>
			<td>If true, the parallax effect is disabled on iOS devices.</td>
		</tr>
		<tr>
			<td>androidFix</td>
			<td>boolean</td>
			<td>true</td>
			<td>If true, this option will set the parallax image as a static, centered background image whenever it detects an Android user agent. You also need to set androidDisabled option true to make this option works. Disable this if you wish to enable the parallax scrolling effect on Android devices.</td>
		</tr>
		<tr>
			<td>androidDisabled</td>
			<td>boolean</td>
			<td>true</td>
			<td>If true, the parallax effect is disabled on Android devices.</td>
		</tr>
		<tr>
			<td>overScrollFix</td>
			<td>boolean</td>
			<td>false</td>
			<td>(Experimental) If true, will freeze the parallax effect when ""over scrolling"" in browsers like Safari to prevent unexpected gaps caused by negative scroll positions.</td>
		</tr>
		<tr>
			<td>mirrorContainer</td>
			<td>jQuery Selector</td>
			<td>body</td>
			<td>The parallax mirror will be prepended into this container.</td>
		</tr>
	</tbody>
</table>

## Contributing

If you have a pull request you would like to submit, please ensure that you update the minified version of the library along with your code changes.  This project uses [uglifyjs](https://www.npmjs.com/package/uglify-js) to perform code compression.

Please use the following command:

	uglifyjs parallax.js --comments -m -c -o parallax.min.js


LICENSE
=======

The MIT License (MIT)

Copyright (c) 2016 PixelCog Inc.

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the ""Software""), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in all
copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED ""AS IS"", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
SOFTWARE.
"
106,sthewissen/KickassUI.Spotify,C#,"# KickassUI.Spotify
A Xamarin.Forms version of the Spotify app to prove you can create goodlooking UI with Xamarin.Forms as talked about in my blogpost on: https://www.thewissen.io/xamarin-forms-ui-spotify/

## Tools used
- FreshMvvm – Simple MVVM framework – https://github.com/rid00z/FreshMvvm
- BottomNavigationBarXF - A bottom tabbar for Android - https://github.com/thrive-now/BottomNavigationBarXF
- Fody - Framework that the PropertyChanged Fody weaver is built on - https://github.com/Fody
- Fody PropertyChanged - Handles property changed events, ideal for MVVM - https://github.com/Fody/PropertyChanged
- LiveXAML – Live simulator updates for your XAML code – http://www.livexaml.com
 
## The end result
On the left hand side we have the actual app, on the right hand side the Xamarin Forms version:

<img src=""https://github.com/sthewissen/KickassUI.Spotify/blob/master/images/comparison-ios1.jpg"" width=""600"" />
<img src=""https://github.com/sthewissen/KickassUI.Spotify/blob/master/images/comparison-ios2.jpg"" width=""600"" />
<img src=""https://github.com/sthewissen/KickassUI.Spotify/blob/master/images/comparison-droid1.jpg"" width=""600"" />
<img src=""https://github.com/sthewissen/KickassUI.Spotify/blob/master/images/comparison-droid2.jpg"" width=""600"" />
"
107,KRTirtho/spotube,Dart,"![Spotube](assets/spotube_banner.png)

<p align=""center"">
  <a href=""https://spotube.netlify.app/"">spotube.netlify.app</a>
</p>

<p align=""center"">
  <a href=""https://github.com/KRTirtho/spotube/actions/workflows/flutter-build.yml"">
    <img alt=""GitHub Action Status"" src=""https://img.shields.io/github/workflow/status/KRTirtho/spotube/Flutter%20Cross%20Build/build?color=%2316ba58&style=flat-square""/>
  </a>
  <a href=""https://github.com/KRTirtho/Spotube/releases"">
    <img alt=""GitHub release"" src=""https://img.shields.io/github/v/release/KRTirtho/spotube?color=%2316ba58&style=flat-square""/>
  </a>
  <a href=""LICENSE"">
    <img alt=""License"" src=""https://img.shields.io/aur/license/spotube-bin?color=%2316ba58&style=flat-square""/>
  </a>
  <a href=""https://github.com/KRTirtho"">
    <img alt=""Maintainer"" src=""https://img.shields.io/badge/Maintainer-KRTirtho-%2316ba58?style=flat-square""/>
  </a>
  <a href=""https://opencollective.com/spotube"">
    <img alt=""Open Collective backers and sponsors"" src=""https://img.shields.io/opencollective/all/spotube?color=%2316ba58&style=flat-square""/>
  </a>
  <a href=""https://discord.gg/uJ94vxB6vg"">
    <img alt=""Discord"" src=""https://img.shields.io/discord/1012234096237350943?color=%2316ba58&label=Discord%20Server&logoColor=%2316ba58&style=flat-square"">
  </a>
</p>


Spotube is a [Flutter](https://flutter.dev) based lightweight spotify client. It utilizes the power of Spotify & Youtube's public API & creates a hazardless, performant & resource friendly User Experience

#### <p align=""center"">Desktop</p>

![Application Desktop Screenshot](assets/spotube-screenshot.jpg)

#### <p align=""center"">Mobile</p>

![Application Mobile Screenshot](assets/mobile-screenshots/mobile-combined.jpg)

<p align=""center"">
  <a href=""https://discord.gg/uJ94vxB6vg"">
    <img src=""https://discord.com/api/guilds/1012234096237350943/widget.png?style=banner2"">
  </a>
</p>

# Features

Following are the features that currently spotube offers:

- Open Source
- Anonymous/Guest Login
- Cross platform
- No telemetry, diagnostics or user data collection
- Lightweight & resource friendly
- Native performance (Thanks to Flutter+Skia)
- Playback control is on user's machine instead of server based
- Small size & less data hungry
- No spotify or youtube ads since it uses all public & free APIs (But it's recommended to support the creators by watching/liking/subscribing to the artists youtube channel or add as favourite track in spotify. Mostly buying spotify premium is the best way to support their valuable creations)
- Synced Lyrics
- Downloadable track

# Support this project

<a href=""https://patreon.com/krtirtho""><img src=""https://user-images.githubusercontent.com/61944859/180249027-678b01b8-c336-451e-b147-6d84a5b9d0e7.png"" width=""250""/></a>
[![""Donate to out Collective""](https://opencollective.com/webpack/donate/button.png?color=blue)](https://opencollective.com/spotube)
[![""Buy Me A Coffee""](https://www.buymeacoffee.com/assets/img/custom_images/orange_img.png)](https://www.buymeacoffee.com/krtirtho)

# Installation

I'm always releasing newer versions of binary of the software each 2-3 month with minor changes & each 6-8 month with major changes. Grab the binaries

| Platform                                        | Package/Installation Method                                                                                                                                                                                                                                                                                               |
| ----------------------------------------------- | ------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- |
| Android                                         | [<img width='240' alt='Android Download' src='https://www.remcsteuben.com/sites/default/files/images/apkdaddy%20download.png'/>][android-dlink]<br/>[<img width='240' alt='Android Download' src='https://user-images.githubusercontent.com/61944859/174589876-bace24c0-b3fd-4c4a-bdb4-6fa82b5853ec.png'/>][fdroid-dlink] |
| Debian/Ubuntu                                   | [<img width='240' alt='Linux Debian/Ubuntu Download' src='https://user-images.githubusercontent.com/61944859/169097994-e92aff78-fd75-4c93-b6e4-f072a4b5a7ed.png'/>][deb-dlink] <br/> Then run: `sudo apt install Spotube-linux-x86_64.deb`                                                                                |
| Flatpak                                         | `flatpak install com.github.KRTirtho.Spotube` <br/> <a href='https://flathub.org/apps/details/com.github.KRTirtho.Spotube'><img width='240' alt='Download on Flathub' src='https://flathub.org/assets/badges/flathub-badge-en.png'/></a>                                                                                  |
| Arch/Manjaro                                    | pamac: `pamac install spotube-bin` <br/> yay: `yay -Sy spotube-bin`                                                                                                                                                                                                                                                       |
| AppImage                                        | [<img width='240' alt='AppImage Download' src='https://user-images.githubusercontent.com/61944859/169455015-13385466-8901-48fe-ba90-b62d58b0be64.png'/>][appimage-dlink]<br/> **Note**: AppImages require [appimage-launcher](https://github.com/TheAssassin/AppImageLauncher) to be installed                            |
| Linux (tarball)                                 | [<img width='240' alt='Tarball Download' src='https://user-images.githubusercontent.com/61944859/169456985-e0ba1fd4-10e8-4cc0-ab94-337acc6e0295.png'/>][linux-dlink]                                                                                                                                                      |
| Windows                                         | [<img width='240' alt='Windows Download' src='https://get.todoist.help/hc/article_attachments/4403191721234/WindowsButton.svg'/>][win32-dlink]                                                                                                                                                                            |
| Windows (Chocolatey)                            | `choco install spotube`                                                                                                                                                                                                                                                                                                   |
| Windows (<a href=""https://scoop.sh/"">Scoop</a>) | `scoop bucket add extras`  <br/> `scoop install spotube`                                                                                                                                                                                                                                                                  |
| Windows (WinGet)                                | `winget install --id KRTirtho.Spotube`                                                                                                                                                                                                                                                                                    |
| MacOS                                           | [<img width='240' alt='MacOS Download' src='https://reachify.io/wp-content/uploads/2018/09/mac-download-button-1.png'/>][mac-dlink]                                                                                                                                                                                       |

> **Note!:** If you don't understand this download table. You can read [installation instructions][wiki-installation-instructions] from the wiki

## Nightly Builds
Get the latest nightly builds of Spotube [here](https://nightly.link/KRTirtho/spotube/workflows/spotube-nightly/build)

## Optional Configurations
### Login with <b>Spotify</b>
  You need a spotify account & a developer app for

  - clientId
  - clientSecret

  **Grab credentials:**

  - Go to https://developer.spotify.com/dashboard/login & login with your spotify account (Skip if you're logged in)
    <img width='480' alt='Step 1' src='https://user-images.githubusercontent.com/61944859/111762106-d1d37680-88ca-11eb-9884-ec7a40c0dd27.png'/>

  - Create an web app for Spotify Public API<br/>
    <img width='480' alt='step 2' src='https://user-images.githubusercontent.com/61944859/111762507-473f4700-88cb-11eb-91f3-d480e9584883.png'/>

  - **MOST IMPORTANT:** Give the app a name & description. Then Edit settings & add `http://localhost:4304/auth/spotify/callback` as **Redirect URI** for the app. Its important for authenticating<br/>
    <img width='720' alt='step-3-a' src='https://user-images.githubusercontent.com/61944859/172991668-fa40f247-1118-4aba-a749-e669b732fa4d.jpg' />
    <img width='720' alt='setp-3-b' src='https://user-images.githubusercontent.com/61944859/111768971-d308a180-88d2-11eb-9108-3e7444cef049.png'/>

  - Click on **SHOW CLIENT SECRET** to reveal the **clientSecret**. Then copy the **clientID**, **clientSecret** & paste in the **Spotube's** respective fields<br/>
    <img width='480' alt='step-4' src='https://user-images.githubusercontent.com/61944859/111769501-7fe31e80-88d3-11eb-8fc1-f3655dbd4711.png'/>

# TODO:
- [ ] Windows OS Media Control & Media Keys Support
- [ ] Spotify Listen Along
- [x] Skip non-music sections from Audio Track
- [ ] Language Translations/Localization

# Building from source

You can find the details [here](CONTRIBUTION.md#your-first-code-contribution)

# Things that don't work

- Shows & Podcasts aren't supported as it'd require premium anyway

# License

[BSD-4-Clause](/LICENSE)

Bu why? You can learn about it [here](https://dev.to/krtirtho/choosing-open-source-license-wisely-1m3p)

# Financial Contributors
## Backers
![Backers](https://opencollective.com/spotube/backer.svg?button=false)
![Donors](https://opencollective.com/spotube/tiers/donor.svg?button=false)

## Sponsors
![Donors](https://opencollective.com/spotube/tiers/sponsor.svg)

# Library/Plugin/Framework Credits

- [Flutter](https://flutter.dev/) - Flutter transforms the app development process. Build, test, and deploy beautiful mobile, web, desktop, and embedded apps from a single codebase
- [Linux](https://www.linux.org/) - Linux is a family of open-source Unix-like operating systems based on the Linux kernel, an operating system kernel first released on September 17, 1991, by Linus Torvalds. Linux is typically packaged in a Linux distribution
- [AUR](https://aur.archlinux.org/) - AUR stands for Arch User Repository. It is a community-driven repository for Arch-based Linux distributions users
- [Flatpak](https://flatpak.org/) - Flatpak is a utility for software deployment and package management for Linux
- [spotify (dart)](https://github.com/rinukkusu/spotify-dart) - A dart library for interfacing with the Spotify API
- [audioplayers](https://github.com/bluefireteam/audioplayers) - A Flutter plugin to play multiple audio files simultaneously (Android/iOS)
- [youtube_explode_dart](https://github.com/Hexer10/youtube_explode_dart) - YoutubeExplode is a library that provides an interface to query metadata of YouTube videos, playlists and channels, as well as to resolve and download video streams and closed caption tracks
- [infinite_scroll_pagination](https://github.com/EdsonBueno/infinite_scroll_pagination) - Flutter package to help you lazily load and display pages of items as the user scrolls down your screen
- [bitsdojo_window](https://github.com/bitsdojo/bitsdojo_window) - A Flutter package that makes it easy to customize and work with your Flutter desktop app window on Windows, macOS and Linux
- [Inno Setup](https://jrsoftware.org/isinfo.php) - Inno Setup is a free installer for Windows programs by Jordan Russell and Martijn Laan
- [collection](https://github.com/dart-lang/collection) - The collection package for Dart contains a number of separate libraries with utility functions and classes that makes working with collections easier 
- [flutter_riverpod](https://riverpod.dev/) - A Reactive Caching and Data-binding Framework
- [flutter_hooks](https://github.com/rrousselGit/flutter_hooks) - React hooks for Flutter. Hooks are a new kind of object that manages a Widget life-cycles. They are used to increase code sharing between widgets and as a complete replacement for StatefulWidget
- [hooks_riverpod](https://riverpod.dev/) - Riverpod with hooks
- [go_router](https://github.com/flutter/packages/tree/main/packages/go_router) - A declarative router for Flutter based on Navigation 2 supporting deep linking, data-driven routes and more
- [palette_generator](https://github.com/flutter/packages/tree/main/packages/palette_generator) - Flutter package for generating palette colors from a source image.
- [logger](https://github.com/leisim/logger) - Small, easy to use and extensible logger which prints beautiful logs
- [flutter_launcher_icons](https://github.com/fluttercommunity/flutter_launcher_icons) - A package which simplifies the task of updating your Flutter app's launcher icon.
- [permission_handler](https://github.com/baseflow/flutter-permission-handler) - Permission plugin for Flutter. This plugin provides a cross-platform (iOS, Android) API to request and check permissions. 
- [marquee](https://github.com/MarcelGarus/marquee) - ⏩ A Flutter widget that scrolls text infinitely. Provides many customizations including custom scroll directions, durations, curves as well as pauses after every round
- [scroll_to_index](https://github.com/quire-io/scroll-to-index) - scroll to index with fixed/variable row height inside Flutter scrollable widget 
- [package_info_plus](https://github.com/fluttercommunity/plus_plugins/tree/main/packages/) - This Flutter plugin provides an API for querying information about an application package.
- [version](https://github.com/dartninja/version) - A dart library providing a Version class 
- [audio_service](https://github.com/ryanheise/audio_service) - Flutter plugin to play audio in the background while the screen is off.
- [skeleton_text](https://github.com/101Loop/Skeleton-Text) - Flutter package for Skeleton Text Animation
- [hive](https://github.com/hivedb/hive) - Lightweight and blazing fast key-value database written in pure Dart. 
- [dbus](https://github.com/canonical/dbus.dart) - Native Dart client library to use DBus
- [introduction_screen](https://github.com/pyozer/introduction_screen) - Add easily to your app an introduction screen to provide informations to new users
- [audio_session](https://github.com/ryanheise/audio_session) - Sets the iOS audio session category and Android audio attributes for your app, and manages your app's audio focus, mixing and ducking behaviour.


# Social handlers

Follow me on [Twitter](https://twitter.com/@krtirtho) for newer updates about this application


<p align=""center"">&copy; 2022 Spotube</p>


<!-- Variables/Text References -->
[win32-dlink]: https://github.com/KRTirtho/spotube/releases/latest/download/Spotube-windows-x86_64-setup.exe
[deb-dlink]: https://github.com/KRTirtho/spotube/releases/latest/download/Spotube-linux-x86_64.deb
[linux-dlink]: https://github.com/KRTirtho/spotube/releases/latest/download/Spotube-linux-x86_64.tar.xz
[appimage-dlink]: https://github.com/KRTirtho/spotube/releases/latest/download/Spotube-linux-x86_64.AppImage
[mac-dlink]: https://github.com/KRTirtho/spotube/releases/latest/download/Spotube-macos-x86_64.dmg
[android-dlink]: https://github.com/KRTirtho/spotube/releases/latest/download/Spotube-android-all-arch.apk
[fdroid-dlink]: https://f-droid.org/packages/oss.krtirtho.spotube/

[wiki-installation-instructions]: https://github.com/KRTirtho/spotube/wiki/Installation-Instrcutions
"
108,mitchtabian/Spotify-Clone,Java,"<a href='https://codingwithmitch.com/courses/android-audio-streaming/' target='_blank'><img class='header-img' src='https://codingwithmitch.s3.amazonaws.com/static/android-spotify-clone/images/Spotify_Clone.png' /></a>

<h1><a href='https://codingwithmitch.com/courses/android-audio-streaming/' target='_blank'>Audio Streaming on Android</a></h1>
<h3><a href='https://codingwithmitch.com/courses/android-audio-streaming/' target='_blank'>Watch the app demo and see screen shots</a>.</h3>

<p>In this course I teach you the current best practice way to build an audio streaming application on android. To make it more interesting, I designed it to look similar to the popular music streaming app called Spotify.<a href=""https://codingwithmitch.com/courses/android-audio-streaming/""> View screen shots</a>.</p>

<p>I use the ExoPlayer library for streaming the audio files. The audio files are located online in a Firebase Firestore database. </p>

<p>Here's what you will see in the course:</p>
<ul>
<li><strong>Every line of code is written and explained on video</strong></li>
<li>ExoPlayer (same media library used by YouTube in the mobile app)</li>
<li>Streaming audio files from the internet (Firestore)</li>
<li>Playlists</li>
<li>Effective fragment management</li>
<li>AsyncTasks</li>
<li>SharedPreferences</li>
<li>Effective communication with interfaces</li>
<li>Services (a class specifically built to stream media files)</li>
<li>Background Services that run forever</li>
<li>Notifications</li>
<li>Controlling playback through a notification</li>
<li>Notifications and the lock screen</li>
<li>Broadcast Receivers</li>
<li>Glide library to download bitmaps</li>
<li>RecyclerViews</li>
<li>And much more...</li>
</ul>
<br>
"
109,izayl/spotify-box,JavaScript,"<p align='center'>
  <img width=""400"" src=""https://user-images.githubusercontent.com/10740043/103472132-b0cbb100-4dc4-11eb-97a2-4261c4c5c4f5.png"">
  <h3 align=""center"">spotify-box</h3>
  <p align=""center"">Automatic update pinned gist to show your recent Spotify top tracks.</p>
  <p align=""center""><sub>Don't forget to leave a ⭐ if you found this useful.</sub></p>
</p>

---
> 📌✨ For more pinned-gist projects like this one, check out: <https://github.com/matchai/awesome-pinned-gists>

## ✨ Inspiration

This code was heavily inspired by [@jacc's music-box](https://github.com/jacc/music-box).

## 🎒 Prep Work

1. Create a new public GitHub Gist (<https://gist.github.com/>)
2. Create a token with the `gist` scope and copy it. (<https://github.com/settings/tokens/new>)
3. Create a Spotify Application and get certified, detail steps you can see below.

<details><summary>Spotify Authorization Steps</summary>
<p>

### 1. Create new Spotify Application

Visit <https://developer.spotify.com/dashboard/applications> login and create a new Application

After create, you will get your Client ID & Client Secret.

Then click `EDIT SETTINGS` Button, add `http://localhost:3000` to Redirect URIs

### 2. Get Authorization Code

Visit following URL after replace `$CLIENT_ID` to yours

```
https://accounts.spotify.com/en/authorize?client_id=$CLIENT_ID&response_type=code&redirect_uri=http:%2F%2Flocalhost:3000&scope=user-read-currently-playing%20user-top-read
```

Agree to this application to access your info, after that your will be redirect to a new page, the url like this: `http://localhost:3000?code=$CODE`

this `$CODE` is your Authorization Code, it will be used to generate access_token at next step.

### 3. Get Access Token

the last step, use the `$CLIENT_ID` and `$CLIENT_SECRET` from step 1, `$CODE` from step 2 to replace the shell command below

```shell
curl -d client_id=$CLIENT_ID -d client_secret=$CLIENT_SECRET -d grant_type=authorization_code -d code=$CODE -d redirect_uri=http://localhost:3000 https://accounts.spotify.com/api/token
```

after run it at your terminal, you'll get your `${REFRESH_TOKEN}`

the output may like this:

```json
{
    ""access_token"": ""BQBi-jz.....yCVzcl"",
    ""token_type"": ""Bearer"",
    ""expires_in"": 3600,
    ""refresh_token"": ""AQCBvdy70gtKvnrVIxe..."",
    ""scope"": ""user-read-currently-playing user-top-read""
}
```

if the response not return refresh_token, back to step 2 and retry.

</p>
</details>

## 🖥 Project Setup

1. Fork this repo
2. Go to your fork's `Settings` > `Environments` > `New environment` and create an environment called ""prod""
3. Choose your ""prod"" environment and `Add Secret` for each environment secret (below)
4. Enable Actions on your fork via the 'Actions' tab
5. Enable the 'spotify-box' Workflow via the 'Actions' tab
6. Kick off a workflow run of the 'spotify-box' Workflow via Actions > spotify-box > Run workflow

## 🤫 Environment Secrets

- **GIST_ID:** The ID portion from your gist url `https://gist.github.com/<github username>/`**`6d5f84419863089a167387da62dd7081`**.
- **GH_TOKEN:** The GitHub token generated above.
- **SPOTIFY_CLIENT_ID:** The Client ID you got from Spotify Developer Dashboard.
- **SPOTIFY_CLIENT_SECRET:** The Client Secret you got from Spotify Developer Dashboard.
- **SPOTIFY_REFRESH_TOKEN:** The Refresh Token you got from Spotify API.

## 💸 Donations

Feel free to use the GitHub Sponsor button to donate towards my work if you think this project is helpful. 🤗
"
110,fabiofalci/sconsify,Go,"A spotify console app
---------------------

[![Join the chat at https://gitter.im/fabiofalci/sconsify](https://badges.gitter.im/Join%20Chat.svg)](https://gitter.im/fabiofalci/sconsify?utm_source=badge&utm_medium=badge&utm_campaign=pr-badge&utm_content=badge)

Important notice: [libspotify](https://developer.spotify.com/technologies/libspotify/) is no longer available for download. If you have installed, then sconsify should be working. Unfortunately, we don't know for how long.

A very early stage of a spotify console application.

Requirements: [Libspotify SDK](https://developer.spotify.com/technologies/libspotify/) & [PortAudio](http://www.portaudio.com/) & Spotify user subscribed to the Premium tier of the Spotify Service ([Libspotify SDK terms of use](https://developer.spotify.com/developer-terms-of-use/)).


Installation
------------

* Download current version [0.5.0](https://github.com/fabiofalci/sconsify/releases) 

* Install dependencies:

`Archlinux`

	$ pacman -S portaudio
	$ yaourt -S libspotify

`Ubuntu` & `debian`

	$ curl http://apt.mopidy.com/mopidy.gpg | sudo apt-key add - && sudo curl -o /etc/apt/sources.list.d/mopidy.list http://apt.mopidy.com/mopidy.list
	$ sudo apt-get update && sudo apt-get install -y libportaudio2 libspotify12 --no-install-recommends 

`Fedora Workstation`

Install libspotify-devel from rpmfusion-nonfree. [Install instructions](https://rpmfusion.org/Configuration/)

	$ sudo dnf install libspotify portaudio

`OSX`

Install [brew, the missing package manager for OS X](http://brew.sh/) and

	$ brew tap homebrew/binary
	$ brew install portaudio

Then, download `libspotify` 12.1.51 for Mac OS X/Darwin
Uncompress the file and copy libspotify.framework to /Library/Frameworks (optional)
	
	$ wget https://developer.spotify.com/download/libspotify/libspotify-12.1.51-Darwin-universal.zip
	$ sudo cp -R ./libspotify-12.1.51-Darwin-universal/libspotify.framework /Library/Frameworks
	
sconsify will load libspotify from `/usr/local/opt/libspotify/lib/libspotify`. User should create a symbolic link to `/usr/local/opt/libspotify/lib/libspotify`

	$ mkdir -p /usr/local/opt/libspotify/lib
	$ ln -s /Library/Frameworks/libspotify.framework/libspotify /usr/local/opt/libspotify/lib

* Run `./sconsify`

![alt tag](https://raw.githubusercontent.com/wiki/fabiofalci/sconsify/sconsify.png)

Modes
-----

There are 2 modes: 

* `Console user interface` mode: it presents a text user interface with playlists and tracks.

* `No user interface` mode: it doesn't present user interface and just shuffle tracks.


Parameters
----------

* `-username=""""`: Spotify username. If not present username will be asked.

* Password will be asked. To not be asked you can set an environment variable with your password `export SCONSIFY_PASSWORD=password`. Be aware your password will be exposed as plain text.

* `-ui=true/false`: Run Sconsify with Console User Interface. If false then no User Interface will be presented and it'll only shuffle tracks.

* `-playlists=""""`: Select just some playlists to play. Comma separated list.


No UI Parameters
----------------

* `-noui-repeat-on=true/false`: Play your playlist and repeat it after the last track.

* `-noui-silent=true/false`: Silent mode when no UI is used.

* `-noui-shuffle=true/false`: Shuffle tracks or follow playlist order.


UI mode keyboard 
----------------

* &larr; &darr; &uarr; &rarr; for navigation.

* `space` or `enter`: play selected track.

* `>`: play next track.

* `p`: pause.

* `/`: open a search field.

Search fields: `album, artist or track`. 

```
    album:help
    artist:the beatles
    track:let it be
```

Aliases `al` = `album`, `ar` = `artist`, `tr` = `track`:

```
    al:help
    ar:the beatles
    tr:let it be
```

* `s`: shuffle tracks from current playlist. Press again to go back to normal mode.

* `S`: shuffle tracks from all playlists. Press again to go back to normal mode.

* `u`: queue selected track to play next.

* `r`: repeat the playing track.

* `dd`: delete selected element (playlist, track) from the UI (it doesn't save the change to spotify playlist).

* `D`: delete all tracks from the queue if the focus is on the queue.

* `PageUp` `PageDown` `Home` `End`. 

* `Control C` or `q`: exit.

Vi navigation style:

* `h` `j` `k` `l` for navigation.

* `Nj` and `Nk` where N is a number: repeat the command N times.

* `gg`: go to first element. 

* `G`: go to last element.

* `Ngg` and `NG` where N is a number: go to element at position N. 

* Temporary playlist. Type `c` in the queue view, type a name and then a temporary playlist will appear containing all songs in the queue view.


No UI mode keyboard 
-------------------

* `>`: play next track.

* `Control C`: exit.

Interprocess commands
--------------------

Sconsify starts a server for interprocess commands using `sconsify -command <command>`. Available commands: `replay, play_pause, next, pause`. 

[i3](http://i3wm.org/) bindings for multimedia keys:

```
    bindsym XF86AudioPrev exec sconsify -command replay
    bindsym XF86AudioPlay exec sconsify -command play_pause
    bindsym XF86AudioNext exec sconsify -command next

    # pause when locking computer with i3lock
    bindsym Control+Mod1+l exec ""i3lock -c 000000 && sconsify -command pause""
```

`macOS`: create a new service in `Automator`. Then pick `Library > Utilities > Run Shell Script`. Drag it to the workflow. Pick `no input` and then add to the script `/path/to/sconsify -command replay`, save it. Go to Keyboard `Shortcuts > Services` in System Settings, find the service you've just saved and type the desired shortcut. Repeat for each command (`replay, play_pause, next, pause`).

If you prefer doing this within tmux, you can put the following lines to your `.tmux.conf` file:

```tmux
bind-key F7 run-shell 'sconsify -command replay'
bind-key F8 run-shell 'sconsify -command play_pause'
bind-key F9 run-shell 'sconsify -command next'
```

sconsifyrc
----------

Similar to [.ackrc](http://beyondgrep.com/documentation/) you can define default parameters in `~/.sconsify/sconsifyrc`:

	-username=your-username
	-noui-silent=true 
	-noui-repeat-on=false


How to build
---------------------------------

Install go (same version from Dockerfile), [glide](https://glide.sh/) and get a Spotify application key and copy as a byte array to `/sconsify/spotify/spotify_key_array.key`.

	var key = []byte{
	    0x02, 0xA2, ...
	    ...
	    0xA1}

* osx only: `brew install pkgconfig`

* `make build`

When building for OSX you may face an issue where it doesn't get your application key. Just retry the build that eventually it will get the key.
"
111,Gurupreet/ComposeSpotifyDesktop,Kotlin,"<h1 align=""center"">Compose Spotify Desktop</h1>

<div align=""center"">
  <strong>Declarative UI</strong>
</div>
<div align=""center"">
  A Spotify demo app for desktop using Jetpack Compose UI toolkit
</div>

## Demo

Home             |  Search & Detail
:-------------------------:|:-------------------------
![](https://media.giphy.com/media/NMLgK1lJ8UGtNxx3ja/giphy.gif)  |  ![](https://media.giphy.com/media/OaQy1bKngytw5FvoSg/giphy.gif)

# Jetpack Compose

Jetpack Compose is Android’s modern toolkit (now supporting Desktop) for building native UI. It simplifies and
accelerates UI development on Android. Quickly bring your app to life with less code, powerful tools, and intuitive
Kotlin APIs.

## How to get started

- Please download the Early Access version of
  IntelliJ [from here](https://www.jetbrains.com/idea/nextversion/#section=mac).
- Load the project and run Main.kt
- Start new project from Desktop using Kotlin 1.4.+

## Official Documentations

- Official Google Documentation
    - [Compose for Desktop](https://www.jetbrains.com/lp/compose/)
    - [Jetpack compose](https://developer.android.com/jetpack/compose)
    - [Jetpack compose Samples](https://github.com/android/compose-samples)

## Please Share & Star the repository to keep me motivated.

  <a href = ""https://github.com/Gurupreet/ComposeSpotifyDesktop/stargazers"">
     <img src = ""https://img.shields.io/github/stars/Gurupreet/ComposeSpotifyDesktop"" />
  </a>
  <a href = ""https://twitter.com/_gurupreet"">
     <img src = ""https://img.shields.io/twitter/url?label=follow&style=social&url=https%3A%2F%2Ftwitter.com%2F_gurupreet"" />
  </a>
"
112,pwittchen/spotify-cli-linux,Python,"# spotify-cli-linux

[![Build Status](https://img.shields.io/travis/pwittchen/spotify-cli-linux.svg?branch=master&style=flat-square)](https://travis-ci.org/pwittchen/spotify-cli-linux) [![Version](https://img.shields.io/pypi/v/spotify-cli-linux.svg?style=flat-square)](https://pypi.python.org/pypi/spotify-cli-linux/) [![Python versions](https://img.shields.io/pypi/pyversions/spotify-cli-linux.svg?style=flat-square)](https://pypi.python.org/pypi/spotify-cli-linux/)

A command line interface to [Spotify](https://www.spotify.com/) on Linux.

This project is inspired by the similar project called [shpotify](https://github.com/hnarayanan/shpotify), which does similar things, but on macOS.

installation
------------

```
pip install spotify-cli-linux
```

**hint #1**: if you encounter problems during installation, try to call command with `sudo`

**hint #2**: if you still have problems (e.g. with resolving project dependencies), try to call `pip3` instead of `pip`

if you have any problems with `pip` or `pip3`, you can try to install the script in the alternative way as a workaround:

```
git clone git@github.com:pwittchen/spotify-cli-linux.git
cd spotify-cli-linux
sudo cp spotifycli/spotifycli.py /usr/local/bin/spotifycli
```

upgrade
-------

```
pip install spotify-cli-linux --upgrade
```

for the upgrade, you can apply the same hints like for installation

usage
-----

start the official Spotify desktop app

run the following command from your terminal:

```
spotifycli
```

use one of the following parameters:

```
-h, --help        show this help message and exit
--version         shows version number
--status          shows song name and artist
--statusshort     shows status in a short way
--song            shows the song name
--songshort       shows the song name in a short way
--artist          shows artists name
--artistshort     shows artist name in a short way
--album           shows album name
--arturl          shows album image url
--lyrics          shows lyrics for the song playing
--playbackstatus  shows playback status
--play            plays the song
--pause           pauses the song
--playpause       plays or pauses the song (toggles a state)
--next            plays the next song
--prev            plays the previous song
--client CLIENT   sets client's dbus name
```

if you don't use any parameters, you'll enter the shell mode, where you'll be able to use all commands mentioned above

solving problems
----------------

### dbus

When you've seen the following error:

```
No module named dbus
```

Then try to install `python-dbus`! On Ubuntu you can do it as follows:

```
sudo apt-get install python-dbus
```

If you are using another distro, then try to install `python-dbus` with your package manager.

### lyricwikia

When, you're missing `lyricwikia` dependency, run the following command:

```
pip install lyricwikia
```

usage with tmux
---------------

If you want to use this script in your tmux panel, you can check [tmux-plugin-spotify](https://github.com/pwittchen/tmux-plugin-spotify).

development
-----------

to install necessary tools for code formatting, static code analysis and releasing, run:

```
make requirements
```

code formatting
---------------

Source code should be formatted according to [PEP8](https://www.python.org/dev/peps/pep-0008/) style guides.

To format code, run:

```
make format
```

to verify code formatting, type:

```
make checkformat
```

static code analysis
--------------------

To run static code analysis, execute:

```
make lint
```

docs
----

to update docs on `gh-pages`, type:

```
make docs
```

to run docs locally, type:
```
git checkout gh-pages && ./serve.sh
```

and view page with docs at: 0.0.0.0:8000

view it on-line at https://pwittchen.github.io/spotify-cli-linux

releasing
---------

configure your `~/.pypirc` file as follows:

```
[distutils]
index-servers =
    pypi
[pypi]
username:yourusername
password:yourpassword
```

then, update version in `spotifycli/version.py` and `spotifycli/spotifycli.py` and type:

```
make release
```

**note**: Version is not kept in a single file due to problems with importing files within another file and distributing them to PyPi. There are also Python vesion issues. If you know how to fix this issue properly to keep version in one place, I'd be happy to review your PR :-).
"
113,ramsayleung/rspotify,Rust,"[![Continuous Integration](https://github.com/ramsayleung/rspotify/workflows/Continuous%20Integration/badge.svg)](https://github.com/ramsayleung/rspotify/actions)
[![License](https://img.shields.io/github/license/ramsayleung/rspotify)](https://github.com/ramsayleung/rspotify/blob/master/LICENSE)
[![Crates.io](https://img.shields.io/crates/v/rspotify.svg)](https://crates.io/crates/rspotify)
[![Docs](https://docs.rs/rspotify/badge.svg)](https://docs.rs/crate/rspotify/)

# RSpotify

RSpotify is a wrapper for the [Spotify Web API](https://developer.spotify.com/documentation/web-api/), inspired by [spotipy](https://github.com/plamere/spotipy). It includes support for all the [authorization flows](https://developer.spotify.com/documentation/general/guides/authorization/), and helper functions for [all endpoints](https://developer.spotify.com/documentation/web-api/reference/).

To learn how to use RSpotify, please refer to the [documentation](https://docs.rs/crate/rspotify/). There are some [examples that may be useful](./examples) as well.

## Changelog

Please see the [changelog](./CHANGELOG.md) for a release history and indications on how to upgrade from one version to another.

## Contributing

If you find any problems or have suggestions about this crate, please submit an issue. Moreover, any pull request, code review and feedback are welcome.

### Code Guide

We use GitHub Actions to make sure the codebase is consistent (`cargo fmt`) and continuously tested (`cargo test`). We try to keep comments at a maximum of 80 characters of length (which isn't automatically checked by `cargo fmt`) and code at 120.

### Trait Hierarchy

![](./doc/images/trait_hierarchy.png)

### Crate Hierarchy

![](./doc/images/crate_hierarchy.png)

## Building

RSpotify uses [`maybe_async`](https://docs.rs/maybe-async/0.2.0/maybe_async/) to switch between async and blocking clients, which is triggered inside `Cargo.toml`. So that must be taken into account when building `rspotify`. Read the Configuration section in the docs for more information about how to build with custom TLS implementations, and more.

`client-reqwest` is used by default. It should be as easy as

```sh
$ cargo build
```

`client-ureq` is also available as the `blocking` interface, which compiles RSpotify with [`ureq`](https://docs.rs/ureq/) (a TLS has to be specified as well):

```sh
$ cargo build --no-default-features --features client-ureq,ureq-rustls-tls
```

Notice that you can't build `rspotify` with all features like this:

```sh
$ cargo build --all-features
```

Because in order to switch between clients, the different clients have to implement the same base trait in [src/http/mod.rs](https://github.com/ramsayleung/rspotify/blob/master/src/http/mod.rs), so if you build with all features, you'll get `duplicate definitions` error. As every coin has two sides, you can only have one side at a time, not all sides of it.

## License

[MIT](./LICENSE)
"
114,ggomaeng/react-native-spotify-ui,JavaScript,"# react-native-spotify-ui
Pure javascript prototype of iOS Facebook UI for React Native framework. This demo only includes the landing page. 
I will add more views in the future.

## Sponsored by Spurwing

![img](https://github.com/ggomaeng/public/blob/main/spurwing-cover.png?raw=true)

This repo is sponsored by Spurwing, where their API Makes Adding Scheduling Quick, Reliable and Scalable.

- Scheduling API
- Enterprise Scheduling API
- Scheduling API for Business
- Scheduling and Calendar Management API
- Booking API

Check them out [here](https://github.com/Spurwing/Appointment-Scheduling-API)!

## Inspiration
I was always amazed by the amazing Spotify UI, and I decided to challenge myself. THe pulling drawer from the bottom was the hardest challenge--
there are so many bugs to combinate pan-responder with other components. Buttons do not respond with PanResponder. If anyone knows a fix, please message me!
 
<b>[FIX]</b> Now buttons are clickable, thanks to Dan Horrigan's recommendation
- Regarding the buttons in the PanResponder not working: I believe this is because you have `onStartShouldSetPanResponderCapture` returning `true`. I believe this is causing it to capture all touches on the View. Instead you should just have `onStartShouldSetPanResponder` return `true`, which will respect PanResponder's touch bubbling algorithm. The PR is pretty good at handling these conflicts in a predictable way most of the time.
  
  Another option: Make the ""Header"" of that slide-up View the ""handle"", so that the user has to start the gesture on that View. This is the way the Spotify app works anyways. You can't swipe down on any part of the scene except the Header.

<b>[FIX]</b> Fixed screen flickering issue with gesture.y0.


The design aspect of this demo belong to <b>Spotify</b>. 


## Demo

![demo](https://raw.githubusercontent.com/ggomaeng/react-native-spotify-ui/master/demo.gif)

## Try it out

Try it with Exponent: https://getexponent.com/@sungwoopark95/react-native-spotify-ui

## Run it locally

To install, there are two steps:

1. Install Exponent XDE [following this
guide](https://docs.getexponent.com/versions/latest/introduction/installation.html).
Also install the Exponent app on your phone if you want to test it on
your device, otherwise you don't need to do anything for the simulator.
2. Clone this repo and run `npm install`
  ```bash
  git clone https://github.com/ggomaeng/react-native-spotify-ui.git spotify

  cd spotify
  npm install
  ```
3. Open the project with Exponent XDE and run it.

The MIT License (MIT)
=====================

Copyright © 2016 Sung Woo Park

Permission is hereby granted, free of charge, to any person
obtaining a copy of this software and associated documentation
files (the “Software”), to deal in the Software without
restriction, including without limitation the rights to use,
copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the
Software is furnished to do so, subject to the following
conditions:

The above copyright notice and this permission notice shall be
included in all copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED “AS IS”, WITHOUT WARRANTY OF ANY KIND,
EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES
OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT
HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY,
WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR
OTHER DEALINGS IN THE SOFTWARE.
"
115,secuvera/SpotMyBackup,HTML,"# SpotMyBackup
Backup and Restore your Spotify Playlists and ""My Music"".

This javascript based app allows you to backup all your playlists and import them in any other Spotify Account. It uses the OAuth-Functionality of Spotify to be able to handle your personal playlists. 

In consequence, no credentials or data is stored or processed on the Webserver itself.

You can use it at www.spotmybackup.com or on your own webserver (see Q&A).
"
116,invicnaper/spotify-dl,Python,"[![GitHub license](https://img.shields.io/badge/license-GPLv2-blue.svg)](https://raw.githubusercontent.com/Facetracker-project/facetracker-core/master/COPYING)
[![GitHub license](https://img.shields.io/badge/packages-youtube--dl%2Fbs4-red.svg)](https://raw.githubusercontent.com/Facetracker-project/facetracker-core/master/COPYING)
[![GitHub license](https://img.shields.io/badge/author-naper-blue.svg)](https://raw.githubusercontent.com/Facetracker-project/facetracker-core/master/COPYING)
[![GitHub license](https://img.shields.io/badge/version-0.0.2-orange.svg)](https://raw.githubusercontent.com/Facetracker-project/facetracker-core/master/COPYING)
# spotify-dl
A script written in Python that extracts song or playlist information from Spotify and downloads them from YouTube if found.

This README would normally document whatever steps are necessary to get spotify-dl up and running.

### What is this repository for? ###

* spotify-dl allows you to download spotify songs or playlist
* Version 0.0.2
* This repo contains spotify-dl source code

### Screen ###

![alt text](http://nsa37.casimages.com/img/2016/02/13/160213111903934479.png ""spotfy-dl screen"")

# How to Install ?
to use spotify-dl , you need to install thoses packages :
  * bs4
  * youtube-dl
  
# MAC OSx
you can use brew to install youtube-dl :
  
    $ brew install youtube-dl
    
and pip to install bs4
  
    $ pip install beautifulsoup4
    
# Linux (debian)
use apt-get install to install youtube-dl

    $ sudo apt-get install youtube-dl
    
and pip to install bs4
  
    $ pip install beautifulsoup4
    
# How to use ?
you can either use your spotify account or downloading single track or playlist by providing an ID , ex:

    $ ./spotify-dl --track {spotify_song_id} --dl youtube
    
this will download the track and save it as mp3 format

you can get the song ID by getting the spotify URI of the song

{spotify_song_id_ex} : 28Ct4qwkQXY2W5yyNCLuVI

# Spotify API
The new version of the spotify api require an access_token for requests, you can check out https://developer.spotify.com/migration-guide-for-unauthenticated-web-api-calls/.

the new patch of spotify-dl have a new argument called:  --access_token , so the new usage of spotify-dl would be:
  
    $ ./spotify-dl --track {spotify_song_id} --dl youtube --access_token <your_access_token>
    
you can get the access token from the url generated while executing : 

    $ ./spotify-dl --gen_url 
    
you also have to create an application on https://developer.spotify.com/

change:

    CLIENT_ID=""""
    CALL_BACK_URL=""""

### Contributors ###

* Hamza Bourrahim
"
117,jlund/spotify-export,Ruby,"spotify-export
==============

Description
-----------
Let's convert a Spotify playlist into plain text!

1. Open Spotify and go to the playlist that you want to export.
2. Select the tracks that you want to export (Ctrl-A or Cmd-A to Select All).
3. Right-click on the selected tracks and choose ""Copy Spotify URI"" from the menu.
4. Go to the text editor of your choice and Paste.
5. Save the file.
6. Run `./bin/spotify-export.rb your-filename.txt`.

Running the command on the included `spec/support/multiple-tracks.txt` test file will produce the following output:

    1. Illusions -- Shout Out Louds -- Optica (Bonus Track Version)
    2. My Number -- Foals -- Holy Fire
    3. Love to Get Used -- Matt Pond -- The Lives Inside The Lines In Your Hand
    4. Clouds -- Rangleklods -- Beekeeper (incl. Home EP)
    5. Kelly -- When Saints Go Machine -- Konkylie

Listening to the songs might be fun too.

Enjoy!


Features
--------
* Lookups are performed using the super-efficient [Spotify Web API](https://developer.spotify.com/web-api/).
* SQLite is used as a caching layer so that information about each track will only be requested once, which allows you to regularly back up large playlists.


Requirements
------------
* [Ruby](http://www.ruby-lang.org/en/) 2.1 or higher
* [Bundler](http://gembundler.com/)
* [ActiveRecord](https://github.com/rails/rails/tree/master/activerecord)
* [RSpec](http://rspec.info/)
* [Ruby/ProgressBar](https://github.com/jfelchner/ruby-progressbar)
* [SQLite3](https://github.com/luislavena/sqlite3-ruby) and a working [SQLite](http://www.sqlite.org/) binary


Setup
-----
* `bundle install`


Acknowledgments
---------------
This product uses a SPOTIFY API but is not endorsed, certified or otherwise approved in any way by Spotify. Spotify is the registered trade mark of the Spotify Group.
"
118,JoeKarlsson/react-spotify-player,JavaScript,"# React Spotify Player

![How to Build A Spotify Player with React in 15 Minutes](https://user-images.githubusercontent.com/4650739/54856371-36ea3680-4cc8-11e9-9aeb-1be2a4d95f39.png)

Have you ever wanted to add Spotify integration into your app or website? Adding personalized music to any application is super easy with the Spotify Developer API.

The Spotify API is easy to use and can be added to any application.

In this post, I am going to walk through how to access the Spotify Developer API in the browser using React. The goal is to be a starting point for frontend devs who want to get set up with Spotify API as quickly as possible. Together, we will be creating a Spotify Web player that displays information about your currently played music from Spotify. We will also demonstrate how to:

- Register an application with Spotify
- Authenticate a user and get authorization to access user data
- Retrieve the data from a Web API endpoint

You can read my in depth blog post that accompanies this code, here: [https://medium.com/@joekarlsson/how-to-build-a-spotify-player-with-react-in-15-minutes-7e01991bc4b6](https://medium.com/@joekarlsson/how-to-build-a-spotify-player-with-react-in-15-minutes-7e01991bc4b6)

![Spotify player](https://user-images.githubusercontent.com/4650739/54856251-8aa85000-4cc7-11e9-9bb1-e27812ac2e00.gif)

## Quickstart

### 1. Register an application with Spotify

Go to the [Dashboard](https://developer.spotify.com/dashboard) page at the Spotify Developer website, and click on ‘My New App.” Be sure to write down the Client ID from your application.

You can read my in depth blog post that accompanies this code, here: [https://medium.com/@joekarlsson/how-to-build-a-spotify-player-with-react-in-15-minutes-7e01991bc4b6](https://medium.com/@joekarlsson/how-to-build-a-spotify-player-with-react-in-15-minutes-7e01991bc4b6)

### 2. Clone example repository

```sh
git clone https://github.com/JoeKarlsson/react-spotify-player.git
cd react-spotify-player
```

### 3. Update React Spotify Player Config

Change `src/congig_example.js` to `src/config.js` and paste your Spotify Clioent ID from step 1 in the `clientId` feild.

### 4. Install dependencies & run locally

```sh
npm install
npm start # open http://localhost:3000 in your browser
```

## Available Scripts

In the project directory, you can run:

### `npm start`

Runs the app in the development mode.<br>
Open [http://localhost:3000](http://localhost:3000) to view it in the browser.

The page will reload if you make edits.<br>
You will also see any lint errors in the console.

### `npm test`

Launches the test runner in the interactive watch mode.<br>
See the section about [running tests](https://facebook.github.io/create-react-app/docs/running-tests) for more information.

### `npm run build`

Builds the app for production to the `build` folder.<br>
It correctly bundles React in production mode and optimizes the build for the best performance.

The build is minified and the filenames include the hashes.<br>
Your app is ready to be deployed!

See the section about [deployment](https://facebook.github.io/create-react-app/docs/deployment) for more information.

### `npm run eject`

**Note: this is a one-way operation. Once you `eject`, you can’t go back!**

If you aren’t satisfied with the build tool and configuration choices, you can `eject` at any time. This command will remove the single build dependency from your project.

Instead, it will copy all the configuration files and the transitive dependencies (Webpack, Babel, ESLint, etc) right into your project so you have full control over them. All of the commands except `eject` will still work, but they will point to the copied scripts so you can tweak them. At this point you’re on your own.

You don’t have to ever use `eject`. The curated feature set is suitable for small and middle deployments, and you shouldn’t feel obligated to use this feature. However we understand that this tool wouldn’t be useful if you couldn’t customize it when you are ready for it.

## Contributing

Don't hesitate to create a pull request. Every contribution is appreciated. In development you can start the tests by calling `npm test`. Checkout our [contribution README](https://github.com/JoeKarlsson/movie-script-scraper/blob/master/CONTRIBUTING.md) for more info.

### Contributing TLDR;

1. Fork it!
1. Create your feature branch: `git checkout -b my-new-feature`
1. Commit your changes: `git commit -am 'Add some feature'`
1. Push to the branch: `git push origin my-new-feature`
1. Submit a pull request :D

### Maintainers

<table>
  <tbody>
    <tr>
      <td align=""center"">
        <img width=""150 height=""150""
        src=""https://avatars.githubusercontent.com/JoeKarlsson?v=3"">
        <br />
        <a href=""https://github.com/JoeKarlsson"">Joe Karlsson</a>
      </td>
    <tr>
  <tbody>
</table>

### License

#### [MIT](./LICENSE)

### Follow Joe Karlsson on Social

- Twitter - [@JoeKarlsson1](https://twitter.com/JoeKarlsson1)
- GitHub - [@JoeKarlsson](https://github.com/joekarlsson/)
- LinkedIn - [/in/joekarlsson](https://www.linkedin.com/in/joekarlsson/)
- Website - [joekarlsson.com](https://www.joekarlsson.com/)
"
119,mantou132/Spotify-Lyrics,TypeScript,"[![Discord](https://img.shields.io/discord/763927057549099028)](https://discord.com/invite/fQbzzdJ)

# Spotify Lyrics

Install Extension:
- Chrome/Chromium/Firefox: Download the zip on the [release](https://github.com/mantou132/Spotify-Lyrics/releases) page, and then load the extension on the extension management page of the browser. [reason](https://github.com/mantou132/Spotify-Lyrics/issues/68).
- Safari(Soon)

The extension adds a button to the bottom left corner of Spotify Web Player,
Click to switch the display status of the lyrics,
which is displayed in the Picture-in-Picture window by default setting.
Spotify can be [installed as pwa](https://support.google.com/chrome/answer/9658361) instead of desktop client.

If you have any questions, please submit an [issue](https://github.com/mantou132/Spotify-Lyrics/issues).

![windows-pwa-spotify](./screenshot/windows-pwa-spotify.jpg)

The extension also supports Youtube Music, Apple Music, Deezer and Tidal, but songs with videos in Youtube Music cannot be perfectly supported(because the duration of the video is different from the duration of the officially released audio track).

![macos-pwa-youtube](./screenshot/macos-pwa-youtube.jpg)

## How To Work

1. [Listen](https://developer.mozilla.org/en-US/docs/Web/API/MutationObserver) for track info element.
2. Search for songs and download lyrics using [`NeteaseCloudMusicApi`](https://github.com/Binaryify/NeteaseCloudMusicApi).
3. Rendering lyrics to [`<canvas>`](https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D).
4. [Capture](https://developer.mozilla.org/en-US/docs/Web/API/HTMLCanvasElement/captureStream) video stream from `<canvas>` and merge cover image.
5. Update lyrics scroll position with a [loop](https://developer.mozilla.org/en-US/docs/Web/API/window/requestAnimationFrame).

## Compatibility

- Firefox [78+](https://bugzilla.mozilla.org/show_bug.cgi?id=1361876) (Not support [PiP](https://bugzilla.mozilla.org/show_bug.cgi?id=1463402))
- Edge [79+](https://blogs.windows.com/msedgedev/2020/01/15/upgrading-new-microsoft-edge-79-chromium/)
- Chrome [70+](https://caniuse.com/#feat=picture-in-picture)
- Safari [14+](https://developer.apple.com/documentation/safariservices/safari_web_extensions)

## Development

Requirement: [Node.js](https://nodejs.org)

```bash
# install dependencies
yarn
# start develop
yarn run start
# optional: start firebase function simulation
yarn run start:firebase
```

Build:

```bash
yarn run build:zip

# firebase depoly and config update
# npm i -g firebase-tools
firebase depoly
firebase functions:config:get
firebase functions:config:set spotify-lyrics.manager-ids=xxx
```

## Match Success Rate

Spotify, v1.2.7, Friday, July 31, 2020

| Playlist Name             | Success rate | Success | No Match | No Lyrics |
| ------------------------- | ------------ | ------- | -------- | --------- |
| Global Top 50             | 94%          | 47      | 1        | 2         |
| Argentina Top 50          | 62%          | 31      | 9        | 10        |
| Australia Top 50          | 96%          | 48      | 1        | 1         |
| Austria Top 50            | 78%          | 39      | 6        | 5         |
| Belgium Top 50            | 94%          | 47      | 2        | 1         |
| Bolivia Top 50            | 80%          | 40      | 6        | 4         |
| Brazil Top 50             | 24%          | 12      | 12       | 26        |
| Bulgaria Top 50           | 66%          | 33      | 1        | 16        |
| Canada Top 50             | 100%         | 50      | 0        | 0         |
| Chile Top 50              | 80%          | 40      | 5        | 5         |
| Colombia Top 50           | 78%          | 39      | 7        | 4         |
| Costa Rica Top 50         | 76%          | 38      | 7        | 5         |
| Czech Republic Top 50     | 54%          | 27      | 7        | 16        |
| Denmark Top 50            | 58%          | 29      | 1        | 20        |
| Dominican Republic Top 50 | 78%          | 39      | 5        | 6         |
| Ecuador Top 50            | 78%          | 39      | 7        | 4         |
| El Salvador Top 50        | 78%          | 39      | 7        | 4         |
| Estonia Top 50            | 58%          | 29      | 4        | 17        |
| Finland Top 50            | 60%          | 30      | 0        | 20        |
| France Top 50             | 64%          | 32      | 2        | 16        |
| Germany Top 50            | 80%          | 40      | 7        | 3         |
| Greece Top 50             | 38%          | 19      | 4        | 27        |
| Guatemala Top 50          | 82%          | 41      | 6        | 3         |
| Honduras Top 50           | 78%          | 39      | 7        | 4         |
| Hong Kong Top 50          | 80%          | 40      | 10       | 0         |
| Hungary Top 50            | 80%          | 40      | 3        | 7         |
| Iceland Top 50            | 60%          | 30      | 4        | 16        |
| India Top 50              | 52%          | 26      | 9        | 15        |
| Indonesia Top 50          | 62%          | 31      | 4        | 15        |
| Ireland Top 50            | 100%         | 50      | 0        | 0         |
| Israel Top 50             | 62%          | 31      | 6        | 13        |
| Italy Top 50              | 76%          | 38      | 4        | 8         |
| Japan Top 50              | 52%          | 26      | 19       | 5         |
| Latvia Top 50             | 90%          | 45      | 1        | 4         |
| Lithuania Top 50          | 68%          | 34      | 11       | 5         |
| Luxembourg Top 50         | 84%          | 42      | 4        | 4         |
| Malaysia Top 50           | 88%          | 44      | 3        | 3         |
| Mexico Top 50             | 76%          | 38      | 7        | 5         |
| Netherlands Top 50        | 72%          | 36      | 2        | 12        |
| New Zealand Top 50        | 96%          | 48      | 0        | 2         |
| Nicaragua Top 50          | 80%          | 40      | 6        | 4         |
| Norway Top 50             | 82%          | 41      | 1        | 8         |
| Panama Top 50             | 80%          | 40      | 6        | 4         |
| Paraguay Top 50           | 80%          | 40      | 7        | 3         |
| Peru Top 50               | 80%          | 40      | 5        | 5         |
| Philippines Top 50        | 82%          | 41      | 4        | 5         |
| Poland Top 50             | 30%          | 15      | 26       | 9         |
| Portugal Top 50           | 66%          | 33      | 2        | 15        |
| Romania Top 50            | 58%          | 29      | 6        | 15        |
| Russia Top 50             | 54%          | 27      | 16       | 7         |
| Singapore Top 50          | 88%          | 44      | 6        | 0         |
| Slovakia Top 50           | 62%          | 31      | 10       | 9         |
| South Africa Top 50       | 98%          | 49      | 0        | 1         |
| Spain Top 50              | 72%          | 36      | 4        | 10        |
| Sweden Top 50             | 80%          | 40      | 7        | 3         |
| Switzerland Top 50        | 88%          | 44      | 5        | 1         |
| Taiwan Top 50             | 68%          | 34      | 16       | 0         |
| Thailand Top 50           | 82%          | 41      | 9        | 0         |
| Turkey Top 50             | 50%          | 25      | 4        | 21        |
| Ukraine Top 50            | 76%          | 38      | 7        | 5         |

## Contribution

Fork it, submit PR.

- Add translation
- If you can write code, you can fix [bugs](https://github.com/mantou132/Spotify-Lyrics/issues?q=is%3Aissue+is%3Aopen+label%3Abug) or improve [performance](https://github.com/mantou132/Spotify-Lyrics/issues?q=is%3Aissue+is%3Aopen+label%3Aperformance)
- Optimize the matching rate of Chinese, Japanese and Korean lyrics.(edit [config.json](./src/page/config.json)). _Note: The extension already has automatic optimization, this list serves as a supplement_ . _[Unmatched lyrics report](https://datastudio.google.com/reporting/bfd79c68-f9f4-4af5-8e51-a12d3d6be450)_


## Privacy Policy

[see](./public/privacy-policy.html).
"
120,eduardolima93/playlist-manager,JavaScript,"# Playlist Manager for Spotify

Check it out at http://playlist-manager.com/ (Currently only for Chrome Browser)

Playlist Manager merges the songs of selected playlists into one view, allowing users to easily add and remove songs from several playlists.

It counts with the ability to sort songs by different parameters, most noticeably by date added to a specific playlist, or among all playlists. This helps users to keep updated with the songs of many different playlists he follows, and easily add them to his own playlists.

Users can also quickly play a preview of any song, as well as play the full song inside Spotify with the Spotify Play Button.

Tips, suggestions and contributions are welcome!

Using Angular1, planning to redo it with Angular2.
"
121,fastred/AHKActionSheet,Objective-C,"# AHKActionSheet
[![License: MIT](https://img.shields.io/badge/license-MIT-red.svg?style=flat)](https://github.com/fastred/AHKActionSheet/blob/master/LICENSE)
[![CocoaPods](https://img.shields.io/cocoapods/v/AHKActionSheet.svg?style=flat)](https://github.com/fastred/AHKActionSheet)

An alternative to the UIActionSheet with a block-based API and a customizable look. Inspired by the Spotify app. It looks a lot better live than on the GIF (because compression).

![Demo GIF](https://raw.githubusercontent.com/fastred/AHKActionSheet/master/example.gif)

## Features

 * Modern, iOS 7 look
 * Block-based API
 * Highly customizable
 * Gesture-driven navigation with two ways to hide the control: either quick flick down or swipe and release (at the position when the blur is starting to fade)
 * Use a simple label or a completely custom view above the buttons
 * Use with or without icons (text can be optionally centered)
 * Status bar style matches the one from the presenting controller

## Demo

Build and run the `AHKActionSheetExample` project in Xcode. `AHKViewController.m` file contains the important code used in the example.

## Requirements

 * iOS 6.0 and above
 * ARC
 * Optimized for iPhone

## Installation
### CocoaPods

AHKActionSheet is available through [CocoaPods](http://cocoapods.org), to install
it simply add the following line to your Podfile:

    pod ""AHKActionSheet""
### Manual
Copy all files from `Classes/` directory to your project. Then, add `QuartzCore.framework` to your project.

## Usage
A simple example:

```obj-c
#import ""AHKActionSheet.h""
...
AHKActionSheet *actionSheet = [[AHKActionSheet alloc] initWithTitle:nil];
[actionSheet addButtonWithTitle:@""Test"" type:AHKActionSheetButtonTypeDefault handler:^(AHKActionSheet *as) {
    NSLog(@""Test tapped"");
}];
[actionSheet show];
```

The view is customizable either directly or through a UIAppearance API. See the header file (`Classes/AHKActionSheet.h`) and the example project to learn more.

## Changelog

0.5.4

* Fix `cancelOnTapEmptyAreaEnabled` behavior

0.5.3

* Added `cancelOnTapEmptyAreaEnabled` property
* Updated the project to compile cleanly on Xcode 7

0.5.2

* Fixed visible cancel button even though its height was set to 0.

0.5.1

* Fixed issues with separators on iOS 8

0.5

* Fixed bugs on iOS 8

0.4.2

* Fixed incorrect orientation of the blurred snapshot on iOS 8

0.4.1

* Improved dismissal error handling

0.4.0

* Added a new button type: `AHKActionSheetButtonTypeDisabled`
* Added `cancelOnPanGestureEnabled` property, which allows you to disable:
  > Gesture-driven navigation with two ways to hide the control: either quick flick down or swipe and release (at the position when the blur is starting to fade)
* Internal scroll view's `bounces` is now disabled when `cancelOnPanGestureEnabled` is turned off and when the scroll view's `contentSize`'s height is smaller than the screen's height.

0.3.0

* Added iOS 6 support

0.2.0

* Added `animationDuration` property
* Added some basic unit tests
* Improved comments in the header file

0.1.3

* Ready for projects with [more warnings](https://github.com/boredzo/Warnings-xcconfig/wiki/Warnings-Explained) enabled

0.1.2

* `UIWindow` is now snapshotted instead of `UIViewController's` `view`

0.1.1

* Refactorings
* Bug fixes

0.1.0

* Initial release

## Author

Arkadiusz Holko:

* [Blog](http://holko.pl/)
* [@arekholko on Twitter](https://twitter.com/arekholko)
"
122,JL978/spotify-clone-client,JavaScript,"# Spotify Clone Front-End
A front-end clone project of the Spotify web player. The project was created using the create-react-app CLI. The app is meant to work in conjunction with an authorization/authenication server found at this [repo](https://github.com/JL978/spotify-clone-server).

## Table of Contents
- [Description](#description)
- [Motivation](#motivation)
- [Tech/Framework Used](#techframework-used)
- [Installation](#installation)
- [Architechture](#architecture)

## Description
A clone web application using the create-react-app. The app comsumes data from the Spotify API and tries to mimic the UI and front-end behaviours of the official [Spotify web player](https://open.spotify.com/) as much as possible.

![App Screen Shot](https://github.com/JL978/spotify-clone-client/blob/master/demo/FrontPage.png)
*The main screen (non-authenicated) of the app*

Like the official app, if a user is not authenticated, they can still browse and look up different playlists, albums, artists and users. Non authenticated users cannot control the player and go to certain protected routes - if they tried to navigate to these routes, a tooltip pops up prompting login.

![Non-authenticated app demonstration](https://github.com/JL978/spotify-clone-client/blob/master/demo/NonAuthed.gif)
*Non-authenticated app demonstration*

If a user login to a premium account (due to the limitation of the available API, free accounts cannot do much), user can access certain routes to their own playlists, saved items, etc. and use the app as a remote control player to any playing official (no direct streaming is available through the API)

![Authenticated app demonstration](https://github.com/JL978/spotify-clone-client/blob/master/demo/Authed.gif)
*Authenticated app demonstration*

![Remote player demonstration](https://github.com/JL978/spotify-clone-client/blob/master/demo/RemotePlay.gif)
*Remote player demonstration*

## Motivation
This project was created by me mainly to teach myself React development. Since the point of this project was not to make great UI/UX design choices, I chose to create a clone of a well established  product as to shorten my learning time and not to focus on the wrong thing. Since I am already a heavy Spotify user and therefore I thought it would be an interesting challenge to tackle. 

The majority of the react components and logic was written from scratch by myself. I chose not to use existing component libraries because that forces me to both get a really deep understanding of React and get as much practice as I could with React.

## Tech/Framework Used
* React (create-react-app CLI)
* react-router-dom
* axios


## Installation
This project requires [node](http://nodejs.org) and [npm](https://npmjs.com) installed globally. 

Clone the repository to a directory of your choosing

```sh
$ git clone https://github.com/JL978/spotify-clone-client.git
```
Navigate into spotify-clone-client and install the necessary packages

```sh
$ npm install 
```
To start up the app locally

```sh
$ npm start
```

Additionally, this project also requires you to clone and run the server code from this [repo](https://github.com/JL978/spotify-clone-server) to work properly.

## Architecture
### Authentication and Authorization

As mentioned from before this app needs to be used with a authentication server with the code provided on another [repo](https://github.com/JL978/spotify-clone-server), you can navigate there to learn more about how the server works. On this end, in order to be logged in, the app must have 2 things: a refresh_key stored in cookie and an access_key stored in memory. When there these values are present, the user is effectively ""logged in"" and therefore the app will render the ""logged in"" version with the user's personal info. The benefit of doing authorization this way is that we are not exposed to XSRF by avoiding having the access_key stored in cookie while also keeping the user logged in if they refresh the app through the following flow.

[Authorization flow](demo/auth.png)

As far as I know, this is the safest way to handle keys in OAuth flow.  

### Custom hooks and utilities

One of the more interesting functionality from this project is the infinite scroll on playlists and search results. This feature was made using custom hooks and integration with the Spotify API pagination system.

The hooks was named useInfiScroll and useTokenScroll, they are both effectively the same with the useTokenScroll requesting for private information with the access token. The hook make use of useState, useRef, useCallback and the IntersectionObserver API. It takes in a setList (from a useState hook) function from the parent component (which is use internally to set the paginated list) and return a useCallback ref to be passed to the last element of the list and a setNext to store the next paginated uri during initial setup. The challenge of using ref here is the use of functional component in this project which one cannot simply pass a ref parameter to. The solution to this is using React.forwardRef on the child component. One thing I would do different next time is to use [Composition as much as possible instead of Inheritance](https://reactjs.org/docs/composition-vs-inheritance.html) so that I don't have to pass refs through multiple component levels.

Another interesting feature of this app is the live search feature where search results are updated as the user type into the search box. In doing this, the app is making a new request to the API everytime a new letter is entered. However, sometimes typing can be a faster than the request is able to finish and the request may become stale as the user type. Therefore, being able to cancel the request on the fly is needed.  

[More coming soon...]
"
123,xzzz9097/SpotifyKit,Swift,"# SpotifyKit
A Swift client for Spotify's Web API.

[![Build Status](https://travis-ci.org/xzzz9097/SpotifyKit.svg?branch=master)](https://travis-ci.org/xzzz9097/SpotifyKit)
[![Version](https://img.shields.io/cocoapods/v/SpotifyKit.svg?style=flat)](http://cocoapods.org/pods/SpotifyKit)
[![License](https://img.shields.io/cocoapods/l/SpotifyKit.svg?style=flat)](http://cocoapods.org/pods/SpotifyKit)
[![Platform](https://img.shields.io/cocoapods/p/SpotifyKit.svg?style=flat)](http://cocoapods.org/pods/SpotifyKit)

## Installation
SpotifyKit is available through [CocoaPods](http://cocoapods.org). To install
it, simply add the following line to your Podfile:

```ruby
pod ""SpotifyKit""
```

## Initialization
You can easily create a SpotifyKit helper object by providing your Spotify application data.
```swift
let spotifyManager = SpotifyManager(with:
    SpotifyManager.SpotifyDeveloperApplication(
        clientId:     ""client_id"",
        clientSecret: ""client_secret"",
        redirectUri:  ""redirect_uri""
    )
)
```
The token data gathered at authentication moment is automatically saved in a secure preference with Keychain.

## Authentication
This is arguably the trickiest step. At your app launch, you should call authorization method like this:
```swift
spotifyManager.authorize()
```
It sends a request of authorization for the user's account, that will result in a HTTP response with the specified URL prefix and the authorization code as parameter.
The method automatically skips the process if a saved token is found.

Then, in order to complete authentication and obtain the token, you must setup a URL scheme (in Info.plist file of your app) and catch the code like this:
### iOS
```swift
// MARK: in your AppDelegate.swift file

/**
 Catches URLs with specific prefix (""your_spotify_redirect_uri://"")
 */
func application(_ application: UIApplication, handleOpen url: URL) -> Bool {
    spotifyManager.saveToken(from: url)

    return true
}
```
### MacOS
```swift
/**
 Registers the URL watcher
 */
NSAppleEventManager.shared().setEventHandler(self,
    andSelector: #selector(handleURLEvent),
    forEventClass: AEEventClass(kInternetEventClass),
    andEventID: AEEventID(kAEGetURL))

/**
 Catches URLs with specific prefix (""your_spotify_redirect_uri://"")
 */
func handleURLEvent(event: NSAppleEventDescriptor,
                    replyEvent: NSAppleEventDescriptor) {
	if	let descriptor = event.paramDescriptor(forKeyword: keyDirectObject),
		let urlString  = descriptor.stringValue,
		let url        = URL(string: urlString) {
		spotifyManager.saveToken(from: url)
	}
}
```
Now SpotifyKit is fully authenticated with your user account and you can use all the methods it provides.

## Usage
All methods send HTTP request through URLSession API and report the results with simple callbacks
### Find
Finds tracks (as in this example), albums or artists in Spotify database:
```swift
// Signature
public func find<T>(_ what: T.Type,
                    _ keyword: String,
                    completionHandler: @escaping ([T]) -> Void) where T: SpotifySearchItem

// Example
spotifyManager.find(SpotifyTrack.self, ""track_title"") { tracks in
	// Tracks is a [SpotifyTrack] array
	for track in tracks {
        print(""URI:    \(track.uri), ""         +
              ""Name:   \(track.name), ""        +
              ""Artist: \(track.artist.name), "" +
              ""Album:  \(track.album.name)"")
    }
}
```
get() and library() functions are also available for retrieving a specific item or fetching your library's tracks, albums or playlists.

### User library interaction
Save, delete and check saved status for tracks in ""Your Music"" playlist
```swift
// Save the track
spotifyManager.save(trackId: ""track_id"") { saved in
    print(""Saved: \(saved)"")
}

// Check if the track is saved
spotifyManager.isSaved(trackId: ""track_id"") { isSaved in
    print(""Is saved: \(isSaved)"")
}

// Delete the track
spotifyManager.delete(trackId: ""track_id"") { deleted in
    print(""Deleted: \(deleted)"")
}
```

## Supported Spotify items
The items are automatically decoded from JSON, by conforming to Swift 4 ""Decodable"" protocol.
### Generic item
The protocol which is inherited by all items, including common properties
```swift
public protocol SpotifyItem: Decodable {

	var id:   String { get }
	var uri:  String { get }
	var name: String { get }
}

public protocol SpotifySearchItem: SpotifyItem {
	// Items conforming to this protocol can be searched
}

public protocol SpotifyLibraryItem: SpotifyItem {
	// Items conforming to this protocol can be contained in user's library
}
```
### User
```swift
public struct SpotifyUser: SpotifySearchItem {

	public var email:  String?

	// URI of the user profile picture
	public var artUri: String
}
```
### Track
```swift
public struct SpotifyTrack: SpotifySearchItem, SpotifyLibraryItem {

	public var album:  SpotifyAlbum?
	public var artist: SpotifyArtist
}
```
### Album
```swift
public struct SpotifyAlbum: SpotifySearchItem, SpotifyLibraryItem, SpotifyTrackCollection {

	// The tracks contained in the album
	public var collectionTracks: [SpotifyTrack]?

	public var artist: SpotifyArtist

	// The album's cover image
	public var artUri: String
}
```
### Playlist
```swift
public struct SpotifyPlaylist: SpotifySearchItem, SpotifyLibraryItem, SpotifyTrackCollection {

	// The tracks contained in the playlist
	public var collectionTracks: [SpotifyTrack]?
}
```
### Artist
```swift
public struct SpotifyArtist: SpotifySearchItem {
	// Artist has no additional properties
}
```

## Examples
- iOS and macOS sample projects are available in this repository
- [Muse](https://github.com/xzzz9097/Muse)
"
124,ErickWendel/semanajsexpert-spotify-template,CSS,"# Spotify Radio - Semana JS Expert 6.0

Seja bem vindo(a) à sexta Semana Javascript Expert. Este é o código inicial para iniciar nossa jornada.

Marque esse projeto com uma estrela 🌟

## Preview

<img src=""./prints/demo.png"" />

## Checklist Features

- Web API
    - [ ] Deve atingir 100% de cobertura de código em testes
    - [ ] Deve ter testes de integração validando todas as rotas da API
    - [ ] Deve entregar arquivos estáticos como Node.js Stream
    - [ ] Deve entregar arquivos de música como Node.js Stream
    - [ ] Dado um usuário desconectado, não deve quebrar a API
    - [ ] Mesmo que vários comandos sejam desparados ao mesmo tempo, não deve quebrar a API
    - [ ] Caso aconteça um erro inesperado, a API deve continuar funcionando
    - [ ] O projeto precisa ser executado em ambientes Linux, Mac e Windows

- Web App 
    - Client
        - [ ] Deve reproduzir a transmissão
        - [ ] Não deve pausar se algum efeito for adicionado
    - Controller
        - [ ] Deve atingir 100% de cobertura de código em testes
        - [ ] Deve poder iniciar ou parar uma transmissão 
        - [ ] Deve enviar comandos para adicionar audio efeitos à uma transmissão

## Tarefas por aula

- Aula 01: Cobrir as camadas service e route com testes unitários e alcançar 100% de code coverage
- Aula 02: Manter 100% de code coverage e implementar testes e2e para toda a API
- Aula 03: implementar testes unitários para o frontend e manter 100% de code coverage
- **PLUS**: 
    - [ ] disponibilizar um novo efeito
        - [ ] adicionar um botão novo no controlador
        - [ ] adicionar um som de efeito novo para a pasta `audios/fx/`
        - [ ] republicar no heroku

### Considerações
- Tire suas dúvidas sobre os desafios em nossa comunidade, o objetivo é você aprender de forma divertida. Surgiu dúvidas? Pergunte por lá!

- Ao completar qualquer um dos desafios, envie no canal **#desafios** da comunidade no **Discord**

### Créditos aos áudios usados

#### Transmissão 
- [English Conversation](https://youtu.be/ytmMipczEI8)

#### Efeitos
- [Applause](https://youtu.be/mMn_aYpzpG0)
- [Applause Audience](https://youtu.be/3IC76o_lhFw)
- [Boo](https://youtu.be/rYAQN11a2Dc)
- [Fart](https://youtu.be/4PnUfYhbDDM)
- [Laugh](https://youtu.be/TZ90IUrMNCo)
## FAQ 
- `NODE_OPTIONS` não é um comando reconhecido pelo sistema, o que fazer?
    - Se você estiver no Windows, a forma de criar variáveis de ambiente é diferente. Você deve usar a palavra `set` antes do comando. 
    - Ex: `    ""test"": ""set NODE_OPTIONS=--experimental-vm-modules && npx jest --runInBand"",`

- Rodei `npm test` mas nada acontece, o que fazer?
    - Verifique a versão do seu Node.js. Estamos usando na versão 17. Entre no [site do node.js](https://nodejs.org) e baixe a versão mais recente.
"
125,cjam/react-native-spotify-remote,Objective-C,"# Spotify App Remote for React Native

[![npm version](https://badge.fury.io/js/react-native-spotify-remote.svg)](https://badge.fury.io/js/react-native-spotify-remote)

[![Spotify iOS SDK Version](https://img.shields.io/badge/Spotify%20iOS%20SDK-v1.2.2-brightgreen)](https://github.com/spotify/ios-sdk/commit/f9a7d53967de5ea633845c2387b7fc8f90b96265)

[![Spotify Android App Remote Version](https://img.shields.io/badge/Spotify%20Android%20App%20Remote%20SDK-v0.7.2-brightgreen)](https://github.com/spotify/android-sdk/commit/cfd6b68a47440a7db8afac1983d92d324a1c0015)

[![Spotify Android Auth Version](https://img.shields.io/badge/Spotify%20Android%20Auth%20SDK-v1.2.3-brightgreen)](https://github.com/spotify/android-sdk/commit/cfd6b68a47440a7db8afac1983d92d324a1c0015)

A react native module for the Spotify Remote SDK ( [iOS](https://github.com/spotify/ios-sdk/) | [Android](https://github.com/spotify/android-sdk/) )

- [Documentation](https://cjam.github.io/react-native-spotify-remote/index.html)
- [Change Log](./CHANGELOG.md)
- [Contributing](./CONTRIBUTING.md)

## Supported Features

An [Example](./example) project was developed to exercise and test all functionality within this library. If you are curious about how to use something, or need to compare your application setup to something that works, check there first.

## Features

The following table shows the platform support for various Spotify Remote API functionality within this library.

| Feature                      | iOS | Android |                              |
| :--------------------------- | :-: | :-----: | ---------------------------: |
| **Authentication**           |
| `authorize`                  | ✅  |   ✅    |                              |
| `getSession`                 | ✅  |   ✅    |                              |
| `endSession`                 | ✅  |   ✅    |                              |
| **Remote**                   |
| `isConnectedAsync`           | ✅  |   ✅    |                              |
| `connect`                    | ✅  |   ✅    |                              |
| `disconnect`                 | ✅  |   ✅    |                              |
| `playUri`                    | ✅  |   ✅    |                              |
| `playItem`                   | ✅  |   ✅    |                              |
| `playItemWithIndex`          | ✅  |   ✅    |                              |
| `queueUri`                   | ✅  |   ✅    |                              |
| `seek`                       | ✅  |   ✅    |                              |
| `resume`                     | ✅  |   ✅    |                              |
| `pause`                      | ✅  |   ✅    |                              |
| `skipToNext`                 | ✅  |   ✅    |                              |
| `skipToPrevious`             | ✅  |   ✅    |                              |
| `setShuffling`               | ✅  |   ✅    |                              |
| `setRepeatMode`              | ✅  |   ✅    |                              |
| `getPlayerState`             | ✅  |   ✅    |                              |
| `getRootContentItems`        | ✅  |   ❌    | Not available in Android SDK |
| `getRecommendedContentItems` | ✅  |   ✅    |                              |
| `getChildrenOfItem`          | ✅  |   ✅    |                              |
| `getContentItemForUri`       | ✅  |   ❌    | Not available in Android SDK |
| `getCrossfadeState`          | ✅  |   ✅    |                              |
| **Remote Events**            |
| `playerStateChanged`         | ✅  |   ✅    |                              |
| `playerContextChanged`       | ✅  |   ✅    |                              |
| `remoteDisconnected`         | ✅  |   ✅    |                              |
| `remoteConnected`            | ✅  |   ✅    |                              |

## Install

```bash
yarn add react-native-spotify-remote
```

or

```bash
npm install --save react-native-spotify-remote
```

> **Android 11 and Above**
>
> Add the following to your Android Manifest:
>
> `<queries> <package android:name=""com.spotify.music"" /> </queries>`

## Linking

As of React Native `> 0.61`, auto linking should work for both iOS and Android. There shouldn't be any modifications necessary and it _Should_ work out of the box. If you do run into issues or are using an older version of React Native, the following sections should help get you up and running.

### iOS

> This library requires being built with **XCode 11** for reasons given [here](https://github.com/spotify/ios-sdk/issues/179#issuecomment-581032275).

#### Cocoapods (Recommended)

By far the easiest way to integrate into your project. In your `ios/PodFile` add the following lines to your projects target:

```rb
	pod 'RNSpotifyRemote', :path => '../node_modules/react-native-spotify-remote'
```

See the [`Example App PodFile`](./example/ios/PodFile) for a full example.

I have only tested this against RN > 0.60 in the example app. So if you have issues with a RN version < 0.60 that might be a place to start troubleshooting.

#### Manual

Manual linking is needed for projects that don't use Cocoapods.

1. Manually add the frameworks from `node_modules/react-native-spotify-remote/ios/external/SpotifySDK` to _Linked Frameworks and Libraries_ in your project settings.

![iOS Framework Search paths](.screenshots/ios-add-framework.png);

2. Then add `../node_modules/react-native-spotify-remote/ios/external/SpotifySDK` to _Framework Search Paths_ in your project settings see the screenshot below. (By default it won't show the options in XCode so you may need to check `all`)

![iOS Framework Search paths](.screenshots/ios-framework-searchpaths.png);

##### Troubleshooting

`'React/RCTConvert.h' file not found` might be due to a build dependency issue where `RNSpotifyRemote` is being built _before_ `React`. Try adding `React` as an explicit dependency of the `RNSpotifyRemote` target/project in XCode. Otherwise, Cocoapods should solve this for you.

## Auth Callback

In order to support the callback that you will get from the Spotify App you will need to add a url handler to your app.

### iOS

Modifications are needed for the `AppDelegate.m`:

```objective-c
#import ""AppDelegate.h""

#import <React/RCTBundleURLProvider.h>
#import <React/RCTRootView.h>
#import <RNSpotifyRemote.h>

@implementation AppDelegate

- (BOOL)application:(UIApplication *)application openURL:(NSURL *)URL options:(NSDictionary<UIApplicationOpenURLOptionsKey, id> *)options
{
  return [[RNSpotifyRemoteAuth sharedInstance] application:application openURL:URL options:options];
}

@end
```

### Android

If you need to link your project manually, here are some things you'll need to do.

1. Open up `android/app/src/main/java/[...]/MainApplication.java`

- Add the following imports to the top of the file

```
import com.reactlibrary.RNSpotifyRemotePackage;
```

- Add to the list returned by `getPackages()` for example:

```java
      @Override
      protected List<ReactPackage> getPackages() {
        @SuppressWarnings(""UnnecessaryLocalVariable"")
        List<ReactPackage> packages = new PackageList(this).getPackages();
        // Packages that cannot be autolinked yet can be added manually here, for example:
		   packages.add(new RNSpotifyRemotePackage());
        return packages;
      }
```

2. Append the following lines to `android/settings.gradle`:

   ```
   include ':react-native-spotify-remote'
   project(':react-native-spotify-remote').projectDir = new File(rootProject.projectDir, '../node_modules/react-native-spotify-remote/android')
   ```

3. Insert the following lines inside the dependencies block in `android/app/build.gradle`:
   ```
   implementation project(':react-native-spotify-remote')
   ```
4. As per the [Spotify Android SDK Docs](https://developer.spotify.com/documentation/android/guides/android-authentication/) Insert the following lines into `android/app/src/AndroidManifest.xml`

```xml
      <activity
            android:exported=""true""
            android:name=""com.spotify.sdk.android.authentication.AuthCallbackActivity""
            android:theme=""@android:style/Theme.Translucent.NoTitleBar"">

            <intent-filter>
                <action android:name=""android.intent.action.VIEW""/>
                <category android:name=""android.intent.category.DEFAULT""/>
                <category android:name=""android.intent.category.BROWSABLE""/>

                <data
                    android:scheme=""<YOUR_APPLICATION_SCHEME>""
                    android:host=""<YOUR_APPLICATION_CALLBACK>""/>
            </intent-filter>
        </activity>

        <activity
            android:name=""com.spotify.sdk.android.authentication.LoginActivity""
            android:theme=""@android:style/Theme.Translucent.NoTitleBar"">
        </activity>
```

If you have issues linking the module, please check that gradle is updated to the latest version and that your project is synced.

## Usage

### Example Application

This repo contains an [Example App](./example/Readme.md) which should be the quickest and easiest way to get up and running to try things out. It is using React Hooks (cuz they're pretty cool) and exercises all of the remote API calls.

### In Code

Again, I recommend looking at the example app. If you specifically want to see some code that actually does stuff take a look at the [App.tsx](./example/App.tsx).

Here's how you would use this library with Typescript (though the same mostly applies to Javascript) and the `async`/`await` syntax for promises (Just cuz I like em).

```typescript
import {
  auth as SpotifyAuth,
  remote as SpotifyRemote,
  ApiScope,
  ApiConfig,
} from ""react-native-spotify-remote"";

// Api Config object, replace with your own applications client id and urls
const spotifyConfig: ApiConfig = {
  clientID: ""SPOTIFY_CLIENT_ID"",
  redirectURL: ""SPOTIFY_REDIRECT_URL"",
  tokenRefreshURL: ""SPOTIFY_TOKEN_REFRESH_URL"",
  tokenSwapURL: ""SPOTIFY_TOKEN_SWAP_URL"",
  scopes: [ApiScope.AppRemoteControlScope, ApiScope.UserFollowReadScope],
};

// Initialize the library and connect the Remote
// then play an epic song
async function playEpicSong() {
  try {
    const session = await SpotifyAuth.authorize(spotifyConfig);
    await SpotifyRemote.connect(session.accessToken);
    await SpotifyRemote.playUri(""spotify:track:6IA8E2Q5ttcpbuahIejO74"");
    await SpotifyRemote.seek(58000);
  } catch (err) {
    console.error(""Couldn't authorize with or connect to Spotify"", err);
  }
}
```

## Token Swap & Refresh

> A server must be running for with endpoints that allow Spotify to authenticate your app.

In order to support the OAuth flow, you need to have a server to support the calls for token `swap` and `refresh`. I have included the same server setup defined in the [react-native-spotify](https://github.com/lufinkey/react-native-spotify#token-swap-and-refresh) repo as it does exactly what you need.

See the [Server Readme](./example-server/README.md) for further instructions.

## Additional notes

Nothing has been special to deal with Spotify _Free_ Users but this module _should_ still work.

## Opening Issues

Please do not open issues about getting the module to work unless you have tried using both the example app and the example token swap server. Please make sure you have tried running on the latest react-native version before submitting a bug.

## Contributors

Big thanks to [@lufinkey](https://github.com/lufinkey) and all of the great work that he has done in the [react-native-spotify](https://github.com/lufinkey/react-native-spotify) repo which was the original source of inspiration and some useful patterns for this package.

<!-- ALL-CONTRIBUTORS-BADGE:START - Do not remove or modify this section -->
[![All Contributors](https://img.shields.io/badge/all_contributors-15-orange.svg?style=flat-square)](#contributors-)
<!-- ALL-CONTRIBUTORS-BADGE:END -->

<!-- ALL-CONTRIBUTORS-LIST:START - Do not remove or modify this section -->
<!-- prettier-ignore-start -->
<!-- markdownlint-disable -->
<table>
  <tr>
    <td align=""center""><a href=""https://github.com/cjam""><img src=""https://avatars2.githubusercontent.com/u/1000288?v=4?s=100"" width=""100px;"" alt=""""/><br /><sub><b>Colter McQuay</b></sub></a><br /><a href=""https://github.com/cjam/react-native-spotify-remote/commits?author=cjam"" title=""Code"">💻</a></td>
    <td align=""center""><a href=""https://github.com/lufinkey""><img src=""https://avatars3.githubusercontent.com/u/7820113?v=4?s=100"" width=""100px;"" alt=""""/><br /><sub><b>Luis Finke</b></sub></a><br /><a href=""#ideas-lufinkey"" title=""Ideas, Planning, & Feedback"">🤔</a></td>
    <td align=""center""><a href=""https://github.com/YozhikM""><img src=""https://avatars0.githubusercontent.com/u/27273025?v=4?s=100"" width=""100px;"" alt=""""/><br /><sub><b>Stanislav</b></sub></a><br /><a href=""https://github.com/cjam/react-native-spotify-remote/commits?author=YozhikM"" title=""Code"">💻</a></td>
    <td align=""center""><a href=""https://djwillcaine.com""><img src=""https://avatars3.githubusercontent.com/u/5376687?v=4?s=100"" width=""100px;"" alt=""""/><br /><sub><b>Will Caine</b></sub></a><br /><a href=""https://github.com/cjam/react-native-spotify-remote/commits?author=djwillcaine"" title=""Code"">💻</a></td>
    <td align=""center""><a href=""http://www.estuderevisapp.com/""><img src=""https://avatars0.githubusercontent.com/u/7197169?v=4?s=100"" width=""100px;"" alt=""""/><br /><sub><b>Everaldo Rosa de Souza Junior</b></sub></a><br /><a href=""https://github.com/cjam/react-native-spotify-remote/commits?author=juniorklawa"" title=""Code"">💻</a></td>
    <td align=""center""><a href=""http://www.cankalya.com""><img src=""https://avatars.githubusercontent.com/u/33005883?v=4?s=100"" width=""100px;"" alt=""""/><br /><sub><b>İbrahim Can KALYA</b></sub></a><br /><a href=""https://github.com/cjam/react-native-spotify-remote/commits?author=IbrahimCanKALYA"" title=""Code"">💻</a></td>
    <td align=""center""><a href=""https://github.com/uptotec""><img src=""https://avatars.githubusercontent.com/u/38630967?v=4?s=100"" width=""100px;"" alt=""""/><br /><sub><b>Mahmoud Ashraf Mahmoud</b></sub></a><br /><a href=""https://github.com/cjam/react-native-spotify-remote/commits?author=uptotec"" title=""Code"">💻</a></td>
  </tr>
  <tr>
    <td align=""center""><a href=""https://linkedin.com/in/serafettinaytekin""><img src=""https://avatars.githubusercontent.com/u/19591219?v=4?s=100"" width=""100px;"" alt=""""/><br /><sub><b>Şerafettin Aytekin</b></sub></a><br /><a href=""https://github.com/cjam/react-native-spotify-remote/commits?author=srfaytkn"" title=""Code"">💻</a></td>
    <td align=""center""><a href=""http://reteps.github.io""><img src=""https://avatars.githubusercontent.com/u/13869303?v=4?s=100"" width=""100px;"" alt=""""/><br /><sub><b>Peter Stenger</b></sub></a><br /><a href=""https://github.com/cjam/react-native-spotify-remote/commits?author=reteps"" title=""Code"">💻</a></td>
    <td align=""center""><a href=""https://github.com/reinhardholl""><img src=""https://avatars.githubusercontent.com/u/4051986?v=4?s=100"" width=""100px;"" alt=""""/><br /><sub><b>Reinhard Höll</b></sub></a><br /><a href=""https://github.com/cjam/react-native-spotify-remote/issues?q=author%3Areinhardholl"" title=""Bug reports"">🐛</a> <a href=""https://github.com/cjam/react-native-spotify-remote/commits?author=reinhardholl"" title=""Code"">💻</a></td>
    <td align=""center""><a href=""https://github.com/gustavoggs""><img src=""https://avatars.githubusercontent.com/u/793491?v=4?s=100"" width=""100px;"" alt=""""/><br /><sub><b>Gustavo Graña</b></sub></a><br /><a href=""https://github.com/cjam/react-native-spotify-remote/issues?q=author%3Agustavoggs"" title=""Bug reports"">🐛</a> <a href=""https://github.com/cjam/react-native-spotify-remote/commits?author=gustavoggs"" title=""Code"">💻</a></td>
    <td align=""center""><a href=""https://www.companjenapps.com""><img src=""https://avatars.githubusercontent.com/u/12894112?v=4?s=100"" width=""100px;"" alt=""""/><br /><sub><b>Dylan</b></sub></a><br /><a href=""https://github.com/cjam/react-native-spotify-remote/commits?author=dylancom"" title=""Code"">💻</a></td>
    <td align=""center""><a href=""https://github.com/hoangvvo""><img src=""https://avatars.githubusercontent.com/u/40987398?v=4?s=100"" width=""100px;"" alt=""""/><br /><sub><b>Hoang</b></sub></a><br /><a href=""https://github.com/cjam/react-native-spotify-remote/commits?author=hoangvvo"" title=""Code"">💻</a></td>
    <td align=""center""><a href=""https://github.com/pretorh""><img src=""https://avatars.githubusercontent.com/u/4050990?v=4?s=100"" width=""100px;"" alt=""""/><br /><sub><b>Hendri Pretorius</b></sub></a><br /><a href=""https://github.com/cjam/react-native-spotify-remote/issues?q=author%3Apretorh"" title=""Bug reports"">🐛</a> <a href=""https://github.com/cjam/react-native-spotify-remote/commits?author=pretorh"" title=""Code"">💻</a></td>
  </tr>
  <tr>
    <td align=""center""><a href=""https://github.com/suryababus""><img src=""https://avatars.githubusercontent.com/u/53492132?v=4?s=100"" width=""100px;"" alt=""""/><br /><sub><b>suryababus</b></sub></a><br /><a href=""https://github.com/cjam/react-native-spotify-remote/commits?author=suryababus"" title=""Code"">💻</a></td>
  </tr>
</table>

<!-- markdownlint-restore -->
<!-- prettier-ignore-end -->

<!-- ALL-CONTRIBUTORS-LIST:END -->

## Projects using this library

Checkout existing [Projects](./PROJECTS.md) that are using this library.
"
126,conradludgate/terraform-provider-spotify,Go,"# terraform-provider-spotify

[![docs](https://img.shields.io/static/v1?label=docs&message=terraform&color=informational&style=for-the-badge&logo=terraform)](https://registry.terraform.io/providers/conradludgate/spotify/latest/docs)
![downloads](https://img.shields.io/badge/dynamic/json?label=downloads&query=%24.data.attributes.downloads&url=https%3A%2F%2Fregistry.terraform.io%2Fv2%2Fproviders%2F1325&style=for-the-badge&color=brightgreen&logo=terraform)
![latest version](https://img.shields.io/badge/dynamic/json?label=version&query=%24.data[(%40.length-1)].attributes.version&url=https%3A%2F%2Fregistry.terraform.io%2Fv2%2Fproviders%2F1325%2Fprovider-versions&style=for-the-badge&color=orange&logo=terraform)
[![code coverage](https://img.shields.io/codecov/c/gh/conradludgate/terraform-provider-spotify?style=for-the-badge)](https://app.codecov.io/gh/conradludgate/terraform-provider-spotify/)

This is a terraform provider for managing your spotify playlists.

Featured tutorial - https://learn.hashicorp.com/tutorials/terraform/spotify-playlist

Featured interview - https://www.hashicorp.com/blog/build-your-summer-spotify-playlist-with-terraform

> I am not affiliated with Hashicorp or Terraform.
>
> If you are having trouble with the provider, try updating to the latest version
> before submitting a bug report

## Example

```tf
resource ""spotify_playlist"" ""playlist"" {
  name        = ""My playlist""
  description = ""My playlist is so awesome""
  public      = false

  tracks = flatten([
    data.spotify_track.overkill.id,
    data.spotify_track.blackwater.id,
    data.spotify_track.overkill.id,
    data.spotify_search_track.search.tracks[*].id,
  ])
}

data ""spotify_track"" ""overkill"" {
  url = ""https://open.spotify.com/track/4XdaaDFE881SlIaz31pTAG""
}
data ""spotify_track"" ""blackwater"" {
  spotify_id = ""4lE6N1E0L8CssgKEUCgdbA""
}

data ""spotify_search_track"" ""search"" {
  name   = ""Somebody Told Me""
  artist = ""The Killers""
  album  = ""Hot Fuss""
}

output ""test"" {
  value = data.spotify_search_track.search.tracks
}
```


## Installation

Add the following to your terraform configuration

```tf
terraform {
  required_providers {
    spotify = {
      source  = ""conradludgate/spotify""
      version = ""~> 0.2.0""
    }
  }
}
```

## How to use

First, you need an instance of a spotify oauth2 server running. This acts as a middleware between terraform and spotify to allow easy access to access tokens.

### Public proxy

For a simple way to manage your spotify oauth2 tokens is to use https://oauth2.conrad.cafe. ([source code](https://github.com/conradludgate/oauth2-proxy))

Register a new account, create a spotify token with the following scopes

* user-read-email
* user-read-private
* playlist-read-private
* playlist-modify-private
* playlist-modify-public
* user-library-read
* user-library-modify

Then take note of the token id in the URL and the API key that is shown on the page

Configure the terraform provider like so

```tf
provider ""spotify"" {
  auth_server = ""https://oauth2.conrad.cafe""
  api_key     = var.spotify_api_key
  username    = ""your username""
  token_id    = ""your token id""
}

variable ""spotify_api_key"" {
  type = string
}
```

### Self hosted

If you want a bit more control over your tokens, you can self host a simple instance of the oauth2 proxy designed specifically for this terraform provider

See [spotify_auth_proxy](/spotify_auth_proxy) to get started.

Once you have the server running, make note of the API Key it gives you.

Configure the terraform provider like so

```tf
variable ""spotify_api_key"" {
  type = string
}

provider ""spotify"" {
  api_key = var.spotify_api_key
}
```
"
127,mileshenrichs/spotify-playlist-generator,Python,"Shoutout to __MyBridge__ for listing this project as one of the [Top 10 Python Open Source Projects of June 2018](https://medium.mybridge.co/python-open-source-of-the-month-v-june-2018-5396a661b110)!

![Python Open Source](img/mybridge.png ""MyBridge Open Source Rankings"")

# Spotify Playlist Generator

Spotify Playlist Generator is a Python script that automatically builds a new Spotify playlist each week with new music.  This script was written for personal use, so the playlist creation is authorized by an access token retreived for my Spotify account.  I used [Windows Task Scheduler](https://en.wikipedia.org/wiki/Windows_Task_Scheduler) to regulate the script to run every morning at 10:00 AM on my computer.

### How it works
1. The most recently acquired [Spotify __access token__](https://beta.developer.spotify.com/documentation/general/guides/authorization-guide/), the script's Spotify __refresh token__, and a Base64-encoded string containing my ""app's"" client ID and secret are stored in a local SQLite table called *tokens* (I've excluded this database from the repository because these tokens provide read and write access to my Spotify account).
2. When the script starts, it first checks the authority of its current __access token__.  Since this token expires after one hour, a new one will usually have to be generated.  The script uses its __refresh token__, which never changes, to acquire a new __access token__ from Spotify's token service.
3. Now that it has a valid access token, it proceeds to scrape the current top 100 songs from HotNewHipHop, located at this URL: https://www.hotnewhiphop.com/top100/
![Top 100 list](img/top100.png ""Top 100 on hotnewhiphop.com"")
4. It parses through the page with the [Beautiful Soup 4](https://www.crummy.com/software/BeautifulSoup/bs4/doc/) library, building a list of ""song candidates.""  A song qualifies as a candidate if its artist list contains at least one artist in a `desiredArtists` list defined at the beginning of the script (a static list of artists who I like). The __binary search__ algorithm is used to check for matches.
5. Then, for each song candidate, it ensures that the candidate is not a duplicate by querying the *songs_added* local db table for a song name and primary artist match.
6. Songs that are not duplicates are searched through Spotify's `/search` endpoint.  The Spotify `song ids` that are found (since these songs are new, many aren't on Spotify yet) are accumulated into a list.
7. Now that the script has a list of song ids to add, it must determine whether to create a new playlist or add to the most recently created (or *current*) playlist.  New playlist are created on __Saturday__.  If it's a Saturday, the script uses the access token retrieved earlier to make a POST request to create a new playlist on my account, named *New Songs {date}*.  Otherwise, it queries the local *playlists_created* table for the Spotify `playlist id` of the most recently created playlist.
8. It then uses the `playlist id` and `song ids` to make a POST request to a Spotify endpoint that adds each song to the playlist, entering these songs into the *songs_added* local db table in the process.

### Scheduling
This task is scheduled with Windows Task Scheduler:
![Spotify Task in Scheduler](img/task-scheduler.png ""Spotify Task in Scheduler"")

### Final Result
![Generated Spotify Playlist](img/spotify-playlist.png ""Generated Spotify Playlist"")"
128,Peter-Schorn/SpotifyAPI,Swift,"# SpotifyAPI

[![](https://img.shields.io/endpoint?url=https%3A%2F%2Fswiftpackageindex.com%2Fapi%2Fpackages%2FPeter-Schorn%2FSpotifyAPI%2Fbadge%3Ftype%3Dswift-versions)](https://swiftpackageindex.com/Peter-Schorn/SpotifyAPI)
[![](https://img.shields.io/endpoint?url=https%3A%2F%2Fswiftpackageindex.com%2Fapi%2Fpackages%2FPeter-Schorn%2FSpotifyAPI%2Fbadge%3Ftype%3Dplatforms)](https://swiftpackageindex.com/Peter-Schorn/SpotifyAPI)

**A Swift library for the Spotify web API**

### Features

* Supports *all* of the [Spotify web API endpoints][24], including playing content, creating playlists, and retrieving albums.
* Uses Apple's Combine framework, which makes chaining asynchronous requests a breeze
* Supports three different authorization methods
* Automatically refreshes the access token when necessary

Read the full [documentation][1] and check out [this example iOS app][14] and this [example command-line app][23]. Additional Information is available on the [wiki page][17].

## Table of Contents

* **[Supported Platforms](#supported-platforms)**
* **[Installation](#installation)**
* **[Quick Start](#quick-start)**
* **[Authorizing with the Authorization Code Flow with Proof Key for Code Exchange](#authorizing-with-the-authorization-code-flow-with-proof-key-for-code-exchange)**
* **[Authorizing with the Authorization Code Flow](#authorizing-with-the-authorization-code-flow)**  
* **[Authorizing with the Client Credentials Flow](#authorizing-with-the-client-credentials-flow)**
* **[Saving Authorization Information to Persistent Storage](https://github.com/Peter-Schorn/SpotifyAPI/wiki/Saving-authorization-information-to-persistent-storage.)**
* **[Using the Player Endpoints](https://github.com/Peter-Schorn/SpotifyAPI/wiki/Using-the-Player-Endpoints)**
* [**Working with Paginated Results**](https://github.com/Peter-Schorn/SpotifyAPI/wiki/Working-with-Paginated-Results)
* [**Using a Backend Server to Retrieve the Authorization Information**](https://github.com/Peter-Schorn/SpotifyAPI/wiki/Using-a-Backend-Server-to-Retrieve-the-Authorization-Information)
* **[Debugging](https://github.com/Peter-Schorn/SpotifyAPI/wiki/Debugging)**
* **[Running the Unit Tests](https://github.com/Peter-Schorn/SpotifyAPI/wiki/Running-the-Unit-Tests)**

## Supported Platforms

* Swift 5.3+ (for Swift 5.1 and 5.2 support and support for older platforms, use the [`swift-5-1`](https://github.com/Peter-Schorn/SpotifyAPI/tree/swift-5-1) branch)
* iOS 13+
* macOS 10.15+
* tvOS 13+
* watchOS 6+
* Linux

## Installation

1. In Xcode, open the project that you want to add this package to.
2. From the menu bar, select File > Swift Packages > Add Package Dependency...
3. Paste the [URL](https://github.com/Peter-Schorn/SpotifyAPI.git) for this repository into the search field.
5. Select the `SpotifyAPI` Library.
4. Follow the prompts for adding the package.

## Quick Start

To get started, go to the [Spotify Developer Dashboard][2] and create an app. You will receive a client id and client secret. Then, click on ""edit settings"" and add a redirect URI. Usually, this should be a custom URL scheme that redirects to a location in your app. **DO NOT add a forward-slash to the end of the redirect URI**.

The next step is authorizing your app. *All* requests to the Spotify web API—whether they require [authorization scopes][5] or not—require authorization This library supports three authorization methods:

* **[Authorization Code Flow with Proof Key for Code Exchange](#authorizing-with-the-authorization-code-flow-with-proof-key-for-code-exchange)**: This is the best option for mobile and desktop applications where it is unsafe to store your client secret. It provides an additional layer of security compared to the Authorization Code Flow. Use this method if you need to access/modify user data, which requires [authorization scopes][5]. It requires the user to login to their Spotify account in a browser/web view and approve your app. Read more at the [Spotify web API reference][15].

* **[Authorization Code Flow](#authorizing-with-the-authorization-code-flow)**: Use this method if you need to access/modify user data, which requires [authorization scopes][5]. It requires the user to login to their Spotify account in a browser/web view and approve your app.  Read more at the [Spotify web API reference][3].
* **[Client Credentials Flow](#authorizing-with-the-client-credentials-flow)**: Use this method if you do NOT need to access/modify user data. In other words, you cannot access endpoints that require [authorization scopes][5] or an access token that was issued on behalf of a user. The advantage of this method is that it does not require any user interaction.  Read more at the [Spotify web API reference][4].

When creating an application that uses this library, you will probably want to **save the authorization information to persistent storage** so that the user does not have to login again every time the application is quit and re-launched. See the [Saving Authorization Information to Persistent Storage][16] wiki page for a guide on how to do this.

## Authorizing with the Authorization Code Flow with Proof Key for Code Exchange

Create an instance of `SpotifyAPI` and assign an instance of `AuthorizationCodeFlowPKCEManager` to the `authorizationManager` property:
```swift
import SpotifyWebAPI

let spotify = SpotifyAPI(
    authorizationManager: AuthorizationCodeFlowPKCEManager(
        clientId: ""Your Client Id""
    )
)
```

Before each authentication request your app should generate a code verifier and a code challenge. The code verifier is a cryptographically random string between 43 and 128 characters in length. It can contain letters, digits, underscores, periods, hyphens, and tildes.

In order to generate the code challenge, your app should hash the code verifier using the SHA256 algorithm. Then, [base64url][19] encode the hash that you generated. **Do not include any** `=` **padding characters** (percent-encoded or not).

You can use `String.randomURLSafe(length:using:)` or `String.randomURLSafe(length:)` to generate the code verifier. You can use the `String.makeCodeChallenge(codeVerifier:)` instance method to create the code challenge from the code verifier. 

For example:

```swift
let codeVerifier = String.randomURLSafe(length: 128)
let codeChallenge = String.makeCodeChallenge(codeVerifier: codeVerifier)

// optional, but strongly recommended
let state = String.randomURLSafe(length: 128)
```

If you use your own method to create these values, you can validate them using this [PKCE generator tool][18]. See also `Data.base64URLEncodedString()` and `String.urlSafeCharacters`.

Next, create the authorization URL that will be opened in a browser (or web view). When opened, it displays a permissions dialog to the user. The user can then choose to either authorize or deny authorization for your application.

```swift
let authorizationURL = spotify.authorizationManager.makeAuthorizationURL(
    redirectURI: URL(string: ""Your Redirect URI"")!,
    codeChallenge: codeChallenge,
    state: state,
    scopes: [
        .playlistModifyPrivate,
        .userModifyPlaybackState,
        .playlistReadCollaborative,
        .userReadPlaybackPosition
    ]
)!
```

See the full documentation for [makeAuthorizationURL(redirectURI:showDialog:codeChallenge:state:scopes:)][20].

The redirect URI needs to have been entered in the Redirect URI whitelist that you specified when you registered your application using the [Spotify Developer Dashboard][2]. **DO NOT add a forward-slash to the end of the redirect URI.**

The documentation for each endpoint lists the [authorization scopes][5] that are required. You can always authorize your application again for different scopes, if necessary. However, this is not an additive process. You must specify all the scopes that you need each time you create the authorization URL.

You can decide how to open the URL. If you are creating an iOS app, the simplest method is to use `UIApplication.shared.open(authorizationURL)` to open the URL in the browser.

After the user either approves or denies authorization for your app, Spotify will redirect to the redirect URI that you specified when making the authorization URL with query parameters appended to it. Pass this URL into [requestAccessAndRefreshTokens(redirectURIWithQuery:codeVerifier:state:)][21] to request the access and refresh tokens:
```swift
spotify.authorizationManager.requestAccessAndRefreshTokens(
    redirectURIWithQuery: url,
    // Must match the code verifier that was used to generate the 
    // code challenge when creating the authorization URL.
    codeVerifier: codeVerifier,
    // Must match the value used when creating the authorization URL.
    state: state
)
.sink(receiveCompletion: { completion in
    switch completion {
        case .finished:
            print(""successfully authorized"")
        case .failure(let error):
            if let authError = error as? SpotifyAuthorizationError, authError.accessWasDenied {
                print(""The user denied the authorization request"")
            }
            else {
                print(""couldn't authorize application: \(error)"")
            }
    }
})
.store(in: &cancellables)
```

Once this publisher completes successfully, your application is authorized and you may begin making requests to the Spotify web API. **Ensure that you generate a new value for the state parameter, code verifier, and code challenge before making another authorization request**. The access token will be refreshed automatically when necessary. For example:
```swift
import SpotifyExampleContent

let playbackRequest = PlaybackRequest(
    context: .uris(
        URIs.Tracks.array(.faces, .illWind, .fearless)
    ),
    offset: .uri(URIs.Tracks.fearless),
    positionMS: 50_000
)

spotify.play(playbackRequest)
    .sink(receiveCompletion: { completion in
        print(completion)
    })
    .store(in: &cancellables)
```

The full documentation for all of the endpoints can be found [here][8]. You are also encouraged to read the [Spotify web API reference][12].

## Authorizing with the Authorization Code Flow

Create an instance of `SpotifyAPI` and assign an instance of `AuthorizationCodeFlowManager` to the `authorizationManager` property:
```swift
import SpotifyWebAPI

let spotify = SpotifyAPI(
    authorizationManager: AuthorizationCodeFlowManager(
        clientId: ""Your Client Id"", clientSecret: ""Your Client Secret""
    )
)
```

Next, create the authorization URL that will be opened in a browser (or web view). When opened, it displays a permissions dialog to the user. The user can then choose to either authorize or deny authorization for your application.
```swift
let authorizationURL = spotify.authorizationManager.makeAuthorizationURL(
    redirectURI: URL(string: ""Your Redirect URI"")!,
    showDialog: false,
    scopes: [
        .playlistModifyPrivate,
        .userModifyPlaybackState,
        .playlistReadCollaborative,
        .userReadPlaybackPosition
    ]
)!
```

See the full documentation for [makeAuthorizationURL(redirectURI:showDialog:state:scopes:)][6].

The redirect URI needs to have been entered in the Redirect URI whitelist that you specified when you registered your application using the [Spotify Developer Dashboard][2]. **DO NOT add a forward-slash to the end of the redirect URI.**

The documentation for each endpoint lists the [authorization scopes][5] that are required. You can always authorize your application again for different scopes, if necessary. However, this is not an additive process. You must specify all the scopes that you need each time you create the authorization URL.

You can decide how to open the URL. If you are creating an iOS app, the simplest method is to use `UIApplication.shared.open(authorizationURL)` to open the URL in the browser.

After the user either approves or denies authorization for your app, Spotify will redirect to the redirect URI that you specified when making the authorization URL with query parameters appended to it. Pass this url into [requestAccessAndRefreshTokens(redirectURIWithQuery:state:)][7] to request the access and refresh tokens:
```swift
spotify.authorizationManager.requestAccessAndRefreshTokens(
    redirectURIWithQuery: url
)
.sink(receiveCompletion: { completion in
    switch completion {
        case .finished:
            print(""successfully authorized"")
        case .failure(let error):
            if let authError = error as? SpotifyAuthorizationError, authError.accessWasDenied {
                print(""The user denied the authorization request"")
            }
            else {
                print(""couldn't authorize application: \(error)"")
            }
    }
})
.store(in: &cancellables)
```

Once this publisher completes successfully, your application is authorized and you may begin making requests to the Spotify web API. **Ensure that you generate a new value for the state parameter before making another authorization request**. The access token will be refreshed automatically when necessary. For example:

```swift
spotify.currentUserPlaylists()
    .extendPages(spotify)
    .sink(
        receiveCompletion: { completion in
            print(completion)
        },
        receiveValue: { results in
            print(results)
        }
    )
    .store(in: &cancellables)
```

This authorization process is fully implemented in this [example app][22]. The full documentation for all of the endpoints can be found [here][8]. You are also encouraged to read the [Spotify web API reference][12].

## Authorizing with the Client Credentials Flow

Create an instance of `SpotifyAPI` and assign an instance of `ClientCredentialsFlowManager` to the `authorizationManager` property:
```swift
import SpotifyWebAPI

let spotify = SpotifyAPI(
    authorizationManager: ClientCredentialsFlowManager(
        clientId: ""Your Client Id"", clientSecret: ""Your Client Secret""
    )
)
```

To authorize your application, call `authorize()`:
```swift
spotify.authorizationManager.authorize()
    .sink(receiveCompletion: { completion in
        switch completion {
            case .finished:
                print(""successfully authorized application"")
            case .failure(let error):
                print(""could not authorize application: \(error)"")
        }
    })
    .store(in: &cancellables)
```

See the full documentation for [authorize][13].

Once this publisher completes successfully, your application is authorized and you may begin making requests to the Spotify web API. The access token will be refreshed automatically when necessary. For example:
```swift
spotify.search(query: ""Pink Floyd"", categories: [.track])
    .sink(
        receiveCompletion: { completion in
            print(completion)
        },
        receiveValue: { results in
            print(results)
        }
    )
    .store(in: &cancellables)
```

This authorization process is implemented in this [example command-line app][23]. The full documentation for all of the endpoints can be found [here][8]. You are also encouraged to read the [Spotify web API reference][12].

[1]: https://spotify-api-docs.herokuapp.com/documentation/SpotifyWebAPI
[2]: https://developer.spotify.com/dashboard/login

[3]: https://developer.spotify.com/documentation/general/guides/authorization/code-flow/
[4]: https://developer.spotify.com/documentation/general/guides/authorization/client-credentials/
[5]: https://developer.spotify.com/documentation/general/guides/authorization/scopes/
[6]: https://spotify-api-docs.herokuapp.com/documentation/spotifywebapi/authorizationcodeflowbackendmanager/makeauthorizationurl(redirecturi:showdialog:state:scopes:)
[7]: https://spotify-api-docs.herokuapp.com/documentation/spotifywebapi/authorizationcodeflowbackendmanager/requestaccessandrefreshtokens(redirecturiwithquery:state:)

[8]: https://spotify-api-docs.herokuapp.com/documentation/spotifywebapi/spotifyapi
[12]: https://developer.spotify.com/documentation/web-api/reference/
[13]: https://spotify-api-docs.herokuapp.com/documentation/spotifywebapi/clientcredentialsflowbackendmanager/authorize()
[14]: https://github.com/Peter-Schorn/SpotifyAPIExampleApp
[15]: https://developer.spotify.com/documentation/general/guides/authorization/code-flow/
[16]: https://github.com/Peter-Schorn/SpotifyAPI/wiki/Saving-authorization-information-to-persistent-storage.
[17]: https://github.com/Peter-Schorn/SpotifyAPI/wiki
[18]: https://tonyxu-io.github.io/pkce-generator/
[19]: https://tools.ietf.org/html/rfc4648#section-5
[20]: https://spotify-api-docs.herokuapp.com/documentation/spotifywebapi/authorizationcodeflowpkcebackendmanager/makeauthorizationurl(redirecturi:codechallenge:state:scopes:)
[21]: https://spotify-api-docs.herokuapp.com/documentation/spotifywebapi/authorizationcodeflowpkcebackendmanager/requestaccessandrefreshtokens(redirecturiwithquery:codeverifier:state:)

[22]: https://github.com/Peter-Schorn/SpotifyAPIExampleApp#how-the-authorization-process-works
[23]: https://github.com/Peter-Schorn/SpotifyAPIExamples
[24]: https://developer.spotify.com/documentation/web-api/reference/
"
129,erikjhordan-rey/Android-Spotify-MVP,Java,"# Android - Spotify + Model View Presenter (MVP) [![Build Status](https://travis-ci.org/erikjhordan-rey/Android-Spotify-MVP.svg?branch=master)](https://travis-ci.org/erikjhordan-rey/Android-Spotify-MVP)
Android Model View Presenter used to explain how to use this pattern in our android applications.

This example was created to support an article explanation [Model View Presenter en Android][1] (spanish).

Libraries used on the sample project
------------------------------------
* [AppCompat, CardView, RecyclerView, Material][2]
* [Retrofit 2][4]
* [RxJava & RxAndroid][5]
* [Gradle Retrolambda Plugin][6]


# Demo

![](./art/spotify-mvp.png)


# Access Token 

The Spotify Api has been changed an Access Token is required. The app sample probably will response `401 unauthorized code`.

1- * Get Your Access Token from [Spotify Api Doc](https://developer.spotify.com/web-api/console/get-search-item/)

![](./art/token_spotify.png)

2- The class `Constans` has a constant variable called `ACCESS_TOKEN` replace with your access token  


3- Run the app, it should work!!


# how does it work?

![](./art/Telecine_2015-11-25-17-19-04.gif)

[8]: http://mockito.org/
[7]: http://robolectric.org/
[6]: https://github.com/evant/gradle-retrolambda
[5]: https://github.com/ReactiveX/RxAndroid
[4]: http://square.github.io/retrofit/
[2]: http://developer.android.com/intl/es/tools/support-library/index.html
[1]: https://erikjhordan-rey.github.io/blog/2015/11/02/ANDROID-mvp.html


Do you want to contribute?
--------------------------

Feel free to report or add any useful feature, I will be glad to improve it with your help.


Developed By
------------

* Erik Jhordan Rey  - <erikjhordan.rey@gmail.com>

License
-------

    Copyright 2016 Erik Jhordan Rey

    Licensed under the Apache License, Version 2.0 (the ""License"");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an ""AS IS"" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.


"
130,SudhanPlayz/Discord-MusicBot,JavaScript,"<h1 align=""center""><img src=""./assets/logo.gif"" width=""30px""> Discord Music Bot <img src=""./assets/logo.gif"" width=""30px""></h1>
<p align=""center"">Thanks for 25k Views with 500 subs!</p>

## ✨Latest Updates

Discord.js v13 will break this bot so do not use this with it. We have been started working on [v5](https://github.com/SudhanPlayz/Discord-MusicBot/tree/v5) which will be out in some days/months with new features and much more are on the way.

## 🚧 Prerequisites

- [Node.js 14+](https://nodejs.org/en/download/)
- [discord.js@12.5.3](https://www.npmjs.com/package/discord.js/v/12.5.3)
- [Lavalink Server](https://darrennathanael.com/post/how-to-lavalink/?utm_source=github-sudhanplayz&utm_medium=readme&utm_campaign=sudhanplayz&utm_content=lavalink-prerequisites)

> NOTE: Lavalink is needed for music functionality. You need to have a working Lavalink server to make the bot work.

## 📝 Tutorial

A Tutorial has been uploaded on YouTube, Watch it by clicking on the image down below

[![Advanced Discord Music Bot with Web Dashboard | Spotify Support](https://img.youtube.com/vi/p4lP96Tiv9s/maxresdefault.jpg)](https://www.youtube.com/watch?v=p4lP96Tiv9s)

Repl.it [Tutorial](https://github.com/SudhanPlayz/Discord-MusicBot/wiki/Installation-on-Repl-it)

VPS / Server [Tutorial](https://github.com/SudhanPlayz/Discord-MusicBot/wiki/Installation-on-a-Linux-server)

## 📝 [Support Server](https://discord.gg/sbySMS7m3v)

If you have major coding issues with this bot, please join and ask for help.

## 📸 Screenshots

<div align=""left""><img src=""/assets/Screenshot_1.png""></div><div align=""center""><img src=""/assets/Screenshot_2.png""></div><div align=""right""><img src=""/assets/Screenshot_3.png""></div>

<div align=""center""><img src=""/assets/feature.png""></div>

## 💨 Run the projects

[![Remix on Glitch](https://cdn.glitch.com/2703baf2-b643-4da7-ab91-7ee2a2d00b5b%2Fremix-button.svg)](https://glitch.com/edit/#!/import/github/SudhanPlayz/Discord-MusicBot)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
[![Deploy](https://www.herokucdn.com/deploy/button.svg)](https://heroku.com/deploy?template=https://github.com/SudhanPlayz/Discord-MusicBot)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
[![Run on Repl.it](https://repl.it/badge/github/SudhanPlayz/Discord-MusicBot)](https://repl.it/github/SudhanPlayz/Discord-MusicBot)
[![Docker Pulls](https://img.shields.io/docker/pulls/darrenofficial/dmusicbot.svg)](https://hub.docker.com/r/darrenofficial/dmusicbot/)

> Note: If you are hosting your bot in heroku, Please consider upgrading your dyno for running dashboard & bot simultaneously because in free dyno it'll run out of memory(as there are two workers). If you want to run only the bot, turn off the `web` dyno.

## ✨ Contributors

Contributions are always welcomed :D Make sure to follow [Contributing.md](/CONTRIBUTING.md)

<a href=""https://github.com/SudhanPlayz/Discord-MusicBot/graphs/contributors"">
  <img src=""https://contributors-img.web.app/image?repo=SudhanPlayz/Discord-MusicBot"" />
</a>

> **Note:** Contributions are not accepted in the master branch. If you like to contribute check out [v5 branch](https://github.com/SudhanPlayz/Discord-MusicBot/tree/v5)

Made with :heart: and JavaScript!
"
131,junlee91/android-spotify-demo,Java,"**This project is paused!!** 🙏

Some components may not work and some packages/dependencies are deprecated. 

# spotify-demo
Music player app using the Spotify Android SDK and Spotify Web API.

[![Screenshot](screenshot/screens.png)](https://github.com/junlee91/android-spotify-demo/blob/master/screenshot/screens.png)


## Getting Started
- Clone this repo:
```sh
https://github.com/junlee91/android-spotify-demo.git
```
- Open the project in Android Studio
- Make sure to have `buildToolsVersion ""26.0.2""`

## Installing Spotify Android SDK
You can follow the [Spotify Android SDK Tutorial](https://developer.spotify.com/technologies/spotify-android-sdk/tutorial/) to start the set up.

### Quick step
- Download the [Spotify Android playback library zip](https://github.com/spotify/android-sdk/) and [Spotify Android auth library zip](https://github.com/spotify/android-auth/) from GitHub and unzip them.
- In a file explorer (not Android Studio), drag the unzipped spotify-auth-version.aar and spotify-player-version.aar files into the /app/libs directory in your project’s root directory.
- Playback library can be found when you unzip the zipfile. And simply copy this .aar into app/libs
- Auth library needs some more steps.

### Build .aar for auth library
- Download and unzip
- Remove the auth-sample directory since it is not needed to create .aar file
- In the `\android-auth-1.0\settings.gradle` file, include `':app'`
- Create `\android-auth-1.0\local.properties` and add `sdk.dir=/Users/%YOUR_PC_USERNAME%/Library/Android/sdk` for path to the Android SDK
- Run `./gradlew build` and grab an artifact from `auth-lib/build/outputs/aar/`.

## Generate SHA1
This step is needed for registering application fingerprint
```sh
echo -n password | shasum -a 1 | awk '{print $1}'
```

## Get data from Spotify Web API
- [Spotify Web API for Android](https://github.com/kaaes/spotify-web-api-android)
- [Documentation](http://kaaes.github.io/spotify-web-api-android/)

## ScalingLayout
- Follow the instructions from [here](https://github.com/iammert/ScalingLayout)

## Dependency
If you use Android Studio as recommended, the following dependencies will automatically be installed by Gradle.
```sh
android{
    vectorDrawables.useSupportLibrary = true
}

repositories {
    mavenCentral()
    flatDir {
        dirs 'libs'
    }
    maven { url ""https://jitpack.io"" }
}

dependencies {
    ...
    compile 'com.github.iammert:ScalingLayout:1.1'
    compile 'com.android.support:recyclerview-v7:26.1.0'
    compile 'com.squareup.picasso:picasso:2.5.2'
    compile 'de.hdodenhof:circleimageview:2.2.0'

    compile 'com.spotify.sdk:spotify-android-auth-1.0.0@aar'
    compile 'com.spotify.sdk:spotify-player-24-noconnect-2.20b@aar'
    compile 'com.github.kaaes:spotify-web-api-android:0.4.1'
}
```
"
132,andrehaveman/spotify-node-applescript,JavaScript,"# spotify-node-applescript
Control Spotify on Mac OSX with NodeJS and AppleScript.

## Installation

```
$ npm install spotify-node-applescript
```

## Running unit tests

```
$ npm test
```

## API

### playTrack(uri, callback)

Play a track with Spotify URI `uri`.

```javascript
var spotify = require('spotify-node-applescript');

spotify.playTrack('spotify:track:3AhXZa8sUQht0UEdBJgpGc', function(){
    // track is playing
});
```

### playTrackInContext(uri, contextUri, callback)

Play a track in context of for example an album.

```javascript
var spotify = require('spotify-node-applescript');

spotify.playTrackInContext('spotify:track:0R8P9KfGJCDULmlEoBagcO', 'spotify:album:6ZG5lRT77aJ3btmArcykra', function(){
    // Track is playing in context of an album
});
```

### getTrack(callback)

Get the current track. `callback` is called with the current track as second argument.

```javascript
var spotify = require('spotify-node-applescript');

spotify.getTrack(function(err, track){

    /*
    track = {
        artist: 'Bob Dylan',
        album: 'Highway 61 Revisited',
        disc_number: 1,
        duration: 370,
        played count: 0,
        track_number: 1,
        starred: false,
        popularity: 71,
        id: 'spotify:track:3AhXZa8sUQht0UEdBJgpGc',
        name: 'Like A Rolling Stone',
        album_artist: 'Bob Dylan',
        artwork_url: 'http://images.spotify.com/image/e3d720410b4a0770c1fc84bc8eb0f0b76758a358',
        spotify_url: 'spotify:track:3AhXZa8sUQht0UEdBJgpGc' }
    }
    */

});
```

### getState(callback)

Get player state.

```javascript
var spotify = require('spotify-node-applescript');

spotify.getState(function(err, state){
    /*
    state = {
        volume: 99,
        position: 232,
        state: 'playing'
    }
    */
});
```

### jumpTo(second, callback)

Jump to a specific second of the current song.

```javascript
var spotify = require('spotify-node-applescript');

spotify.jumpTo(15, function() {
    console.log('Jumped 15th second of the song');
});
```

### play(callback)

Resume playing current track.

### pause(callback)

Pause playing track.

### playPause(callback)

Toggle play.

### next(callback)

Play next track.

### previous(callback)

Play previous track.

### volumeUp(callback)

Turn volume up.

### volumeDown(callback)

Turn volume down.

### setVolume(volume, callback)

Sets the volume.

```javascript
var spotify = require('spotify-node-applescript');

spotify.setVolume(42, function() {
    spotify.getState(function(err, state) {
        console.log(state.volume);
    });
});
```

### muteVolume(callback)

Reduces audio to 0, saving the previous volume.

### unmuteVolume(callback)

Returns audio to original volume.

### isRunning(callback)

Check if Spotify is running.

```javascript
var spotify = require('spotify-node-applescript');

spotify.isRunning(function(err, isRunning){
    console.log(isRunning); // true
});
```

### isRepeating(callback)
Is repeating on or off?
```js
var spotify = require('spotify-node-applescript');

spotify.isRepeating(function(err, shuffling){
    console.log(shuffling); // true || false
});
```

### isShuffling(callback)
Is shuffling on or off?
```js
var spotify = require('spotify-node-applescript');

spotify.isShuffling(function(err, shuffling){
    console.log(shuffling); // true || false
});
```
### setRepeating(repeating/\**boolean*\*/, callback)
Sets repeating on or off

### setShuffling(shuffling/\**boolean*\*/, callback)
Sets shuffling on or off

### toggleRepeating(callback)
Toggles repeating

### toggleShuffling(callback)
Toggles shuffling

## Contributors

* [Robin Mehner](https://github.com/rmehner)
* [Thorsten Ball](https://github.com/mrnugget)
* [Paul Marbach](https://github.com/fastfrwrd)

## License

[MIT](LICENSE)
"
133,spotify/android-auth,Java,"# Spotify Auth Library

[![Maven Central](https://img.shields.io/maven-central/v/com.spotify.android/auth.svg)](https://search.maven.org/search?q=g:com.spotify.android)

# This repository is now a part of [spotify/android-sdk](https://github.com/spotify/android-sdk). Please post new issues there!

This library is responsible for authenticating the user and fetching the authorization code/access token
that can subsequently be used to play music or in requests to the [Spotify Web API](https://developer.spotify.com/web-api/).

# Breaking changes in Spotify Auth library version 2.0.0

In this version we replaced use of WebView with [Custom Tabs](https://developer.chrome.com/docs/android/custom-tabs/) since Google and Facebook Login no longer support WebViews for authenticating users.

As part of this change the library API does not contain `AuthorizationClient#clearCookies` method anymore. Custom Tabs use the cookies from the browser.

# Integrating the library into your project

To add this library to your project add following dependency to your app `build.gradle` file:

```gradle
implementation ""com.spotify.android:auth:<version>""
```

Since April 2021 we're publishing the library on MavenCentral instead of JCenter. Therefore to be able to get the library dependency, you should add MavenCentral into repositories block:
```gradle
repositories {
    mavenCentral()
    ...
}
```

Since Spotify Auth library version 2.0.0 you also need to provide the scheme and host of the redirect URI that your app is using for authorizing in your app `build.gradle` file.
Below is an example of how this looks for [the auth sample project](auth-sample) using `spotify-sdk://auth` redirect URI:

```gradle
    defaultConfig {
        manifestPlaceholders = [redirectSchemeName: ""spotify-sdk"", redirectHostName: ""auth""]
        ...
    }
```

To learn more see the [Authentication Guide](https://developer.spotify.com/technologies/spotify-android-sdk/android-sdk-authentication-guide/)
and the [API reference](https://spotify.github.io/android-sdk/auth-lib/docs/index.html).

The following entries are merged into your manifest when you add the library:

```xml
<uses-permission android:name=""android.permission.INTERNET""/>

<activity
    android:name=""com.spotify.sdk.android.auth.LoginActivity""
    android:theme=""@android:style/Theme.Translucent.NoTitleBar"">
</activity>
```

# Sample Code

Checkout [the sample project](auth-sample).

# Contributing

You are welcome to contribute to this project. Please make sure that:
* New code is test covered
* Features and APIs are well documented
* `./gradlew check` must succeed

## Code of conduct
This project adheres to the [Open Code of Conduct][code-of-conduct]. By participating, you are expected to honor this code.

[code-of-conduct]: https://github.com/spotify/code-of-conduct/blob/master/code-of-conduct.md

"
134,AnanthVivekanand/spotify-adblock,JavaScript,"# Spotify Desktop Adblocker

This project uses a proxy to strip all ad-related requests from the Spotify desktop application. This should 
work for all major operating systems, but if you are using Linux, I would advise you to use [this](https://github.com/abba23/spotify-adblock-linux) instead.  

## Instructions

Open Spotify desktop, open the dropdown from the top-right, and open settings. Scroll all the way down settings and find ""Proxy"" (you may need
to look under Advanced Settings).

Configure it as shown:

![Proxy config](https://i.imgur.com/TaEWjkB.png)


Run the following commands in terminal to clone and install. 
```
> git clone https://github.com/AnanthVivekanand/spotify-adblock.git && cd spotify-adblock
...
> npm i
...
> export PORT=8080

> npm start
```

Great, your proxy server for Spotify is now working! You should be seeing: 

![Working](https://i.imgur.com/ASJKLwc.png)

However, if Spotify is loading but no songs are playing, you may be experiencing [issue #14](https://github.com/AnanthVivekanand/spotify-adblock/issues/14). In this case, use MITM support below. 

# MITM support

Simply run `node mitm.js` and set the spotify proxy settings to port 8082.

Then start the proxy, which allows it to generate some certificates. Then, trust the 
root certificate at `certs/certs/ca.crt`

On MacOS, you can trust the root certficate with one command: `sudo security add-trusted-cert -d -r trustRoot -k /Library/Keychains/System.keychain certs/certs/ca.crt`

This should be perfectly safe.

# Docker image

To build an image for the MITM proxy, simply run `npm run docker-mitm`, and then create a container binding the port 8082 and the folder `/usr/src/app/certs` to the host to get access to the certificates.
The port 8082 is exposed by Docker for easier setup using a reverse-proxy.

For example:

```docker run -d --name=Spotify-adblock --volume=/opt/spotify-adblock/certs:/usr/src/app/certs -p 8082:8082 --restart=always spotify-adblock:latest```

,where /opt/spotify-adblock/certs is the path on the host machine where you will find the certificates you need to import.
"
135,jsncmgs1/spotify_ex,Elixir,"![Elixir CI](https://github.com/jsncmgs1/spotify_ex/workflows/Elixir%20CI/badge.svg)
[![Inline docs](http://inch-ci.org/github/jsncmgs1/spotify_ex.svg?branch=master)](http://inch-ci.org/github/jsncmgs1/spotify_ex)

# SpotifyEx
**Elixir Wrapper for the Spotify Web API**

## [Documentation](https://hexdocs.pm/spotify_ex/api-reference.html)

## Installation

1. Add spotify_ex to your list of dependencies in `mix.exs`:

```elixir
def deps do
 [{:spotify_ex, ""~> 2.3.0""}]
end
 ```

2. Ensure spotify_ex is started before your application:

```elixir
def application do
  [applications: [:spotify_ex]]
end
```

## What does this wrapper cover?

This wrapper covers the [Spotify Web
API](https://developer.spotify.com/web-api/endpoint-reference/).

Follow the abovementioned link. On the left you'll notice that the API is broken into
sections, such as Artists, Albums, Playlists, etc. This wrapper does its best
to keep endpoints in modules mapped to their corresponding section. However,
Spotify duplicates many of its endpoints. For example, there is an endpoint to
obtain an artist's albums that is listed under both Artists and Albums. 

Endpoints are not duplicated here, however. If you don't see an endpoint, it can be found in a
module that's also related to that endpoint. In other words, if you don't see an endpoint for ""get artists albums""
in the `Artist` module, check `Albums`.

These duplicate endpoints may get aliased in the future to have a 1-1 mapping
with the docs.

## Usage

[docs](https://hexdocs.pm/spotify_ex/api-reference.html)

**A basic Phoenix example can be found at
[SpotifyExTest](http://www.github.com/jsncmgs1/spotify_ex_test)**

## OAuth
[Oauth README](https://github.com/jsncmgs1/spotify_ex/blob/master/docs/oauth.md)

### Scopes

[Scopes README](https://github.com/jsncmgs1/spotify_ex/blob/master/docs/scopes.md)

## Contributing

All contributions are more than welcome! I will not accept a PR without tests
if it looks like something that should be tested (which is pretty much
everything.) Development is done on the `development` branch, and moved to
`master` for release on hexpm. Code must be formatted using `hex format`.
"
136,SimonIT/spotifylyrics,Python,"# Spotify Lyrics
[![Build](https://github.com/SimonIT/spotifylyrics/workflows/Build/badge.svg)](https://github.com/SimonIT/spotifylyrics/actions?query=workflow%3ABuild)
[![Current Release](https://img.shields.io/github/release/SimonIT/spotifylyrics.svg)](https://github.com/SimonIT/spotifylyrics/releases)
[![License](https://img.shields.io/github/license/SimonIT/spotifylyrics.svg)](https://github.com/SimonIT/spotifylyrics/blob/master/LICENSE)
[![GitHub All Releases](https://img.shields.io/github/downloads/SimonIT/spotifylyrics/total)](https://github.com/SimonIT/spotifylyrics/releases)

Fetches and displays lyrics to currently playing song in the Spotify desktop client.


The lyrics are fetched from these sites:

- rentanadviser.com (synchronized)
- megalobiz.com (synchronized)
- lyricsify.com (synchronized)
- rclyricsband.com (synchronized)
- musixmatch.com
- songmeanings.com
- songlyrics.com
- genius.com
- versuri.ro
- AZLyrics.com

# How to

You can grab the latest release in the [release section](https://github.com/SimonIT/spotifylyrics/releases).

## Windows

Download the .exe file.

Just double click and start playing songs in spotify.

It is possible that a warning of windows smartscreen appears. It's because the exe is unsigned (see [#22](https://github.com/SimonIT/spotifylyrics/issues/22)). You can allow the program to open by clicking on ""More info"" and ""Run anyway"".

If you get an error about api-ms-win-crt-runtime-l1-1-0.dll missing, you need this:

https://www.microsoft.com/en-us/download/details.aspx?id=48145

If the window opens and closes immidiatly, feel free to help fxing the problem in [#21](https://github.com/SimonIT/spotifylyrics/issues/21).

## Linux

Download the file without any file ending.

Make it executable via terminal with `chmod +x SpotifyLyrics` or via you file manager.

Now you can double click the executable and start playing songs in spotify.

## MacOS

Download the .app.zip file.

Extract the zip so you got a SpotifyLyrics.app directory.

Make a right click on the SpotifyLyrics.app. Click on open and and you can bypass the warning. The program should open and you can play your songs in spotify.

# Running from source
If you want to run from source you need:

* Python 3.6 (probably any version greater than Python 3.6)
* `pip install -r requirements.txt`

## Ubuntu/Debian example:
```
sudo apt install python3-pip git
git clone https://github.com/SimonIT/spotifylyrics.git
cd spotifylyrics/
sudo pip3 install -r requirements.txt
./SpotifyLyrics.pyw
```

# How to load lyrics from hard drive
You can store lyrics on you hard drive which can automatically loaded.

You have to put them on windows in `C:\Users\<User>\AppData\Roaming\SpotifyLyrics\lyrics` and on the other OS's in `/home/<User>/.SpotifyLyrics/lyrics`. Replace `<User>` with your username.
  
There you can put `.lrc` files with synced text (You can make them for example on [lrcgenerator.com](https://lrcgenerator.com/) or [www.megalobiz.com](https://www.megalobiz.com/lrc/maker)) or simple `.txt` files with non-synced text.
 
**Important: The file names must include the artist and the name of the song**

# Theming

You can customize the design of SpotifyLyrics.
To do so create a file called _theme.ini_ inside `C:\Users\<User>\AppData\Roaming\SpotifyLyrics` or `/home/<User>/.SpotifyLyrics`.
Then put some style information in it. You can find an example [here](https://github.com/SimonIT/spotifylyrics/blob/master/example-theme.ini).

# Screenshot
![example-img](https://i.imgur.com/2dUN17q.png)
"
137,fondberg/spotcast,Python,"# Spotcast

[![hacs_badge](https://img.shields.io/badge/HACS-Default-orange.svg)](https://github.com/hacs/integration)
[![spotcast](https://img.shields.io/github/release/fondberg/spotcast.svg?1)](https://github.com/fondberg/spotcast)
![Maintenance](https://img.shields.io/maintenance/yes/2022.svg)

[![Buy me a coffee](https://img.shields.io/static/v1.svg?label=Buy%20me%20a%20coffee&message=🥨&color=black&logo=buy%20me%20a%20coffee&logoColor=white&labelColor=6f4e37)](https://www.buymeacoffee.com/fondberg)

Home Assistant custom component to start Spotify playback on an idle chromecast device or a Spotify Connect device (thanks to @kleinc80) which means that you can target your automation for chromecast as well as connect devices.

Spotcast implements a cast platform (requires Home Assistant Core 2022.2.0 or later), which enables Google Cast media player entities to play Spotify URI as well as to browse the Spotify library.

This component is not meant to be a full Spotify chromecast media_player but only serves to start the playback. Controlling the chromecast device and the Spotify playback after the initial start is done in their respective components.
Because starting playback using the API requires more powerful token the username and password used for browser login is used.

Used by [Spotify-Card](https://github.com/custom-cards/spotify-card).

__[Community post](https://community.home-assistant.io/t/spotcast-custom-component-to-start-playback-on-an-idle-chromecast-device/114232)__

## Installation

### HACS

This component is easiest installed using [HACS](https://github.com/custom-components/hacs).

### Manual installation

Copy all files from custom_components/spotcast/ to custom_components/spotcast/ inside your config Home Assistant directory.

## Configuration

### Minimum Home Assistant version

Spotcast is compatible with any version since 2021.12.0.

### Official Spotify Integration

Note that as of v3.5.2 you must also have the official [Home Assistant Spotify Integration](https://www.home-assistant.io/integrations/spotify/) installed and configured for this custom component to work. This is because it provides the correct device list which has the correct scopes in its token.

### Obtaining `sp_dc` and `sp_key` cookies

Spotcast uses two cookies to authenticate against Spotify in order to have access to the required services.

To obtain the cookies, these different methods can be used:

#### Chrome based browser

##### Settings page

1. Open [`https://open.spotify.com`](https://open.spotify.com). If you are already logged in, log out of Spotify.
2. Login to Spotify (this will ensure you get new cookies that are valid for 1 year). 
3. Open the url [`chrome://settings/cookies/detail?site=spotify.com`](chrome://settings/cookies/detail?site=spotify.com).
4. Copy the content from `sp_dc` and `sp_key` cookies.
5. Close the window without logging out (Otherwise the cookies are made invalid).

![cookie in chrome settings](images/cookies_chrome_1.png)

##### Chrome web console

1. Open a new __Incognito window__ at [`https://open.spotify.com`](https://open.spotify.com) and login to Spotify.
2. Press `Command+Option+I` (Mac) or `Control+Shift+I` or `F12`. This should open the developer tools menu of your browser.
3. Go into the `application` section.
4. In the menu on the left go int `Storage/Cookies/open.spotify.com`.
5. Find the `sp_dc` and `sp_key` and copy the values.
6. Close the window without logging out (Otherwise the cookies are made invalid).

![cookie in chrome developer tools](images/cookies_chrome_2.png)

#### Firefox based browser

##### Firefox web console

1. Open a new __Incognito window__ at [`https://open.spotify.com`](https://open.spotify.com) and login to Spotify.
2. Press `Command+Option+I` (Mac) or `Control+Shift+I` or `F12`. This should open the developer tools menu of your browser.
3. Go into the `Storage` section. (You might have to click on the right arrows to reveal the section).
4. Select the `Cookies` sub-menu and then `https://open.spotify.com`.
5. Find the `sp_dc` and `sp_key` and copy the values.
6. Close the window without logging out (Otherwise the cookies are made invalid).

![Firefox developer tool](images/cookies_firefox_1.png)

### Single account

Add the following to your configuration.yaml:

```yaml
spotcast:
  sp_dc: !secret sp_dc
  sp_key: !secret sp_key
  country: SE #optional, added in 3.6.24
```

### Multiple accounts

Add `accounts` dict to the configuration and populate with a list of accounts to
be able to initiate playback using diffferent accounts than the default.

If you are using v3.5.2 or greater and thus also have the core Spotify Integration installed, then [the additional accounts will also need to be added there as well](https://www.home-assistant.io/integrations/spotify#using-multiple-spotify-accounts) for multiple accounts to work.

```yaml
spotcast:
  sp_dc: !secret primary_sp_dc
  sp_key: !secret primary_sp_key
  country: SE #optional, added in 3.6.24
  accounts:
    niklas:
      sp_dc: !secret niklas_sp_dc
      sp_key: !secret niklas_sp_key
    ming:
      sp_dc: !secret ming_sp_dc
      sp_key: !secret ming_sp_key
```

### Edit secrets.yaml

Please note: configuration.yaml is a plain text file and [it is not recommended to store your passwords in this file](https://www.home-assistant.io/docs/configuration/secrets/).

By using the ```!secret``` tag you are directing Home Assistant to look inside the secrets.yaml file for your key instead.

For a single account add the following to your secrets.yaml file:

```yaml
sp_dc: [your sp_dc here]
sp_key: [your sp_key here]
```

For multiple accounts add the corresponding entries to your secrets.yaml file. For example, using the same accounts as above:

```yaml
primary_sp_dc: [your sp_dc here]
primary_sp_key: [your sp_key here]
niklas_sp_dc: [niklas sp_dc here]
niklas_sp_key: [niklas sp_key here]
ming_sp_dc: [ming sp_dc here]
ming_sp_key: [ming sp_key here]
```

## Call the service

The spotcast custom component creates a service called 'spotcast.start' in Home Assistant.

### Start playback on Spotify connect device

```yaml
- service: spotcast.start
  data:
    spotify_device_id: ""ab123c5d7347324c2b1234567890f8d6dc40350""
    uri: ""spotify:playlist:37i9dQZF1DX3yvAYDslnv8""
    random_song: true
```

### Start playback on a device with default account

```yaml
- service: spotcast.start
  data:
    device_name: ""Kitchen""
    uri: ""spotify:playlist:37i9dQZF1DX3yvAYDslnv8""
    random_song: true
```

where:

* `spotify_device_id` is the device ID of the Spotify Connect device
* `device_name` is the friendly name of the chromecast device
* `uri` is the Spotify uri, supports all uris including track (limit to one track)
* `search` is a search query to resolve into a uri. This parameter will be overlooked if a uri is provided
* `category` let spotify pick a random playlist inside a given [category](https://developer.spotify.com/console/get-browse-categories/)
* `country` restrict country to use when looking for playlists inside a category
* `limit` restrict number of playlists to return when looking in a category. Note that only a single playlist will be chosen randomly from them.
* `random_song` optional parameter that starts the playback at a random position in the playlist
* `repeat` optional parameter that repeats the playlist/track (track|context|off)
* `shuffle` optional parameter to set shuffle mode for playback
* `offset` optional parameter to set offset mode for playback. 0 is the first song

Optionally you can specify the `entity_id` of an existing Home Assistant chromecast media-player like:

```yaml
- service: spotcast.start
  data:
    entity_id: ""media_player.vardagsrum""
    uri: ""spotify:playlist:37i9dQZF1DX3yvAYDslnv8""
```

### Find Spotify Device ID

To use the Spotcast service with a Spotify Connect device, you need the `spotify_device_id`. To find the `spotify_device_id`, multiple option are available.

#### With Spotify developer portal

1. Go to [Spotify developer console](https://developer.spotify.com/console/get-users-available-devices/)
2. Click `GET TOKEN` <br/>
![get_token](./images/get_token.png)
3. Select `user-read-playback-state` as a scope<br/>
![select_scope](./images/select_scope.png)
4. If prompt give permission to your Spotify profile
5. For chromecast devices, make sure to play media on the device prior to checking the logs as they will not show unless active
6. Press the option `Try it`
7. Read the result in the console in the right.<br/>
![device_id](./images/device_id.png)

#### Through Spotcast log

1. Enable the debug logs (instructions are in section `Enabling Debug Log` in this README)
2. Reboot Home Assistant
3. Go to `Configuration >> Logs >> Load Full Home Assistant Log`.
4. For chromecast devices, make sure to play media on the device prior to checking the logs as they will not show unless active
5. Find the log entry `get_spotify_devices` and look for the device ID.

#### Sonos Device ID

1. Open the Spotify Web Player and sign in if needed
2. Make sure you see your Sonos devices in the Connect popup
3. Open your browser's DevTools (F12 for Chrome)
4. Navigate to the Network tab
5. Connect to the desired Sonos device in the Web Player
6. Find the associated request in your DevTools
7. The request URL looks something like this: `https://gew1-spclient.spotify.com/connect-state/v1/connect/transfer/from/my_web_player_device_id/to/my_sonos_device_id`
8. The `my_sonos_device_id` is the `spotify_device_id` you are looking for.

##### Log example

```LOG
2022-01-13 19:10:35 DEBUG (SyncWorker_0) [custom_components.spotcast.helpers] get_spotify_devices: media_player.spotify_felix: Spotify Félix Cusson: [{'id': '################################', 'is_active': True, 'is_private_session': False, 'is_restricted': False, 'name': 'Salon', 'type': 'CastAudio', 'volume_percent': 16}]
2022-01-13 19:10:35 DEBUG (SyncWorker_0) [custom_components.spotcast.helpers] get_spotify_devices: {'devices': [{'id': '###############################', 'is_active': False, 'is_private_session': False, 'is_restricted': False, 'name': 'Salon', 'type': 'CastAudio', 'volume_percent': 16}]}

# Look for
<...> Spotify Félix Cusson: [{'id': '################################', <- This is the device ID
```

### Automation example

```yaml
- id: 'christmas_play_christmas_music'
  alias: Christmas play Christmas music
  initial_state: 'on'
  trigger:
  - event_data:
      id: remote_windowlamps
      event: 5002
    platform: event
    event_type: deconz_event
  condition: []
  action:
  - service: spotcast.start
    data:
      uri: 'spotify:playlist:56Bor5fbMJlJV7oryb2p3k'
      random_song: true
      shuffle: true
      start_volume: 50
      entity_id: media_player.kitchen
```

```yaml
- service: spotcast.start
  data:
    search: ""Brown Bird"" # resolves to spotify:artist:5zzbSFZMVpvxSlWAkqqtHP at the time of writing
    random_song: true
    shuffle: true
    start_volume: 50
    entity_id: media_player.kitchen
```

### Transfer current playback for the account

Omitting `uri` will transfer the playback to the specified device.

```yaml
- service: spotcast.start
  data:
    device_name: ""Speaker kitchen""
```

Use the parameter `force_playback` to continue the user's playback even if nothing is currently playing.

```yaml
- service: spotcast.start
  data:
    device_name: ""Speaker kitchen""
    force_playback: true
```

where:

* `device_name` is the friendly name of the chromecast
* `force_playback` (optional) true or false, true to continue the user's playback even if nothing is currently playing

### Start playback on a device with non default account

```yaml
- service: spotcast.start
  data:
    account: ""niklas""
    device_name: ""Speaker kitchen""
    uri: ""spotify:playlist:37i9dQZF1DX3yvAYDslnv8""
```

where:

* `account` is the name of account key in the accounts dictionary in the configuration
* `device_name` is the friendly name of the chromecast
* `uri` is the Spotify uri, supports all uris including track (limit to one track)

### Start podcast playback

Play the latest episode of a given podcast show.

```yaml
- service: spotcast.start
  data:
    account: ""niklas""
    device_name: ""Speaker kitchen""
    uri: ""spotify:show:6PeAI9SHRZhghU7NRPXvT3""
    ignore_fully_played: true
```

where

* `account` is the name of account key in the accounts dictionary in the configuration
* `device_name` is the friendly name of the Chromecast
* `uri` is the spotify uri, (podcasts use the 'show' uri)
* `ignore_fully_played` (optional) true or false, true to ignore already fully played episodes (defaults to false and plays the latest released episode)

## Use the sensor

The sensor has the discovered chromecasts as both json and an array of objects.
Since v3.4.0 it does not do its own discovery but relies on data from core cast.
Add the following to the sensor section of the configuration:

```yaml
sensor:
  - platform: spotcast
    country: SE
```

The country tag was added in v3.6.24. This tag is optional. If ommited or if you haven't updated the configuration since the update, it will default to ""SE"" (which it always did before)

Sensor name:

```yaml
sensor.chromecast_devices
```

Attributes

```json
devices_json: [
  {
    ""name"": ""Speaker kitchen"",
    ""cast_type"": ""audio"",
    ""model_name"": ""Google Home"",
    ""uuid"": ""xxxxx"",
    ""manufacturer"": ""Google Inc.""
  },
  {
    ""name"": ""Speakers upstairs"",
    ""cast_type"": ""group"",
    ""model_name"": ""Google Cast Group"",
    ""uuid"": ""xxxx"",
    ""manufacturer"": ""Google Inc.""
  },
  {
    ""name"": ""Living room"",
    ""cast_type"": ""cast"",
    ""model_name"": ""HK Citation 300"",
    ""uuid"": ""xxxx"",
    ""manufacturer"":""Harman Kardon""
    }
  ]

last_update: 2019-05-01T15:27:49.828553+02:00

friendly_name: Chromecast Devices
```

## Websocket API

The components websocket api.

Method: `spotcast/playlist` supporting different `playlist_type`s.

* `user`, or `default` for user chosen saved playlists
* `featured` for spotify ""featured"" playlists (not personalized)
* `discover-weekly` for personalized ""Made for _____"" (includes daily mixes)
* `recently-played` for ""Recently Played""
* ... any other `view id` as found in the API at [https://api.spotify.com/v1/views/personalized-recommendations](https://api.spotify.com/v1/views/personalized-recommendations)

Example usage:

```python
// Retrieve playlists
const res = await this.props.hass.callWS({
  type: 'spotcast/playlists',
  playlist_type: 'featured', // 'user' for saved playlists, 'featured' for spotify featured, or personalized view id
  country_code: 'SV', // Optional country code used by featured playlists
  limit: 20, // Optional limit, default is 10
  account: 'ming' // optional account name
});

// Retrieve devices
const res = await this.props.hass.callWS({
  type: 'spotcast/devices',
  account: 'ming' // optional account name
});

// Retrieve player
const res = await this.props.hass.callWS({
  type: 'spotcast/player',
  account: 'ming' // optional account name
});
```

## Enabling debug log

In configuration.yaml for you HA add and attach those the relevant logs.
Be sure to disable it later as it is quite noisy.

```yaml
logger:
  default: info
  logs:
    custom_components.spotcast: debug
```

## Donate

If you like what I do and want to support me - I love coffee!

<a href=
  ""https://www.buymeacoffee.com/fondberg"" target=""_blank"">
  <img src=
    ""https://www.buymeacoffee.com/assets/img/custom_images/orange_img.png"" alt=""Buy Me A Coffee"" style=""height: auto !important;width: auto !important;"" >
</a>

## Contribute

Please do! Open a Pull Request with your improvements.

## License

Apache 2.0
"
138,gilbarbara/react-spotify-web-playback,TypeScript,"# react-spotify-web-playback

[![npm version](https://badge.fury.io/js/react-spotify-web-playback.svg)](https://www.npmjs.com/package/react-spotify-web-playback) [![CI](https://github.com/gilbarbara/react-spotify-web-playback/actions/workflows/main.yml/badge.svg)](https://github.com/gilbarbara/react-spotify-web-playback/actions/workflows/main.yml) [![Maintainability](https://api.codeclimate.com/v1/badges/9b6d6817ca7bdfe47f5e/maintainability)](https://codeclimate.com/github/gilbarbara/react-spotify-web-playback/maintainability) [![Test Coverage](https://api.codeclimate.com/v1/badges/9b6d6817ca7bdfe47f5e/test_coverage)](https://codeclimate.com/github/gilbarbara/react-spotify-web-playback/test_coverage)

#### A Spotify player with [Spotify's Web Playback SDK](https://developer.spotify.com/documentation/web-playback-sdk/).

View the [demo](https://react-spotify-web-playback.gilbarbara.dev/)

Check the [supported browser](https://developer.spotify.com/documentation/web-playback-sdk/#supported-browsers) list. This library will try to use the user's devices to work with unsupported browsers.

## Setup

```bash
npm i react-spotify-web-playback
```

## Getting Started

```jsx
import SpotifyPlayer from 'react-spotify-web-playback';

<SpotifyPlayer
  token=""BQAI_7RWPJuqdZxS-I8XzhkUi9RKr8Q8UUNaJAHwWlpIq6...""
  uris={['spotify:artist:6HQYnRM4OzToCYPpVBInuU']}
/>;
```

## Props

**autoPlay**: `boolean`  
Start the player immediately.

**callback**: `(state) => any`  
Get status updates from the player. Check `CallbackState` in the [types](src/types/common.ts) for the `state` structure.

**initialVolume** `number` between 0 and 1. _default 1_  
The initial volume for the player. It's not used for external devices.

**locale** `Locale`  
The strings used for aria-label/title

<details>
  <summary>Type Definition</summary>

  ```typescript
interface Locale {
  devices?: string; // 'Devices'
  next?: string; // 'Next'
  pause?: string; // 'Pause'
  play?: string; // 'Play'
  previous?: string; // 'Previous'
  title?: string; // '{name} on SPOTIFY'
  volume?: string; // 'Volume'
}
  ```
</details>

**magnifySliderOnHover**: `boolean`  
Magnify the player's slider on hover.

**name** `string` _default: Spotify Web Player_  
The name of the player.

**offset** `number`  
The position of the list/tracks you want to start the player.

**persistDeviceSelection** `boolean`  
Save the device selection.

**play** `boolean`  
Control the player status

**showSaveIcon** `boolean`  
Display a Favorite button. Needs additional scopes in your token!

**styles** `object`  
Customize the player appearance. Check `StylesOptions` in the [types](src/types/common.ts).

**syncExternalDevice** `boolean`
If there are no URIs and an external device is playing, use the external player context.

**syncExternalDeviceInterval** `number` _default: 5_  
The time in seconds that the player will sync with external devices

**token** `string` **REQUIRED**  
A Spotify token. More info below.

**updateSavedStatus** `(fn: (status: boolean) => any) => any`  
Provide you with a function to sync the track saved status in the player.  
_This works in addition to the **showSaveIcon** prop and it is only needed if you keep the track saved status in your app._

**uris** `string | string[]`  
A list of Spotify [URIs](https://developer.spotify.com/documentation/web-api/#spotify-uris-and-ids).

## Spotify Token

It needs a Spotify token with the following scopes:

- streaming
- user-read-email
- user-read-private
- user-read-playback-state (to read other devices' status)
- user-modify-playback-state (to update other devices)

If you want to show the Favorite button (💚) you'll need the additional scopes:

- user-library-read
- user-library-modify

Please refer to Spotify's Web API [docs](https://developer.spotify.com/documentation/web-api/) for more information.

> This library doesn't handle token generation and expiration. You'll need to handle that by yourself.

## Styling

You can customize the UI with a `styles` prop. Check all the available options [here](src/types/common.ts#L69).

```tsx
<SpotifyWebPlayer
  // ...
  styles={{
    activeColor: '#fff',
    bgColor: '#333',
    color: '#fff',
    loaderColor: '#fff',
    sliderColor: '#1cb954',
    trackArtistColor: '#ccc',
    trackNameColor: '#fff',
  }}
/>
```

![rswp-styles](https://gilbarbara.com/files/rswp-styles-e4060ddf.png)

## Issues

If you find a bug, please file an issue on [our issue tracker on GitHub](https://github.com/gilbarbara/react-spotify-web-playback/issues).

## License

MIT
"
139,Klerith/spotify-get-token,JavaScript,"# Notas:

Este es un pequeño servidor de express listo para ejecutarse y servir la carpeta public en la web.

Recuerden que deben de reconstruir los módulos de node con el comando

```
npm install
```"
140,ga-wdi-exercises/spotify-me,HTML,"# Spotify.me

Use Ajax to load data from the Spotify API! A user should be able to:

## Basic Requirements:

 - Enter a keyword to seach for.
 - Select ""artist"" or ""track"" as the search type.
 - Have the names of all search results print as a list.
 
## Keep going:

 - Add a ""Showing X-X of X results found"" message.
 - Setup pagination links for accessing the next page of results.

## [Demo](http://ga-wdi-exercises.github.io/spotify-me/)
"
141,mauimauer/portify,JavaScript,"[![Flattr this git repo](http://api.flattr.com/button/flattr-badge-large.png)](https://flattr.com/submit/auto?user_id=mauimauer&url=https://github.com/mauimauer/portify&title=portify&language=&tags=github&category=software) 

portify
=======

Transfers your Spotify playlists to Google Music: All Access

By using Portify you may violate both Spotify's and Google's Terms of Service. You agree that
you are using Portify on your own risk. The author does not accept liability (as far as permitted by law) for any loss arising from any use of this tool.
If you choose not to agree to these terms, then you may not use this tool.

You can read about portify here: [http://www.maui.at/2013/06/portify/](http://www.maui.at/2013/06/portify/)

License
-------

Licensed under the terms of the Apache 2.0 License
All Trademarks are the property of their respective owners.

Building portify
----------------
* Make sure you have installed a usable build enviroment (gcc, make & co.)
* Install Node.js (using your favourite package manager, but make sure it's newer than 0.8)
* Clone the git repo (master branch)
* Go into the ./data/ directory and run npm install (This will fetch and compile all depenencies of portify)
* Try running the daemon by executing node app.js in the ./data/ folder
* Open your favourite browser and go to localhost:3132

[![Bitdeli Badge](https://d2weczhvl823v0.cloudfront.net/mauimauer/portify/trend.png)](https://bitdeli.com/free ""Bitdeli Badge"")
[![Analytics](https://ga-beacon.appspot.com/UA-374323-19/portify/README?pixel)](https://github.com/igrigorik/ga-beacon)
"
142,SwagLyrics/SwagLyrics-For-Spotify,Python,"<h1 align=""center""><img src=""https://github.com/SwagLyrics/SwagLyrics/blob/master/assets/swaglyrics_transparent.png?raw=true"" alt=""SwagLyrics"" height=200 width=200 align=""middle"">SwagLyrics-For-Spotify</h1>
<p align=""center"">
  <a href=""https://discord.gg/DSUZGK4"">
    <img src=""https://badgen.net/badge/discord/join%20chat/7289DA?icon=discord"" alt=""Discord Server"" />
  </a>
  <a href=""https://travis-ci.com/SwagLyrics/SwagLyrics-For-Spotify"">
    <img src=""https://travis-ci.com/SwagLyrics/SwagLyrics-For-Spotify.svg?branch=master"" alt=""Build Status"" />
  </a>
  <a href=""https://ci.appveyor.com/project/TheClashster/swaglyrics-for-spotify-yo7jh"">
    <img src=""https://ci.appveyor.com/api/projects/status/eon538lm2of04sll?svg=true"" alt=""Build Status"" />
  </a>
  <a href=""https://codecov.io/gh/SwagLyrics/SwagLyrics-For-Spotify"">
  <img src=""https://codecov.io/gh/SwagLyrics/SwagLyrics-For-Spotify/branch/master/graph/badge.svg"" />
  </a>
  <a href=""https://pypi.org/project/swaglyrics/"">
    <img src=""https://img.shields.io/pypi/v/swaglyrics.svg"" alt=""PyPI"" />
  </a>
  <a href=""https://aur.archlinux.org/packages/swaglyrics/"">
    <img src=""https://img.shields.io/aur/version/swaglyrics"" alt=""Arch User Repository"" />
  </a>
  <a href=""https://pepy.tech/project/swaglyrics"">
    <img src=""https://pepy.tech/badge/swaglyrics"" alt=""Downloads"" />
  </a>
</p>

Fetches the currently playing song from Spotify on Windows, Linux and macOS and displays the lyrics in the command-line, browser tab or in a [desktop application](https://github.com/SwagLyrics/SwagLyricsGUI).
Refreshes automatically when song changes. The lyrics are fetched from Genius.
Turns out Deezer already has this feature in-built but with `swaglyrics`, you can have it in Spotify as well.

I'm mainly trying to build this project as far as I can,
for practice and to learn and work with more technologies and platforms.

Initially developed this for personal use. Pretty much functionality oriented -- I usually develop something that I
can see helping me and other users in the same situation.
Packaged so I can first hand handle production-ready code to an extent and to make
distribution and usage easier.

## Why SwagLyrics?
SwagLyrics is the fastest and the most accurate package for getting lyrics.<a href=#footnote1 id=a1><sup>1</sup></a>

Provided optimal internet, SwagLyrics can fetch lyrics for a track in as less as 0.28s.<a href=#footnote2 id=a2><sup>2</sup></a>

It also does not require the user to generate any sort of API token (Spotify or Genius) and serves functionality 
right off the bat. This is possible as the song identification is done using our in-house library 
[SwSpotify](https://github.com/SwagLyrics/SwSpotify) which does it locally for all operating systems. 

The enhanced user experience is possible due to the [backend](https://github.com/SwagLyrics/swaglyrics-issue-maker) 
which manages creating issues for unsupported songs and then adding support for them where possible by employing various 
techniques. Any song with lyrics on Genius can be supported without any user interaction owing to the backend.
If say, lyrics do not exist for a track then subsequent playings of that track will not waste your resources in trying
to fetch lyrics, this is done by a [master list of unsupported songs](https://aadibajpai.pythonanywhere.com) which is 
handled by the backend as well. 

<a href=""https://colab.research.google.com/gist/aadibajpai/439cd358b001ae7d1ba970b68f70d92b/swaglyrics_test.ipynb"" id=""footnote1"">
1. <small>[results]</small></a> Tested against <a href=https://github.com/johnwmillr/LyricsGenius>LyricsGenius</a>, the most popular 
similar package on the US Top 50 Chart on Spotify. SwagLyrics was fractionally more accurate and 2.4x times faster. 
<a href=#a1>↩</a>
<br>
<a href=""https://colab.research.google.com/gist/aadibajpai/06a596ad753007b0faea132e96f372e0/swaglyrics_test.ipynb"" id=""footnote2"">
2. <small>[results]</small></a> Speed and accuracy benchmark using Google Colab on the Spotify US Top 50 chart. 
<a href=#a2>↩</a>

## Installation
Requires Python 3.6+. Use pip or pip3 depending on your installation. You might want to use the `--user` flag on Linux to
avoid using pip as root.
```
pip install swaglyrics
```

### Arch Linux

Arch Linux users can directly install SwagLyrics from AUR ([swaglyrics<sup>AUR</sup>](https://aur.archlinux.org/packages/swaglyrics/)). Using `yay`:
```
yay -S swaglyrics
```

### Nix

Nix users on any Linux distro and NixOS can install SwagLyrics from Nixpkgs.

```
nix-env -i swaglyrics
```

## Usage
`usage: swaglyrics [-h] [-t] [-c] [-n]`

Either the tab or cli argument is required to output lyrics.

Arguments:
```
  -h, --help      show this help message and exit       
  -t, --tab       Display lyrics in a browser tab.      
  -c, --cli       Display lyrics in the command-line.   
  -n, --no-issue  Disable issue-making on cli.
```
You can quit by pressing <kbd>Ctrl</kbd>+<kbd>C</kbd>.

Before using, you should check [USING.txt](swaglyrics/USING.txt) to comply with the Genius ToS. There's a copy 
included inside the package as well.

Note: If you have trouble displaying Japanese/Chinese characters on the command-line, simply type `chcp 936` to change your code page. List of code pages can be found here: https://en.wikipedia.org/wiki/Code_page

## Community
- SwagLyrics participated in [Google Code-in 2019](https://g.co/gci) with CCExtractor Development.
- SwagLyrics participated in [Google Code-in 2018](https://g.co/gci) with CCExtractor Development.
- SwagLyrics participated in [Google Summer of Code 2019](https://g.co/gsoc) with CCExtractor Development. 
The selected project can be found [here](https://summerofcode.withgoogle.com/projects/#5694893526089728).

## Changelog

- #### v1.2.0
	- Add Genius A/B support
	- Add support for Bollywood songs
    - Add update check only once per 24h
    - Add parameter to force update check
	
See [CHANGES.md](CHANGES.md) for prior release notes.

## Compiling SwagLyrics for Development

- Clone the repo by `git clone https://github.com/SwagLyrics/SwagLyrics-For-Spotify.git` or use ssh.
- `cd` into the cloned repo.
- `pip install -e .` the -e flag installs it locally in editable mode.

## Improvements Planned
1. ~~Linux and macOS support **done**~~
2. ~~Better logging of unsupported songs, the isolated unsupported.txt is sub-optimal for multiple users since the
file will only update locally with songs which worked fine when it was just me but since I hope others use it too, I'll
try to add a better method with server support.~~
3. ~~Better tests to test all of the functionality. (cli.py fully tested!)~~ 100% code coverage
4. Perhaps a tiny app using Electron that could fit in your tray to be opened whenever you want lyrics for a song.
5. ~~Supporting more songs, currently the program sometimes fails at remixes since while the lyrics are same as 
original,
 the artist is the remixer. **done**~~
6. Documenting all the files.

## SwagLyrics on Windows with Terminal
<p align=""center"">
  <img src=""https://i.imgur.com/SRRbxbr.png"" alt=""SwagLyrics with Hyper"">
</p>

## SwagLyrics on Windows with Firefox Side-View
<p align=""center"">
  <img src=""https://i.imgur.com/TcSpbP9.png"" alt=""SwagLyrics with Side-View"">
</p>

## Screencast - SwagLyrics on Linux
<p align=""center"">
  <a href=""http://www.youtube.com/watch?v=-rxYcXAsO1U"">
    <img src=""https://i.imgur.com/v3iWyia.gif"" alt=""Watch the video"">
  </a>
</p>

## Screencast - SwagLyrics on macOS
<p align=""center"">
  <a href=""https://www.youtube.com/watch?v=XcobDTljMdM"">
    <img src=""https://i.imgur.com/7BVWB99.gif"" alt=""Watch the video"">
  </a>
</p>
"
143,charlypoly/spotify-graphql,TypeScript,"# Spotify GraphQL [![npm version](https://badge.fury.io/js/spotify-graphql.svg)](https://badge.fury.io/js/spotify-graphql) [![https://david-dm.org/wittydeveloper/spotify-graphql](https://david-dm.org/wittydeveloper/spotify-graphql.svg)](https://david-dm.org/wittydeveloper/spotify-graphql) [![TypeScript](https://badges.frapsoft.com/typescript/code/typescript.svg?v=101)](https://github.com/ellerbrock/typescript-badges/)
GraphQL schema for Spotify Web API — TypeScript / Node.js (v6)

--------
**[Try with the interactive console !](https://spotify-api-graphql-console.herokuapp.com/)**

See [spotify-graphql-examples](https://github.com/wittydeveloper/spotify-graphql-examples) for more examples


-------

```typescript

import SpotifyGraphQLClient from '../src/spotify-graphql';
import config from './config';

SpotifyGraphQLClient(config).query(`
  {
    track(id: ""3W2ZcrRsInZbjWylOi6KhZ"") {
      name
      artists {
        name
      }
    }
  }
`).then(result => {
  console.log(JSON.stringify(result));
});

// Print : 
// {
//   ""data"": {
//     ""track"": {
//       ""name"": ""You & Me - Flume Remix"",
//       ""artists"": [
//         {
//           ""name"": ""Disclosure""
//         },
//         {
//           ""name"": ""Eliza Doolittle""
//         },
//         {
//           ""name"": ""Flume""
//         }
//       ]
//     }
//   }
// }

```

### Queries

### Albums
- Get an Album :white_check_mark:
- Get Several Albums :white_check_mark:
- Get an Album's Tracks :white_check_mark:
### Artists
- Get an Artist :white_check_mark:
- Get Several Artists :white_check_mark:
- Get an Artist's Albums :white_check_mark:
- Get an Artist's Top Tracks :white_check_mark:
- Get an Artist's Related Artists :white_check_mark:
### Tracks
- Get a Track :white_check_mark:
- Get Several Tracks :white_check_mark:
- Get Audio Features for a Track :white_check_mark:
- Get Audio Features for Several Tracks :white_check_mark:
- Get Audio Analysis for a Track :x:
### Search
- Search for an Item :white_check_mark:
### Playlists
- Get a List of a User's Playlists :white_check_mark:
- Get a List of Current User's Playlists :white_check_mark:
- Get a Playlist :white_check_mark:
- Get a Playlist's Tracks :white_check_mark:
### Create a Playlist
- Add Tracks to a Playlist :x:
- Remove Tracks from a Playlist :x:
- Reorder or replace a Playlist's Tracks :x:
- Change a Playlist's Details :x:
### User Profiles
- Get a User's Profile :white_check_mark:
- Get Current User's Profile :white_check_mark:
### User Library
- Get Current User's Saved Tracks :white_check_mark:
- Check Current User's Saved Tracks :x:
- Save Tracks for Current User :x:
- Remove Tracks for Current User :x:
- Get Current User's Saved Albums :white_check_mark: :x:
- Check Current User's Saved Albums :x:
- Save Albums for Current User :x:
- Remove Albums for Current User :x:
### Personalization
- Get User's Top Artists and Tracks :white_check_mark:
### Browse
- Get a List of New Releases :x:
- Get a List of Featured Playlists :x:
- Get a List of Browse Categories :x:
- Get a Single Browse Category :x:
- Get a Category's playlists :x:
- Get Recommendations Based on Seeds :x:
- Get Available Genre Seeds :x:
### Follow
- Get Followed Artists :x:
- Check if Current User Follows Artists or Users :x:
- Follow Artists or Users :x:
- Unfollow Artists or Users :x:
- Check if Users Follow a Playlist :x:
- Follow a Playlist :x:
- Unfollow a Playlist :x:
### Player
- Get the Current User's Recently Played Tracks :white_check_mark:
- Get Information About The User's Current Playback :white_check_mark:
- Transfer a User's Playback :x:
- Get a User's Available Devices :x:
- Get the User's Currently Playing Track :x:
- Start/Resume a User's Playback :x:
- Pause a User's Playback :x:
- Skip User's Playback To Next Track :x:
- Skip User's Playback To Previous Track :x:
- Seek To Position In Currently Playing Track :x:
- Set Repeat Mode On User's Playback :x:
- Set Volume For User's Playback :x:
- Toggle Shuffle For User's Playback :x:
"
144,ceuk/spotui,Python,"# SpoTUI
![Version Badge](https://img.shields.io/pypi/v/spotui)
![License Badge](https://img.shields.io/github/license/ceuk/spotui)
![Code size Badge](https://img.shields.io/github/languages/code-size/ceuk/spotui)

Spotify in the terminal. 

![screenshot](https://i.imgur.com/7syOTKb.gif)

Getting Started
-----------

Install with ```pip install spotui```

**Please Note:** SpoTUI will not work with free Spotify accounts.

Register a developer application at: [https://developer.spotify.com/dashboard/login]( https://developer.spotify.com/dashboard/login). Once you create the application you'll need to edit it to add a Redirect URI. Use something like 'http://localhost:8888/callback' (it doesn't matter what you use really as long as it matches what's in your config file).

Run `spotui` to generate a sample config file at ~/.config/spotui/.spotuirc or create one manually with the following:

```
[spotify_api]
user_name = *Your spotify username*
client_id = *Your application client ID*
client_secret = *Your application secret*
redirect_uri = http://localhost:8888/callback

[other]
use_nerd_fonts = yes
config_version = 1 
```

Once you're done start the app with `spotui`, log in via your browser and copy the URL of the broken web page you're taken to. *(This ugly authentication process is part of the underlying Spotipy library I use so don't blame me :stuck_out_tongue_winking_eye:)*

This app acts like a kind of remote control for Spotify. The best way to use it is in conjunction with [Spotifyd](https://github.com/Spotifyd/spotifyd) which means you won't need to actually have Spotify open. Alternatively, you can just open Spotify on your computer, phone etc. (press `d` to pick the device to play on).




Controls
-------

**Navigation**

`tab` Switch section

`k`/`↑` Up

`j`/`↓` Down

`g` Scroll to top

`G` Scroll to bottom

`Enter` Select

`/` Search 

`d` Open device menu

`Esc`/`q` Quit/Back

**Playback**

`space` Play/Pause

`n` Next track

`p` Previous track

`→` Seek 10s forwards

`←` Seek 10s backwards

`s` Toggle shuffle

`r` Toggle repeat


FAQ
----

* **What do I do if something breaks?** [Raise an issue](https://github.com/ceuk/spotui/issues/new) or submit a PR to fix my crappy code :pray:
* **Why can't I play anything?** Check you have a device selected (d) and make sure you're using a paid Spotify account
* **I get an error page when I log into Spotify** This is correct - just copy the URL and paste it back into the terminal
* **Podcasts aren't playing** See: #13

Dependencies
-----------

* [Spotipy](https://spotipy.readthedocs.io/en/latest/)

LICENSE
------

MIT
"
145,itstommi/Spotify-Readme,HTML,"<div align=""center"">
  <img src=""spotify.svg"" width=""100"" align=""center"">
  <h1>Spotify Readme</h1>

  [![Badge](https://img.shields.io/github/issues/itstommi/Spotify-Readme?style=for-the-badge)](https://github.com/itstommi/Spotify-Readme/issues)
  [![Badge](https://img.shields.io/github/forks/itstommi/Spotify-Readme?style=for-the-badge)](https://github.com/itstommi/Spotify-Readme/network)
  [![Badge](https://img.shields.io/github/stars/itstommi/Spotify-Readme?style=for-the-badge)](https://github.com/itstommi/Spotify-Readme/stargazers)

</div>

<p align=""center"">
  A dynamic, customizable, and real-time Spotify now-playing widget for your README files. If you're not currently playing a song, it'll display one of your recent songs! It's width is sized like other common README widgets, so can be uniformly paired (<a href=""https://github.com/itstommi/itstommi"">see it in action</a> on my own README). Feel free to ask for help or make any PRs/issues/suggestions 😄
</p>

## Customization Previews

<p>
  Just add query parameters to the endpoint, there are many possible combinations! (If you're on mobile and your screen is small, please use a desktop browser or change the zoom level to zoom out)
</p>

| Parameter   | Default    | Values          |
| :--------   | :-------   | :-------------- |
| `spin`      | `false`    | `false`, `true` |
| `scan`      | `false`    | `false`, `true` |
| `theme`     | `light`    | `light`, `dark` |
| `rainbow`   | `false`    | `false`, `true` |

#### Default
```
/api
```
![Preview](https://itstommi.vercel.app/api)

#### Spinning CD Effect
```
/api?spin=true
```
![Preview](https://itstommi.vercel.app/api?spin=true)

#### Include Scan Code
```
/api?scan=true
```
![Preview](https://itstommi.vercel.app/api?scan=true)

#### Rainbow Equalizer
```
/api?rainbow=true
```
![Preview](https://itstommi.vercel.app/api?rainbow=true)

#### Dark Theme
```
/api?theme=dark
```
![Preview](https://itstommi.vercel.app/api?theme=dark)

## Notes

This wasn't a completely original idea. This is my own version of <a href=""https://github.com/novatorem/novatorem"">novatorem's project</a> that was supposed to be for me only, but others have asked for the source code so I made this repo. I also incorporated the latest two PR's from the orignal project into this one and made it easy to customize. I also excluded the <a href=""https://github.com/novatorem/novatorem/blob/master/SetUp.md#hide-the-eq-bar"">Hide the EQ bar</a> and <a href=""https://github.com/novatorem/novatorem/blob/master/SetUp.md#status-string"">Status String</a> customizations (sorry). 

## Setup

The setup is slightly different from the original. Please refer to <a href=""https://github.com/novatorem/novatorem/blob/master/SetUp.md"">this page</a> for the setup, but take notice of these differences:

- Use the <code>/api</code> endpoint as opposed to <code>/api/spotify</code>
- The environment variables are different:
  - `SPOTIFY_CLIENT_ID` ➠ `CLIENT_ID`
  - `SPOTIFY_SECRET_ID` ➠ `CLIENT_SECRET`
  - `SPOTIFY_REFRESH_TOKEN` ➠ `REFRESH_TOKEN`"
146,PageMenu/PageMenu,Swift,"<img src=""https://raw.githubusercontent.com/uacaps/ResourceRepo/master/PageMenu/PageMenuHeader3.png"" alt=""PageMenuHeader"">

[![Version](https://img.shields.io/cocoapods/v/PageMenu.svg?style=flat)](http://cocoapods.org/pods/PageMenu)
[![License](https://img.shields.io/cocoapods/l/PageMenu.svg?style=flat)](http://cocoapods.org/pods/PageMenu)
[![Platform](https://img.shields.io/cocoapods/p/PageMenu.svg?style=flat)](http://cocoapods.org/pods/PageMenu)
[![Carthage compatible](https://img.shields.io/badge/Carthage-compatible-4BC51D.svg?style=flat)](https://github.com/Carthage/Carthage)

### Unfortunately, life gets in the way sometimes and I won't be able to maintain this library any longer and upgrade this library to where it needs to be.

#### Featured In
<table>
 <tr>
 <td align=""center"">
  <a href=""https://itunes.apple.com/us/app/whatsport-connecting-sports/id1091156941""><img src=""http://is3.mzstatic.com/image/thumb/Purple122/v4/64/d2/ee/64d2ee82-150d-a6fd-ab65-ec8641a979a4/source/100x100bb.jpg"" /></a>
  </td>
  <td align=""center"">
  <a href=""https://itunes.apple.com/us/app/funny-or-die/id299546679?mt=8""><img src=""http://a2.mzstatic.com/us/r30/Purple3/v4/7b/34/8a/7b348a8b-54d9-e1b2-f50b-a447f6dff4be/icon100x100.jpeg"" /></a>
  </td>
  <td align=""center"">
  <a href=""https://itunes.apple.com/us/app/alabama-mvd/id399424940?mt=8""><img src=""http://a1.mzstatic.com/us/r30/Purple7/v4/e8/f3/df/e8f3df11-5807-9f4c-9725-afb84b461804/icon100x100.png"" /></a>
  </td>
  <td align=""center"">
  <a href=""https://itunes.apple.com/gb/app/healthful-work-smart-not-hard!/id970747415?mt=""><img src=""http://a3.mzstatic.com/eu/r30/Purple69/v4/8c/16/a4/8c16a419-8671-0b0d-e951-8e3f4eeea1f9/icon100x100.png"" /></a>
  </td>
  <td align=""center"">
  <a href=""https://itunes.apple.com/us/app/bboy-event/id1067848402?mt=8""><img src=""http://a4.mzstatic.com/us/r30/Purple20/v4/67/26/04/6726041c-5685-7537-cb68-76939df51e30/icon100x100.jpeg"" /></a>
  </td>
  <tr>
   <td align=""center""><b>WhatSport</b></td>
   <td align=""center""><b>Funny Or Die</b></td>
   <td align=""center""><b>Alabama MVD</b></td>
   <td align=""center""><b>HEALTHFUL</b></td>
   <td align=""center""><b>Bboy Event</b></td>
  </tr>
  <tr>
   <td align=""center"">SportsQuack LLC</td>
   <td align=""center"">Funny Or Die, Inc.</td>
   <td align=""center"">CAPS</td>
   <td align=""center"">Junaid Younus</td>
   <td align=""center"">Jazz Pixels ООО</td>
  </tr>
 </tr>
</table>

## Latest Update

**1.2.8 Release (06/22/2015)**
* Bug fixes
* Obj-c more stable


## Description

A fully customizable and flexible paging menu controller built from other view controllers placed inside a scroll view allowing the user to switch between any kind of view controller with an easy tap or swipe gesture similar to what Spotify, Windows Phone, and Instagram use

**Similar to Spotify**

<img src=""https://raw.githubusercontent.com/uacaps/ResourceRepo/master/PageMenu/PageMenuDemo.gif"" alt=""PageMenuDemo"">
<img src=""https://raw.githubusercontent.com/uacaps/ResourceRepo/master/PageMenu/PageMenuScreen8.png"" alt=""PageMenuScreen2"">

**Similar to Windows Phone**

<img src=""https://raw.githubusercontent.com/uacaps/ResourceRepo/master/PageMenu/PageMenuDemo2.gif"" alt=""PageMenuDemo2"">
<img src=""https://raw.githubusercontent.com/uacaps/ResourceRepo/master/PageMenu/PageMenuScreen7.png"" alt=""PageMenuScreen2"">

**Similar to Instagram segmented control**

<img src=""https://raw.githubusercontent.com/uacaps/ResourceRepo/master/PageMenu/PageMenuDemoSegmentedControlGif.gif"" alt=""PageMenuDemoSegmentedControlGif"">
<img src=""https://raw.githubusercontent.com/uacaps/ResourceRepo/master/PageMenu/PageMenuDemoScreen6.png"" alt=""PageMenuDemoScreen6"">

## Installation

**CocoaPods**

PageMenu is available through [CocoaPods](http://cocoapods.org). !! Swift only !!

To install add the following line to your Podfile:

    pod 'PageMenu'

**Carthage**

PageMenu is also available through [Carthage](https://github.com/carthage/carthage).  Append this line to Cartfile and follow [this instruction](https://github.com/carthage/carthage#adding-frameworks-to-an-application).

```
github ""uacaps/PageMenu""
```

**Manual Installation**

The class file required for PageMenu is located in the Classes folder in the root of this repository as listed below:

* CAPSPageMenu.swift

## How to use PageMenu

First you will have to create a view controller that is supposed to serve as the base of the page menu. This can be a view controller with its xib file as a separate file as well as having its xib file in storyboard. Following this you will have to go through a few simple steps outlined below in order to get everything up and running.

**1)  Add the files listed in the installation section to your project**

**2)  Add a property for CAPSPageMenu in your base view controller**

Swift

```swift
var pageMenu : CAPSPageMenu?
```

Objective-C

```objectivec
@property (nonatomic) CAPSPageMenu *pagemenu;
```

**3)  Add the following code in the viewDidLoad function in your view controller**

Swift

```swift
// Array to keep track of controllers in page menu
var controllerArray : [UIViewController] = []

// Create variables for all view controllers you want to put in the 
// page menu, initialize them, and add each to the controller array. 
// (Can be any UIViewController subclass)
// Make sure the title property of all view controllers is set
// Example:
var controller : UIViewController = UIViewController(nibName: ""controllerNibName"", bundle: nil)
controller.title = ""SAMPLE TITLE""
controllerArray.append(controller)

// Customize page menu to your liking (optional) or use default settings by sending nil for 'options' in the init
// Example:
var parameters: [CAPSPageMenuOption] = [
    .MenuItemSeparatorWidth(4.3), 
    .UseMenuLikeSegmentedControl(true), 
    .MenuItemSeparatorPercentageHeight(0.1)
]

// Initialize page menu with controller array, frame, and optional parameters
pageMenu = CAPSPageMenu(viewControllers: controllerArray, frame: CGRectMake(0.0, 0.0, self.view.frame.width, self.view.frame.height), pageMenuOptions: parameters)

// Lastly add page menu as subview of base view controller view
// or use pageMenu controller in you view hierachy as desired
self.view.addSubview(pageMenu!.view)
```

Objective-C

```objectivec
// Array to keep track of controllers in page menu
NSMutableArray *controllerArray = [NSMutableArray array];

// Create variables for all view controllers you want to put in the 
// page menu, initialize them, and add each to the controller array. 
// (Can be any UIViewController subclass)
// Make sure the title property of all view controllers is set
// Example:
UIViewController *controller = [UIViewController alloc] initWithNibname:@""controllerNibnName"" bundle:nil];
controller.title = @""SAMPLE TITLE"";
[controllerArray addObject:controller];

// Customize page menu to your liking (optional) or use default settings by sending nil for 'options' in the init
// Example:
NSDictionary *parameters = @{CAPSPageMenuOptionMenuItemSeparatorWidth: @(4.3),
                             CAPSPageMenuOptionUseMenuLikeSegmentedControl: @(YES),
                             CAPSPageMenuOptionMenuItemSeparatorPercentageHeight: @(0.1)
                             };

// Initialize page menu with controller array, frame, and optional parameters
_pageMenu = [[CAPSPageMenu alloc] initWithViewControllers:controllerArray frame:CGRectMake(0.0, 0.0, self.view.frame.size.width, self.view.frame.size.height) options:parameters];

// Lastly add page menu as subview of base view controller view
// or use pageMenu controller in you view hierachy as desired
[self.view addSubview:_pageMenu.view];
```

**4)  Optional - Delegate Methods**

In order to use the delegate methods first set the delegate of page menu to the parent view controller when setting it up

Swift

```swift
// Optional delegate 
pageMenu!.delegate = self
```

Objective-C

```objectivec
// Optional delegate 
_pageMenu.delegate = self;
```


After that you will be able to set up the following delegate methods inside of your parent view controller

Swift

```swift
func willMoveToPage(controller: UIViewController, index: Int){}

func didMoveToPage(controller: UIViewController, index: Int){}
```

Objective-C

```objectivec
// Optional delegate 
- (void)willMoveToPage:(UIViewController *)controller index:(NSInteger)index {}

- (void)didMoveToPage:(UIViewController *)controller index:(NSInteger)index {}
```

**5)  You should now be ready to use PageMenu!! 🎉**

## Customization

There are many ways you are able to customize page menu for your needs and there will be more customizations coming in the future to make sure page menu conforms to your app design. These will all be properties in CAPSPageMenu that can be changed from your base view controller. (Property names given with each item below)

**1)  Colors**

  * Background color behind the page menu scroll view to blend in view controller backgrounds 

        viewBackgroundColor (UIColor)

  * Scroll menu background color

        scrollMenuBackgroundColor (UIColor)


  * Selection indicator color

        selectionIndicatorColor (UIColor)


  * Selected menu item label color

        selectedMenuItemLabelColor (UIColor)


  * Unselected menu item label color

        unselectedMenuItemLabelColor (UIColor)


  * Menu item separator color (Used for segmented control style)

        menuItemSeparatorColor (UIColor)


  * Bottom menu hairline color

        bottomMenuHairlineColor (UIColor)



**2)  Dimensions**

  * Scroll menu height

        menuHeight (CGFloat)


  * Scroll menu margin (leading space before first menu item and after last menu item as well as in between items)

        menuMargin (CGFloat)


  * Scroll menu item width

        menuItemWidth (CGFloat)


  * Selection indicator height

        selectionIndicatorHeight (CGFloat)


**3)  Segmented Control**

  * Use PageMenu as segmented control

        useMenuLikeSegmentedControl (Bool)

   
  * Menu item separator width in pixels

        menuItemSeparatorWidth (CGFloat)


  * Menu item separator height in percentage of menu height

        menuItemSeparatorPercentageHeight (CGFloat)


  * Menu item separator has rounded edges

        menuItemSeparatorRoundEdges (Bool)


**4)  Others**
  * Menu item title label font

        menuItemFont (UIFont)


  * Bottom menu hairline

        addBottomMenuHairline (Bool)


  * Menu item witdh based on title text width (see Demo 3)

        menuItemWidthBasedOnTitleTextWidth (Bool)


  * Disable/Enable horizontal bounce for controller scroll view

        enableHorizontalBounce (Bool)


  * Hide/Unhide top menu bar

        hideTopMenuBar (Bool)


  * Center menu items in menu if they don't span entire width (Not currently supported for menu item width based on title)

        centerMenuItems (Bool)


  * Scroll animation duration on menu item tap in milliseconds

        scrollAnimationDurationOnMenuItemTap (Int)

## Apps using PageMenu

Please let me know if your app in the AppStore uses this library so I can add your app to the list of apps featuring PageMenu.

## Future Work

- [x] Screen rotation support
- [x] Objective-C version
- [ ] Infinite scroll option / Wrap items
- [ ] Carthage support
- [ ] More customization options

## Credits

[Niklas Fahl (fahlout)](http://bit.ly/fahlout) - iOS Developer ([LinkedIn](http://bit.ly/linked-in-niklas-fahl))

**Thank you for your contributions:**

[masarusanjp](https://github.com/masarusanjp)
* Type-safe options

[John C. Daub (hsoi)](https://github.com/hsoi)
* iOS 7.1 fixes
* Content size fixes on viewDidLayoutSubviews()

[Gurpartap Singh (Gurpartap)](https://github.com/gurpartap)
* CocoaPods fixes
* ScrollToTop fixes

[Chao Ruan (rcgary)](https://github.com/rcgary)
* Swift 1.2 Support

## Update Log

**1.2.7 Release (06/05/2015)**
* CocoaPods now has current version
* Objective-C version in Beta
* Demos updated

**1.2.6 Release (05/26/2015)**
* Options are now type-safe - Thanks to [masarusanjp](https://github.com/masarusanjp)

**1.2.5 Release (04/14/2015)**
* Support for Swift 1.2 - Thanks to [Chao Ruan (rcgary)](https://github.com/rcgary)
* Will be on cocoa pods soon!

**1.2.4 Release (03/24/2015)**
* Small improvements thanks to hsoi and kitasuke

**1.2.3 Release (02/09/2015)**
* iOS 7.1 errors resolved - hsoi
* Scroll to top now working for each page when tapping status bar - Gurpartap
* Now fully working with CocoaPods - Gurpartap

**1.2.2 Release (02/09/2015)**
* Now fully working with CocoaPods thanks to Gurpartap

**1.2.1 Release (02/02/2015)**
* Added delegate methods to know when page menu will move and did move to a certain page index
* Fixed bug where pages would disappear when tapping around on menu items
* Added a few more customization options (enableHorizontalBounce, hideTopMenuBar, menuItemSeparatorColor)
* Edited Demo 5 to show how to set up view controllers and page menu in order to be able to push from cells, etc.
* **Changed setup of PageMenu to eliminate some common issues (Please be aware that you will need to make a few changes in your project if you're already using PageMenu)**

**1.2.0 Release (01/26/2015)**
* Added ability to center menu items if they don't span over entire width of the PageMenu view (currently only supported for fixed menu item width)
* Added ability to use PageMenu in a similar way as segmented control
* Added function to move to any page index in PageMenu

**1.1.1 Release (01/16/2015)**
* Fixed bug that prevented user from tapping anything within a controller
* Menu now fully scrollable

**1.1.0 Release (01/15/2015)**
* Major performance improvements
* Auto-rotation bug fixed
* Customization option added for scroll animation duration on menu item tap

## License ##

Copyright (c) 2014 The Board of Trustees of The University of Alabama
All rights reserved.

Redistribution and use in source and binary forms, with or without
modification, are permitted provided that the following conditions
are met:

 1. Redistributions of source code must retain the above copyright
    notice, this list of conditions and the following disclaimer.
 2. Redistributions in binary form must reproduce the above copyright
    notice, this list of conditions and the following disclaimer in the
    documentation and/or other materials provided with the distribution.
 3. Neither the name of the University nor the names of the contributors
    may be used to endorse or promote products derived from this software
    without specific prior written permission.

THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
""AS IS"" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS
FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL
THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
(INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,
STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED
OF THE POSSIBILITY OF SUCH DAMAGE.
"
147,spicetify/spicetify-themes,CSS,"# spicetify community themes

This is a collection of themes for [spicetify](https://github.com/spicetify/spicetify-cli), a command-line tool to customize Spotify.

You can add your own theme simply by opening a Pull Request (more info in [CONTRIBUTING.md](./CONTRIBUTING.md)).

### **You can find a preview of all the themes in [THEMES.md](./THEMES.md).**

## Notes:

*   **These themes require that you have the latest version of Spotify and Spicetify.**
*   **To install Dribbblish and Turntable themes, follow the instructions in their READMEs**.
*   **Spotify ad-blocked version is not supported.**

## Installation and usage

(If you use Arch Linux you can find this project on the [AUR](https://aur.archlinux.org/packages/spicetify-themes-git/))

1.  Clone this repository. Make sure [git](https://git-scm.com/) is installed and run:
    ```bash
    git clone https://github.com/spicetify/spicetify-themes.git
    ```

2.  Copy the files into the [Spicetify Themes folder](https://spicetify.app/docs/development/customization#themes). Run:

    **Linux**

    ```bash
    cd spicetify-themes
    cp -r * ~/.config/spicetify/Themes
    ```

    **MacOS**

    ```bash
    cd spicetify-themes
    cp -r * ~/.config/spicetify/Themes
    ```

    **Windows**

    ```powershell
    cd spicetify-themes
    cp * ""$(spicetify -c | Split-Path)\Themes\"" -Recurse
    ```

3.  Choose which theme to apply just by running:
    ```bash
    spicetify config current_theme THEME_NAME
    ```
    Some themes have 2 or more different color schemes. After selecting the theme you can switch between them with:
    ```bash
    spicetify config color_scheme SCHEME_NAME
    ```

### Extra

The `_Extra` folder contains additional resources for tweaking the look of
Spotify. More info in its [README](./\_Extra/README.md).

## Contributions

We've set up a separate document for our [contribution guidelines](./CONTRIBUTING.md).

## Troubleshooting

Do not open issues for general support questions as we want to keep GitHub issues for bug reports and feature requests. If you find problems when using or installing these themes, or you need help in modifying a theme then ask for suggestions on the [subreddit](https://www.reddit.com/r/spicetify/) or on the [Discord Server](https://discord.com/invite/VnevqPp2Rr).

Use GitHub issues ONLY for bugs and requesting new features.

If you are unsure about which channel to use, go for Reddit or Discord.

## Useful resources

*   [Spicetify theme without free version UI elements (e.g. ""Upgrade"" button)](https://github.com/Daksh777/SpotifyNoPremium)
*   [DribbblishDynamic theme for v2](https://github.com/JulienMaille/dribbblish-dynamic-theme)
"
148,spotify/boilerplate-app,,"boilerplate-app
===============

This repository has been cleared and left intentionally empty.

Spotify closed the submission process for new apps on the 24th of March 2014. Future releases of the Spotify Desktop client will no longer feature an App Finder tab and will no longer support the presentation of Spotify Apps, therefore this API has been discontinued.

With the growing importance of mobile devices and with many developers asking for the tools to build apps outside of our desktop platform, we recognized the need to make a new set of APIs and SDKs available. These would ensure the Spotify platform remained relevant and easy to develop on, as well as enabling you to build innovative and engaging music experiences.

As a result, we launched our [Web API](https://developer.spotify.com/web-api/) and mobile SDKs for [iOS](https://developer.spotify.com/technologies/spotify-ios-sdk/) and [Android](https://developer.spotify.com/technologies/spotify-android-sdk/).

Please read the [announcement](https://developer.spotify.com/news-stories/2014/03/24/closure-of-spotify-apps-submissions/) on our Developer News site for more information.
"
149,plamere/SpotifyPopcorn,JavaScript,"# Music Popcorn
A dynamic visualization of the music genre space
"
150,amcquade/fresh_script,Python,"# fresh_script

This program will search for spotify tracks posted in the HipHopHeads subreddit and add them to a playlist of your choice. HipHopHeads is a subreddit dedicated to everything hiphop, including the latest mixtapes, videos, news, and anything else hip hop related from your favorite artists.

## New Features!
[Flask](http://flask.pocoo.org/) has recently been added to the project. You can read up on how to get it setup [here](flask.md).

## Getting Started

### Prerequisites

This project uses Python3.

You will need to setup a Spotify developer account and register your app and obtain the following information:
* client id
* client secret
* your spotify username
* playlist id of the playlist you want to add the tracks to
* the url you want to redirect to for authentication, i.e. http://google.com/
  * this must be added under your app settings > Redirect URIs 

You will also need to setup a reddit instance with praw. [Here's](https://pythonforengineers.com/build-a-reddit-bot-part-1/) a useful guide I used to do this.

### Setup your Credentials

To set up your credentials, create a new file called `credentials.json` in the root of the project with the following contents:

```
{
    ""spotify"": {
        ""username"": ""[Spotify username]"",
        ""client_id"": ""[Spotify client id]"",
        ""client_secret"": ""[Spotify client secret]"",
        ""redirect"": ""[redirect uri]""
    },
    ""reddit"": {
        ""username"": ""[reddit username]"",
        ""client_id"": ""[praw client id]"",
        ""client_secret"": ""[praw client secret]""
    }
}
```
 
### Installing dependencies
This project uses a dependency manager called [pipenv](https://pipenv.readthedocs.io). Follow the instructions to install it [here](https://pipenv.readthedocs.io/en/latest/install/#installing-pipenv).

The project dependencies are listed in a [Pipfile](https://github.com/pypa/pipfile). Using pipenv, you can install all the dependencies with the following commands:
```bash
cd fresh_script
pipenv install
``` 

Pipenv uses [virtualenv](https://virtualenv.pypa.io/en/stable/) to create a python environment with all the dependencies listed in the Pipfile. Before running the fresh.py script, you must first activate the environment:
```bash
pipenv shell
```

If you wish to deactivate the environment use the command
```bash
exit
```

### Running the script

Running the program is simple. The first time you run it, you will be asked for your Spotify credientials which will be saved to a config file for ease of use in the future. Choose to sort results by hot or new, enter a post limit, and then enjoy.

```
python3 fresh.py
```

### Script arguments

The following arguments can be passed to the script

| Short | Long             | Type   | Description |
|-------|------------------|--------|-------------|
| -s    | --sort           | string | Sort by hot, new, rising, random_rising, controversion or top |
| -l    | --limit          | int    | How many posts to grab |
| -t    | --threshold      | int    | Only posts with score above threshold |
| -f    | --fresh          | bool   | Only add tracks with the \[FRESH\] tag |
| -ia   | --include-albums | bool   | Include tracks from albums |
| -v    | --verbose        | bool   | Output songs being added and other info |
| -p    | --playlists      | bool   | List, add, or remove playlists to add songs to |

### Running the script using cron

We can use cron to automatically run the script periodically in order to keep it up-to-date. You will need either a macOS computer or Linux server to use cron.

1. Follow the `running the script` instructions to make sure your `.config.ini` file is generated with the required parameters
2. Run `crontab -e` to open the cron editor, which is similar to vim
3. Use the following format to create a line for your cron
    ```
    * * * * * command to be executed
    - - - - -
    | | | | |
    | | | | ----- Day of week (0 - 7) (Sunday=0 or 7)
    | | | ------- Month (1 - 12)
    | | --------- Day of month (1 - 31)
    | ----------- Hour (0 - 23)
    ------------- Minute (0 - 59)
    ```
    For example, you would do the following to run this everyday at 9AM
    ```
    0 9 * * * python /home/jsmith/fresh.py
    ```

## Contributing

I appreciate any help and support. Feel free to [fork](https://github.com/amcquade/fresh_script#fork-destination-box) and [create a pull request](https://github.com/amcquade/fresh_script/compare)
"
151,gabrieldenoni/SpotifyClone,Swift,"# SpotifyClone

An iOS app that **visually clones Spotify's app** and **consumes the official Spotify's Web API** to show(and play) songs, podcasts, artists and more.

The app can play a **30-second** preview of a song, otherwise, to play the full song it would be necessary to have a physical device and the real Spotify app installed(requirements of the Spotify iOS SDK).

I've built the project by myself to learn more about iOS development, and to consolidate already learnt concepts by putting them into practice. By no means the project is perfect, so feel free to open issues or make pull requests with your own new features.

I hope you enjoy the app. Feel free to hit me up! <br>

**The architecture of this project is really bad and I'll be refactoring it soon.**

*-Gabriel*

<br>

| Home Screen | Search Screen | Track Details Screen | Playlist Details Screen |
|:---------------:|:---------------:|:---------------:|:---------------:|
| ![Screen Shot 2021-10-11 at 11 59 25 AM](https://user-images.githubusercontent.com/62707916/136813393-a3dcc218-d800-4556-aa58-11b0019fd89b.png) | ![Screen Shot 2021-10-11 at 12 00 41 PM](https://user-images.githubusercontent.com/62707916/136813456-e010e92f-2465-4f59-94a3-ecbe4bab71cf.png) | ![Screen Shot 2021-10-11 at 11 59 34 AM](https://user-images.githubusercontent.com/62707916/136813590-cbb9dd10-3798-45ac-990c-8f6ace31b36e.png) | ![Screen Shot 2021-10-11 at 12 00 36 PM](https://user-images.githubusercontent.com/62707916/136813659-5b816b8b-bcdb-4320-a166-6b203cb8ff0b.png) 
| Artist Details Screen | Podcast Details Screen | Album Details Screen | Active Searching Screen |  
![Screen Shot 2021-10-11 at 12 00 11 PM](https://user-images.githubusercontent.com/62707916/136813737-86d94816-901d-435f-9811-a3febb308024.png) | ![Screen Shot 2021-10-11 at 12 01 16 PM](https://user-images.githubusercontent.com/62707916/136813754-be65c94e-8c5e-4f47-b868-9bc861e8508e.png) | ![Screen Shot 2021-10-11 at 11 59 43 AM](https://user-images.githubusercontent.com/62707916/136813855-1a6a621d-96b9-45c3-b046-bc55c2eea414.png) | ![Screen Shot 2021-10-11 at 12 01 01 PM](https://user-images.githubusercontent.com/62707916/136819824-dfe87231-459f-42e3-a356-133b8503d6d2.png)

<br> <br>
<br> <br>

# How to set up (>5 min)

1. Fork this project and `git clone ...`
2. Create/login with your Spotify Account in the [Spotify for Developers](https://developer.spotify.com) website.
3. Go to [dashboard](https://developer.spotify.com/dashboard/applications) and select '**Create an app**'.
4. Give the name and description that you want and in the dashboard select the app that you've just created.
5. Go to your local clone of the project in your machine and open '**YourSensitiveData.swift**' (./SpotifyClone/SpotifyCloneProject/YourSensitiveData).
6. Back in your application page of the dashboard, copy the '**Client ID**' and '**Client Secret**' and paste them in '**YourSensitiveData.swift**'.
7. Again in the dashboard select '**Users and access**' an then click in '**Add new user**'*(if you try to log-in into an account in the app without adding it here, your app will crash with error 403 because Spotify's API doesn't allow that)*. 
8. **Great! Now you just need to run the app!**

If you have any problem, feel free to contact me on [github](https://github.com/gabrieldenoni)

<br> <br>
<br> <br>

## Concepts & Technologies Used
 - Swift
 - Consuming a REST API
 - Caching
 - AVFoundation to play and control audio
 - Combine *(minor use)*
 - SwiftUI
 - XCode Instruments
 - Memory Management and Cache Cleaning
 - Grand Central Dispatch
 - Dependency Injection
 - CocoaPods

 **External Dependencies:**
 - Alamofire
 - Introspect *(really small use)*
 - SwiftLint


<br> <br>


## Turn on the video volume
| | | | |
| :-: | :-: | :-: | :- |
<video src='https://user-images.githubusercontent.com/62707916/138572032-636c1182-92f0-408d-9ed9-bf143e556fd5.mov' width=180/> | <video src='https://user-images.githubusercontent.com/62707916/136820651-4d632ea2-e952-4b4f-afde-cbd3becf3b1a.mov' width=180/> | <video src='https://user-images.githubusercontent.com/62707916/136820663-5bf7d61d-57ac-4fe7-9b47-2aca33516611.mov' width=180/> | <video src='https://user-images.githubusercontent.com/62707916/136820671-a5aece22-3a97-4cdd-9a4f-6b4ef77311ff.mov' width=180/>

*Stuttering is due to simulator lag and shouldn't happen on real device.*

<br> <br>

## Code Overview

### ViewModels

#### Main
- Navigation
- Source of the Spotify's Authentication Key to the subviewmodels

#### Auth
- *`Coordinator`*: Controls the WebView responses
- Contacts Service(`/APIAuthentication`) to get the Authentication Key
- Controls the state of AuthScreen

#### Home
- Contacts Service(`/HomePageAPICalls`) to get media(tracks, podcasts, playlists, albums, artists and episodes) data from the API
- Controls HomeSubpages(playlistDetail, trackDetail, etc…)
- Controls the state of HomeScreen

#### Search
- *`ActiveSearchViewModel`*: Contacts Service(`/SearchPageAPICalls`) to get response data(based on what the user searched) from the API ¹ 
- Contacts Service(`/SearchPageAPICalls`) to get media data from API ²
- Controls SearchSubpages(activeSearching, playlistDetail, trackDetail, etc…)
- Controls the state of DetailScreen

#### Details
- Contacts Service(`/MediaDetailsPageAPICalls`) to get the detailed data, for a specific item(the item that was clicked), from the API
- Controls the state of DetailScreen


<sup> ¹ The viewmodel for when the user is actively searching for an item. <br>
² The viewmodel for when the user just opened the SearchScreen, it's similar to a discover screen.


## Things to do/improve
  
- [ ] Use protocols to reduce code duplication.
- [ ] Add more animations(like, follow, navigation, etc).
- [ ] Play playlists(one song after another).
- [ ] Use navigation link for navigation.
- [ ] Save that the user is already logged.
- [ ] Unit testing.
- [ ] Solve animation hitches when scrolling in the playlist tracks.
- [ ] Better project architecture.
- [ ] Make the currently playing track bottom bar work.
- [ ] Make the three dots work to open more options.


<br> <br> <br>
  
![DeC-SV5W4AEDegt](https://user-images.githubusercontent.com/62707916/136847961-b1d23d4c-2f2a-4a1c-b34b-e726997204af.png)

"
152,thorpelawrence/alexa-spotify-connect,JavaScript,"# alexa-spotify-connect (Connect Control for Spotify)

[![Greenkeeper badge](https://badges.greenkeeper.io/thorpelawrence/alexa-spotify-connect.svg)](https://greenkeeper.io/)

[![Build Status](https://travis-ci.org/thorpelawrence/alexa-spotify-connect.svg?branch=master)](https://travis-ci.org/thorpelawrence/alexa-spotify-connect)
[![Maintainability](https://api.codeclimate.com/v1/badges/e8e6719b56106b6c5162/maintainability)](https://codeclimate.com/github/thorpelawrence/alexa-spotify-connect/maintainability)
[![Test Coverage](https://api.codeclimate.com/v1/badges/e8e6719b56106b6c5162/test_coverage)](https://codeclimate.com/github/thorpelawrence/alexa-spotify-connect/test_coverage)
[![Coverage Status](https://coveralls.io/repos/github/thorpelawrence/alexa-spotify-connect/badge.svg?branch=master)](https://coveralls.io/github/thorpelawrence/alexa-spotify-connect?branch=master)

![](resources/icon108.png)

**Control Spotify Connect devices with Alexa**

## Alexa Skill Store
**UK**: https://www.amazon.co.uk/Lawrence-Thorpe-Connect-Control-Spotify/dp/B074KFNWFD  
**US**: https://www.amazon.com/Lawrence-Thorpe-Connect-Control-Spotify/dp/B074KFNWFD

## Contribution and development
To get started, fork this repository to make changes. If those changes would be useful in the project, feel free to make a pull request.

### Deploy the skill
1. Create a Spotify developer app at developer.spotify.com, get a client ID and client secret
2. Create an Amazon Alexa skill, choosing **custom**. When you get to the part in the Alexa developer console where you can upload/paste in JSON, run `skill/skill.js` to generate the JSON required
```
$ node skill/skill.js
```
3. Enter the application ID from the developer console into `package.json`, under the key `alexa.applicationId`. 
4. Turn on **Account linking**, choosing **""Auth Code Grant""**. Set **""Authorization URI""** to `https://accounts.spotify.com/authorize`,  **""Access Token URI""** to `https://accounts.spotify.com/api/token`, set client ID and secret, add scopes `user-read-playback-state` and `user-modify-playback-state`, and the three redirect URLs from the account linking details in your developer console for the skill
5. Deploy this webapp to somewhere that **supports HTTPS** (required for Alexa skills), for example [Render](https://render.com/)
6. Configure the skill to use an HTTPS endpoint of `https://<your-url>/<app-name>` where `app-name` is the name specified in `alexa.app('app-name')`, `connect` by default

### Adding a language
1. Check that the locale is supported by Amazon (see [list of supported locale codes](https://developer.amazon.com/docs/custom-skills/develop-skills-in-multiple-languages.html#h2-code-changes)) and get your locale code (e.g. `en-GB`)
2. Create a locale file in `locales/{LOCALE-CODE}.json` (see existing locales for formatting), please do not change the placeholder value names (in double curly brackets e.g. `{{name}}`)
3. Create a localised _interaction model_ used by Skill Builder in `skill/locales/{LOCALE-CODE}.json` (please only change the values for the samples for each intent and not the intent names or slots). The formatting should be similar to the other locales, but if more (or fewer) samples are required for the language add as many as possible (more samples mean better accuracy) (formatting done by [alexa-utterances](https://github.com/alexa-js/alexa-utterances/blob/master/README.md))
4. Add the locale to the list of locales in `skill/skill-i18n.js` (follow the format used by other locales)
5. Please also provide [publishing information](https://github.com/thorpelawrence/alexa-spotify-connect/issues/14#issuecomment-365770234) as a comment in your pull request so that it can be localised and published to Amazon in the new language
6. (Optional: _for deployment_) To create the JSON data required by Skill Builder run
```
$ node skill/skill-i18n.js
```

[![Deploy to Render](https://render.com/images/deploy-to-render-button.svg)](https://render.com/deploy)

## License
[MIT](LICENSE)

## Disclaimer
This product is not endorsed, certified or otherwise approved in any way by Spotify. Spotify is the registered trade mark of the Spotify Group.
"
153,sndrjhlncgr/README-Spotify-Status,Jinja,"

> # UKRAINE NEEDS YOUR HELP NOW!
>
> On 24 February 2022, Russian [President Vladimir Putin ordered an invasion of Ukraine by Russian Armed Forces](https://www.bbc.com/news/world-europe-60504334).
>
> Your support is urgently needed.
>
> - Donate to the volunteers. Here is the volunteer fund helping the Ukrainian army to provide all the necessary equipment:
>  https://bank.gov.ua/en/news/all/natsionalniy-bank-vidkriv-spetsrahunok-dlya-zboru-koshtiv-na-potrebi-armiyi or https://savelife.in.ua/en/donate/
> - Triple-check social media sources. Russian disinformation is attempting to coverup and distort the reality in Ukraine.
> - Help Ukrainian refugees who are fleeing Russian attacks and shellings: https://www.globalcitizen.org/en/content/ways-to-help-ukraine-conflict/
> -  Put pressure on your political representatives to provide help to Ukraine.
> -  Believe in the Ukrainian people, they will not surrender, they don't have another Ukraine.
>
> THANK YOU!

<br>

<div align=""center"">
<h1 >Spotify Status (README)</h1>
<p align=""center"">View what you listen at spotify.</p>
</div>



<p align=""center"">
   <a href=""https://github.com/sndrjhlncgr/README-Spotify-Status/issues""><img alt=""GitHub issues"" src=""https://img.shields.io/github/issues/sndrjhlncgr/README-Spotify-Status""></a>
   <a href=""https://github.com/sndrjhlncgr/README-Spotify-Status/network""><img alt=""GitHub forks"" src=""https://img.shields.io/github/forks/sndrjhlncgr/README-Spotify-Status""></a>
   <a href=""https://github.com/sndrjhlncgr/README-Spotify-Status/stargazers""><img alt=""GitHub stars"" src=""https://img.shields.io/github/stars/sndrjhlncgr/README-Spotify-Status""></a>
   <a href=""https://github.com/sndrjhlncgr/README-Spotify-Status/blob/master/LICENSE""><img alt=""GitHub license"" src=""https://img.shields.io/github/license/sndrjhlncgr/README-Spotify-Status""></a>
<p align=""center"">

![Image of Sandro Cagara](https://i.ibb.co/Tmjxnhs/README-Spotify-Status-v2.jpg)
<p align=""center"">
   <h3>Demo</h3>
   <img src=""https://readme-spotify-status-rho.vercel.app/api/run-spotify-status.py"" alt=""s4nx Playing Now"" width=""500"" />
<p align=""center"">

Spotify for Developers
-----

* Create a [Spotify for Developers](https://developer.spotify.com/dashboard/applications) account
* Get Credentials
    * `Client ID`
    * `Client Secret`
* Go to **Edit Settings**
* Find **Redirect URIs**:
    * Add `http://localhost/callback/`

Get the Refresh Token from Spotify
-----

* Navigate to the following URL:
  <br/>
  **Note**: copy your Client ID and paste in **{SPOTIFY_CLIENT_ID}** below.

```
https://accounts.spotify.com/authorize?client_id={PUT_YOUR_SPOTIFY_CLIENT_ID_HERE}&response_type=code&scope=user-read-currently-playing,user-read-recently-played&redirect_uri=http://localhost/callback/
```

* After logging in, get the {GET_THE_TOKEN} portion of: `http://localhost/callback/?code={GET_THE_TOKEN}`

* Create a string combining `{SPOTIFY_CLIENT_ID}:{SPOTIFY_CLIENT_SECRET}` (e.g. `5n7o4v5a3t7o5r2e3m1:5a8n7d3r4e2w5n8o2v3a7c5`) and encode into [Base64](https://www.base64encode.org/).

* Then run a [curl command](https://reqbin.com/curl):
```sh
curl -X POST -H ""Content-Type: application/x-www-form-urlencoded"" -H ""Authorization: Basic {YOUR_BASE64}"" -d ""grant_type=authorization_code&redirect_uri=http://localhost/callback/&code={YOUR_TOKEN}"" https://accounts.spotify.com/api/token
```

* Then save the Refresh token

Configure Vercel Application
------
* Fork this [Spotify Status](https://github.com/sndrjhlncgr/Spotify-Status)

* Register on [Vercel](https://vercel.com/)

* Create project linked to your forked respository
   <br/>
  **Note**:  set Framework Preset to 'Other'
  
  ![Vercel](https://i.ibb.co/sHhywHD/dasddas.jpg)

* Add Project Name and Environment Variables:
   Warning: Avoid white spaces!!
  - `SPOTIFY_REFRESH_TOKEN`
  - `SPOTIFY_CLIENT_ID`
  - `SPOTIFY_SECRET`
  - `SPOTIFY_BAR_COLOR` 
     - `Hex Color`
  - `SPOTIFY_BADGE_COLOR`
    - `Hex Color`
        
  ![Vercel](https://i.ibb.co/vv5z4yP/Untitled.png)
  
 * Deploy

Put this in your README.md
------
<h3>Small</h3>

<img src=""https://readme-spotify-status-rho.vercel.app/api/run-spotify-status.py"" alt=""s4nx Playing Now"" width=""350"" />

``` 
[<img src=""https://{DOMAIN_OF_YOUR_VERCEL_APP}/api/run-spotify-status"" alt=""Your alt what"" width=""350"" />](LINK_TO_YOUR_ACCOUNT)
```

<h3>Medium</h3>

<img src=""https://readme-spotify-status-rho.vercel.app/api/run-spotify-status.py"" alt=""s4nx Playing Now"" width=""400"" />

``` 
[<img src=""https://{DOMAIN_OF_YOUR_VERCEL_APP}/api/run-spotify-status"" alt=""Your alt what"" width=""400"" />](LINK_TO_YOUR_ACCOUNT)
```

<h3>Large</h3>

<img src=""https://readme-spotify-status-rho.vercel.app/api/run-spotify-status.py"" alt=""s4nx Playing Now"" width=""500"" />

``` 
[<img src=""https://{DOMAIN_OF_YOUR_VERCEL_APP}/api/run-spotify-status"" alt=""Your alt what"" width=""500"" />](LINK_TO_YOUR_ACCOUNT)
```

Contribution
------
Feel Free to contribute, PR are the most welcome :)

License
------
Copyright (c) 2020 Sandro Cagara | Spotify Status
"
154,amgxv/SpotifyAdBlocker-macOS,Shell,"# SpotifyAdBlocker-macOS

Script based on [Ruvelro/Spotihosts](https://github.com/ruvelro/Spotihosts) which adds a few lines to hosts file to block Spotify ads.

## Usage 

[Download the .dmg](https://github.com/amgxv/SpotifyAdBlocker-macOS/releases/download/v0.1/Spotyblock.dmg) file and open it like a normal macOS file, then Exterminate Ads.
![usagedmg](https://i.imgur.com/QOdoDUt.png)

#### or  

Clone this repo
`git clone https://github.com/amgxv/SpotifyAdBlocker-macOS.git`  
and run `spotyblock.sh` as root.
`sudo ./spotyblock.sh`

![usage](https://media.giphy.com/media/xThtaicJT8Q2dDW6Pe/giphy.gif)

### Easy Uninstaller

Run this at the Terminal : 
`sh <(curl -Ss https://raw.githubusercontent.com/amgxv/SpotifyAdBlocker-macOS/master/silent-uninstall.sh)`

Or clone the repo and run : 
`./uninstaller.sh`



"
155,citelao/Spotify-for-Alfred,PHP,"# Spotifious #
## a natural Spotify controller for Alfred ##

![The magical interface](include/screenshots/hero_shot.png)

So, you've heard of **Spotifious**, eh? *A natural Spotify controller for
Alfred*? Searches Spotify, controls your music, generally rocks?

It's built off a lot of other people's work—
[PHPFunk](https://github.com/phpfunk/alfred-spotify-controls) and
[David Ferguson](http://jdfwarrior.tumblr.com/) especially— and tries to match
the functionality of Alfred's integrated iTunes player. It's not perfect, but it does the job. And I think it's pretty cool.

## Features ##

A quick rundown of its coolness:

### A controller, not a workflow ###

Spotifious just *feels* fun to use, like a real plugin for Alfred, not a workflow. It
can do in-depth, album-scouring searches and gives you useful information even if something goes wrong. Filter by artist or album, search for specific tracks or just plain see what's playing. It's all there.

Not unlike the iTunes Mini Player.

### Alfred-like ###

Spotifious is also especially Alfred-like. Just start typing to scour Spotify's servers for music. Browse through artists and albums like nobody's business and drill down through Queen's huge anthologies with a snappy context-based search and filtering. Your frequent searches rise to the top, and your controls pop up with the letter `c`.

### Smart ###

Spotifious uses Packal to make sure you always have the latest version. It gives you a heads-up about what's going on with Spotify *the moment you start it*. And don't worry about errors— we'll handle those. All you have to do is choose how you want to pop it up on screen.

## Download & Install ##

Latest version: [v0.13.9](https://github.com/citelao/Spotify-for-Alfred/archive/master.zip) | Latest dev build: [v0.13.9](https://github.com/citelao/Spotify-for-Alfred/archive/dev.zip)

An in-depth [installation guide](http://ben.stolovitz.com/Spotify-for-Alfred/download/) is available on the Spotifious website.

1. [Download](https://github.com/citelao/Spotify-for-Alfred/archive/master.zip)
this repository.
2. Open `Spotifious.alfredworkflow` in the `dist` folder by double-clicking it or dragging it into
Alfred.
3. Double-click the first thingy marked `Hotkey`.
4. Click the textfield labeled `Hotkey` and press `^⌘⏎`.
5. Click `Save` to store the binding.
6. Bind the other hotkeys as you wish. Their actions are visible in the `Text` field, under `Argument`.
7. Pop up Spotifious with the key command you set— I would have `^⌘⏎`.
8. Follow the instructions on the set-up menu.
	1. You'll be asked to choose your country (for better search results— you can opt out).
	2. You'll create a Spotify application (or not, you can opt out).
	3. You'll link the new app to Spotifious.
10. Continue on with your merry day— but now with Spotifious.

![A visual install guide](include/screenshots/install.png)

## How to Use ##

So let's assume you've downloaded and installed the workflow. Now what?

1. Press `^⌘⏎`.

Good! You should briefly see a loading entry, then the main menu:

![Loading...](include/screenshots/loading.png)
![Main Menu](include/screenshots/main_menu.png)

You can action the song title (press `⏎`) to play or pause the song, action 
the album or artist to search for that album or artist, or just start typing to 
search for cool music.

![Some cool screenshots](include/screenshots/compilation.png)

Once you've searched for something, you can continue to browse albums and arists through Spotifious. Actioning an artist will bring up a list of their albums, and actioning an album will bring up the track list.

If you're looking through a really long album or a particularly prodigious artist, you can also narrow your search by typing a little more— Spotifious will search for results within the album or artist.

**Note:** You can always leave a menu and go back just by pressing `⌫`.

You can access a small controls menu by typing `c` at the main menu.

![A preview of the controls menu](include/screenshots/controls.png)

You can change your settings by typing `s` at the main menu.

![The settings menu](include/screenshots/settings.png)

## Acknowledgements ##

A lot of people helped out on this:

- **vdesabou** and I trade ideas a ton
- **PHPfunk** and his PHP Alfred workflow inspired much of `OhAlfred`
- **David Ferguson** helped with some iffy Alfred glitches
- **jwilsson**'s [Spotify PHP web API](http://jwilsson.github.io/spotify-web-api-php/).
- a slightly modified version of [Entypo](http://www.entypo.com/) icon font face for icons.
- and many other people mentioned in the code.

Thanks to everyone who helped, and thanks to everyone who uses my work!
Oh, and thanks for reading this whole README. I hope you enjoy Spotifious!

## Development ##

You must install dependencies manually. Install 
[Composer](https://getcomposer.org/) and then run `make init`. Then you can
proceed with development! (if you do not want to do a global install, run
`php composer.phar install` from this directory)

Command line development for Alfred 3 is currently not working, since we 
depend on several environment variables. Eventually, if you are developing for 
Alfred version 3 and want to run these files from
the command line (`php -f main.php -- ""args""`), you will need to run in debug
mode : `DEBUG=true php -f main.php -- ""args""`.

### Deployment ###

1. Bump version here
2. Update `CHANGELOG`
3. Update `.alfredworkflow` version
4. Update Alfred forum
5. Update Packal
6. Update GitHub Pages site

## TODO ##

- Allow `⎇`, `^`, and `⌘` to function as modifiers (Open in Spotify, other things?).
- More in-depth Spotify control (radio, queuing, playlists)
- Make main menu links go directly to menus.

## Changelog ##

This project uses pseudo-SemVer. It will use SemVer when we hit v1.0.0.

See `CHANGELOG.md`.

## License ##

This code is licensed as written in the LICENSE.md file.
"
156,spotify/SPTDataLoader,Objective-C,"<img alt=""SPTDataLoader"" src=""banner@2x.png"" width=""100%"" max-width=""888"">

[![Coverage Status](https://codecov.io/github/spotify/SPTDataLoader/coverage.svg?branch=master)](https://codecov.io/github/spotify/SPTDataLoader?branch=master)
[![Documentation](https://img.shields.io/cocoapods/metrics/doc-percent/SPTDataLoader.svg)](http://cocoadocs.org/docsets/SPTDataLoader/)
[![License](https://img.shields.io/github/license/spotify/SPTDataLoader.svg)](LICENSE)
[![CocoaPods](https://img.shields.io/cocoapods/v/SPTDataLoader.svg)](https://cocoapods.org/pods/SPTDataLoader)
[![Carthage compatible](https://img.shields.io/badge/Carthage-compatible-4BC51D.svg?style=flat)](https://github.com/Carthage/Carthage)
[![Spotify FOSS Slack](https://slackin.spotify.com/badge.svg)](https://slackin.spotify.com)
[![Readme Score](http://readme-score-api.herokuapp.com/score.svg?url=https://github.com/spotify/sptdataloader)](http://clayallsopp.github.io/readme-score?url=https://github.com/spotify/sptdataloader)

Authentication and back-off logic is a pain, let's do it once and forget about it! This is a library that allows you to centralise this logic and forget about the ugly parts of making HTTP requests.

- [x] 📱 iOS 10.0+
- [x] 💻 OS X 10.12+
- [x] ⌚️ watchOS 3.0+
- [x] 📺 tvOS 10.0+

Yet another networking library? Well apart from some unique benefits such as built-in rate limiting and powerful request authentication, a significant benefit for you is that any tagged version has been tested in production. We only tag a new release once it’s been used for two weeks by the Spotify app (which has millions of active users a day). As such you can be sure tagged versions are as stable as possible.

As for Spotify, we wanted a light networking library that we had full control over in order to act fast in squashing bugs, and carefully select the feature we needed and were capable of supporting. The architecture also plays very nicely into our MVVM and view aggregation service architectures at Spotify by tying the lifetime of a request to the view.

## Architecture :triangular_ruler:
`SPTDataLoader` is designed as an HTTP stack with 3 additional layers on top of `NSURLSession`.

- **The Application level**, which controls the rate limiting and back-off policies per service, respecting the “Retry-After” header and knowing when or not it should retry the request.
- **The User level**, which controls the authentication of the HTTP requests.
- **The View level**, which allows automatic cancellation of requests the view has made upon deallocation.

### Authentication
The authentication in this case is abstract, allowing the creator of the SPTDataLoaderFactory to define their own semantics for token acquisition and injection. It allows for asynchronous token acquisition if the token is invalid that seamlessly integrates with the HTTP request-response pattern.

### Back-off policy
The data loader service allows rate limiting of URLs to be set explicitly or to be determined by the server using the “Retry-After” semantic. It allows back-off retrying by using a jittered exponential backoff to prevent the thundering hordes creating a request storm after a predictable exponential period has expired.

## Installation :building_construction:
SPTDataLoader can be installed in a variety of ways, either as a dynamic framework, a static library, or through a dependency manager such as CocoaPods or Carthage.

### Manually
#### Dynamic Framework
Drag the [framework](https://github.com/spotify/SPTDataLoader/releases) into the “Frameworks, Libraries, and Embedded Content” area in the “General” section of the target.
#### Static Library
Drag `SPTDataLoader.xcodeproj` into your App’s Xcode project and link your app with the library in the “Build Phases” section of the target.

### CocoaPods
To integrate SPTDataLoader into your project using [CocoaPods](http://cocoapods.org), add it to your `Podfile`:
```ruby
pod 'SPTDataLoader', '~> 2.2'
```

### Carthage
To integrate SPTDataLoader into your project using [Carthage](https://github.com/Carthage/Carthage), add it to your `Cartfile`:
```ogdl
github ""spotify/SPTDataLoader"" ~> 2.2
```

## Usage example :eyes:
For an example of this framework's usage, see the demo application `SPTDataLoaderDemo` in `SPTDataLoader.xcodeproj`. Just follow the instructions in [`ClientKeys.h`](demo/ClientKeys.h).

### Creating the SPTDataLoaderService
In your app you should only have 1 instance of SPTDataLoaderService, ideally you would construct this in something similar to an AppDelegate. It takes in a rate limiter, resolver, user agent and an array of NSURLProtocols. The rate limiter allows objects outside the service to change the rate limiting for different endpoints, the resolver allows overriding of host names, and the array of NSURLProtocols allows support for protocols other than http/s.
```objc
SPTDataLoaderRateLimiter *rateLimiter = [SPTDataLoaderRateLimiter rateLimiterWithDefaultRequestsPerSecond:10.0];
SPTDataLoaderResolver *resolver = [SPTDataLoaderResolver new];
self.service = [SPTDataLoaderService dataLoaderServiceWithUserAgent:@""Spotify-Demo""
                                                        rateLimiter:rateLimiter
                                                           resolver:resolver
                                           customURLProtocolClasses:nil];
```
Note that you can provide all these as nils if you are so inclined, it may be for the best to use nils until you identify a need for these different configuration options.

### Defining your own SPTDataLoaderAuthoriser
If you don't need to authenticate your requests you can skip this. In order to authenticate your requests against a backend, you are required to create an implementation of the SPTDataLoaderAuthoriser, the demo project has an example in its SPTDataLoaderAuthoriserOAuth class. In this example we are checking if the request is for the domain which we are attempting to authenticate for, and then performing the authentication (in this case we are injecting an Auth Token into the HTTP header). This interface is asynchronous to allow you to perform token refreshes while a request is in flight in order to hold it until it is ready to be authenticated. Once you have a valid token you can call the delegate (which in this case will be the factory) in order to inform it that the request has been authenticated. Alternatively if you are unable to authenticate the request tell the delegate about the error.

### Creating the SPTDataLoaderFactory
Your app should ideally only create an SPTDataLoaderFactory once your user has logged in or if you require no authentication for your calls. The factory controls the authorisation of the different requests against authoriser objects that you construct.
```objc
id<SPTDataLoaderAuthoriser> oauthAuthoriser = [[SPTDataLoaderAuthoriserOAuth alloc] initWithDictionary:oauthTokenDictionary];
self.oauthFactory = [self.service createDataLoaderFactoryWithAuthorisers:@[ oauthAuthoriser ]];
```
What we are doing here is using an implementation of an authoriser to funnel all the requests created by this factory into these authorisers.

### Creating the SPTDataLoader
Your app should create an SPTDataLoader object per view that wants to make requests (e.g. it is best not too share these between classes). This is so when your view model is deallocated the requests made by your view model will also be cancelled.
```objc
SPTDataLoader *dataLoader = [self.oauthFactory createDataLoader];
```
Note that this data loader will only authorise requests that are made available by the authorisers supplied to its factory.

### Creating the SPTDataLoaderRequest
In order to create a request the only information you will need is the URL and where the request came from. For more advanced requests see the properties on SPTDataLoaderRequest which let you change the method, timeouts, retries and whether to stream the results.
```objc
SPTDataLoaderRequest *request = [SPTDataLoaderRequest requestWithURL:meURL
                                                    sourceIdentifier:@""playlists""];
[self.dataLoader performRequest:request];
```
After you have made the request your data loader will call its delegate regarding results of the requests.

### Handling Streamed Requests
Sometimes you will want to process HTTP requests as they come in packet by packet rather than receive a large callback at the end, this works better for memory and certain forms of media. For Spotify's purpose, it works for streaming MP3 previews of our songs. An example of using the streaming API:
```objc
void AudioSampleListener(void *, AudioFileStreamID, AudioFileStreamPropertyID, UInt32 *);
void AudioSampleProcessor(void *, UInt32, UInt32, const void *, AudioStreamPacketDescription *);

- (void)load
{
    NSURL *URL = [NSURL URLWithString:@""http://i.spotify.com/mp3_preview""];
    SPTDataLoaderRequest *request = [SPTDataLoaderRequest requestWithURL:URL sourceIdentifier:@""preview""];
    request.chunks = YES;
    [self.dataLoader performRequest:request];
}

- (void)dataLoader:(SPTDataLoader *)dataLoader
didReceiveDataChunk:(NSData *)data
       forResponse:(SPTDataLoaderResponse *)response
{
    [data enumerateByteRangesUsingBlock:^(const void *bytes, NSRange byteRange, BOOL *stop) {
        AudioFileStreamParseBytes(_audioFileStream, byteRange.length, bytes, 0);
    }];
}

- (void)dataLoader:(SPTDataLoader *)dataLoader didReceiveInitialResponse:(SPTDataLoaderResponse *)response
{
    AudioFileStreamOpen((__bridge void *)self,
                        AudioSampleListener,
                        AudioSampleProcessor,
                        kAudioFileMP3Type,
                        &_audioFileStream);
}

- (BOOL)dataLoaderShouldSupportChunks:(SPTDataLoader *)dataLoader
{
    return YES;
}
```
Be sure to render YES in your delegate to tell the data loader that you support chunks, and to set the requests chunks property to YES.

### Rate limiting specific endpoints
If you specify a rate limiter in your service, you can give it a default requests per second metric which it applies to all requests coming out your app. (See “[Creating the `SPTDataLoaderService`](#creating-the-sptdataloaderservice)”). However, you can also specify rate limits for specific HTTP endpoints, which may be useful if you want to forcefully control the rate at which clients can make requests to a backend that does large amounts of work.
```objc
SPTDataLoaderRateLimiter *rateLimiter = [SPTDataLoaderRateLimiter rateLimiterWithDefaultRequestsPerSecond:10.0];
NSURL *URL = [NSURL URLWithString:@""http://www.spotify.com/thing/thing""];
[rateLimiter setRequestsPerSecond:1 forURL:URL];
```
It should be noted that when you set the requests per second for a URL, it takes the host, and the first component of the URL and rate limits everything that fits that description.

### Switching Hosts for all requests
The SPTDataLoaderService takes in a resolver object as one of its arguments. If you choose to make this non-nil, then you can switch the hosts of different requests as they come in. At Spotify we have a number of DNS matches our requests can go through, giving us backups and failsafes in case one of these machines go down. These operations happen in the SPTDataLoaderResolver, where you can specify a number of alternative addresses for the host. An example of Spotify specifying alternative endpoints for its hosts could be:
```objc
SPTDataLoaderResolver *resolver = [SPTDataLoaderResolver new];
NSArray *alternativeAddresses = @[ @""spotify.com"",
                                   @""backup.spotify.com"",
                                   @""backup2.spotify.com"",
                                   @""backup3.spotify.com"",
                                   @""192.168.0.1"",
                                   @""final.spotify.com"" ];
[resolver setAddresses:alternativeAddresses forHost:@""spotify.com""];
```
This allows any request made to spotify.com to use any one of these other addresses (in this order) if spotify.com becomes unreachable.

### Using the jittered exponential timer
This library contains a class called SPTDataLoaderExponentialTimer which it uses internally to perform backoffs with retries. The reason it is jittered is to prevent the ""predictable thundering hoardes"" from hammering our services if one of them happens to go down. In order to make use of this class, there are some do's and don'ts. For example, do not initialise the class like so:
```objc
SPTDataLoaderExponentialTimer *timer = [SPTDataLoaderExponentialTimer exponentialTimerWithInitialTime:0.0
                                                                                              maxTime:10.0];
NSTimeInterval backoffTime = 0.0;
for (int i = 0; i < 1000; ++i) {
    backoffTime = timer.timeIntervalAndCalculateNext;
}
```
This will result in the backoffTime remaining at 0. Why? Because 0.0 multiplied by an exponential number is still 0. A good initial time might be 0.5 or 1.0 seconds. You will also notice that the backoffTime will get further away from the raw exponential time the more times you calculate the next interval:
```objc
SPTDataLoaderExponentialTimer *timer = [SPTDataLoaderExponentialTimer exponentialTimerWithInitialTime:1.0
                                                                                              maxTime:1000.0];
NSTimeInterval backoffTime = 0.0;
for (int i = 0; i < 1000; ++i) {
    backoffTime = timer.timeIntervalAndCalculateNext;
}
```
This will result in a backoffTime that has drifted far away from its vanilla exponential calculation. Why? Because we add a random jitter to the calculations in order to prevent clients from connecting at the same time, in order to spread the load out evenly when experiencing a reconnect storm. The jitter gets greater along with the exponent.

### Consumption observation
SPTDataLoaderService allows you to add a consumption observer whose purpose is to monitor the data consumption of the service for both uploads and downloads. This object must conform to the SPTDataLoaderConsumptionObserver protocol. This is quite easy considering it is a single method like so:
```objc
- (void)load
{
    [self.service addConsumptionObserver:self];
}

- (void)unload
{
    [self.service removeConsumptionObserver:self];
}

- (void)endedRequestWithResponse:(SPTDataLoaderResponse *)response
                 bytesDownloaded:(int)bytesDownloaded
                   bytesUploaded:(int)bytesUploaded
{
    NSLog(@""Bytes Downloaded: %d"", bytesDownloaded);
    NSLog(@""Bytes Uploaded: %d"", bytesUploaded);
}
```
Also note that this isn't just the payload, it also includes the headers.

### Creating a custom authoriser
The SPTDataLoader architecture is designed to centralise authentication around the user level (in this case represented by the factory). In order to do that you must inject an authoriser you made yourself into the factory when it is created. An authoriser in most cases will be injecting an Authorisation header into any request it wants to authorise. An example below shows how a standard authoriser might be constructed for an OAuth flow.
```objc
@synthesize delegate = _delegate;

- (NSString *)identifier
{
    return @""OAuth"";
}

- (BOOL)requestRequiresAuthorisation:(SPTDataLoaderRequest *)request
{
    // Here we check the hostname to see if it one of the hostnames we authorise against
    // It is also advisable to check whether we are using HTTPS, if we are not we should not inject our Authorisation
    // header in order to keep it secret from prying eyes
    return [request.URL.host isEqualToString:@""myauth.com""] && [request.URL.scheme isEqualToString:@""https""];
}

- (void)authoriseRequest:(SPTDataLoaderRequest *)request
{
    [request addValue:@""My Token"" forHeader:@""Authorization""];
    [self.delegate dataLoaderAuthoriser:self authorisedRequest:request];
}

- (void)requestFailedAuthorisation:(SPTDataLoaderRequest *)request response:(SPTDataLoaderResponse *)response
{
    // This tells us that the server returned a 400 error code indicating that the authorisation did not work
    // Commonly this means you should attempt to get another authorisation token
    // Or the response object should be inspected for additional information from the backend
}

- (void)refresh
{
    // Forces a refresh of the authorisation token
}
```
As you can see all we are doing here is playing with the headers. It should be noted that if you receive an authoriseRequest: call the rest of the request will not execute until you have either sent the delegate a signal telling it the request has been authorised or failed to be authorised.

### Swift overlay
Additional APIs that enhance usage within Swift applications are available through the `SPTDataLoaderSwift` library.
```swift
// Creating a DataLoader instance
let dataLoader = dataLoaderFactory.makeDataLoader(/* optional */responseQueue: myCustomQueue)

// Creating a Request instance -- all functions can be chained
let request = dataLoader.request(modelURL, sourceIdentifier: ""model-page"")

// Modifying the request properties
request.modify { request in
    request.body = modelData
    request.method = .patch
    request.addValue(""application/json"", forHeader: ""Accept"")
}

// Adding a response validator
request.validate { response in
    guard response.statusCode.rawValue == 200 else {
        throw ValidationError.badStatus(code: response.statusCode.rawValue)
    }
}

// Adding a response serializer (and executing the request)
request.responseDecodable { response in
    modelResultHandler(response.result)
}

// Cancelling the request
request.cancel()
```
You can also define serializers to handle custom data types:
```swift
struct ProtobufResponseSerializer<Message: SwiftProtobuf.Message>: ResponseSerializer {
    func serialize(response: SPTDataLoaderResponse) throws -> Message {
        guard response.error == nil else {
            throw response.error.unsafelyUnwrapped
        }

        guard let data = response.body else {
            throw ResponseSerializationError.dataNotFound
        }

        return try Message(serializedData: data)
    }
}

let modelSerializer = ProtobufResponseSerializer<MyCustomModel>()
request.responseSerializable(serializer: modelSerializer) { response in
    modelResultHandler(response.result)
}
```

## Background story :book:
At Spotify we have begun moving to a decentralised HTTP architecture, and in doing so have had some growing pains. Initially we had a data loader that would attempt to refresh the access token whenever it became invalid, but we immediately learned this was very hard to keep track of. We needed some way of injecting this authorisation data automatically into a HTTP request that didn't require our features to do any more heavy lifting than they were currently doing.

Thus we came up with a way to elegantly inject tokens in a Just-in-time manner for requests that require them. We also wanted to learn from our mistakes with our proprietary protocol, and bake in back-off policies early to avoid us DDOSing our own backends with huge amounts of eronious requests.

## Documentation :books:
See the [`SPTDataLoader` documentation](http://cocoadocs.org/docsets/SPTDataLoader) on [CocoaDocs.org](http://cocoadocs.org) for the full documentation.

You can also add it to [Dash](https://kapeli.com/dash) if you want to, using the following Dash feed:
```
dash-feed://http%3A%2F%2Fcocoadocs.org%2Fdocsets%2FSPTDataLoader%2FSPTDataLoader.xml
```

## Contributing :mailbox_with_mail:
Contributions are welcomed, have a look at the [CONTRIBUTING.md](CONTRIBUTING.md) document for more information.

## License :memo:
The project is available under the [Apache 2.0](http://www.apache.org/licenses/LICENSE-2.0) license.
"
157,jonnyk20/spotify-node-react-starter-kit,JavaScript,"# spotify-api-intro
This Repo is the result of a tutorial that teaches how to use Spotify's API with react.
It's a siple app that allos users to see what song they currently have playing on Spotify.
There are two parts to it, the auth-server, and the client. 

## Getting Statrted

### 1) Create an App
- Visit https://developer.spotify.com/ 
- Log in and create an app
- Enter http//localhost:8888/callback as the redirect uri
- Save your changes
- Copy down the following: Redirect uri, client id, client secret


### 2)  Start Auth Server
- Navigate to the auth-server directory `cd auth-server`
- Install the dependencies `npm install`
- Paste in the redirect uri, client id, and client secret you copied in step 1
- Run the Server `node authorization_code/app.js`

### 3)  Start Client
- Navigate to the auth-server directory `cd client`
- Install the dependencies `npm install`
- Run the Server `npm start`

### 4)  Use the App
- Make sure you have a song playing (or paused) on a Spotify app
- Visit http://localhost:3000
- Click 'Log in with Spotify' and log in
- Click the 'Check Now Playing' Button
- Your currently playing song's name and album art should appear

"
158,sigma67/spotifyplaylist_to_ytmusic,Python,"# Transfer a Spotify Playlist to YouTube Music

A simple command line script to clone a Spotify playlist to YouTube Music.

- Transfer a single Spotify playlist
- Transfer all playlists for a Spotify user


## Requirements

- Python 3.6+ - https://www.python.org
- Python extensions: `pip install -U -r requirements`
- Have made at least one playlist manually on YouTube Music

## Setup

1. Initially you should create a new `settings.ini` containing your Spotify credentials.

Simply copy `settings.ini.example` to a new file `settings.ini`:

```zsh
$ cp settings.ini.example settings.ini
```

2. Generate a new app at https://developer.spotify.com/my-applications

3. Fill in your `client_id` and `client_secret` from your Spotify app

4. For YouTube Music, open a console in the source code folder and run

`python Setup.py youtube`

5. Open your browser and copy your request headers according to the instructions at https://ytmusicapi.readthedocs.io/en/latest/setup.html. 
   Paste them into the terminal to proceed.

This Setup.py procedure stores all credentials locally in the file `settings.ini`.

## Transfer a playlist

After you've created the settings file, you can simply run the script from the command line using:

`python YouTube.py <spotifylink>`

where `<spotifylink>` is a link like https://open.spotify.com/user/edmsauce/playlist/3yGp845Tz2duWCORALQHFO
Alternatively you can also **use a file name** in place of a spotify link. The file should contain one song per line.

The script will log its progress and output songs that were not found in YouTube Music to **noresults.txt**.

## Transfer all playlists of a Spotify user

For migration purposes, it is possible to transfer all public playlists of a user by using the Spotify user's ID (unique username).

`python YouTube.py --all <spotifyuserid>`


## Command line options

There are some additional command line options for setting the playlist name and determining whether it's public or not. To view them, run

`> python YouTube.py -h`

Arguments:

```
positional arguments:
  playlist              Provide a playlist Spotify link. Alternatively,
                        provide a text file (one song per line)

optional arguments:
  -h, --help            show this help message and exit
  -u UPDATE, --update UPDATE
                        Delete all entries in the provided YouTube Music
                        playlist and update the playlist with entries from the
                        Spotify playlist.
  -n NAME, --name NAME  Provide a name for the YouTube Music playlist.
                        Default: Spotify playlist name
  -i INFO, --info INFO  Provide description information for the YouTube
                        Music Playlist. Default: Spotify playlist description
  -d, --date            Append the current date to the playlist name
  -p, --public          Make the playlist public. Default: private
  -r, --remove          Remove playlists with specified regex pattern.
  -a, --all             Transfer all public playlists of the specified user
                        (Spotify User ID).
```
"
159,oguz3/spotify-web-player,JavaScript,"# Spotify Web Player Clone

A front-end clone project of the Spotify Web Player. The project was created using React. This is my first big React.js project.

## Preview Link
- [Spotify Web Player Clone](https://spotify-clone-oguz3.web.app/)

## Tech/Framework Used
* React
* CSS"
160,cyber-wolve/spotify,JavaScript,"I will add read me wait
"
161,danielfm/smudge,Emacs Lisp,"# Smudge

**Control Spotify app from within Emacs.**

[![asciicast](https://asciinema.org/a/218654.svg)](https://asciinema.org/a/218654)

Smudge allows you to control the Spotify application from within your favorite text
editor. If you are running on Mac OS X or Linux, you can control the locally running instance. If
you are running on any platform with a network connection (including Windows - and even headless!)
and have a Spotify premium subscription, you can control an instance of Spotify via the Spotify
Connect feature.

## Features

* Spotify client integration for GNU/Linux (via D-Bus) and OS X (via AppleScript)
* Device playback display & selection using the Spotify Connect API (requires premium)
* Communicates with the Spotify API via Oauth2
* Displays the current track in mode line or title bar
* Create playlists (public or private)
* Browse the Spotify featured playlists, your own playlists, and their tracks
* Search for tracks and playlists that match the given keywords
* Easily control basic Spotify player features like, play/pause, previous,
  next, shuffle, and repeat with the Smudge Remote minor mode

## Installation

(Requires Emacs 27.1+)

`package.el` is the built-in package manager in Emacs.

Smudge is available on the two major package.el community maintained repos - MELPA Stable and MELPA.

You can install Smudge with the following command:

M-x package-install [RET] smudge [RET]

To manually install Smudge instead, just clone this project somewhere in your
disk, add that directory in the `load-path`, and require the `smudge` module:

````el
(add-to-list 'load-path ""<smudge-dir>"")
(require 'smudge)
````

## Configuration

````el
;; Settings
(setq smudge-oauth2-client-secret ""<spotify-app-client-secret>"")
(setq smudge-oauth2-client-id ""<spotify-app-client-id>"")
(define-key smudge-mode-map (kbd ""C-c ."") 'smudge-command-map)
````

That keymap prefix is just a suggestion, following the conventions suggested for minor modes as
defined in the Emacs manual [Key Binding
Conventions](https://www.gnu.org/software/emacs/manual/html_node/elisp/Key-Binding-Conventions.html#Key-Binding-Conventions). Previous
versions of this package used ""M-p""

In order to get the the client ID and client secret, you need to create
[a Spotify app](https://developer.spotify.com/my-applications), specifying
<http://localhost:8080/smudge-api-callback> as the redirect URI (or whichever port you have specified via customize).
The OAuth2 exchange is handled by `simple-httpd`. If you are not already using this package for something else, you should not need to customize this port. Otherwise, you'll want to set it to whatever port you are running on.

To use the ""Spotify Connect"" transport (vs. controlling only your local instance - though you can
also control your local instance as well), set `smudge-transport` to `'connect` as follows. This
feature requires a Spotify premium subscription.

````el
(setq smudge-transport 'connect)
````

### Creating The Spotify App

Go to [Create an Application](https://developer.spotify.com/my-applications/#!/applications/create)
and give your application a name and a description:

![Creating a Spotify App 1/3](./img/spotify-app-01.png)

After creating the new app, click the **Edit Settings**, scroll down a little bit,
type <http://localhost:8080/smudge-api-callback> as the Redirect URI for the
application, and click **Add**. Then, hit **Save**.

![Creating a Spotify App 2/3](./img/spotify-app-02.png)

At this point, the client ID and the client secret are available, so set those values to
`smudge-oauth2-client-id` and `smudge-oauth2-client-secret`, respectively.

![Creating a Spotify App 3/3](./img/spotify-app-03.png)

## Usage

### Remote Minor Mode

Whenever you enable the `global-smudge-remote-mode` minor mode you get the following
key bindings:

| Key                  | Function                               | Description                                |
|:---------------------|:---------------------------------------|:-------------------------------------------|
| <kbd>C-c . M-s</kbd> | `smudge-controller-toggle-shuffle`     | Turn shuffle on/off [1]                    |
| <kbd>C-c . M-r</kbd> | `smudge-controller-toggle-repeat`      | Turn repeat on/off [1]                     |
| <kbd>C-c . M-p</kbd> | `smudge-controller-toggle-play`        | Play/pause                                 |
| <kbd>C-c . M-f</kbd> | `smudge-controller-next-track`         | Next track                                 |
| <kbd>C-c . M-b</kbd> | `smudge-controller-previous-track`     | Previous track                             |
| <kbd>C-c . p m</kbd> | `smudge-my-playlists`                  | Show your playlists                        |
| <kbd>C-c . p f</kbd> | `smudge-featured-playlists`            | Show the featured playlists                |
| <kbd>C-c . p s</kbd> | `smudge-playlist-search`               | Search for playlists                       |
| <kbd>C-c . p u</kbd> | `smudge-user-playlists`                | Show playlists for the given user          |
| <kbd>C-c . p c</kbd> | `smudge-create-playlist`               | Create a new playlist                      |
| <kbd>C-c . t r</kbd> | `smudge-recently-played`               | List of recently played tracks             |
| <kbd>C-c . t s</kbd> | `smudge-track-search`                  | Search for tracks                          |
| <kbd>C-c . v u</kbd> | `smudge-controller-volume-up`          | Increase the volume [2]                    |
| <kbd>C-c . v d</kbd> | `smudge-controller-volume-down`        | Decrease the volume [2]                    |
| <kbd>C-c . v m</kbd> | `smudge-controller-volume-mute-unmute` | Alternate the volume between 0 and 100 [2] |
| <kbd>C-c . d</kbd>   | `smudge-select-device`                 | Select a playback device [2]               |

The current song being played by Smudge is displayed in the mode
line along with the player status (playing, paused). The interval in which the
player status is updated can be configured via the
`smudge-player-status-refresh-interval` variable:

````el
;; Updates the player status every 10 seconds (default is 5)
;; Note: Set 0 to disable this feature, and avoid values between 1 and 4 when
;; using the 'connect transport.
(setq smudge-player-status-refresh-interval 10)
````

[1] No proper support for this in D-Bus implementation for GNU/Linux  
[2] This feature uses Spotify Connect and requires a premium subscription

Users of the package hydra may find the code below more convenient for managing
Spotify:

````el
;; A hydra for controlling spotify.
(defhydra hydra-spotify (:hint nil)
    ""
^Search^                  ^Control^               ^Manage^
^^^^^^^^-----------------------------------------------------------------
_t_: Track               _SPC_: Play/Pause        _+_: Volume up
_m_: My Playlists        _n_  : Next Track        _-_: Volume down
_f_: Featured Playlists  _p_  : Previous Track    _x_: Mute
_u_: User Playlists      _r_  : Repeat            _d_: Device
^^                       _s_  : Shuffle           _q_: Quit
""
    (""t"" smudge-track-search :exit t)
    (""m"" smudge-my-playlists :exit t)
    (""f"" smudge-featured-playlists :exit t)
    (""u"" smudge-user-playlists :exit t)
    (""SPC"" smudge-controller-toggle-play :exit nil)
    (""n"" smudge-controller-next-track :exit nil)
    (""p"" smudge-controller-previous-track :exit nil)
    (""r"" smudge-controller-toggle-repeat :exit nil)
    (""s"" smudge-controller-toggle-shuffle :exit nil)
    (""+"" smudge-controller-volume-up :exit nil)
    (""-"" smudge-controller-volume-down :exit nil)
    (""x"" smudge-controller-volume-mute-unmute :exit nil)
    (""d"" smudge-select-device :exit nil)
    (""q"" quit-window ""quit"" :color blue))

(bind-key ""a"" #'hydra-spotify/body some-map)
````

#### Customizing The Player Status

The information displayed in the player status can be customized by setting the
desired format in `smudge-player-status-format`. The following placeholders
are supported:

| Symbol | Description                | Example                        |
|:------:|:---------------------------|:-------------------------------|
| `%u`   | Track URI                  | `spotify:track:<id>`           |
| `%a`   | Artist name (truncated)    | `Pink Floyd`                   |
| `%t`   | Track name (truncated)     | `Us and Them`                  |
| `%n`   | Track #                    | `7`                            |
| `%l`   | Track duration, in minutes | `7:49`                         |
| `%r`   | Player repeat status       | `R`, `-`                       |
| `%s`   | Player shuffle status      | `S`, `-`                       |
| `%p`   | Player playing status      | `Playing`, `Paused`, `Stopped` |

The default format is `""[%p: %a - %t ◷ %l %r%s]""`.

The number of characters to be shown in truncated fields can be configured via
the `smudge-player-status-truncate-length` variable.

````el
(setq smudge-player-status-truncate-length 10) ; default: 15
````

The text indicator for each of the following player statuses can be configured
via their corresponding variables:

| Player State  | Variable                                   | Default Value |
|:--------------|:-------------------------------------------|:-------------:|
| Playing       | `smudge-player-status-playing-text`       | `""Playing""`   |
| Paused        | `smudge-player-status-paused-text`        | `""Paused""`    |
| Stopped       | `smudge-player-status-stopped-text`       | `""Stopped""`   |
| Repeating On  | `smudge-player-status-repeating-text`     | `""R""`         |
| Repeating Off | `smudge-player-status-not-repeating-text` | `""-""`         |
| Shuffling On  | `smudge-player-status-shuffling-text`     | `""S""`         |
| Shuffling Off | `smudge-player-status-not-shuffling-text` | `""-""`         |

#### Global Remote Mode

This mode can be enabled globally by running
<kbd>M-x global-smudge-remote-mode</kbd>.

### Searching For Tracks

To search for tracks, run <kbd>M-x smudge-track-search</kbd> and type in your
query. The results will be displayed in a separate buffer with the following
key bindings:

| Key              | Description                                                      |
|:-----------------|:-----------------------------------------------------------------|
| <kbd>a</kbd>     | Adds track to a playlist                                         |
| <kbd>l</kbd>     | Loads the next page of results (pagination)                      |
| <kbd>g</kbd>     | Clears the results and reloads the first page of results         |
| <kbd>M-RET</kbd> | Plays the track under the cursor in the context of its album [1] |

[1] D-Bus implementation for GNU/Linux do not support passing the context, so
only the track under the cursor will be played

The resulting buffer loads the `global-smudge-remote-mode` by default.

**Tip:** In order to customize the number of items fetched per page, just change
the variable `smudge-api-search-limit`:

````el
;; Do not use values larger than 50 for better compatibility across endpoints
(setq smudge-api-search-limit 50)
````

### Playing a Spotify URI

To ask Smudge to play a resource by URI, run
<kbd>M-x smudge-play-uri</kbd> and enter the resource URI.

### Creating Playlists

To create new playlists, run <kbd>M-x smudge-create-playlist</kbd> and follow
the prompts.

Currently it's not possible to add tracks to a playlist you own, or to remove
tracks from them.

### Searching For Playlists

To return the playlists for the current user, run
<kbd>M-x smudge-my-playlists</kbd>, or
<kbd>M-x smudge-user-playlists</kbd> to list the public playlists for some
given user. To search playlists that match the given search criteria, run
<kbd>M-x smudge-playlist-search CRITERIA</kbd>. Also, run
<kbd>M-x smudge-featured-playlists</kbd> in order to browse the featured
playlists from Spotify en_US.

Change the following variables in order to customize the locale and region for
the featured playlists endpoint:

````el
;; Spanish (Mexico)
(setq smudge-api-locale ""es_MX"")
(setq smudge-api-country ""MX"")
````

All these commands will display results in a separate buffer with the following
key bindings:

| Key              | Description                                              |
|:-----------------|:---------------------------------------------------------|
| <kbd>l</kbd>     | Loads the next page of results (pagination)              |
| <kbd>g</kbd>     | Clears the results and reloads the first page of results |
| <kbd>f</kbd>     | Follows the playlist under the cursor                    |
| <kbd>u</kbd>     | Unfollows the playlist under the cursor                  |
| <kbd>t</kbd>     | Lists the tracks of the playlist under the cursor        |
| <kbd>M-RET</kbd> | Plays the playlist under the cursor                      |

Once you open the list of tracks of a playlist, you get the following key
bindings in the resulting buffer:

| Key              | Description                                                         |
|:-----------------|:--------------------------------------------------------------------|
| <kbd>a</kbd>     | Adds track to a playlist                                            |
| <kbd>l</kbd>     | Loads the next page of results (pagination)                         |
| <kbd>g</kbd>     | Clears the results and reloads the first page of results            |
| <kbd>f</kbd>     | Follows the current playlist                                        |
| <kbd>u</kbd>     | Unfollows the current playlist                                      |
| <kbd>M-RET</kbd> | Plays the track under the cursor in the context of the playlist [1] |

Both buffers load the `global-smudge-remote-mode` by default.

[1] D-Bus implementation for GNU/Linux do not support passing the context, so
only the track under the cursor will be played

## Selecting a Device for Playback

<kbd>M-x smudge-select-device</kbd> will display a list of devices available for playback in a separate buffer.

Note: use of this feature requires a Spotify premium subscription.

Once you open the list of devices, you get the following key bindings in the resulting buffer:

| Key              | Description                                                         |
|:-----------------|:--------------------------------------------------------------------|
| <kbd>RET</kbd>   | Transfer playback to the device under the cursor.                   |
| <kbd>g</kbd>     | Reloads the list of devices                                         |

## Specifying the Player Status Location

By default, the player status (playing, paused, track name, time, shuffle, repeat, etc.) are shown
in the modeline. If you want to display the status in the title bar when using a graphical display,
you can set the following:

````el
(setq smudge-status-location 'title-bar)

````

Valid values include `'title-bar`, `'modeline` and `nil`, where nil turns off the display of the
player status completely. If the value is set to `title-bar` but you are not using a graphical
display, the player status will be displayed in the mode line instead.

If you want to customize the separator between the existing title bar text and the player status,
you can set the following, i.e.:
````el
(setq smudge-title-bar-separator ""----"")
````
Otherwise, it defaults to 4 spaces.

## License

Copyright (C) Daniel Fernandes Martins

Distributed under the GPL v3 License. See COPYING for further details.
"
162,krisajenkins/helm-spotify,Emacs Lisp,"* Helm Spotify

A simple Emacs interface for Spotify that makes good use of helm.

[[helm-spotify.png]]

* Video

See how [[http://www.youtube.com/watch?v=XjKtkEMUYGc&feature=youtu.be][the first version was coded in 16 minutes]].

** Installation

If you're hooked up to [[http://melpa.milkbox.net/][MELPA]]:

#+BEGIN_EXAMPLE
M-x package-refresh-contents
M-x package-install RET helm-spotify
#+END_EXAMPLE

Alternatively just grab the single =helm-spotify.el= file and
install that in your preferred way.

* Usage

=M-x helm-spotify= and type a search string.

(The search begins after you've typed at least 2 characters. You can
use space-separated terms for psuedo-fuzzy matching.)

*** Keys

| =C-n=   | Next item.                       |
| =C-p=   | Previous item.                   |
| =RET=   | Play this track.                 |
| =C-z=   | Play this album.                 |
| =TAB=   | More options.                    |
| =C-h m= | Full list of keyboard shortcuts. |

* Status

Ready to use.

Currently OSX & Linux only. Windows support is available, but
partial. Please contribute the code for your platform, if you can!

* Supporting Other Platforms

Find out what emacs says your =system-type= is. (=C-h v system-type=).
Let's say it shows the symbol =ms-dos=. Then you need to write this function:

#+BEGIN_SRC emacs-lisp
  (defmulti-method spotify-play-href 'ms-dos
    (href)
    ...
    ... href is a string that's something like ""spotify:track:5Yt80fWRB8JG73XlPjrrKP""
    ...
    ... here, you write any code that will cause Spotify to play that href.
    ...
    )
#+END_SRC

Then submit a pull request!

** Credits

Thanks to [[https://github.com/aes][Anders Eurenius]] for supplying the Linux portion of the code.
Thanks to [[https://github.com/Kungsgeten][Kungsgeten]] for supplying the Windows portion of the code.

I tip my hat to the team behind [[https://github.com/emacs-helm/helm][Helm]], to [[https://github.com/purcell][Steve Purcell]] (for [[https://github.com/milkypostman/melpa][Melpa]]),
and to [[https://github.com/kurisuwhyte][Christina Whyte]] (for [[https://github.com/kurisuwhyte/emacs-multi][Emacs Multimethods]]).

"
163,tgel0/spotify-data,Jupyter Notebook,"# 🎧 Spotify Data Project

#### A serverless solution for getting the audio features data from the Spotify Web API into a BigQuery database.

<p align=""center"">
<img align=""center"" src=""https://github.com/tgel0/spotify-data/blob/master/Spotify_data_diagram.png?raw=true"">
</p>

## 💻 Installation
 1. Clone this repo
 2. Initialize gcloud `gcloud init`
 3. Deploy Cloud Function
```
gcloud functions deploy get_spotify_audio_features_data_to_bigquery --runtime python38 --trigger-topic spotify_topic --set-env-vars CID='YOUR_SPOTIFY_CID',SECRET='YOUR_SPOTIFY_SECRET',PROJECT_ID=YOUR_GCP_PROJECT_ID,DATASET_ID=YOUR_BIGQUERY_DATASET_NAME,TABLE_ID=YOUR_BIGQUERY_TABLE_NAME
```
4. Create a [Cloud Scheduler](https://cloud.google.com/scheduler/docs/quickstart) job to run automatically (optional)

## 🛠️ Built With

### 🖥️ APIs

+ [Spotify Web API](https://developer.spotify.com/documentation/web-api/)

### 🐍 Python libraries:

* [Spotipy](https://spotipy.readthedocs.io/) - Python wrapper for Spotify Web API

### ☁️ Google Cloud Platform services

+ [Cloud Functions](https://cloud.google.com/functions/) 
+ [BigQuery](https://cloud.google.com/bigquery/)
+ [Cloud PubSub](https://cloud.google.com/pubsub/)
+ [Cloud Scheduler](https://cloud.google.com/scheduler/)

## 🌱 Notebooks, Datasets, Blogs

+ Blog post ['Spotify Data Project Part 1 - from Data Retrieval to First Insights'](https://towardsdatascience.com/spotify-data-project-part-1-from-data-retrieval-to-first-insights-f5f819f8e1c3)
+ Blog post ['Using Data to Find the Most Popular Tracks of the Summer on Spotify'](https://medium.com/@tgel0/kiki-do-you-analyze-me-using-data-to-find-the-most-popular-tracks-of-the-summer-on-spotify-67ba8ef5773c)
+ Notebook part 1: data retrieval: [github](https://github.com/tgel0/spotify-data/blob/master/notebooks/SpotifyDataRetrieval.ipynb) | [nbviewer](http://nbviewer.jupyter.org/github/tgel0/spotify-data/blob/master/notebooks/SpotifyDataRetrieval.ipynb)
+ Notebook part 2: data exploration: [github](https://github.com/tgel0/spotify-data/blob/master/notebooks/SpotifyDataExploPopularity.ipynb) | [nbviewer](http://nbviewer.jupyter.org/github/tgel0/spotify-data/blob/master/notebooks/SpotifyDataExploPopularity.ipynb)
+ Dataset [via Kaggle](https://www.kaggle.com/tomigelo/spotify-audio-features) (latest update: April 2019)"
164,rckclmbr/pyportify,CSS,"Pyportify
=========

[![Build Status](https://travis-ci.org/rckclmbr/pyportify.svg?branch=master)](https://travis-ci.org/rckclmbr/pyportify)

A port of [portify](https://github.com/mauimauer/portify) to python.

But it actually works.

Transfers your Spotify Premium playlists to Google Music: All Access

By using Pyportify you may violate both Spotify's and Google's Terms of Service. You agree that
you are using Pyportify on your own risk. The author does not accept liability (as far as permitted by law) for any loss arising from any use of this tool.
If you choose not to agree to these terms, then you may not use this tool.

If you are unable to sign in to your Google account, try using Google App Passwords: https://security.google.com/settings/security/apppasswords

Download
--------

Windows:

https://github.com/rckclmbr/pyportify/releases/download/v0.4.1/pyportify.zip

OSX:

https://github.com/rckclmbr/pyportify/releases/download/v0.4.1/pyportify.dmg

Install from pypi
-----------------

OS X:

```bash
$ brew install python3
$ pip3 install pyportify
```

Ubuntu:

```bash
sudo apt-get update
sudo apt-get install -y python3-pip
sudo pip3 install pyportify
```

Fedora

```bash
sudo yum check-update
sudo pip install pyportify
```

Running
-------

```
$ pyportify
# Now open a browser to http://localhost:3132
```

EZ

Alternatively, you can copy all playlists easily using the ```pyportify-copyall``` command:

```bash
$ pyportify-copyall
Enter Google email address: example@gmail.com
Enter Google password:
Go to https://developer.spotify.com/web-api/console/get-playlist-tracks/ and get an oauth token
Enter Spotify oauth token: <access token>
(transfer music)
...
```

Or, use Docker:

```
$ docker run -t -i --rm -p 3132:3132 rckclmbr/pyportify

or

$ docker run -t -i --rm rckclmbr/pyportify /usr/local/bin/pyportify-copyall
```

License
-------

Licensed under the terms of the Apache 2.0 License
All Trademarks are the property of their respective owners.
"
165,jonashcroft/Nowify,Vue,"[![Netlify Status](https://api.netlify.com/api/v1/badges/2d459d5a-509d-49dc-85c1-d0168afd8465/deploy-status)](https://app.netlify.com/sites/peaceful-brahmagupta-4fa075/deploys)

# Nowify

A simple app to display your currently playing Spotify track on a Raspberry Pi, made with Vue.

Nowify will:

* ✅ - Use Spotify Web API to get your current track
* ✅ - Only access that and no other data
* ✅ - Use Access and Refresh Tokens to ensure that you're kept logged in between sessions
* ✅ - Display the current track artist, cover, and a matching vibrant background colour

Preview:
![Nowify Preview Image 1](assets/preview-1.png?raw=true ""Nowify preview image, cover art for the song 'Wherever you go' by The Avalanches and Jamie xx"")
![Nowify Preview Image 2](assets/preview-2.png?raw=true ""Nowify preview image, cover art for the song 'Gas Drawls' by MF DOOM"")
![Nowify Preview Image 3](assets/preview-3.png?raw=true ""Nowify preview image, cover art for the song '有吗炒面' by Lexie Liu"")

Nowify needs a webserver to run. The quickest way to get up and running is to use a Jamstack platform like Netlify or GitHub Pages.

* Fork this repository
* Connect your repo to your Jamstack platform
* Add your Spotify Client ID and Client Secret to the platforms environment variables
* Deploy!

---
# How to use

**Prerequisites:**
You will need:
* A GitHub account
* A [Netlify](https://netlify.com) account
* Spotify Client Keys
* A device to display Nowify

### 1. Fork this repository

On this page, click on the 'Fork' button in the top-right to create a copy of the repo as-is on your account. Alternatively, you can clone the repo and push to GitHub.

### 2. Create a new project on Netlify
Log in to Netlify and click 'New site from Git'.

If you're doing this for the first time, you will need to authorise your GitHub account with Netlify by following the instructions.

Once authorised, follow the on-screen instructions to connect your repository. You should be fine to leave the default settings here as-is.

Click on 'Deploy site'.

_Note: Nowify should use Node 14. This has been set in the project environment. I've only ever attempted this Netlify, so cannot help you if you use another platform._

### 3. Create Spotify Client keys.
To allow authorisation to your track data, you'll need to generate Spotify API keys. You can do this by logging in to the [Spotify Dashboard](https://developer.spotify.com/dashboard/applications) creating an app.

Call the application 'Nowify'.

Set the _Redirect URI_ as the URL of your project in Netlify. This must be set else Spotify won't authorise Nowify.

**Important:** The _Redirect URI_ entered in this field must match the URL of your Netlify site exactly, or you'll receive authorisation errors. A common issue is that Spotify will automatically add a trailing slash to the URL upon saving. For example: `https://example.netlify.com` vs `https://example.netlify.com/`.

You can leave the other settings (Callback URL, Bundle IDs etc) blank.

Copy down the Client Secret and Client ID and save your app in the Spotify Dashboard.

### 4. Add the Client ID and Client Secret to Netlify

Now that we have our Spotify API keys, we must let Nowify know that they exist.

To do this, navigate to Netlify > Site Settings > Build & Deploy > Environment

Under _Environment variables_, add two fields. The _Keys_ can be found in the `env.sample` file and the values will be the _Client ID_ and _Client Secret_, respectively.

Hit save.

### 5. View Nowify

Once the environment variables are in, you will have to navigate to your Netlify site overview > Deploys > Trigger Deploy drop-down > click 'Clear cache and deploy site' and wait for deployment to complete. You can now navigate to your Netlify site. You'll be prompted with a Spotify login button. Do that, and you're good to go!

---

Alternatively, you can clone the repo, compile the code offline, and upload to your own webserver (more advanced users only). If you're considering doing this, I'll assume that you somewhat know you're way around build tools.

---

### Original Write up:
[https://ashcroft.dev/blog/now-playing-screen-spotify-raspberry-pi-es6/](https://ashcroft.dev/blog/now-playing-screen-spotify-raspberry-pi-es6/)

### Brief About:
Nowify was a project that I originally made in 2017 when I wanted to learn more modern Javascript. Over the years, I've learned a lot more and had people contact me about Nowify, so I wanted to build a more modern version of it using modern tools. This is still a learning exercise, but hopefully one that's more usable. If you'd like to view the old repository, that can be found on the `old` branch.
"
166,raywo/MMM-NowPlayingOnSpotify,JavaScript,"# MMM-NowPlayingOnSpotify
A module for the [MagicMirror](https://github.com/MichMich/MagicMirror) project by [Michael Teeuw](https://github.com/MichMich) displaying the song currently playing on Spotify.


[![Maintainability](https://api.codeclimate.com/v1/badges/2742abc792b88536f6e2/maintainability)](https://codeclimate.com/github/raywo/MMM-NowPlayingOnSpotify/maintainability) 
[![Test Coverage](https://api.codeclimate.com/v1/badges/2742abc792b88536f6e2/test_coverage)](https://codeclimate.com/github/raywo/MMM-NowPlayingOnSpotify/test_coverage)
[![Known Vulnerabilities](https://snyk.io/test/github/raywo/mmm-NowPlayingOnSpotify/badge.svg?targetFile=package.json)](https://snyk.io/test/github/raywo/mmm-NowPlayingOnSpotify?targetFile=package.json)
[![Greenkeeper badge](https://badges.greenkeeper.io/raywo/MMM-NowPlayingOnSpotify.svg)](https://greenkeeper.io/)
[![dependency status](https://david-dm.org/raywo/MMM-NowPlayingOnSpotify.svg)](https://david-dm.org/raywo/MMM-NowPlayingOnSpotify)
[![chat on gitter](https://badges.gitter.im/raywo.svg)](https://gitter.im/raywo)


## How it works
After installing the module and configuring and setting up the Spotify app the module displays the song you are currently listening to on Spotify. It shows on which of your devices you’re playing the song. If you like you can also display the album cover.

To be able to display your currently playing song the module must connect to the Spotify service and query your private data. For obvious reasons this is not possible for arbitrary apps – or for that matter MagicMirror modules. There are third party solutions which will enable access to your Spotify data. This module is designed to be independent from third party services. Everything you need is in this module respectively is created by yourself.

## Screenshots
| ![Screenshot when nothing is playing](img/readme/screenshot_nothing_playing.png) | ![Screenshot of a song playing without cover art](img/readme/screenshot_without_coverart.png) | ![Screenshot of a song playing with cover art](img/readme/screenshot_with_coverart.png) |
|---|---|---|
| Nothing is playing. | A song is playing and `showCoverArt` is set to `false`. | A song is playing and `showCoverArt` is set to `true`. |

## Preconditions

* MagicMirror<sup>2</sup> instance
* Node.js version >= 7
* npm
* a Spotify account


## Installing
Installing the module is quite straight forward. Getting it to display your playing songs requires a bit more work.

### Step 1 – Install the module

In your MagicMirror directory: 

```bash
cd modules
git clone https://github.com/raywo/MMM-NowPlayingOnSpotify.git
cd MMM-NowPlayingOnSpotify
npm install
```

### Step 2 – Create and authorise a Spotify app
In order to be able to connect to the Spotify API you need to create an app in the [Spotify developer area](https://beta.developer.spotify.com/dashboard/applications). Then you need to authorise the app to access your personal data. Et voilà!

The module provides you with a special app which describes all the necessary steps and which guides you through the whole process. To use this app change into the `authorization` folder and start the app by typing `node app`. 

```bash
cd authorization
node app
```

When the app is running you can access it by opening `localhost:8888` in your browser. Provided you are doing this directly on your Raspberry Pi. If you want to access the app remotely just type the ip address or the name of your Raspberry like so for instance: `http://raspi:8888`. Then you should see the authorisation app like below.

|![Screenshot for authorisation app](img/readme/screenshot_authorize_app.png)|
|---|

Now just follow the steps described there. After successful authorisation the app will display a code snippet under the heading **Step 3: Configure your mirror**. Copy that snippet and paste it into your mirror’s `config.js`. Configure the rest to your needs and you’re good to go.


## Updating

Go to the module’s folder inside MagicMirror modules folder and pull the latest version from GitHub and install:

```bash
git pull
npm install
```


## Configuring
There is not very much to configure but here are the options:

| Option | Description |
|--------|-------------|
| `showCoverArt` | <p>A boolean value decribing whether an album cover photo should be displayed or not.</p><p>**Type:** `boolean` **OPTIONAL**<br>**Example:** `false`<br>**Default Value:** `true`</p> |
| `updatesEvery` | <p>An integer determining the interval for display updates.</p><p>**Type:** `integer` **OPTIONAL**<br>**Example:** `5`<br>**Default Value:** `1`</p><p>**Note:** With the default setting the display is updated every second. So when you skip to the next song it is virtually immediately visible. Also the progress bar runs smoothly. If you increase the value you may relieve the strain on your Raspberry’s processor but your display will not be as up-to-date. </p> |
| `clientID` | <p>A string describing the `clientID` of your Spotify app.</p><p>**Type:** `string` **REQUIRED**<br>**Example:** `""acecg8a4...""`<br>**Default Value:** none</p><p>**Note:** The easiest way to get that value is by copying the code snippet from step 3 in the [authorisation app](#step-2-–-create-and-authorise-a-spotify-app).</p> |
| `clientSecret` | <p>A string describing the `clientSecret` of your Spotify app.</p><p>**Type:** `string` **REQUIRED**<br>**Example:** `""87978346...""`<br>**Default Value:** none</p><p>**Note:** The easiest way to get that value is by copying the code snippet from step 3 in the [authorisation app](#step-2-–-create-and-authorise-a-spotify-app).</p> |
| `accessToken` | <p>A string describing the `accessToken ` of your Spotify app.</p><p>**Type:** `string` **REQUIRED**<br>**Example:** `""WaIO1987...""`<br>**Default Value:** none</p><p>**Note:** The easiest way to get that value is by copying the code snippet from step 3 in the [authorisation app](#step-2-–-create-and-authorise-a-spotify-app).</p> |
| `refreshToken` | <p>A string describing the `refreshToken ` of your Spotify app.</p><p>**Type:** `string` **REQUIRED**<br>**Example:** `""HIuLH798...""`<br>**Default Value:** none</p><p>**Note:** The easiest way to get that value is by copying the code snippet from step 3 in the [authorisation app](#step-2-–-create-and-authorise-a-spotify-app).</p> |

Here is an example for an entry in `config.js`

```javascript
{
    module: ""MMM-NowPlayingOnSpotify"",
    position: ""top_right"",

    config: {
        showCoverArt: false,
        clientID: ""<YOUR_CLIENT_ID>"",
        clientSecret: ""<YOUR_CLIENT_SECRET>"",
        accessToken: ""<YOUR_ACCESS_TOKEN>"",
        refreshToken: ""<YOUR_REFRESH_TOKEN>""
    }
}
```


## Special Thanks

* [Michael Teeuw](https://github.com/MichMich) for inspiring me and many others to build a MagicMirror module.
* The community of magicmirror.builders for help in the development process and all contributors for finding and fixing errors in this module.


## Contributing

If you find any problems, bugs or have questions, please [open a GitHub issue](https://github.com/raywo/MMM-NowPlayingOnSpotify/issues) in this repository.
"
167,spotify/spotify-tensorflow,Python,"MAINTENANCE MODE
================

THIS PROJECT IS IN MAINTENANCE MODE DUE TO THE FACT THAT IT'S NOT WIDELY USED WITHIN SPOTIFY. WE'LL PROVIDE BEST EFFORT SUPPORT FOR ISSUES AND PULL REQUESTS BUT DO EXPECT DELAY IN RESPONSES.

# spotify-tensorflow

[![Build Status](https://img.shields.io/circleci/project/github/spotify/spotify-tensorflow/master.svg)](https://circleci.com/gh/spotify/spotify-tensorflow)
[![Coverage](https://img.shields.io/codecov/c/github/spotify/spotify-tensorflow/master.svg?style=flat)](https://codecov.io/github/spotify/spotify-tensorflow?branch=master)
[![GitHub license](https://img.shields.io/github/license/spotify/spotify-tensorflow.svg)](./LICENSE)
[![PyPI version](https://badge.fury.io/py/spotify_tensorflow.svg)](https://badge.fury.io/py/spotify_tensorflow)

## Purpose:

Provide Spotify specific TensorFlow helpers.

## Features

 * tf.data integration with [Featran](https://github.com/spotify/featran)
 * common Dataset API to read:
   * TFRecord datasets as tf.Tensor
   * TFRecord datasets as Pandas DataFrame
   * TFRecord datasets as python dict
 * tf.Graph freezing utilities
 * TensorFlow integration with [Luigi](https://github.com/spotify/luigi)

## Examples:

Check examples in the [examples directory](https://github.com/spotify/spotify-tensorflow/tree/master/examples),
currently they include:

 * sklearn training via Pandas DataFrame dataset
 * XGBoost training via tf.Example dataset
 * TensorFlow training via tf.Example dataset

To run the examples:

```sh
$ pip install -e .[examples]
$ bin/run-examples
```

## Development:

This project uses `tox`.

```sh
$ pip install tox
```

To see all `testenv`'s:

```sh
$ tox -l
mypy
lint
examples-py27
examples-py35
test-py27
test-py35
upload-coverage
license
```

To run the tests:

```
tox -e test
```

To release:

```
git commit --allow-empty -m ""Release x.y.z""
git tag x.y.z
git push --tags  origin master
```

Then upload to pypi:

```
python setup.py sdist upload -r pypi
```
"
168,epsil/spotgen,JavaScript,"spotgen
=======

[![nodei.co](https://nodei.co/npm/spotgen.png)](https://www.npmjs.com/package/spotgen)

[![npm](https://img.shields.io/npm/v/spotgen.svg)](https://www.npmjs.com/package/spotgen)
[![Build Status](https://travis-ci.org/epsil/spotgen.svg?branch=master)](https://travis-ci.org/epsil/spotgen)
[![License: MIT](https://img.shields.io/badge/License-MIT-blue.svg)](LICENSE)

A tool for generating [Spotify](http://www.spotify.com/) playlists programmatically. Convert websites to Spotify playlists, incorporate [Last.fm](http://last.fm/) listener data, and employ smart algorithms to reorder the tracks.

Web demo: <https://epsil.github.io/spotgen/>

Installation
------------

Install [Node](http://nodejs.org/) and fetch the package with [`npm`](https://www.npmjs.com/package/spotgen):

    npm install -g spotgen

Note that on some systems, it might be necessary to prepend the `npm` command with [`sudo`](https://docs.npmjs.com/getting-started/installing-npm-packages-globally).

The generator can now be invoked from the command line as `spotgen` (see [usage](#command-line-version)).

Usage
-----

### Web demo

Go to <https://epsil.github.io/spotgen/>, enter a [generator string](#commands) in the text field and press *Create Playlist*.

### Command-line version

    spotgen input.txt [output.txt]

`input.txt` is a text file containing a [generator string](#commands), invoking any of the *commands* described below. `output.txt` will contain the generator's output, a list of [Spotify URIs](#spotify-uris) which can be [imported into Spotify](#importing-the-playlist). If an output file is not specified, then the Spotify URIs are written to standard output, with an option to copy them to the clipboard.

Alternatively, one can pass a generator string as a single argument:

    spotgen ""#artist Bowery Electric""
    spotgen ""#similar Beach House\n#similar Hooverphonic""
    spotgen http://www.last.fm/user/username/library

Make sure to surround the string with quotes (`""`) if it contains spaces or special characters. Line breaks can be expressed as `\n`.

One can also run the generator with no arguments and enter commands interactively. This saves one the trouble of quoting strings and escaping newlines.

For more information, type `spotgen --help`.

### Importing the playlist

To **import** the playlist into Spotify:

1.  **Copy the output of the generator:** Choose *Edit -> Copy* (<kbd>Ctrl</kbd> + <kbd>C</kbd>).
2.  **Create a new playlist in Spotify:** Choose *File -> New Playlist* (<kbd>Ctrl</kbd> + <kbd>N</kbd>).
3.  **Paste into the playlist:** Select the playlist and choose *Edit -> Paste* (<kbd>Ctrl</kbd> + <kbd>V</kbd>).

Commands
--------

The generator effectively defines a ""mini-language"" for creating Spotify playlists. One can create a playlist in many ways: on the basis of [track titles](#tracks), [album titles](#albums), [artist names](#artists), [similar artists](#similar-artists), [top tracks](#top-tracks) or [webpages](#web-scraping).

Below follows a list of **generator commands**.

### Web scraping

The generator can scrape data from web pages. (Note that this functionality is only available in the [command-line version](#command-line-version).)

#### Last.fm

The generator can be instructed to fetch data from [Last.fm](http://last.fm/)'s webpages simply by supplying the page's address. For example, to create a playlist of artists similar to an artist, add the line:

    http://www.last.fm/music/Artist+Name/+similar

To create a playlist of a user's recently played tracks:

    http://www.last.fm/user/username/library

To fetch multiple pages in succession, add a number parameter:

    5 http://www.last.fm/user/username/library

This is functionally identical to:

    http://www.last.fm/user/username/library
    http://www.last.fm/user/username/library?page=2
    http://www.last.fm/user/username/library?page=3
    http://www.last.fm/user/username/library?page=4
    http://www.last.fm/user/username/library?page=5

Note that Last.fm displays listening history in reverse chronological order. To create a chronological playlist, add the [`#reverse`](#reverse) command.

[More on Last.fm scraping](Tips.md#lastfm).

#### Pitchfork

To scrape a [Pitchfork](http://pitchfork.com/) list:

    http://pitchfork.com/features/lists-and-guides/9980-the-50-best-albums-of-2016/

#### Rate Your Music

To scrape a [Rate Your Music](http://rateyourmusic.com/) chart:

    http://rateyourmusic.com/charts/top/album/2016

#### Reddit

To scrape a [Reddit](http://www.reddit.com/) forum:

    http://www.reddit.com/r/SoundsVintage/

To scrape a comments thread:

    http://www.reddit.com/r/Music/comments/2zpfv7/whats_the_catchiest_song_you_know_that_just_makes/

When scraping threads, it can be a good idea to add the [`#order by lastfm`](#order) command. This will order the results by [Last.fm](http://last.fm/) popularity, thereby filtering out noise.

#### YouTube

To convert a [YouTube](http://www.youtube.com/) playlist:

    http://www.youtube.com/watch?v=yWEK4v9AVKQ&list=PLChOO_ZAB22WuyDODJ3kjJiU0oQzWOTyb

### Top tracks

To retrieve the top 10 tracks of an artist, pass the following to the generator:

    #top Aphex Twin

The generator will output a playlist consisting of the ten most popular tracks of Aphex Twin, which can then be [imported](#usage) into Spotify.

All of the commands listed here can be used multiple times. For example:

    #top Aphex Twin
    #top Beach House

This will create a playlist consisting of the top tracks of Aphex Twin, followed by the top tracks of Beach House.

To retrieve only the top 5 tracks, use `#top5`.

To retrieve *all* tracks, use [`#artist`](#artists).

### Similar artists

To find similar artists:

    #similar Aphex Twin

This will generate a 100-track playlist consisting of the 5 most popular tracks from the 20 most similar artists to Aphex Twin.

To retrieve more tracks, use `#similar10`.

### Albums

To add an album:

    #album Biosphere - Substrata

Alternatively, use the album's Spotify link or Spotify URI:

    https://open.spotify.com/album/5QIf4hNIAksV1uMCXHVkAZ

### Artists

To add all the albums of an artist:

    #artist Beach House

Alternatively, use the artist's Spotify link or Spotify URI:

    https://open.spotify.com/artist/56ZTgzPBDge0OvCGgMO3OY

Note that this command can be rather slow, as it attempts to retrieve every single track by the artist, including tracks from collaboration and compilation albums. A fast alternative is the [`#top`](#top-tracks) command.

### Playlist

To add all the tracks of a playlist:

    #playlist username:playlistid

where `username` is the owner of the playlist and `playlistid` is the ID of the playlist.

Alternatively, use the playlist's Spotify link or Spotify URI:

    https://open.spotify.com/user/redditlistentothis/playlist/6TMNC59e1TuFFE48tJ9V2D

### Tracks

To add a single track to the playlist, add a line on the form `ARTIST - TRACK`:

    Beach House - Walk in the Park
    Beach House - Irene
    Beach House - Other People
    Beach House - Troublemaker
    Beach House - Wishes

Alternatively, use the track's Spotify link or Spotify URI:

    https://open.spotify.com/track/4oNXgGnumnu5oIXXyP8StH

[More on single tracks](Tips.md#miscellaneous).

### Duplicates

By default, the generator automatically removes duplicate tracks. To allow duplicates, add the line:

    #duplicates

### Reverse

To reverse the order of the tracks, add the line:

    #reverse

### Shuffle

To shuffle the order of the tracks, add the line:

    #shuffle

### Order

One can reorder the tracks with the `#order by` command. One can order on any track attribute, such as `name`, `artist`, `album`, etc. For example, to order the tracks by Spotify popularity, use `#order by popularity`:

    #order by popularity
    #artist Beach House

One can also leverage Spotify's analytic algorithms and order on the basis of [audio features](https://developer.spotify.com/web-api/get-audio-features/) such as `danceability`, `energy`, `instrumentalness`, `speechiness`, `tempo`, etc. For example, to screen for instrumental tracks:

    #order by instrumentalness
    #artist Beach House

This moves instrumental tracks towards the beginning of the playlist and vocal tracks towards the end. To do the opposite, add the [`#reverse`](#reverse) command:

    #order by instrumentalness
    #reverse
    #artist Beach House

The generator also provides [Last.fm](http://last.fm/) support. To order by Last.fm playcount, add the line `#order by lastfm`:

    #order by lastfm
    #artist Beach House

To order by Last.fm user playcount, add the Last.fm username at the end:

    #order by lastfm:username
    #artist Beach House

### Group

To sort the ordered tracks into groups, use `#group by`:

    #order by lastfm
    #group by artist
    #similar Beach House

This will create a Last.fm-ordered playlist of artists similar to Beach House, where tracks from the same artists are grouped together.

### Alternate

To group the tracks and then interleave them, use `#alternate by`:

    #order by popularity
    #alternate by artist
    #similar Beach House
    #similar Hooverphonic

This will create a Last.fm-ordered playlist of artists similar to Beach House and Hooverphonic, with each track having a different artist from the previous track.

Supported formats
-----------------

The generator can work with [Spotify links](#spotify-links), [Spotify URIs](#spotify-uris), [M3U playlists](#m3u-playlists) and [CSV files](#comma-separated-values). By default, the generator outputs a list of Spotify URIs.

### Import existing Spotify playlists

The generator understands Spotify links and Spotify URIs. These are usually obtained by opening the item in Spotify and choosing *More* -> *Share* (click on the `...` symbol).

#### Spotify links

The following example creates a new playlist out of an existing playlist, applying the [`#order`](#order) command in the process:

    #order by popularity
    https://open.spotify.com/user/redditlistentothis/playlist/6TMNC59e1TuFFE48tJ9V2D

Another method is to select the playlist's tracks in Spotify, copy them, and then paste them into a text file. This produces a list of Spotify track links:

    https://open.spotify.com/track/4oNXgGnumnu5oIXXyP8StH
    https://open.spotify.com/track/7rAjeWkQM6cLqbPjZtXxl2
    https://open.spotify.com/track/2Nt4Uw91pQLXSJ28SttDdF
    ...

#### Spotify URIs

Spotify URIs are the default output format of the generator. They look like this:

    spotify:track:4oNXgGnumnu5oIXXyP8StH
    spotify:track:7rAjeWkQM6cLqbPjZtXxl2
    spotify:track:2Nt4Uw91pQLXSJ28SttDdF
    ...

### M3U playlists

One can also import [M3U](http://en.wikipedia.org/wiki/M3U) playlists (with the file extension `.m3u` or `.m3u8`), provided they contain `EXTM3U` metadata. That is, the playlist should be on the form:

    #EXTM3U
    #EXTINF:404,Desire Lines - Deerhunter
    Deerhunter/Halcyon Digest/06 Desire Lines.mp3
    #EXTINF:230,Saved By Old Times - Deerhunter
    Deerhunter/Microcastle/10 Saved By Old Times.mp3
    #EXTINF:202,Agoraphobia - Deerhunter
    Deerhunter/Microcastle/02 Agoraphobia.mp3
    #EXTINF:133,Revival - Deerhunter
    Deerhunter/Halcyon Digest/03 Revival.mp3
    #EXTINF:264,Twilight at Carbon Lake - Deerhunter
    Deerhunter/Microcastle/12 Twilight at Carbon Lake.mp3

The generator translates this to:

    Deerhunter - Desire Lines
    Deerhunter - Saved By Old Times
    Deerhunter - Agoraphobia
    Deerhunter - Revival
    Deerhunter - Twilight at Carbon Lake

[More on M3U playlists](Tips.md#m3u-playlists).

### Comma-separated values

The generator can read and write the CSV format used by [Exportify](https://github.com/watsonbox/exportify):

    spotify:track:3jZ0GKAZiDMya0dZPrw8zq,Desire Lines,Deerhunter,Halcyon Digest,1,6,404413,,
    spotify:track:20DDHYR4vZqDwHyNFLwkXI,Saved By Old Times,Deerhunter,Microcastle,1,10,230226,,
    spotify:track:2SpHd4lGMrJMIQDf92V6VP,Agoraphobia,Deerhunter,Microcastle,1,2,202640,,
    spotify:track:30wvVTkqA4Fp5ZCG0xGof7,Revival,Deerhunter,Halcyon Digest,1,3,133666,,
    spotify:track:6vtwbm7YGkTwTINdrcXV5I,Twilight At Carbon Lake,Deerhunter,Microcastle,1,12,263986,,

To output to this format, add the line `#csv`:

    #csv
    Deerhunter - Desire Lines
    Deerhunter - Saved By Old Times
    Deerhunter - Agoraphobia
    Deerhunter - Revival
    Deerhunter - Twilight at Carbon Lake

CSV files have the advantage of being editable with a spreadsheet editor such as Microsoft Excel or LibreOffice Calc. They are also future-proof, as they contain additional info to the Spotify URIs. (The URIs might, conceivably, change or become outdated. On the other hand, the title, artist and album of a track can be used to find that track on any music streaming service.)

Web demo
--------

The generator is available as a single-page application running in the browser. It is hosted at <https://epsil.github.io/spotgen/>.

The generator code runs entirely on the client side. However, because of restrictions in Spotify's authentication service, the user first has to log in with their Spotify account. Despite the warning, the application does not access any private data. (Alternatively, the [command-line version](#command-line-version) can be used without logging in.)

The web demo does not support [web scraping](#web-scraping), due to browser limits on [cross-site requests](http://en.wikipedia.org/wiki/Cross-origin_resource_sharing). For this, one has to use the command-line version.

It is also possible to run the web demo locally:

    npm run http

This will start up a `http-server` instance at <http://localhost:9000/>.

Note that Spotify's authentication service requires the web demo to be hosted at a whitelisted address. This is the reason for running `http-server` at port 9000 (merely opening `index.html` in a browser will not work).

For more information about authentication, see the official [Spotify Web API documentation](http://developer.spotify.com/web-api/authorization-guide/#implicit-grant-flow).

The web demo is built with [Browserify](http://browserify.org/), which goes to show that the library is browserifiable.

Library
-------

The generator is also available as a library that can be included in another project. To install it in the project's `node_modules/` folder:

    npm install --save spotgen

The following example demonstrates how to use the library:

```js
var Generator = require('spotgen')
var spotgen = new Generator('#top Beach House\n#top Deer Hunter')
spotgen.generate().then(function (result) {
  // do something with the Spotify URIs,
  // e.g., output them to the console
  console.log(result)
})
```

The `generate()` method returns a [promise](https://www.promisejs.org/) that contains the Spotify URIs, represented as a newline-separated string. To access this value, use the `then()` callback as shown.

Note that if one is writing one's own application for Spotify, then one should [register the application](https://developer.spotify.com/web-api/authorization-guide/#introduction) and obtain a client ID and client secret key. These are passed to the `Generator` class like so:

```js
var spotgen = new Generator('#top Beach House', clientId, clientKey)
```

The generator will then use these values to acquire an access token for web API requests. If one already has a token, then one can pass that to `Generator` as well:

```js
var spotgen = new Generator('#top Beach House', clientId, clientKey, token)
```

Developer version
-----------------

Instead of installing the package with `npm`, one can fetch the source code from [GitHub](https://github.com/epsil/spotgen). Then one is ensured to have the latest version:

    git clone https://github.com/epsil/spotgen.git

When the above command finishes, fetch all package depencies with `npm install`:

    cd spotgen
    npm install

Then create a global package link with `npm link`:

    npm link

One can always fetch the latest version with `git pull`. If the package's dependencies change, it might also be necessary to re-run `npm install`.

### Unit tests

The package includes a test suite. To run it, enter:

    npm test

Feedback
--------

Please post suggestions and bug reports at the project's [bug tracker](https://github.com/epsil/spotgen/issues). When reporting a bug, it is helpful to include the minimum number of steps necessary to reproduce the problem, as well as the version number (`spotgen --version`).

Thanks
------

This tool is freeware. You can [donate Bitcoin](https://epsil.github.io/donate/) to: [`13cF1WPEfX2AobEJH5eTkde9MKfRhFGuDU`](bitcoin:13cF1WPEfX2AobEJH5eTkde9MKfRhFGuDU)

License
-------

[MIT License](LICENSE).

Links
-----

-   [Web demo](https://epsil.github.io/spotgen/)
-   [npm package](https://www.npmjs.com/package/spotgen)
-   [GitHub repository](https://github.com/epsil/spotgen)
-   [Developer documentation](https://epsil.github.io/spotgen/doc/)
-   [Spotify Web API documentation](http://developer.spotify.com/web-api/authorization-guide/#implicit-grant-flow)
-   [Additional tips](Tips.md)

### See also

-   [Exportify](https://github.com/watsonbox/exportify), for exporting Spotify playlists to CSV format
-   [Spotlistr](http://spotlistr.herokuapp.com/) ([source](https://github.com/BobNisco/Spotlistr)), conversion app
-   [Playlist Converter](http://www.playlist-converter.net/), conversion app
-   [MagicPlaylist](http://magicplaylist.co/) ([source](https://github.com/loverajoel/magicplaylist)), recommendations
-   [20v](http://20v.co/) ([source](https://github.com/fusenlabs/20v)), recommendations
-   [Spotibot](http://www.spotibot.com/), recommendations
"
169,ThingPulse/esp8266-spotify-remote,C,"# ThingPulse esp8266-spotify-remote

[![ThingPulse logo](https://thingpulse.com/assets/ThingPulse-w300.svg)](https://thingpulse.com)

## Purpose of this project

This project lets you control a Spotify player (phone, browser, etc) from an ESP8266. Album artworks as well as title and artist name
are fetched from Spotify's Web API over WiFi and displayed on a ILI9341 color TFT screen. The currently played song can be
paused, played and skipped to the next or previous song in the playlist.

A full OAuth 2.0 web flow is used to acquire the necessary access and refresh tokens to permit the user to control the player. In order to
run this project on your device you will have to setup an application on Spotify's developer dashboard.

## Features

 - Artwork Download
 - Control Player on touch screen: Play, Pause, Next, Prev
 - Authentication and Authorization (OAuth 2.0 flow) On device.

Demo Video:

 [![Demo Video](https://img.youtube.com/vi/xKmXMUoo8ps/0.jpg)](https://www.youtube.com/watch?v=xKmXMUoo8ps)

## Recommended Hardware

We developed this project specifically for our [ESP8266 Color Kit](https://thingpulse.com/product/esp8266-wifi-color-display-kit-2-4/). If you appreciate the hard work and our willingness to open-source projects like this one then please support us by buying our hardware.

<a href=""https://thingpulse.com/product/esp8266-wifi-color-display-kit-2-4/"">
  <img src=""https://thingpulse.com/wp-content/uploads/2019/04/ThingPulse-Color-Kit-2-768x534.jpg"" width=""300"">
</a>


## Contributions

Please see our [Guidelines](CONTRIBUTING.md) if you want to contribute to this project. Contributions are more than welcome!

## Service level promise

<table><tr><td><img src=""https://thingpulse.com/assets/ThingPulse-open-source-community.png"" width=""150"">
</td><td>This is a ThingPulse <em>community</em> project. See our <a href=""https://thingpulse.com/about/open-source-commitment/"">open-source commitment declaration</a> for what this means.</td></tr></table>

## Setup Instructions

### Precondition

The below instructions assume that your Arduino IDE is properly setup to work with the ThingPulse Color Kit. See our standalone tutorials for [setting up the IDE](https://docs.thingpulse.com/how-tos/Arduino-IDE-for-ESP8266/) and [installing the drivers](https://docs.thingpulse.com/how-tos/install-drivers/) if you need help with that.

### Prepare Project in Arduino IDE

1. Download this project either as ZIP file or check it out with Git
1. Open the project in the Arduino IDE.
1. Install the required Arduino libraries. Go to Sketch > Include Library... > Manage Libraries.... Then, for each library, put its name into the text field to have its metadata pulled from the internet and displayed below. Select the latest version and install it.
	1. [Mini Grafx](https://www.arduinolibraries.info/libraries/mini-grafx) library (by ThingPulse, V 1.0.0 or later)
	1. [JPEGDecoder](https://www.arduinolibraries.info/libraries/jpeg-decoder) library (by Bodmer, Makoto Kurauchi, Rich Geldreich, v1.7.8 or later). After installing the library go to your Arduino sketchbook folder (the one configured in Arduino Preferences > Sketchbook location). In that folder open file `libraries/JPEGDecoder/src/User_config.h` and comment line 5 so that it reads `//#define LOAD_SD_LIBRARY`.
	1. [JSON Streaming Parser](https://www.arduinolibraries.info/libraries/json-streaming-parser) library (by Daniel Eichhorn, v1.0.5 or later)
	1. [ThingPulse XPT2046 Touch](https://www.arduinolibraries.info/libraries/thing-pulse-xpt2046-touch) (our fork of the original lib by Paul Stoffregen, v1.2.0 or later)
1. Set your *WiFi credentials* in the `settings.h` file
1. Complete the steps below to get the values for the *Spotify settings* required in `settings.h`

### Get Access to the Spotify API

1. Go to [https://developer.spotify.com/dashboard/login](https://developer.spotify.com/dashboard/login) and login to or sign up for the Spotify Developer Dashboard

2. Click on ""My New App""
<img src=""./images/SpotifyDashboard.png"" width=""400"">

3. Fill out the form. Give your new app a name you can attribute to this project. It's safe to select ""I don't know"" for the type of application.
<img src=""./images/SpotifyAppSignUp1.png"" width=""400"">

4. At the end of the 3 steps click ""Submit""
<img src=""./images/SpotifyppSignUp3.png"" width=""400"">

5. Set the unique Client ID and Client Secret as values for the respective variables in `settings.h`
<img src=""./images/SpotifyCredentials.png"" width=""400"">

6. Click on ""Edit Settings"". Add ""http://esp8266.local/callback/"" to the Redirect URIs section.

   **NOTE** If you're running more than ThingPulse Spotify Remote in the same WiFi network you should choose a unique name rather than ""esp8266"". Regardless of what you choose it has to reflect what you set as `espotifierNodeName` in `settings.h`
<img src=""./images/SpotifyAppSettings.png"" width=""400"">

7. Don't forget to save your settings.
<img src=""./images/SpotifyAppSettingsSave.png"" width=""400"">

### Compile and run the application

After all this configuration it's about time to run the application!

1. First check the configuration in `settings.h` one more time to ensure the Spotify values match those set on the Spotify Developer Dashboard. Better safe than sorry, they say.

2. Attach your [ESP8266 Color Kit](https://thingpulse.com/product/esp8266-wifi-color-display-kit-2-4/) to your computer and select the correct serial port and flash settings in the Arduino IDE as per https://docs.thingpulse.com/guides/wifi-color-display-kit/#select-flash-mode-and-flash-size

3. Upload the code to your ESP8266

4. When you run this the first time you'll have to go through additional steps. The display will ask you to open the browser at a specific location. This will redirect you to the dialog below.
<img src=""./images/SpotifyConnectScreen.png"" width=""400"">

5. The next step is to calibrate the screen. Click on the white circles

6. Now open your Spotify player and start a song. If everything worked out you'll see the song information with artwork on the TFT screen!
"
170,phpfunk/alfred-spotify-controls,PHP,"# Spotify Controls for Alfred

All information for this workflow is now in the [wiki](https://github.com/phpfunk/alfred-spotify-controls/wiki).

## Releases
[View all release](https://github.com/phpfunk/alfred-spotify-controls/releases)

## Topics
* [Change Log](https://github.com/phpfunk/alfred-spotify-controls/wiki/Changelog)
* [Command List](https://github.com/phpfunk/alfred-spotify-controls/wiki/Commands)
* [Radio Stations](https://github.com/phpfunk/alfred-spotify-controls/wiki/Radio)
* [Searching](https://github.com/phpfunk/alfred-spotify-controls/wiki/Searching)
* [Updating](https://github.com/phpfunk/alfred-spotify-controls/wiki/Updating)"
171,adamontherun/SpotifyTokenRefresh,Ruby,"# SpotifyTokenRefresh

For apps that use the Spotify API, users are required to login once every 60 minutes unless you implement the Authorization Code flow. Using this flow requires that you setup your own server that performs a token swap and refresh. 

Use this quick deploy to Heroku for a one-click deployment of a free server that acts as your token swap/refresh service. You'll need to enter your Client ID, Client Secret and Callback URI. 

[![Deploy](https://www.herokucdn.com/deploy/button.svg)](https://heroku.com/deploy)

By default, this sets you up with a free server, which has the drawback that it goes to sleep after 30 minutes of inactivity. To keep your server alive, setup a service such as [StatusCake](https://statuscake.com) to ping your server once every ten minutes."
172,IAmJaysWay/Decentralized-Spotify,JavaScript,"#Decentralized Spotify Final Build
"
173,gSchool/spotify-albums-and-tracks,JavaScript,"# Spotify API Assignment

Spotify has a wonderful public API. Let's explore API usage using music because music is awesome. Your task will be to explore some of the endpoints that Spotify offers us. You'll want the documentation:

[https://developer.spotify.com/web-api/](https://developer.spotify.com/web-api/)

Outside of the documentation, which is expansive, Spotify offers an 'api console' which will create requests on your behalf. It's a lot like [Postman](https://www.getpostman.com/), check it out:

[https://developer.spotify.com/web-api/console/](https://developer.spotify.com/web-api/console/)

If you prefer to use Postman, you can! One of these tools will be useful. The nice thing about the Spotify Web Console is that it has a lot of human readable content to point you in the right direction.

## Getting the Code to Run

Fork then clone this repository! Then, from the repo directory run:

### Using Python

```
python -m SimpleHTTPServer
```

### Using Javascript

```
npm install -g http-server
http-server -p 8000
```

Now navigate chrome to http://localhost:8000

Try a search for your favorite artist!

## Whats Going On

As a baseline, we're making a single request to the Spotify API. You can look at the code or the network tab to see the request being made, but the gist is that we request to:

```
https://api.spotify.com/v1/search?type=artist&q=WHATEVER YOU TYPE
```

Head over to the API docs for more about the search endpoint! [https://developer.spotify.com/web-api/search-item/](https://developer.spotify.com/web-api/search-item/)

We parse the results, and populate them into the results area. Simple as pie.

## Your Task

Your task is to complete the function `displayAlbumsAndTracks`. Right now, when you click one of the results this function is called, but it simply prints to the console. This function should do 3 things:

1. Query the Spotify API for every album produced by the artist you clicked on.
2. For each of those albums fetch every track on the album.
3. Display this information to the user such that:
	* Albums appear with its release date.
	* Each album has its tracks displayed before the next album appears.
	* All of this information should be appended to this div: `<div id='albums-and-tracks'>`

This may seem simple, but it won't be. You will be using AJAX heavily; you will be parsing through some serious documentation; you will have to handle race conditions.

__Bonus__

Get the tracks 'popularity' metric and show it side by side with the track name.

### Heres a Tip
You'll need to use these two endpoints, but you may also need to use more:

[https://developer.spotify.com/web-api/console/get-album/](https://developer.spotify.com/web-api/console/get-album/)
[https://developer.spotify.com/web-api/console/get-artist-albums/](https://developer.spotify.com/web-api/console/get-artist-albums/)

"
174,jaedb/Iris,JavaScript,"Iris
####

Iris is an extension for the Mopidy music server. With support for Spotify, LastFM, Genius, Snapcast and many other extensions, Iris brings all your music into one user-friendly and unified web-based interface that works beautifully, no matter your device.

Built and maintained by James Barnsley.

.. image:: https://static.pepy.tech/personalized-badge/mopidy-iris?period=total&units=international_system&left_color=grey&right_color=green&left_text=Downloads
   :target: https://pepy.tech/project/mopidy-iris
.. image:: https://img.shields.io/pypi/v/mopidy-iris.svg?style=flat-square
   :target: https://pypi.org/project/Mopidy-Iris/
.. image:: https://img.shields.io/badge/donate-paypal-blue.svg?style=flat-square
   :target: https://www.paypal.com/cgi-bin/webscr?cmd=_donations&business=james%40barnsley%2enz&lc=NZ&item_name=James%20Barnsley&currency_code=USD&bn=PP%2dDonationsBF%3abtn_donate_LG%2egif%3aNonHosted

Features
********

- Full web-based interface controls for Mopidy
- Improved support for local libraries (powered by Mopidy-Local)
- Browse and manage your playlists and tracks
- Discover new, popular and related music (powered by Spotify)
- Multiple language support. `Want to provide a translation? <https://github.com/jaedb/Iris/wiki/Contributing#translations>`_
- Streaming controls with the ability to play audio from your browser (requires Snapcast)

Integrations
************

- `Spotify <https://developer.spotify.com/web-api/>`_
- `LastFM <https://www.last.fm/api>`_ for rich music metadata and artwork
- `Genius <https://docs.genius.com/>`_ for lyrics
- `Snapcast <https://github.com/badaix/snapcast/>`_ to stream audio to multiple devices

.. image:: https://raw.githubusercontent.com/jaedb/Iris/master/screenshot.jpg


Requirements
************

- Mopidy
- Mopidy-Spotify (recommended, not required)
- Mopidy-Local (recommended, not required)

Getting started
***************

- `Installation <https://github.com/jaedb/Iris/wiki/Getting-started#installing>`_
- `Debugging <https://github.com/jaedb/Iris/wiki/Advanced#debugging>`_
- `Issues and requests <https://github.com/jaedb/Iris/wiki/Support#before-you-log-an-issue>`_
- `Changelog <https://github.com/jaedb/Iris/releases>`_
"
175,matiassingers/spotify-pricing,JavaScript,"# spotify-pricing [![Gitter](http://img.shields.io/badge/gitter-join%20chat%20%E2%86%92-brightgreen.svg?style=flat-square)](https://gitter.im/matiassingers/spotify-pricing)

Check out the end result here: <http://mts.io/projects/spotify-pricing/>

I wrote a blog post about the project: <http://mts.io/2014/05/07/spotify-pricing-index/>

### dependencies
Pricing data was scraped using my own little Node.js crawler: [spotify-crawler](https://github.com/matiassingers/spotify-crawler)

Thanks to the following libraries:
- [D3.js](http://d3js.org/)
- [datamaps.js](http://datamaps.github.io/)
- [tinycolor.js](http://bgrins.github.io/TinyColor/)
- [restcountries.eu](http://restcountries.eu/)
- [money.js](http://josscrowcroft.github.io/money.js/)
"
176,silmood/Spotify-Streamer,Java,
177,ersel/spotify-cli-mac,JavaScript,"# :notes: Spotify Client for Mac OS X :notes:
A nodejs app to control Spotify without leaving your terminal. Only works with Mac Os as it relies on AppleScript behind the scenes to communicate with the Spotify app.

# Installation
    npm install spotify-cli-mac -g
Client will be available under the alias `spotify`

# Set-up
In order to use the client, you'll need to set Spotify Credentials. You can do this by going to [developer dashboard](https://developer.spotify.com/dashboard/applications) and then creating a new application.

Once you have created a new Spotify Application, just run the Spotify CLI with `spotify token` command to set your tokens.

# Demo
[![asciicast](https://asciinema.org/a/APkHEAAV5OEMtwH50kiz0Kkwk.svg)](https://asciinema.org/a/APkHEAAV5OEMtwH50kiz0Kkwk)

# Usage
    spotify
  Commands:

    search|s <type> [query...]  Search for a <track (t) | artist (ar) | album (al) | playlist (p) > (searches tracks by default)
    playlist|pl [username]      Get user's public playlists, by default use username in config.json
    recommend|rec               Recommend other songs based on the song currently playing.

    info|i                      Display information about the current track along with player status
    play [uri]                  Continue playing current track or play the track with the provided URI
    pause                       Pause the current track
    next|n                      Play the next track in the queue
    back|b                      Play the previous track
    mute|m                      Mute player
    unmute|u                    Unmute player
    volume|v                    Display player volume
    + [deltaVolume]             Turn the volume up by given amount (0-100), default:10
    - [deltaVolume]             Turn the volume down by given amount (0-100), default:10
    p                           Toggle play/pause
    replay|r                    Replay current track
    position|pos [newPosition]  Get or set player position [mm:ss], e.g: pos 1:23
    quit|q                      Quit Spotify :(
    open|o                      Open Spotify :)
    shuffle|ts                  Toggle shuffle on/off
    repeat|tr                   Toggle repeat on/off
    share|sh [type]             Display share <uri|url> and copy value to clipboard
    token|tk                    Change Client Spotify tokens
    user|me                     Set Spotify Username
    lyrics|ly                   Display the lyrics of currently playing track

  Options:

    -h, --help     output usage information
    -V, --version  output the version number

# Displaying Lyrics
In order to be able to use the `lyrics` command, you will need to get a `Client Access Token` for the `Genius API`.
Sign up for API access here: https://genius.com/api-clients

Once you have your client access token, edit the `~/.spotify-cli-config.json` with `GeniusAPIClientKey` key

Example
```json
{
  ""spotifyClientID"": ""XXXXXXX"",
  ""spotifyClientSecret"": ""XXXXXXX"",
  ""spotifyUsername"": ""XXXXXXX"",
  ""GeniusAPIClientKey"": ""XXXXXXX""
}
```

# Displaying Album artwork
Album artwork will also be displayed if you're using iTerm 2.9+.

*Contributions and feedback are welcome and encouraged!*
"
178,bundit/kord-app,JavaScript,"![kord-logo-small](https://user-images.githubusercontent.com/22352870/103503036-f198e980-4e07-11eb-94a7-e062e8979d36.png)

# Kord App

[Kord](https://www.kord.app): One place for all of your (Spotify | Soundcloud | Youtube) music. <br/>



Chromium and Firefox browsers supported only.

## Built With

- [React.js](https://reactjs.org/)
- [Gatsby.js](https://www.gatsbyjs.com/)
- [Redux](https://redux.js.org/)
- [SCSS](https://sass-lang.com/)
- [Express.js](https://expressjs.com/)
- [Postgresql](https://www.postgresql.org/)
- [Passport.js](http://www.passportjs.org/)

## Getting Started

### Prerequisites

- [Node](https://nodejs.org/en/) (v11.12.x)
- [npm](https://www.npmjs.com/get-npm) or [yarn](https://classic.yarnpkg.com/en/docs/install)
- [nvm](https://github.com/nvm-sh/nvm#installing-and-updating)

## Installation and Setup

Express is served on port 8888 (localhost:8888/) <br/>
Landing page (Gatsby) is served on port 8000 (localhost:8000/) <br/>
Application (Create React App) is served on port 3000 (localhost:3000/app) <br/>

### Running The Development Server

Changing your node version (if necessary)

```
$ nvm use 11.12.0
```

Using Yarn:

```
# install dependencies
$ yarn

# start servers
$ yarn dev
```

Using npm:

```
# install dependencies
$ npm install

# start servers
$ npm dev
```

### Environment Variables

#### Server Variables
Development server variables are stored in a "".env"" file at root

```
NODE_ENV=development
SPOTIFY_CLIENT_ID=XXXXX
SPOTIFY_CLIENT_SECRET=XXXXX
YOUTUBE_CLIENT_ID=XXXXX
YOUTUBE_CLIENT_SECRET=XXXXX
DATABASE_URL=XXXXX
JWT_SECRET=XXXXX
JWT_TOKEN_EXPIRE=XXXXX

# Callback Variables
SPOTIFY_CALLBACK=XXXXX
SPOTIFY_LINK_CALLBACK=XXXXX
YOUTUBE_CALLBACK=XXXXX
YOUTUBE_LINK_CALLBACK=XXXXX
```

The callback variables handle backend endpoints for Oauth authorization (Redirect URIs). You will need to add these URIs to your list of authorized origins on their respective platforms. Google calls them ""Authorized JavaScript origins"" and Spotify calls them ""Redirect URIs""<br>
```
# Development callback variables
SPOTIFY_CALLBACK=http://localhost:8888/auth/spotify/callback
SPOTIFY_LINK_CALLBACK=http://localhost:8888/auth/spotify/link/callback
YOUTUBE_CALLBACK=http://localhost:8888/auth/youtube/callback
YOUTUBE_LINK_CALLBACK=http://localhost:8888/auth/youtube/link/callback
```
```
# Production callback variables
SPOTIFY_CALLBACK={DOMAIN_BASE}/auth/spotify/callback
SPOTIFY_LINK_CALLBACK={DOMAIN_BASE}/auth/spotify/link/callback
YOUTUBE_CALLBACK={DOMAIN_BASE}/auth/youtube/callback
YOUTUBE_LINK_CALLBACK={DOMAIN_BASE}/auth/youtube/link/callback
```

#### Application Variables
Development app variables are stored in a "".env.development"" file in the ""client"" folder

```
REACT_APP_SC_KEY=XXXX
REACT_APP_YT_KEY=XXXX
REACT_APP_SENTRY_DNS=XXXX
REACT_APP_LAST_FM_KEY=XXXX
```
"
179,busybox11/NowPlaying-for-Spotify,JavaScript,"<img src=""https://github.com/busybox11/NowPlaying-for-Spotify/blob/master/assets/images/favicon.png?"" alt=""Logo"" width=""100px"" height=""100px"">

# NowPlaying for Spotify

Welcome on my project's GitHub page: **NowPlaying for Spotify**!

This is a Spotify Connect visualizer, which has had its codebase made in half a day.

This project is licensed under GNU GPL-3.0 license.

Website: [nowplayi.ng](https://nowplayi.ng)

Personal Discord account: `@busybox#2540`

Dedicated Discord server: [nowplayi.ng/discord](https://nowplayi.ng/discord)

Tip to me: [paypal.me/busybox11](https://paypal.me/busybox11)

Latest release: 1.6.6

## **Changelog**

v1.6.X
- Use of localStorage
- Added GNU GPL-3.0 license
- Updated Index page design 
- Updated French and English sentences 
- Compatibility with Dark Reader
- Better UI consistency / CSS tweaks
- More languages
- .env support (thanks @finnie2006!)

<details>
  <summary>v1.5.X</summary>
  
    - Added playback support (Premium account should be needed)
    - Added playback information
    - Added pause button (#17)
    - CSS improvements added for better responsive (#15 #16)
    - SEO improvements (#16)
    - Minor CSS improvements
</details>

<details>
  <summary>v1.4.X</summary>
  
    - Advertisements are recognized
    - Multiple artists are recognized
    - Experimental theme switcher
</details>

<details>
  <summary>v1.3.X</summary>
  
    - Now playing device name and type is showing
    - Cursor is hidden after a couple of seconds
    - Fullscreen button
</details>

![Regular theme](screenshots/regular.png)
*Regular theme*

![New theme](screenshots/new.png)
*New theme*

## **Coded in:**

HTML, CSS, JS, PHP

## **Used libraries:**

[Spotify Web API PHP by jwilsson](https://github.com/jwilsson/spotify-web-api-php) to obtain the token and refresh token,
[Spotify Web API JS by JMPerez](https://github.com/jmperez/spotify-web-api-js) to retrieve and display the currently playing song

## **Known bugs**

- [ ] Podcasts aren't recognized
- [X] ~~White flash when loading new artwork~~

## **Upcoming changes**

- [ ] OBS source (In progress!)
- [ ] Local players support (coming with [localmusic-api](https://github.com/busybox11/localmusic-api/projects) - [MPRIS electron app by @AryToNeX](https://github.com/AryToNeX/nowplaying-electron))
- [X] ~~Better config handling (e.g. automatic deployment, **HELP WANTED!**)~~
- [ ] Themes (experimental theme / theme switcher since v1.4.3)
- [ ] Chromecast integration
- [ ] Refactor everything (I'm sorry)

## **Feature ideas**

- Analytics panel

## **How to host this?**

You can use XAMPP (multi-platform) or Wampserver (Windows only) but any webserver with PHP 7.0 or greater is good to use, with the `php-curl` module.

**!!! If you are on Nginx you need to add this to your config, or else your .env will be exposed to the internet !!!**
```
location /.env {
    allow [YourIP]; # Allow your IP if you wanna, if not delete this line.
    deny all;
}
```

## **What modifications are required?**

You should have a declared app in Spotify's developer dashboard to obtain a `Client ID`.

*How to do this:*
As I said, the first thing is to create a Client ID (`Create a Client ID` button) on [Spotify's developer dashboard](https://developer.spotify.com/dashboard/applications).
Type your app's name in the `App or Hardware name` text field, and its description on the `App or Hardware description` text field. In the `What are you building ?` section, indicate the platform which you are building the app for, then click on the `NEXT` button. Answer to the commercial integration question, and continue. If necessary, fill the form and check all the boxes at the 3rd stage and you're ready to go. Your app is declared in Spotify's developer dashboard!

Now that you have your app, you have some modifications to do in one file: `.env`.
(If it doesn't exist, copy `example.env` to `.env`)

Edit those values:

- `YOUR_CLIENT_ID` by your Client ID available on your app's panel,
- `YOUR_CLIENT_SECRET` by your `Client Secret` available by clicking on the `Show Client Secret` button situated on the same webpage as your client ID,
- `YOUR_DOMAIN` by your redirect URL, in the case of a local hosting replace it by `http://localhost/token.php` in most cases. Basicaly, it's the accessible URL for the `token.php` page.

Let's go back on our app's panel. You need to declare the URL where the `token.php` page is located, for a local hosting it would be in most cases `http://localhost/token.php`. Click on the green `Edit settings` button situated on the top of the page, then in the `Redirect URIs` text field, indicate yours. ***ATTENTION***: what you typed should **IMPERATIVELY** be the same as what you wrote in the two precedent files! Then click on the `SAVE` button on the very bottom of the form. Your app is declared and ready to use!

## **Credits**
Flags by [Freepik](https://www.freepik.com/) of the [www.flaticon.com](https://www.flaticon.com/) website under [Creative Commons BY 3.0](http://creativecommons.org/licenses/by/3.0/) license.

## **Featured similar projects / forks**
- [NowPlaying Dashboard for Spotify by @peterdconradie](https://github.com/peterdconradie/Now-Playing-Dashboard-for-Spotify)
- [MPRIS electron app by @AryToNeX](https://github.com/AryToNeX/nowplaying-electron)
"
180,JMPerez/spotify-player,JavaScript,"# Spotify Player

A Node.js server plus a light JS library to create integrations with the [Spotify Web API Connect endpoints](https://developer.spotify.com/web-api/web-api-connect-endpoint-reference/).

## Using the library

Import the script `https://spotify-player.herokuapp.com/spotify-player.js`. Now you can log the user in and listen to updates on playback:

```js
var spotifyPlayer = new SpotifyPlayer();

spotifyPlayer.on('update', response => {
  // response is a json object obtained as a response of
  // https://developer.spotify.com/web-api/get-information-about-the-users-current-playback/
});

spotifyPlayer.on('login', user => {
  if (user === null) {
    // there is no user logged in or the user was logged out
  } else {
    // the user is logged in
    // user is a json object obtained as a response of
    // https://developer.spotify.com/web-api/get-current-users-profile/
  }
});

loginButton.addEventListener('click', () => {
    spotifyPlayer.login();
});

logoutButton.addEventListener('click', () => {
    spotifyPlayer.logout();
});

spotifyPlayer.init();
```

Have a look at http://codepen.io/jmperez/pen/MmwObE for an example of a visualization using this library.

The library uses a shared server to issue the initial access token and refreshed tokens. This means your integration could reach Spotify's rate limits easily. If you want to have more control on this, deploy the code to your own server using the following instructions.

## Server

The server can be run locally and also deployed to Heroku. You will need to register your own Spotify app and pass the credentials to the server. For that:

1. Create an application on [Spotify's Developer Site](https://developer.spotify.com/my-applications/).
2. Add as redirect uris both `http://localhost:5000/callback` (for development) and `<production_domain>/callback` (if you want to deploy your app somewhere)
3. Keep the client ID and client secret somewhere. You'll need them next.

### Running Locally

Make sure you have [Node.js](http://nodejs.org/).

```sh
$ npm install
$ CLIENT_ID=<your_client_id> CLIENT_SECRET=<your_client_secret> REDIRECT_URI=<your_redirect_uri> npm start
```

Your app should now be running on [localhost:5000](http://localhost:5000/).

## Deploying to Heroku

You will need to have the [Heroku CLI](https://cli.heroku.com/) installed.
 
```
$ heroku create
$ git push heroku master
$ heroku open
```
or

[![Deploy to Heroku](https://www.herokucdn.com/deploy/button.png)](https://heroku.com/deploy)

You will then need to set the environment variables [using `heroku config:set`](https://devcenter.heroku.com/articles/nodejs-support#environment-variables):
```
$ heroku config:set CLIENT_ID=<your_client_id>
$ heroku config:set CLIENT_SECRET=<your_client_secret>
$ heroku config:set REDIRECT_URI=<your_redirect_uri>
"
181,aakashns/ReactMusic,JavaScript,"# ReactMusic
Spotify-like music player interface made using React Native. See this for more details: https://hackernoon.com/building-a-music-streaming-app-using-react-native-6d0878a13ba4

## Demo

[Click here to see a demo](https://vimeo.com/168074017)
"
182,yueyericardo/Netease-to-Youtube-or-Spotify,JavaScript,"网易云-to-YoutubeMusic-Spotify-AppleMusic
-----------------------------------------  
[https://yyrcd.com/2018/11/14/n2s-zh/](https://yyrcd.com/2018/11/14/n2s-zh/)  
转移网易云歌单到YoutubeMusic, Spotify, AppleMusic的web实现
![](https://yyrcd-1256568788.cos.na-siliconvalley.myqcloud.com/yyrcd/2019-04-19-192138.png)
<br>

Netease-to-YoutubeMusic-Spotify-AppleMusic
----------------------------------------- 
[https://yyrcd.com/n2s](https://yyrcd.com/n2s)  
Web implement of transfering Netease Music list `to` YoutubeMusic, Spotify, AppleMusic.

Original repo (python): [@bjason](https://github.com/bjason/163MusicToSpotify)  
API: [@Binaryify](https://binaryify.github.io/NeteaseCloudMusicApi/#/)


PS:另一个小项目
----------------------------------------
https://music.yyrcd.com/music/?uid=10115387&type=1  
uid 为 userid  
type=0代表total time    
type=1代表Last Week  
![](https://yyrcd-1256568788.cos.na-siliconvalley.myqcloud.com/yyrcd/2019-04-19-191949.png)
"
183,nab0310/SpotifyML,Jupyter Notebook,"# SpotifyML
This is my first attempt at using Tensorflow and Classifiers to try and predict if I will like a song based on Spotify's audio features.
"
184,MahdiGhiasi/XpoMusic,C#,"# Xpo Music (formerly Xpotify)
A modern Spotify experience for Windows 10

**Get it from [XpoMusic.com](https://xpomusic.com/)**

## Building from source

#### Requirements

You need to have these components installed in order to build Xpo Music:

* Visual Studio 2019 (or 2017)
* Windows 10 SDK 18362
* TypeScript
* [Web Compiler extension for Visual Studio](https://marketplace.visualstudio.com/items?itemName=MadsKristensen.WebCompiler)

#### Configuration

Create a file named `Secrets.cs` in the `XpoMusic/` directory, and put the following content into it:

    namespace XpoMusic
    {
        internal static class Secrets
        {
            internal static readonly string SpotifyClientId = """";
            internal static readonly string SpotifyClientSecret = """";
            internal static readonly string GoogleAnalyticsTrackerId = """";
            internal static readonly string AppCenterId = """";
        }
    }

Sign up on [Spotify Developer website](https://developer.spotify.com/) and get an API key for yourself. Put Id and Secret that you get from Spotify into the `SpotifyClientId` and `SpotifyClientSecret` fields. You can leave the `GoogleAnalyticsTrackerId` empty.

Also, you will need to add `https://xpomusic.ghiasi.net/login/redirect` as the redirect URI on Spotify developer dashboard for the app entry you created. Alternatively, you can choose a different redirect URI and then modify [this line of code](https://github.com/MahdiGhiasi/Xpotify/blob/7e003b9879104a5b8b771f48475feca92155de8a/Xpotify/SpotifyApi/Authorization.cs#L18) accordingly.

## Contributing

If you want to work on a bug or an enhancement that is already present and approved in the Issues, please leave a comment under that issue stating that you're going to work on it (so we can avoid doing duplicate work).

Also, if you want to work on a new feature you have in mind for Xpo Music, please create an issue first so we can discuss it.

## License

Xpo Music is available under [GNU General Public License v3.0](https://github.com/MahdiGhiasi/Xpotify/blob/master/LICENSE.md).
"
185,FrontierPsychiatrist/node-spotify,C++,"node-spotify
============
[![Build Status](https://travis-ci.org/FrontierPsychiatrist/node-spotify.svg?branch=development)](https://travis-ci.org/FrontierPsychiatrist/node-spotify)

*Important notice*: Spotify send me an e-mail node-spotify.com is trademark infringement, so I had to remove it.
Maybe I will move the documentation to my own webpacke. Also, as many might have noticed, I ceased development
of node-spotify. If you are interested in taking over please contact me. For now I don't have the time and drive
to continue to work on it.

node-spotify wraps the C library [libspotify](https://developer.spotify.com/technologies/libspotify) for usage with
NodeJS.

A webpage for the project is here: http://www.node-spotify.com.

I'm working toward version 1.0.0 which is not meant to provide everything libspotify offers. But I intend to wrap all
libspotify types and provide methods to access them where possible. Options and convenience features my lack, though.

Dependencies
------------
* libspotify must be installed
    - Linux users get it from [here](https://developer.spotify.com/technologies/libspotify/)
    - OSX users can use homebrew (`brew install libspotify`) or download it from
      [here](https://developer.spotify.com/technologies/libspotify/)
* an appkey for libspotify, get it [here](https://developer.spotify.com/technologies/libspotify/#application-keys).
  Choose binary, not C code.
* users of libspotify must have a Spotify premium account, this is required by Spotify.
* (Linux only) If you want audio the ALSA audio system, should be installed in most distributions [1]

[1] See building from source if you don't need/want platform-native audio (i.e. ALSA/OpenAL) in node-spotify.

Building from source
--------------------
node-spotify is prebuilt with [node-pre-gyp](https://www.npmjs.com/package/node-pre-gyp). If your NodeJS version or
architecture is not available it will build automatically from source.

If you want to force a build from source you can run `npm install node-spotify --build-from-source`. There's one special
option you can set when compiling node-spotify: `--native_audio=false` will compile/link no ALSA/OpenAL audio code
(depending on your platform). Default is `true`. This is both settable for node-gyp and npm.

node-spotify uses [Nan](https://github.com/nodejs/nan) to compile on different NodeJS versions. 0.10, 0.12, 4.x, 5.x, 6.x.
should all work.


If you use OSX and have installed libspotify as a framework you need to edit the binding.gyp file. Remove ""-lspotify"" and
write instead as one link option: `""-framework OpenAL -framework libspotify""`. This is due to a bug in node-gyp
that will eliminate a duplicate ""-framework"" entry from the link settings. If you have installed libspotify via homebrew
you don't need this step.

Used software
-------------
* Base64 encoder from https://github.com/superwills/NibbleAndAHalf
* Sound playback is heavily based on https://developer.spotify.com/docs/libspotify/12.1.51/examples.html
"
186,warifp/SpotifyToolkit,PHP,"<H1 align=""center"">
SPOTIFY TOOLKIT
</H1>
<H4 align=""center"">
Spotify is a digital music streaming service, I made several tools for you.</br>
</H4>
<p align=""center"">
<a href=""https://github.com/warifp""><img alt=""Last Commit"" src=""https://img.shields.io/github/last-commit/warifp/SpotifyToolkit""/></a>
<a href=""https://github.com/warifp""><img alt=""Version"" src=""https://img.shields.io/github/v/release/warifp/SpotifyToolkit""/></a>
<a href=""https://github.com/warifp""><img alt=""Contributors"" src=""https://img.shields.io/github/contributors/warifp/SpotifyToolkit""/></a>
<a href=""https://github.com/warifp""><img alt=""Language"" src=""https://img.shields.io/github/languages/count/warifp/SpotifyToolkit""/></a>
<a href=""https://github.com/warifp""><img alt=""TopLanguage"" src=""https://img.shields.io/github/languages/top/warifp/SpotifyToolkit""/></a>
</br>
<a href=""https://github.com/warifp""><img alt=""Search"" src=""https://img.shields.io/github/search/warifp/SpotifyToolkit/spotify""/></a>
<a href=""https://github.com/warifp""><img alt=""Repository Size"" src=""https://img.shields.io/github/repo-size/warifp/SpotifyToolkit""/></a>
<a href=""https://github.com/warifp""><img alt=""Fork"" src=""https://img.shields.io/github/forks/warifp/SpotifyToolkit""/></a>
<a href=""https://github.com/warifp""><img alt=""Stars"" src=""https://img.shields.io/github/stars/warifp/SpotifyToolkit""/></a>
</p>

<p align=""center"">
Made with ❤️ by <a href=""https://github.com/warifp"">Wahyu Arif Purnomo</a>
</p>

<p align=""center"">
<a><br> VERSION 1.0 </br></a>
  <img src=""images/version/1.0.png"" width=""350"" title=""Version 1.0"" alt=""Version 1.0"">
</p>

<p align=""center"">
<a><br> VERSION 2.0 </br></a>
  <img src=""images/version/2.0.png"" width=""350"" title=""Version 2.0"" alt=""Version 2.0"">
</p>

<p align=""center"">
<a><br> VERSION 3.0 </br></a>
  <img src=""images/version/3.0.png"" width=""350"" title=""Version 3.0"" alt=""Version 3.0"">
</p>

## Features in tools

| Name                               | Status             | Information                                        |
| ---------------------------------- | ------------------ | -------------------------------------------------- |
| Check all accounts                 | :white_check_mark: | check accounts by list                             |
| Check account email                | :white_check_mark: | check accounts by email                            |
| Create an account                  | :white_check_mark: | create account fast                                |
| Create an account [mass]           | :white_check_mark: | create account fast by list file                   |
| Music or Playlist Downloader       | ❌                 | download music by list or playlist                 |


## Version

Version 1.0 :

    sorry, no video tutorial.

  Changelog :

-   Build

Version 2.0 :

    sorry, no video tutorial.

  Changelog :

-   add account information in results menu ""check all accounts"".
-   add log live user|pass in folder result/live.log

Version 3.0 :

    sorry, no video tutorial.

  Changelog :

-   add menu ""Create an account [mass]""

## Installation

### Windows or Linux
You can download the latest composer in [here](https://getcomposer.org/download/).

    git clone https://github.com/warifp/SpotifyToolkit

    composer 
    
### Termux

    pkg install php

    pkg install curl

    pkg update

    git clone https://github.com/warifp/SpotifyToolkit


## Requirements for using this tool

We need several requirements to use this tool to run smoothly.

##### Linux

![PHP 7.X](https://img.shields.io/badge/PHP-7.X-success.svg ""PHP 7.X"")

##### Windows

![PHP CURL](https://img.shields.io/badge/XAMPP-7.3.5-success.svg ""XAMPP 7.X"")

## Usage

Enough to execute the command :

    php run.php


and don't forget to ask at [issue page](https://github.com/warifp/SpotifyToolkit/issues)
If you have additional information, you can make it on the [issue page](https://github.com/warifp/SpotifyToolkit/issues).

## Thanks

Thank you for all.

1.  CLIMate Library : [CLIMate](https://climate.thephpleague.com/).
2.  ASCII Art Generator : [TAAG](http://patorjk.com/software/taag).

## Donation

    If you want to buy my coffee, you can send payments Paypal.

[![Donate](https://img.shields.io/badge/Donate-PayPal-green.svg)](https://paypal.me/wahyuarifpurnomo)

## Disclaimer

This is an open source for everyone, you may redistribute, modify, use patents and use privately without any obligation to redistribute. but it should be noted to include the source code of the library that was modified (not the source code of the entire program), include the license, include the original copyright of the author (warifp), and include any changes made (if modified). Users do not have the right to sue the creator when there is damage to the software or even demand if there is a problem caused by the makers of this tool. because every risk is caused by the user risk itself.
"
187,VoldemortCommunity/SpotifyChecker,,"# Due to the new changes in Spotify's Login system, the program is rather useless at the moment. And thus it had been archived.

<a href=""https://www.python.org/download/releases/3.0/""><IMG src=""https://img.shields.io/pypi/pyversions/3.svg?label=Python&logo=python""></a>
<a href=""https://t.me/VoldemortCommunity""><img src=""https://img.shields.io/badge/Telegram-Group-blue.svg?logo=Telegram""></a>

# SpotifyChecker
- ~~Mass Spotify Accounts Checker v0.1 (Uploaded on 19/02/2019 01.20 IST)~~
- ~~Mass Spotify Accounts Checker v0.2 (Updated on 19/02/2019 17.35 IST)~~
- ~~Mass Spotify Accounts Checker v0.2.1 (Updated on 20/02/2019 19.23 IST)~~
- ~~Mass Spotify Accounts Checker v0.2.2 (Updated on 21/02/2019 14.00 IST)~~
- ~~Mass Spotify Accounts Checker v0.3 (Updated on 22/02/2019 00.50 IST)~~
- ~~Mass Spotify Accounts Checker v1.0 (Updated on 13/03/2019 2200 IST)~~
- ~~Mass Spotify Acxounts Checker v1.1 (Updated on 14/03/2019 1800 IST)~~
- ~~Mass Spotify Accounts Checker v1.2 (Updated on 28/03/2019 1330 IST)~~
- ~~Mass Spotify Accounts Checker v1.3 (Updated on 05/11/2019 1448 IST)~~
- Mass Spotify Accounts Checker v2.0 (Updated on 22/03/2020 2330 IST)

## For Educational Purposes Only.
#### I Will Not be Responsible for Any Kind of Problems That Arise due to Unfair Usage.
###### P.S. You Know What I Mean. xD

## v2.0 Release Notes.
* Built from Scratch with ***Python 3.8.***
* Intuitive, Noob Friendly UI/UX.
* ***Efficiency Boost of 954.739%***¹ (I did the actual Math).
* Added *Multithreading*².
* ***YOU COULDN'T ASK FOR MORE. Period.***
* Report any Bugs at [@hewhomustn0tbenamed](https://t.me/hewhomustn0tbenamed) (Telegram)
* Join the Group at [@VoldemortCommunity](https://t.me/VoldemortCommunity) (Telegram)


¹ Due to Multithreading, the Processing is Much Faster with Benchmark Results.
² Due to Android Limitations, and Considering most of us don't have a Flagship Phone (We wouldn't need this program if we did),  the Threads are Capped at 8 Currently. Probably subject to Change in the not so distant future.

## v1.0 Release Notes.
* Completely Functional.
* Report any Bugs at [@hewhomustn0tbenamed](https://t.me/hewhomustn0tbenamed) (Telegram)
* Join the Group at [@VoldemortCommunity](https://t.me/VoldemortCommunity) (Telegram)
* Enjoy.

## Changelog


### v2.0

* Complete Rebase, ***Switched to Python***.
* More Intuitive, Noob Friendly UI.
* Added __Multithreading__ making the Program *950% More Efficient*.
* Added Scanning from Internal Storage for Noobs.
* YOU COULDN'T ASK FOR MORE. PERIOD.

### v1.3
* ***""errorCSRF"" Fixed, Thanks to @strflw (Github)***

### v1.2
* Fixed Bugs!
* ***Added Output Parsing***
* ***Added Option to Display Only Hits***
* Improved UI
* Completely Noob Friendly Now.

### v1.1
* Fixed Bugs & Updater!

### v1.0
* ***v1.0 is Out Now.***
* **Colourised Output. Hits are now GREEN.**
* **Added Functionality to** ***Save Hits.***
* ***Added Updater.*** Automatically Check for Updates Before Each Run.
* Added Automatic Configuration & Dependencies Installation on First Run.
* Removed Username:Password Combo Type as it was Obsolete
* Some Under-The-Hood Changes..UI Tweaks & Performance Upgrades.

### v0.3
* ***Added Email:Password Combo.***
* Reverted to 'echo' for Banner as Most Dickheads don't have 'figlet' installed!
* Completely Functional.

### v0.2.2
* Fixed Spacing Bug
* Changed to 'figlet' for Banner for Faster Performance

### v0.2.1
* Optimised Code for Faster Performance
* _Beautified_ Source Code __xD__


### Regards,
### @voldemort1912.🖖🏻

## Donate

- <img src=""https://img.shields.io/badge/Donate-BTC-brightgreen.svg?logo=Bitcoin""> : `3BJghXSoE82JP1ioSKBUqTZ5mdJJTQd2e3`
- [<img src=""https://img.shields.io/badge/PayPal-Donate-blue.svg?logo=PayPal""> : PayPal](https://paypal.me/Voldemort1912)

## HOW TO USE.
* Open a Terminal & Run `pkg update && pkg upgrade && pkg install git python -y`
* Next, Run `git clone https://github.com/VoldemortCommunity/SpotifyChecker`
* Navigate to the Newly Created SpotifyChecker Directory using `cd SpotifyChecker`
* To Start the Program Use `python SpotifyChecker`
* It Will Automatically Install Dependencies & Configure Everything on the First Run. Grant Storage Permissions for Android 7.0 & Higher if Prompted to do So.
* Follow the Onscreen Instructions
* Make Sure you move the Combo List to *Internal Storage/VoldemortCommunity/SpotifyChecker/ComboLists*
* After Execution, You can Collect the Hits from *Internal Storage/VoldemortCommunity/SpotifyChecker/Hits*


## ~~To-Do~~

* ~~Create Banner~~
* ~~Add email:password Combo Support~~
* ~~Parse Output~~
* ~~Colourise Output~~
* ~~Add Functionality to Store Output as .txt File~~
* ~~Add Updater~~
* ~~User Defined Customization.~~
* Suggestions? [@hewhomustn0tbenamed (Telegram)](https://t.me/hewhomustn0tbenamed)
* Hotel? __Tri*ago__

### Issues?

* Report Them on GitHub.
* Contact Support : [@VoldemortCommunity (Telegram)](https://t.me/VoldemortCommunity)

### Feature Requests & Feedback

* Contact Me : [@hewhomustn0tbenamed (Telegram)](https://t.me/hewhomustn0tbenamed)
* Mail Me : [Here](mailto:voldemort9278@gmail.com)

#### Have Questions?

* Join the Conversation at [@VoldemortCommunity](https://t.me/VoldemortCommunity).
* ~~DM me @Voldemort1912.~~
* DM me on Telegram [@hewhomustn0tbenamed](https://t.me/hewhomustn0tbenamed).
"
188,lukef7fywmrp/spotify-redesign,JavaScript,"# Next.js + Tailwind CSS Example

This example shows how to use [Tailwind CSS](https://tailwindcss.com/) [(v2.2)](https://blog.tailwindcss.com/tailwindcss-2-2) with Next.js. It follows the steps outlined in the official [Tailwind docs](https://tailwindcss.com/docs/guides/nextjs).

It uses the new [`Just-in-Time Mode`](https://tailwindcss.com/docs/just-in-time-mode) for Tailwind CSS.

## Preview

Preview the example live on [StackBlitz](http://stackblitz.com/):

[![Open in StackBlitz](https://developer.stackblitz.com/img/open_in_stackblitz.svg)](https://stackblitz.com/github/vercel/next.js/tree/canary/examples/with-tailwindcss)

## Deploy your own

Deploy the example using [Vercel](https://vercel.com?utm_source=github&utm_medium=readme&utm_campaign=next-example):

[![Deploy with Vercel](https://vercel.com/button)](https://vercel.com/new/git/external?repository-url=https://github.com/vercel/next.js/tree/canary/examples/with-tailwindcss&project-name=with-tailwindcss&repository-name=with-tailwindcss)

## How to use

Execute [`create-next-app`](https://github.com/vercel/next.js/tree/canary/packages/create-next-app) with [npm](https://docs.npmjs.com/cli/init) or [Yarn](https://yarnpkg.com/lang/en/docs/cli/create/) to bootstrap the example:

```bash
npx create-next-app --example with-tailwindcss with-tailwindcss-app
# or
yarn create next-app --example with-tailwindcss with-tailwindcss-app
```

Deploy it to the cloud with [Vercel](https://vercel.com/new?utm_source=github&utm_medium=readme&utm_campaign=next-example) ([Documentation](https://nextjs.org/docs/deployment)).
"
189,hassio-addons/addon-spotify-connect,Jinja,"# Home Assistant Community Add-on: Spotify Connect

[![GitHub Release][releases-shield]][releases]
![Project Stage][project-stage-shield]
[![License][license-shield]](LICENSE.md)

![Supports armhf Architecture][armhf-shield]
![Supports armv7 Architecture][armv7-shield]
![Supports aarch64 Architecture][aarch64-shield]
![Supports amd64 Architecture][amd64-shield]
![Supports i386 Architecture][i386-shield]

[![Github Actions][github-actions-shield]][github-actions]
![Project Maintenance][maintenance-shield]
[![GitHub Activity][commits-shield]][commits]

[![Discord][discord-shield]][discord]
[![Community Forum][forum-shield]][forum]

[![Sponsor Frenck via GitHub Sponsors][github-sponsors-shield]][github-sponsors]

[![Support Frenck on Patreon][patreon-shield]][patreon]

Play Spotify music on your Home Assistant device.

![The Spotify Connect add-on](images/screenshot.png)

## About

The Home Assistant Spotify Connect add-on allows you to use your device,
running Home Assistant, to play your Spotify music. This add-on uses the
Spotify Connect protocol, which makes it a device that can be controlled
by all the official clients.

For example; Running Home Assistant on a Raspberry Pi with this add-on
installed will allow you to play your Spotify music on the Pi. So all you'll
have to do is hook up your sound system to the Pi and start booming!

[:books: Read the full add-on documentation][docs]

## Support

Got questions?

You have several options to get them answered:

- The [Home Assistant Community Add-ons Discord chat server][discord] for add-on
  support and feature requests.
- The [Home Assistant Discord chat server][discord-ha] for general Home
  Assistant discussions and questions.
- The Home Assistant [Community Forum][forum].
- Join the [Reddit subreddit][reddit] in [/r/homeassistant][reddit]

You could also [open an issue here][issue] GitHub.

## Contributing

This is an active open-source project. We are always open to people who want to
use the code or contribute to it.

We have set up a separate document containing our
[contribution guidelines](.github/CONTRIBUTING.md).

Thank you for being involved! :heart_eyes:

## Authors & contributors

The original setup of this repository is by [Franck Nijhof][frenck].

For a full list of all authors and contributors,
check [the contributor's page][contributors].

## We have got some Home Assistant add-ons for you

Want some more functionality to your Home Assistant instance?

We have created multiple add-ons for Home Assistant. For a full list, check out
our [GitHub Repository][repository].

## License

MIT License

Copyright (c) 2018-2022 Franck Nijhof

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the ""Software""), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in all
copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED ""AS IS"", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
SOFTWARE.

[aarch64-shield]: https://img.shields.io/badge/aarch64-yes-green.svg
[amd64-shield]: https://img.shields.io/badge/amd64-yes-green.svg
[armhf-shield]: https://img.shields.io/badge/armhf-no-red.svg
[armv7-shield]: https://img.shields.io/badge/armv7-yes-green.svg
[commits-shield]: https://img.shields.io/github/commit-activity/y/hassio-addons/addon-spotify-connect.svg
[commits]: https://github.com/hassio-addons/addon-spotify-connect/commits/main
[contributors]: https://github.com/hassio-addons/addon-spotify-connect/graphs/contributors
[discord-ha]: https://discord.gg/c5DvZ4e
[discord-shield]: https://img.shields.io/discord/478094546522079232.svg
[discord]: https://discord.me/hassioaddons
[docs]: https://github.com/hassio-addons/addon-spotify-connect/blob/main/spotify/DOCS.md
[forum-shield]: https://img.shields.io/badge/community-forum-brightgreen.svg
[forum]: https://community.home-assistant.io/t/home-assistant-community-add-on-spotify-connect/61210?u=frenck
[frenck]: https://github.com/frenck
[github-actions-shield]: https://github.com/hassio-addons/addon-spotify-connect/workflows/CI/badge.svg
[github-actions]: https://github.com/hassio-addons/addon-spotify-connect/actions
[github-sponsors-shield]: https://frenck.dev/wp-content/uploads/2019/12/github_sponsor.png
[github-sponsors]: https://github.com/sponsors/frenck
[i386-shield]: https://img.shields.io/badge/i386-yes-green.svg
[issue]: https://github.com/hassio-addons/addon-spotify-connect/issues
[license-shield]: https://img.shields.io/github/license/hassio-addons/addon-spotify-connect.svg
[maintenance-shield]: https://img.shields.io/maintenance/yes/2022.svg
[patreon-shield]: https://frenck.dev/wp-content/uploads/2019/12/patreon.png
[patreon]: https://www.patreon.com/frenck
[project-stage-shield]: https://img.shields.io/badge/project%20stage-experimental-yellow.svg
[reddit]: https://reddit.com/r/homeassistant
[releases-shield]: https://img.shields.io/github/release/hassio-addons/addon-spotify-connect.svg
[releases]: https://github.com/hassio-addons/addon-spotify-connect/releases
[repository]: https://github.com/hassio-addons/repository
"
190,skimmilk/spotifyripper,Shell,"spotifyripper
=============

Rips music from Spotify as it plays through the Spotify Linux client on Debian/Ubuntu

Run with:
```bash
./ripper.sh your_music_directory
```

If no directory is specified, it dumps into the current directory.
Requires that Spotify is running and has played music *before* the ripper is ran and no other music software is running.

This application records the audio that is played from Spotify, much like one would rip songs from a radio.

## Features

The recorded audio is automatically splitted and tagged with the artist, song name, track number, and album cover image information, and encoded in 192kbps ogg vorbis.

Because audio interruptions can occur which get recorded along with the song, the ripper gains control over the sound output so only the sound coming from Spotify gets recorded, meaning Spotify will not play through the speakers, however no other sound playing on the machine will be recorded during the rip.

In order to control and rip Spotify's audio, the client has to be registered with the audio server, which only happens when Spotify plays a sound or song.

In order to split and tag the recording, the information about play/pause/skip events that are sent to the GNOME sound indicator are read.

If any other application sends play/pause/skip events to the sound indicator, the ripper's audio splicing and tagging messes up.
"
191,winkerVSbecks/spotify-artist-lookup,JavaScript,"Spotify Artist Lookup

A React Native demo project

To run:

  $ npm install
  for iOS
  $ react-native ios
  for Android
  $ react-native android

You will need to install the iOS and/or Android SDK to run the apps.
"
192,madhavthaker/spotify-recommendation-system,Jupyter Notebook,"# spotifyrecommendationsystem
Generate recommendations for any one of your spotify playlists!

Useful resources:
1. My YT video describing the process: https://www.youtube.com/watch?v=tooddaC14q4
2. Kaggle Data: https://www.kaggle.com/yamaerenay/spotify-dataset-19212020-160k-tracks
3. Spotipy Documentation: https://spotipy.readthedocs.io/en/2.16.1/
"
193,Quacky2200/Spotify-Web-Player-for-Linux,JavaScript,"**Please Note:** This project has been discontinued.

If you'd like to read more, please refer to my [discontinuation of Spotify Web Player for Linux](http://mattjames.co.nf/journal/spotify-web-player-discontinued).

I apologise to anyone who feels disappointed about this decision, it was one that took a lot to think about. It's sadly what happens when you rely on a third-party in all honesty.

If you'd like to continue this project, please either add a pull request or Fork it. 

Kudos
___

![Spotify - Logged In](https://cloud.githubusercontent.com/assets/4623599/14404283/bd6f7d9c-fe69-11e5-9588-628248c25dfc.png)
# Spotify Web Player for Linux

[![Join the chat at https://gitter.im/SWP4L/Lobby](https://badges.gitter.im/SWP4L/Lobby.svg)](https://gitter.im/SWP4L/Lobby?utm_source=badge&utm_medium=badge&utm_campaign=pr-badge&utm_content=badge)
An Electron wrapper of Spotify Web Player to increase desktop integration for a stable Spotify Player for Linux replacement

## Functionality
* (D-Bus) Notifications 
* Tray Icon with Play, Previous, Next, Logout, and Quit functionality. 
* Non-intrusive Spotify advertisements (except Spotify playback advertisements). 
* D-Bus MPRIS controller support
* Sing! A MusixMatch viewer integrated - sing your favourite songs from within the application
* Light theme
* Preferences - Customimize small things that can make a big difference
* Search bar linked to Ctrl+S
* Close To Tray (Minimize To Tray without the Tray Icon)
* Update Button
* Remembers where you left off 
* Media Keys 
* Mix-&-Match tray icons to your DE/Icon preferences

## Screenshots
![Tray Icon](https://cloud.githubusercontent.com/assets/4623599/17799675/63a4c57e-65d4-11e6-8363-30a41ed7f67e.png)
![Controls in the Ubuntu Sound Menu](https://cloud.githubusercontent.com/assets/4623599/18899621/44c10b18-8532-11e6-9783-26756b511a6d.png)
![Notifications](https://cloud.githubusercontent.com/assets/4623599/18899796/8c8e62d2-8533-11e6-831a-38fae1b627ba.png)
![Non-intrustive Adverts](https://cloud.githubusercontent.com/assets/4623599/17799728/db82909e-65d4-11e6-98b3-ecccaf8de53a.png)
![Sing! A MusixMatch lyric integrated into the application](https://cloud.githubusercontent.com/assets/4623599/18258206/39226510-73c9-11e6-85c3-b58279fb88a1.png)
![Light theme](https://cloud.githubusercontent.com/assets/4623599/18234249/1b5d019e-72f6-11e6-835d-4b63a24eb920.png)
## How to install

Check out the [Releases](https://github.com/Quacky2200/Spotify-Web-Player-for-Linux/releases) page.

#### If you cannot find a release, don't worry! It's easy to use with a few simple *linux only* commands...

Debian/Ubuntu/Linux Mint
```
sudo apt-get install libappindicator1 libnotify4 
```
Arch and Arch derivatives (*AUR packages maintained by twa022*)

**stable: https://aur.archlinux.org/packages/spotify-web-player/**

**development: https://aur.archlinux.org/packages/spotify-web-player-git/**

## Manual Install

##### Please make sure that libappindicator-1, dbus and libnotify4 packages are installed

**These commands require root priviledges (e.g. `sudo su`, `su root`)**

Make the appropriate directories
```
mkdir -p /usr/bin/spotifywebplayer/libs/electron && mkdir /usr/bin/spotifywebplayer/node_modules
```
Download the archive from GitHub
```
wget https://github.com/Quacky2200/Spotify-Web-Player-for-Linux/archive/1.0.0.tar.gz
```
Extract Spotify Web Player
```
tar -zxvf 1.0.0.tar.gz --strip 1 -C /usr/bin/spotifywebplayer
```
We must download a few prerequisites
```
sh /usr/bin/spotifywebplayer/get_prerequisites.sh
```
If you are running 32 bit, we must get these modules
```
wget https://github.com/Quacky2200/Spotify-Web-Player-for-Linux/releases/download/1.0.0/node_modules_x86.zip && unzip node_modules_x86.zip -d /usr/bin/spotifywebplayer/node_modules
```
However, if you're running 64 bit, we must get these modules
```
wget https://github.com/Quacky2200/Spotify-Web-Player-for-Linux/releases/download/1.0.0/node_modules_x64.zip && unzip node_modules_x64.zip -d /usr/bin/spotifywebplayer/node_modules
```
Create Application Icon & Application Launcher
```
cp /usr/bin/spotifywebplayer/icons/spotify.png /usr/share/pixmaps/ && printf ""[Desktop Entry]\nVersion=1.0.0\nName=Spotify Web Player\nComment=Music for every moment. Spotify is a digital music service that gives you access to millions of songs.\nExec=bash /usr/bin/spotifywebplayer/spotifywebplayer\nPath=/usr/bin/spotifywebplayer\nIcon=spotify\nCategories=GNOME;GTK;AudioVideo;Audio;Player;\nActions=PlayPause;Next;Previous;\nType=Application\nTerminal=false\n[Desktop Action PlayPause]\nName=Play/Pause\nExec=dbus-send --print-reply --reply-timeout=2500 --session --dest=org.mpris.MediaPlayer2.spotifywebplayer /org/mpris/MediaPlayer2 org.mpris.MediaPlayer2.Player.PlayPause\n[Desktop Action Next]\nName=Next\nExec=dbus-send --print-reply --session --dest=org.mpris.MediaPlayer2.spotifywebplayer /org/mpris/MediaPlayer2 org.mpris.MediaPlayer2.Player.Next\n[Desktop Action Previous]\nName=Previous\nExec=dbus-send --print-reply --session --dest=org.mpris.MediaPlayer2.spotifywebplayer /org/mpris/MediaPlayer2 org.mpris.MediaPlayer2.Player.Previous"" > /usr/share/applications/spotifywebplayer.desktop
```
Make application launchable
```
chmod +x /usr/share/applications/spotifywebplayer.desktop && chmod +x /usr/bin/spotifywebplayer/spotifywebplayer
```
Launch the application with `gtk-launch spotifywebplayer` or `bash /usr/bin/spotifywebplayer/spotifywebplayer`

## Requirements
libappindicator1, libnotify4, wget, unzip, dbus
"
194,onemanbuilds/SpotifyAccountCreator,Python,"# SpotifyAccountCreator
 Creates Spotify accounts for you.

# Installation
```
pip3 install -r requirements.txt
``` 

# Config
 method (1 - Valid Credentail Lookalike | 2 - Random String Generation)<br/>
 use_proxy (0 - Proxyless | 1 - Proxy).<br/>
 proxy_type (1 - HTTPS | 2 - SOCKS4 | 3 - SOCKS5).<br/>
 threads (Higher means faster performance, but more chance for inaccurate results).<br/>
 birth_year_start (Min birth year for the registered accounts).<br/>
 birth_year_end (Max birth year for the registered accounts).<br/>
 webhook_enable (0 - Disable webhook support | 1 - Enable webhook support).<br/>
 webhook_url (You have to enter your webhook url here).

# Tool
![](https://i.ibb.co/QnFYWcB/spotify-account-creator-tool.png)

# Example
![](https://i.ibb.co/JHHg3Md/spotify-account-creator-example.png)

  
# Legal
 This was merely a speedrun to demonstrate how account creators work.<br/>
 This is illegal if you use this without the consent of the owners (in this case, the Spotify team).<br/>
 The software designed to perform website security testing.<br/>
 The author is not responsible for any illegal use of these programs.<br/>
 I am not accountable for anything you get into.<br/>
 I am not accountable for any of your actions.<br/>
 This is 100% educational, please do not misuse this tool.
 
"
195,daspartho/SpotiByeAds,Python,"# SpotiByeAds
 [![made-with-python](https://img.shields.io/badge/Made%20with-Python-1f425f.svg)](https://www.python.org/) 
 [![GitHub license](https://img.shields.io/github/license/daspartho/SpotiByeAds.svg)](https://github.com/daspartho/SpotiByeAds/blob/main/LICENSE)
 [![Documentation Status](https://readthedocs.org/projects/spotibyeads/badge/?version=latest)](https://spotibyeads.readthedocs.io/en/latest/?badge=latest)
 [![GitHub stars](https://img.shields.io/github/stars/daspartho/SpotiByeAds.svg?style=social&label=Stars&maxAge=2592000)](https://github.com/daspartho/SpotiByeAds/stargazers/)
 [![GitHub stars](https://img.shields.io/github/forks/daspartho/SpotiByeAds?style=social)](https://github.com/daspartho/SpotiByeAds/network/members)

No one likes interruptions! Don't you hate it when you're listening to your favorite jazz track or your EDM playlist and an ad for Old Spice or Pepsi started playing, interrupting your mood? With SpotiByeAds, you can listen ad-free, allowing you to concentrate less on those ads and more towards the task at hand!

# How it works?
SpotiByeAds, or SBA for short, utilizes Python with the SpotiPy API and Pynput Libraries as well as the `os` and `sys` modules in order to provide you with an ad-free experience.

First, it asks you for your Spotify Username, Client ID and Client Secret (which is done by running `python main.py`). Of course if you've used this program and have saved the credentials, it should load a json file with your credentials in it and if not, it will ask for your credentials.
Please note that whenever you enter your credentials, you have the option of either saving your credentials for future use, or keeping your credentials just for that session of using SBA.

After SBA has your credentials, it will establish a connection with Spotify by restarting it and setting it to your last known track/playlist.
When an ad enters your spotify queue, SBA will detect the current track as an ad and restart the app. After the restart, SBA will automatically queue up the next track!

# Requirements
- Python 3
- Pip (Python's Package Manager)

# Installation
> It should be noted that this is a quick way to get SBA (SpotiByeAds) up and running!
>
> For a detailed documentation, go [here](https://spotibyeads.readthedocs.io/en/latest/).

- First, clone the repository.
```
git clone https://github.com/daspartho/SpotiByeAds.git 
```
- Then, change your current directory into the SpotiByeAds repository.
```
cd SpotiByeAds
```
- Finally, install the requirements in the requirements file.
```
pip install -r requirements.txt
```
- From here, SpotiByeAds is installed. Continue to the Setting Up section in order to connect SpotiByeAds to Spotify itself.

# Setting up

You should need to do these only the first time.

1. Go to https://developer.spotify.com/dashboard and sign in with your Spotify account.
2. Click on the 'CREATE AN APP' option and provide an app name and app description as you'd like.
3. Go to 'EDIT SETTINGS' and fill in the Redirect URIs placeholder with http://localhost:8080/, and click on Save.
4. Copy the **Client ID** and **Client Secret** and paste it in when you start the script later on.
   - ⚠️ **Please remember to never share your Client Secret with anyone. This could lead to your account getting stolen or irregular Spotify user behavior that could lead to account termination.**
   - **Developers of SpotiByeAds will never ask for your Client Secret.**

⚠️⚠️⚠️

If you are on Linux and installed a **containerized** version of Spotify (e.g via Snap or Flatpack) or any unofficial forms of distribution, please paste the path to the Spotify executable on your computer (or a command that starts up the Spotify app) in the `main.py` script on the line described below:
```python
    PATH = (shutil.which(""spotify"")  # For any system with spotify on $PATH
            or (""{HOMEDRIVE}{HOMEPATH}\AppData\Roaming\Spotify\Spotify.exe""
                .format_map(os.environ) if os.name == ""nt""  # Windows
                else ""/Applications/Spotify.app"" if sys.platform == ""darwin""  # MacOS
                else """"  # Custom path if installation is different
               )
           )
```
Please find this part of the script and paste the path/command within the `""""` (empty quotes) on the line with the comment `# Custom path ...`.

This is also applicable on any other OS, if the Spotify installation path is different from the usual (and is not included in the $PATH environment variable).

⚠️⚠️⚠️

# Usage
1. Open Spotify and start your favourite track.
2. Run the script from a terminal using `python main.py` in the local repository's directory (or probably by double-cliking on the `main` python script from your file explorer on Windows).
   - If it's the first time running the script, enter your Spotify username and paste in the **Client ID** and **Client Secret** when prompted to enter them.
4. Congratulations! You can now listen to Spotify with no ads and the peace of mind you deserve 😁.

## Pausing playback, Skipping tracks, Changing playlists.

Due to the way the script works, pausing and playing or manually changing tracks disrupts it's work, such that the next ad that comes up might not be skipped.
Not, to worry, the script has a way around this...

When you want to perform any of these actions:
1. Go to the terminal where in the script is running.
2. Press `Ctrl-C` i.e hold down the `Ctrl` key and tap the `C` key.
3. Follow the prompts to perform your desired action.

⚠️**Note**: If you're using **Command Prompt** on windows, please note that it might have some unwanted behaviour with keyboard input that affects this feature. **You are strongly adviced to run the script in _Windows Powershell_**.

# Contributing
If you want to contribute code, just write a quick pull request and the developers will take a look at it.
If you want to suggest an idea, just write an issue and the developers will check it out!

# Building

## MacOS / Linux 
If you'd like to build for Mac / Linux, do the following:
1. To build in a development environment (to make sure it works right), run `python setup.py py2app -A`. Please note: This builds the app in something called *alias mode*. This is NOT a proper build, and will only work on the machine it was run on.
2. To build a proper package, run `python setup.py py2app`. 

## Any major platform
You'll need Python 3 with the `PyInstaller` package installed. The run the following command in a terminal from the project directory.
```
pyinstaller --onefile --collect-submodules pynput -c -n SpotiByeAds main.py
```
If succesful, then check for the executable file in the `dist/` directory created.
"
196,idanlo/react-spotify-api,JavaScript,"﻿# react-spotify-api

A component library that helps you interact with the Spotify API

# [Demo](https://react-spotify.netlify.com/browse/featured)

[![NPM](https://img.shields.io/npm/v/react-spotify-api.svg)](https://www.npmjs.com/package/react-spotify-api)
[![Build Status](https://travis-ci.com/idanlo/react-spotify-api.svg?branch=master)](https://travis-ci.com/idanlo/react-spotify-api)
[![Dependencies](https://david-dm.org/idanlo/react-spotify-api/status.svg)](https://david-dm.org/idanlo/react-spotify-api)
[![Dev Dependencies](https://david-dm.org/idanlo/react-spotify-api/dev-status.svg)](https://david-dm.org/idanlo/react-spotify-api?type=dev)
[![Peer Dependencies](https://david-dm.org/idanlo/react-spotify-api/peer-status.svg)](https://david-dm.org/idanlo/react-spotify-api?type=peer)
![Codecov](https://img.shields.io/codecov/c/github/idanlo/react-spotify-api.svg)
[![npm bundle size (minified)](https://img.shields.io/bundlephobia/min/react-spotify-api.svg)](https://www.npmjs.com/package/react-spotify-api)
[![GitHub](https://img.shields.io/github/license/idanlo/react-spotify-api.svg)](https://opensource.org/licenses/MIT)
[![PRs Welcome](https://img.shields.io/badge/prs-welcome-brightgreen.svg?style=flat-square)](http://makeapullrequest.com)

# [Documentation](https://idanlo.github.io/react-spotify-api/)

# Features

- Components for most of Spotify's data types that pass data through render props
- Hooks for most of Spotify's data

# Roadmap

- [x] Pass Spotify data with render props
- [x] Use React.Context to pass the access token down the component tree
- [x] Hooks!
- [x] A demo page that uses this library - [available here!](https://react-spotify.netlify.com/browse/featured)
- [x] Load more data support (infinite scrolling) - current works for some of the data types
- [ ] TypeScript support!
- [ ] 100% code coverage
- [ ] Hooks for all data types from Spotify's API
- [ ] Hooks for using the [Spotify Playback SDK](https://developer.spotify.com/documentation/web-playback-sdk)

# Version 3.0.0 Breaking Change

Before version 3.0.0 the parameters to `props.children` were passed in this order - `data, loading, error`. It is now passed as an object, so you would now use the `Album` component like this -

```jsx static
<Album id={...}>
  {({ data }) => {
    return <></>;
  }}
</Album>
```

As opposed to the previous versions where you would use the components like this -

```jsx static
<Album id={...}>
  {(data, loading, error) => {
    return <></>;
  }}
</Album>
```

This way you can choose which parameters you would like to have, and if you want just the error parameter you can omit the other two. This works well with the `loadMoreData` parameter, you don't need to write all 4 parameters if you just need some of them.

# Installing

## with npm

```bash
npm install --save react-spotify-api
```

## with yarn

```bash
yarn add react-spotify-api
```

## Wrapping your app with a Provider

in order to use the Spotify API you are required to send an access token ([read more here](https://developer.spotify.com/documentation/general/guides/authorization-guide/))
with every single http request, but the `SpotifyApiContext` provider does that for you!

### Import

```js static
import { SpotifyApiContext } from 'react-spotify-api';
```

### Wrap your app with it (all react-spotify-api components must have a SpotifyApiContext.Provider parent)

```jsx static
<SpotifyApiContext.Provider value={token}>
  <App />
</SpotifyApiContext.Provider>
```

You can now use all components without worrying about getting your access token!

## Component usage

```jsx
import React, { Component } from 'react';

import { SpotifyApiContext, Artist } from 'react-spotify-api';

function Example(props) {
  return (
    <SpotifyApiContext.Provider value={props.token}>
      <Artist id={props.id}>
        {({ data, loading, error }) =>
          data ? (
            <div>
              <h1>{data.name}</h1>
              <ul>
                {data.genres.map(genre => (
                  <li key={genre}>{genre}</li>
                ))}
              </ul>
            </div>
          ) : null
        }
      </Artist>
    </SpotifyApiContext.Provider>
  );
}
```

## Hooks usage _(assuming the ExampleHooks component is wrapped with the SpotifyApiContext.Provider)_

```jsx
import React from 'react';

import { useArtist } from 'react-spotify-api';

function ExampleHooks(props) {
  const { data, loading, error } = useArtist(props.id);

  return artist ? (
    <div>
      <h1>{artist.name}</h1>
      <ul>
        {artist.genres.map(genre => (
          <li key={genre}>{genre}</li>
        ))}
      </ul>
    </div>
  ) : null;
}
```

## Data types

- data - Each component has a link to the Spotify API endpoint where you can see the data model for that specific data type
- loading - Boolean (_true_ when loading and _false_ when finished loading)
- error - _null_ when there are no errors but an _object_ when there are - usually containing the error object received by the `fetch` api, so it looks something like: `{status: 404, message: ""Not Found""}`

## License

This project is licensed under the MIT License - see the LICENSE file for details

MIT © [idanlo](https://github.com/idanlo)
"
197,joshuathompson/baton,Go,"# Baton

> Baton is a CLI tool to manage Spotify playback and includes a TUI for searches

<!-- [![asciicast](https://asciinema.org/a/RgR4iT9wz2J3bjCx0p7Wj9Rnn.png)](https://asciinema.org/a/RgR4iT9wz2J3bjCx0p7Wj9Rnn) -->
![](https://raw.githubusercontent.com/joshuathompson/baton/master/example.gif)

## NOTE: You can't change songs, volume, etc without Spotify premium due to a limit on their web API

## Install

Fetch the release for your platform [from the following page](https://github.com/joshuathompson/baton/releases). Use `chmod` to set permissions on your binary and move it to `/usr/local/bin` or equivalent.

## Setup

Use the `baton auth` command to perform an initial setup. The command will take you through the process but you will need to login to the [Spotify API dashboard](https://beta.developer.spotify.com/dashboard/login), create an app, and set it up with a redirect URL of http://localhost:15298/callback.

This process will generate a long-lasting refresh token and ideally will never have to be repeated.

## Usage

### CLI Commands

| Command  | Description                                                                           |
| -------- | ------------------------------------------------------------------------------------- |
| auth     | authorize Baton to access the Spotify Web API on your behalf                          |
| devices  | list all available playback devices                                                   |
| help     | help about any command                                                                |
| me       | Commands related to your profile (saved tracks, albums, playlists)                    |
| next     | skip to next track                                                                    |
| pause    | toggle Spotify pause state                                                            |
| play     | play top result for specified artist, album, playlist, track, or uri                  |
| prev     | skip to previous track                                                                |
| repeat   | get/set repeat mode                                                                   |
| replay   | replay current track from the beginning                                               |
| search   | search for specified artist, album, playlist, or track and select via interactive TUI |
| seek     | skip to a specific time (seconds) of the current track                                |
| share    | get uri and url for current track                                                     |
| shuffle  | toggle shuffle on/off                                                                 |
| status   | show information about the current track                                              |
| transfer | transfer playback to another device by id                                             |
| vol      | get/set volume                                                                        |

### TUI Keybinds

| Keybind          | Description                                          |
| ---------------- | ---------------------------------------------------- |
| <kbd>h</kbd>     | go back one screen                                   |
| <kbd>j</kbd>     | move the cursor down a line                          |
| <kbd>k</kbd>     | move the cursor up a line                            |
| <kbd>l</kbd>     | go into playlist, album, or artist                   |
| <kbd>p</kbd>     | play selected item                                   |
| <kbd>Enter</kbd> | play selected item and quit                          |
| <kbd>m</kbd>     | load additional pages from search query              |
| <kbd>q</kbd>     | quit                                                 |
| <kbd>s</kbd>     | save or unsave the currently selected track or album |

## Building

To build the program, simply run `make` or `make build`, this will build for all 3 platforms (note: to do this on windows you'll need [Make for windows](http://gnuwin32.sourceforge.net/packages/make.htm)). To build for one specific platform run `make <platform>` where platform is either ""windows"", ""darwin"" (for MacOS) or ""linux"". You can also run from source by running `make run`.

## License

MIT

## Credits

Baton is built using:

- [Cobra](https://github.com/spf13/cobra)
- [Gocui](https://github.com/jroimartin/gocui)
"
198,bmsimons/ps-spotify,PowerShell,"ps-spotify
==========
A PowerShell module that talks to your Spotify client!

**How does this work?**  
  
This PowerShell module acts as a wrapper around the ![Spotify Web API](https://developer.spotify.com/web-api/endpoint-reference/). You will be able to e.g. search for songs, albums and playlists, you can even fiddle around with Spotify Connect if you want to. Just like any other Spotify API implementation, you'll need to provide a basic bearer (base64 encoded string of client_id_goes_here:client_secret_goes_here) and a refresh token. Please take a look at my other project - ![dotnet-core-spotify-authentication](https://github.com/bmsimons/dotnet-core-spotify-authentication) - this is an open-source utility you can use to get your needed refresh token. You fill in the two needed tokens in ps-spotify.psm1 and you are good to go!

If things are unclear, please check out these two articles on my website:

https://bartsimons.me/net-core-and-the-spotify-api-getting-authenticated/     
https://bartsimons.me/ps-spotify-a-powershell-module-to-control-the-spotify-web-api/     

**Currently implemented functions:**
- `Find-SpotifyItem`
- `Get-SpotifyAlbum`
- `Get-SpotifyAlbums`
- `Get-SpotifyCategory`
- `Get-SpotifyCategories`
- `Get-SpotifyCategoryPlaylists`
- `Get-SpotifyConnectDevice`
- `Get-SpotifyConnectDevices`
- `Get-SpotifyCurrentlyPlaying`
- `Get-SpotifyFeaturedPlaylists`
- `Get-SpotifyNewReleases`
- `Get-SpotifyTrack`
- `Get-SpotifyTracks`
- `Get-SpotifyUser`
- `Invoke-SpotifyConnectPrevious`
- `Invoke-SpotifyConnectSkip`
- `Set-SpotifyConnectPause`
- `Set-SpotifyConnectPlay`
- `Set-SpotifyConnectPlayer`
- `Set-SpotifyConnectRepeat`
- `Set-SpotifyConnectSeek`
- `Set-SpotifyConnectShuffle`
- `Set-SpotifyConnectVolume`

**Install guide:**  
First of all, make sure you have Git installed on your computer (I recommend the Github client).  
Start up a Git shell, and run the following command  
`git clone https://github.com/bmsimons/ps-spotify.git`
You can now close your git client window. You can now import this module like this:  
`Import-Module ./ps-spotify/ps-spotify`  
and now you can make use of all documented commands. Happy Spotifying!  

**Compatibility**
This module has been tested and proven to be working on Microsoft Windows, Apple macOS, and Linux.
If something doesn't work, try to upgrade to a newer PowerShell release.
In case if you are using Microsoft Windows, try to use the ![open-source PowerShell version](https://github.com/powershell/powershell).

**Changelog:**
- v1.0 (Current): Code base has been completely rebuilt.  
- v0.3a: Added automatic Spotify web helper port fetching.  
- v0.3: Major overhaul, added cmdlet parameter binding and merged play functions into single cmdlet. 
- v0.2 Second release  
- v0.1g: Updated markdown  
- v0.1f: Updated the documentation, renamed module file  
- v0.1e: Added a `Get-SpotifySearch` function
- v0.1a: Readme markdown fixes  
- v0.1: Initial release
"
199,kjbrum/spotifyCurrentlyPlaying.js,CSS,"# ![spotifyCurrentlyPlaying.js](https://raw.githubusercontent.com/kjbrum/spotifyCurrentlyPlaying.js/master/img/spotify-currently-playing.png)

> Display your currently playing Spotify song(s) using Last.fm scrobbling.


## Documentation

http://kylebrumm.com/spotifyCurrentlyPlaying.js/


## Install

__Bower:__

```
$ bower install spotifyCurrentlyPlaying.js
```

__npm:__

```
$ npm install spotifyCurrentlyPlaying.js
```

__CDN:__

```
<script src=""https://unpkg.com/spotifyCurrentlyPlaying.js/dist/spotifyCurrentlyPlaying.min.js""></script>
```


## To-Do

- [ ] Add Methods
    - [ ] `refresh()` - Refresh the player
    - [ ] `destroy()` - Remove the player
- [ ] Add Events
    - [ ] - `init` - Fires after SCP initializes for the first time
    - [ ] - `reInit` - Fires every time SCP re-initializes
- Website
    - [ ] Add a table of all the ""options""
    - [ ] Add a ""Browser Support"" section


## Settings

|Option|Type|Default|Description|
|---|---|---|---|
selector|string\|element|'.scp-container'|Class or selector for the container
username|string|''|LastFM username
api_key|string|''|LastFM API key
width|int|300|Width of the player
height|int|400|Height of the player
theme|string|'black'|Theme of the player (black, white)
view|string|'list'|View of the player (list, coverart)
count|int|1|Number of tracks to display
backup_ids|array|[...]|Backup IDs of tracks to display if no tracks are found


## Browser Support

- Chrome _(todo)_
- Firefox _(todo)_
- Safari _(todo)_
- Opera _(todo)_
- IE _(todo)_


## License

Copyright &copy; [Kyle Brumm](http://kylebrumm.com). spotifyCurrentlyPlaying.js is free to use on whatever and may be redistributed under the terms specified in the [license](LICENSE.md).
"
200,xamut/tmux-spotify,Shell,"# Spotify plugin for tmux
[![GitHub](https://img.shields.io/github/license/xamut/tmux-spotify)](https://opensource.org/licenses/MIT)

Show a nice menu to manage Spotify application.

<p align=""center"">
  <img src=""https://github.com/xamut/tmux-spotify/raw/master/assets/tmux-spotify.gif"" alt=""tmux-spotify""  width=600 height=242>
</p>

## Installation
### Requirements
* macOS
* tmux >= 3.0

### With Tmux Plugin Manager
Add the plugin in `.tmux.conf`:
```
set -g @plugin 'xamut/tmux-spotify'
```
Press `prefix + I` to fetch the plugin and source it. Done.

### Manual
Clone the repo somewhere. Add `run-shell` in the end of `.tmux.conf`:

```
run-shell PATH_TO_REPO/tmux-spotify.tmux
```
NOTE: this line should be placed after `set-option -g status-right ...`.

Press `prefix + :` and type `source-file ~/.tmux.conf`. Done.

## Usage
Press tmux `prefix + s` (for example, `C-a s`) and you will see a nice menu:

![tmux-spotify](./assets/spotify-menu.png)

```
* Copy URL        (c) - copy Spotify URL of the current track to the clipboard
* Open Spotify    (o) - open/launch Spotify
* Play/Pause      (p) - toggle play/pause
* Previous        (b) - play the current track from the beggining or play the previous track
* Next            (n) - play the next track
* Turn on repeat  (r) - switch on/off current playlist's repeating
* Turn on shuffle (s) - switch on/off current playlist's shuffling
* Close menu      (q) - close menu
```

## Other plugins
* [tmux-network-bandwidth](https://github.com/xamut/tmux-network-bandwidth)
* [tmux-weather](https://github.com/xamut/tmux-weather)

## License
tmux-spotify plugin is released under the [MIT License](https://opensource.org/licenses/MIT).
"
201,jakemarsh/atom-spotify,CoffeeScript,"# atom-spotify :notes:

Displays the currently playing song in Spotify in Atom's status bar.

![](https://dl.dropbox.com/s/5grx2ol4g4lcvb0/Screenshot%202014-02-28%2021.40.14.png)

Use the following key commands to control Spotify from inside Atom:

- **Play next song**: `cmd-alt-shift-right`
- **Play previous song**: `cmd-alt-shift-left`

Or use the menu items in *Packages -> Spotify*.

Pull requests welcome (and encouraged!)
"
202,maximilianvoss/musicsync,Java,"# Music Sync
I have 2 wonderful children and for Xmas they received a Toniebox [1]. 
There are many incredbile Tonie's out there, but we were struggling with what we can fill our Creative Tonies.
After a while we found many wonderful stories for kids on Spotify [2] and we wondered why not having these stories on a Creative Tonie. 

In the end, this handy tool was created to sync music between different services. 
It supports plugins which helps in extending it for other input & output services.  

Links:  
[1]: https://www.tonies.com/  
[2]: https://www.spotify.com/

## Build
... To build the application to: [package/application/target](package/application/target)
```bash
mvn clean install
```

... To build a docker image whose execution and configuration files can be found at: [package/docker/src/main/resources/docker/application](package/docker/src/main/resources/docker/application)
```bash
mvn clean install -Pdocker
```

## Configuration
The configuration is provided in a JSON format for easier read- and accessibility. There for, it is split in 3 major parts.  
Full example file can be found at: [package/docker/src/main/resources/docker/application/config/musicsync.json](package/docker/src/main/resources/docker/application/config/musicsync.json)

1. General - defines global configurations which are valid for the whole application   
An example of this is:
```json
""general"": {
  ""timeout"": 60,                    // nap time for the loop
  ""bulk"": true                      // upload all tracks as a bulk or do it one by one
} 
```
2. Plugins - configures global plugin settings   
An example of this is - see details on plugin documentations:
```json
""plugins"": 
[
  {
    ""plugin"": ""<PLUGIN NAME>"",      // name of the plugin
    ""config"": {}                    // configuration of plugin
  }
]
```
3. Connections - configures the synchronization connection (from where to where the music shall be synced)  
An example of this is:
```json
""connections"": 
[
    {
      ""name"": ""<CONNECTION NAME>"",  // name of configuration
      ""in"": {
        ""plugin"": ""<PLUGIN NAME>"",  // input plugin to source tracks
        ""config"": {}                // input plugin configuration to source tracks
      },
      ""out"": {
        ""plugin"": ""<PLUGIN NAME>"",  // output plugin to which the tracks shall be copied to
        ""config"": {}                // output plugin configuration to upload tracks
      }
    }
]
```

## Execution
The application can be executed as standalone application or within a docker image which is provided by the maven build

### Application
The standard maven build copies the full build output to: [package/application/target](package/application/target).  
This output will consist out of:
* libs - containing all necessary JAR files for the classpath 
* modules - contains all necessary JAR files for the Java modules
* musicsync - BASH script file to start musicsync
* sp - file for stream recording. Must be copied to /usr/bin or /usr/local/bin. Chmod 755 is required
* stream_recorder.pl file for stream recording. Most be copied to /usr/bin or /usr/local/bin. Chmod 755 is required
* musicsync-*.jar files - the actual Java code of musicsync

If you move the directory's content to other folders and want to run the application with relative or absolute paths
you have to update [package/application/target/musicsync](package/application/target/musicsync).

```bash
#!/bin/bash 

execdir=.     # THIS PATH HAS TO BE SPECIFIED/ADAPTED

classpath=$(find $execdir -name '*.jar' | awk '{ printf(""%s:"", $1); } END { printf(""%s"", $1); }')
executable='rocks.voss.musicsync.application/rocks.voss.musicsync.application.Application'

java -classpath $classpath -p $execdir:$execdir/modules -m $executable  $@
```

### Docker Image
While using the docker profile of maven 2 docker images will be created.
1. Base image (maximilianvoss/musicsyncbase)  
This base image will base on Ubuntu 20.04 and will install Spotify and Oracle's JDK11.   
Please review the documentation at [package/docker/src/main/resources/docker/base/README.md](package/docker/src/main/resources/docker/base/README.md) to ensure the docker image can be build.
2. Application image (maximilianvoss/musicsyncapplication)  
This image is based on maximilianvoss/musicsyncbase and will compile and install musicsync within the image.  
During the image execution following folder is shared from the host with the image: [package/docker/src/main/resources/docker/application/config](package/docker/src/main/resources/docker/application/config)

**Steps which must be performed to create a proper Docker image**
1. Download JDK 11 from Oracle
2. Copy JDK 11 to [package/docker/src/main/resources/docker/base](package/docker/src/main/resources/docker/base)
3. Build project with `mvn clean install -Pdocker`
4. Change dir to [package/docker/src/main/resources/docker/application/config](package/docker/src/main/resources/docker/application/config)
   1. Update musicsync.json (maybe you have to run musicsync locally first to update Spotify settings)
   2. Update spotify
   3. Update vnc
5. Run docker image using `./run.sh` in folder [package/docker/src/main/resources/docker/application](package/docker/src/main/resources/docker/application)

## Plugins
All plugins with their documentation can be found at [plugins/README.md](plugins/README.md).

## Known Issues

**Spotify Repository Public Key missing**  
Indicator:
```text
Reading package lists...
W: GPG error: http://repository.spotify.com stable InRelease: The following signatures couldn't be verified because the public key is not available: NO_PUBKEY 5E3C45D7B312C643
E: The repository 'http://repository.spotify.com stable InRelease' is not signed.
The command '/bin/sh -c apt-get update' returned a non-zero code: 100
Sending build context to Docker daemon  15.36kB
Step 1/12 : FROM maximilianvoss/musicsyncbase
pull access denied for maximilianvoss/musicsyncbase, repository does not exist or may require 'docker login': denied: requested access to the resource is denied
[ERROR] Command execution failed.
```
Resolution:  
Retry after a certain amount of time - sometimes days. This is an error on Spotify's server infrastructure.
"
203,palampinen/replayify,CSS,"# Replayify

> Replay your Spotify favorites!

![](docs/replayify.png)

This application uses Spotify Web API to discover users most listened tracks and artists from Spotify. User can also create playlist from their favorite tracks and artists.

[Try out replayify.com](https://replayify.com)

## Spotify API

Application uses followig parts of Spotify Web API

- [Authorization](https://developer.spotify.com/documentation/general/guides/authorization-guide/#implicit-grant-flow)
- [Get users Top Tracks and Artists](https://developer.spotify.com/documentation/web-api/reference/personalization/get-users-top-artists-and-tracks/)
- [Get Top Tracks for Artist](https://developer.spotify.com/documentation/web-api/reference/artists/get-artists-top-tracks/)
- [Get Recently played tracks for user](https://developer.spotify.com/documentation/web-api/reference/player/get-recently-played/)
- [Creating playlist](https://developer.spotify.com/documentation/web-api/reference/playlists/create-playlist/)
- [Adding tracks to playlist](https://developer.spotify.com/documentation/web-api/reference/playlists/add-tracks-to-playlist/)

### Create Spotify App

Go to https://developer.spotify.com/dashboard/, log in and create a new App.

Add `localhost:3000/callback` as _Redirect URI_ in your Spotify App Settings.

Grab the _Client Id_ that will be added to env.js.

## Development

- `npm install`
- `cp src/env.example.js src/env.js` and fill `SPOTIFY_CLIENT_ID`
- `npm start`

Application is based on [create-react-app](https://github.com/facebook/create-react-app)

## Photo Credits

**Pink headphones**
Photo by [Icons8 team](https://unsplash.com/photos/7LNatQYMzm4) on [Unsplash](https://unsplash.com/)

**Top Artists**
Photo by [Joshua Fuller](https://unsplash.com/photos/ta7rN3NcWyM) on [Unsplash](https://unsplash.com/)

**Top Tracks**
Photo by [Feliphe Schiarolli](https://unsplash.com/photos/WJ4kTDv8lyg) on [Unsplash](https://unsplash.com/)

**Recent Plays**
Photo by [Bruce Mars](https://unsplash.com/photos/DBGwy7s3QY0) on [Unsplash](https://unsplash.com/)

## License

MIT
"
204,ALIILAPRO/spotify-account-creator,Python,"# spotify-account-creator
![Code Size](https://img.shields.io/github/languages/code-size/aliilapro/spotify-account-creator) ![Top Language](https://img.shields.io/github/languages/top/aliilapro/spotify-account-creator) ![GitHub stars](https://img.shields.io/github/stars/aliilapro/spotify-account-creator) ![](https://img.shields.io/badge/The%20Long%20Hope-%F0%9F%98%8E%E2%9C%8C-green)
--------------------------------------------------------------------

### [!] About spotify
With Spotify, it’s easy to find the right music or podcast for every moment – on your phone, your computer, your tablet and more.
[Read more](https://www.spotify.com/us/about-us/contact/)

### [!] About Script spotify-account-creator (spotify-reg.py)
A project for register on www.spotify.com

--------------------------------------------------------------------
### Download App For windows os

- [spotify-reg.exe version 1.2](https://github.com/ALIILAPRO/spotify-account-creator/releases/download/v1.2/spotify-reg.exe)
- [spotify-reg.exe GUI version](https://github.com/ALIILAPRO/spotify-account-creator/releases/download/gui/Spotify.Account.Creator.By.ALIILAPRO.gui.zip)
--------------------------------------------------------------------
 ### Test the online version
 
 - [![Run on Repl.it](https://repl.it/badge/github/aliilapro/spotify)](https://spotify.aliilapro.repl.run)
 --------------------------------------------------------------------
 ### [?] How to use this script on ( windows, mac, linux )
1. First download python and install in your system. [Python +3.8](https://www.python.org/downloads/)
2. Install requests library `pip install requests`
3. Download [this project](https://github.com/aliilapro/spotify-account-creator/archive/master.zip) and extract it
4. Open a cmd or terminal or shell in the extracted directory
5. Enter `python spotify-reg.py`
6. Run the script and use it
--------------------------------------------------------------------
### [?] How to use this script on ( android )
1. If it is not installed on your device, download it here. [Termux](https://play.google.com/store/apps/details?id=com.termux&hl=en_GB)
2. Open Termux app
3. Install git    `pkg install git`
4. Install python `pkg install python`
5. Install requests library `pip install requests`
6. Clone the git  `git clone https://github.com/aliilapro/spotify-account-creator`
7. Open script    `cd spotify-account-creator`
8. Run script     `python3 spotify-reg.py`
--------------------------------------------------------------------
![](https://github.com/ALIILAPRO/spotify-account-creator/blob/main/sc/s-3.jpg)
![](https://github.com/ALIILAPRO/spotify-account-creator/blob/main/sc/s-2.jpg)
![](https://github.com/ALIILAPRO/spotify-account-creator/blob/main/sc/s-1.jpg)
"
205,AmolMavuduru/SpotifyRecommenderSystem,Jupyter Notebook,"# SpotifyRecommenderSystems

Full sample code for my Medium article: ""How to build an amazing music recommendation system""."
206,codegefluester/ios-sdk,Objective-C,"**WARNING: This is a beta release of the Spotify iOS SDK, and can stop working
at any time. This SDK release is not suitable for publicly released applications.**


Spotify iOS SDK Readme
=======

Welcome to Spotify iOS SDK! This ReadMe is for people who wish to develop iOS
applications containing Spotify-related functionality, such as audio streaming,
playlist manipulation, searching and more.

Usage of this SDK is bound under the [Libspotify Terms of Use](https://developer.spotify.com/technologies/libspotify/terms-of-use-us/).


Beta Release Information
=======

We're releasing this SDK early to gain feedback from the developer community
about the future of our iOS SDKs. Please file feedback about missing issues or
bugs over at our [issue tracker](https://github.com/spotify/ios-sdk/issues),
making sure you search for existing issues and adding your voice to those
rather than duplicating.

For known issues and release notes, see the
[CHANGELOG.md](https://github.com/spotify/ios-sdk/blob/master/CHANGELOG.md)
file.

**IMPORTANT:** This SDK is pre-release software and is not supported, and must
not be shipped to end users. It *will* stop working in the future.


OAuth/SPTAuth Credentials
=======

For the beta release, please use the following OAuth credentials:

* Client ID: `spotify-ios-sdk-beta`
* Client Callback URL: `spotify-ios-sdk-beta://callback`,
  `spotify-ios-sdk-beta-alternate://callback` or
  `spotify-ios-sdk-beta-alternate-2://callback`
* Client Secret: `ba95c775e4b39b8d60b27bcfced57ba473c10046`

These credentials will be invalidated when the beta period is over. At this
point, you'll be able to request your own personal credentials for future use.


Getting Started
=======

Getting the Spotify iOS SDK into your applcation is easy:

1. Add the `Spotify.framework` library to your Xcode project.
2. Add the `-ObjC` flag to your project's `Other Linker Flags` build setting.
3. Add `AVFoundation.framework` to the ""Link Binary With Libraries"" build phase
   of your project.
4. `#import <Spotify/Spotify.h>` into your source files and away you go!

The library's headers are extensively documented, and it comes with an Xcode
documentation set which can be indexed by Xcode itself and applications like
Dash. This, along with the included demo projects, should give you everything
you need to get going. The classes that'll get you started are:

* `SPTAuth` contains methods of authenticating users. See the ""Basic Auth"" demo
  project for a working example of this.

  **Note:** To perform audio playback, you must request the `login` scope when
  using `SPTAuth`. To do so, pass an array containing the string `@""login""` to
  `-loginURLForClientId:declaredRedirectURL:scopes:`. The supplied demo
  projects already do this.

* `SPTRequest` contains methods for searching, getting playlists and doing
  metadata lookup. Most metadata classes (`SPTTrack`, `SPTArtist`, `SPTAlbum` and
  so on) contain convenience methods too.

* `SPTTrackPlayer` is a class for playing track providers (currently `SPTAlbum`
  and `SPTPlaylist`) with basic playback controls. `SPTAudioStreamingController`
  gives you more direct access to audio streaming if you need it.


Migrating from CocoaLibSpotify
=======

CocoaLibSpotify is based on the libspotify library, which contains a lot of
legacy and is a very complex library. While this provided a great deal of
functionality, it could also eat up a large amount of RAM and CPU resources,
which isn't ideal for mobile platforms.

The Spotify iOS SDK is based on a completely new technology stack that aims to
avoid these problems while still providing a rich set of functionality. Due to
this new architecture, we took the decision to start from scratch with the
Spotify iOS SDK's API rather than trying to squeeze the new technology into
CocoaLibSpotify's API. This has resulted in a library that's much easier to use
and has a vastly smaller CPU and RAM footprint compared to CocoaLibSpotify.

The Spotify iOS API does *not* have 1:1 feature parity with CocoaLibSpotify.
It contains functionality that CocoaLibSpotify does not, and CocoaLibSpotify
has features that the Spotify iOS SDK does not. We're working to close that
gap, and if there's a feature missing from the Spotify iOS SDK that's
particularly important to you, please get in touch so we can prioritise
correctly.

Due to the API and feature differences between CocoaLibSpotify and the Spotify
iOS SDK, we understand that migration may be difficult. Due to this,
CocoaLibSpotify will remain available for a reasonable amount of time after
this SDK exits beta status.
"
207,JesusEduardo2028/SpotifyStreamer,Java,"# SpotifyStreamer

1) Utilizes ffmpeg transcoder library to enable hardware acceleration for smooth and progressive streaming.<br/>
2) Utilizes Spotify SDK and Web API for retrieving song metadata and playback (for premium users).<br/>
3) You can use voice based search for performing quick searches for artists, songs and albums.<br/>
4) Uses live-search (Google-like) for returning closest matching results as you type.<br/>
5) Has a responsive player UI, built using Google’s Material Design guidelines that adapts itself based on the current song metadata.<br/> 
6) Implemented automatic song to music video linking using YouTube Data API v3.<br/> 
7) Automatic and seamless music lyrics integration using MusixMatch API.<br/> 
8) AlphaAnimations for smooth background transitions.<br/><br/>

<img src=""https://cloud.githubusercontent.com/assets/3116252/8148783/7c26293e-1261-11e5-9593-0361fe3561b1.png"" width=""200""/>
<img src=""https://cloud.githubusercontent.com/assets/3116252/8148784/7c27a9da-1261-11e5-8a07-091c20adf35f.png"" width=""200""/>
<img src=""https://cloud.githubusercontent.com/assets/3116252/8148785/7c280eb6-1261-11e5-9633-41290223a3f5.png"" width=""200""/>
<img src=""https://cloud.githubusercontent.com/assets/3116252/8148788/7c2df114-1261-11e5-8a61-05f9a5ebd0ae.png"" width=""200""/>
<img src=""https://cloud.githubusercontent.com/assets/3116252/8148787/7c2c4cce-1261-11e5-9cfa-62d4a7972999.png"" width=""200""/>
<img src=""https://cloud.githubusercontent.com/assets/3116252/8148786/7c2b3aaa-1261-11e5-81d5-d4337f0bbbce.png"" width=""200""/>
<img src=""https://cloud.githubusercontent.com/assets/3116252/8148789/7c36832e-1261-11e5-8687-d966743585b3.png"" width=""200""/>
<img src=""https://cloud.githubusercontent.com/assets/3116252/8148790/7c36d360-1261-11e5-9e47-fe53b30db616.png"" width=""200""/>

"
208,TheRandomLabs/Scoop-Spotify,PowerShell,"<!-- markdownlint-disable MD010 -->
<!-- markdownlint-disable MD014 -->
<!-- markdownlint-disable MD037 -->
<!-- markdownlint-disable MD040 -->
<!-- markdownlint-disable MD046 -->

# Scoop-Spotify [![Build status](https://ci.appveyor.com/api/projects/status/0q9mhsk39dw59ej5/branch/master?svg=true)](https://ci.appveyor.com/project/TheRandomLabs/scoop-spotify/branch/master)

A [Scoop](https://github.com/lukesampson/scoop) bucket for Spotify, Spicetify and related packages.

    $ scoop bucket add spotify https://github.com/TheRandomLabs/Scoop-Spotify.git

...I've spent an unhealthy amount of time on automating all of this.

Also check out my [personal bucket](https://github.com/TheRandomLabs/Scoop-Bucket)
and my [Python bucket](https://github.com/TheRandomLabs/Scoop-Python)!

## spotify-latest: hash check failed

If the `spotify-latest` manifest has recently been updated, this error may occur because
depending on the region, the old installer may stay cached for a bit. To work around this
issue, pass the `-s` or `--skip` flag to Scoop when updating the package.

## Notes

* None of the packages in this bucket can be installed globally.
* If you have the means, please buy Spotify Premium instead of installing BlockTheSpot.
* All of the Spicetify packages require Spotify to be installed either through this Scoop bucket or
the official installer.
* All themes, extensions and custom apps for Spicetify should be installed to `~\.spicetify`
instead of the spicetify-cli installation directory.
* Installing or updating any of the packages in this bucket automatically applies the Spicetify
configuration and preserves BlockTheSpot if it is installed.
* All Spicetify packages apart from spicetify-cli depend on spicetify-cli.
* `--purge` or `-p` should be used to fully uninstall all packages apart from `blockthespot`,
`google-spicetify` and `spicetify-themes`.

### BlockTheSpot

* This blocks advertisements for the latest version of Spotify.
* This package depends on `spotify-latest`.
* This is not an executable program. `spotify-latest` will be patched automatically every time this
package or any of the Spicetify packages are installed or updated.
* If BlockTheSpot is ever reset, `blockthespot` can be run to reapply it. This usually happens
after running Spicetify commands, and running `spicetify-apply` rather than `spicetify apply`
ensures that BlockTheSpot is enabled if it is installed.

### genius-spicetify

* See [here](https://github.com/khanhas/genius-spicetify#musicxmatch) to configure a custom
Musixmatch user token. `manifest.json` can be found at
`~\.spicetify\CustomApps\genius\manifest.json`.

### spicetify-autoVolume

* See
[here](https://github.com/amanharwara/spicetify-autoVolume#changing-the-intervalminimum-volume)
to modify the configuration. `autoVolume.js` can be found at
`~\.spicetify\Extensions\autoVolume.js`.

### spicetify-cli

* Experimental features, fast user switching and all
[default extensions](https://github.com/khanhas/spicetify-cli/wiki/Extensions) apart from Auto Skip
Videos and DJ Mode are enabled by default.
* `spicetify-apply` is should be run instead of `spicetify apply` if BlockTheSpot is installed, as
it ensures that BlockTheSpot is enabled if it is installed.
* It should be noted that `spicetify-apply` also runs `spicetify restore` and `spicetify backup`
before running `spicetify apply` to ensure that changes are applied every time.
* For similar reasons, `spicetify-enable-devtool` and `spicetify-disable-devtool` should be run
instead of `spicetify enable-devtool` and `spicetify disable-devtool`.
* The three above commands also support the `-quiet` switch.

### spicetify-jqbx

* This requires Spotify Premium.

### spicetify-themes

* The [Elementary](https://github.com/morpheusthewhite/spicetify-themes/tree/master/Elementary)
theme requires the Open Sans and Raleway fonts:

```powershell
$ scoop bucket add nerd-fonts
$ sudo scoop install Open-Sans Raleway
```

* The [WintergatanBlueprint](https://github.com/morpheusthewhite/spicetify-themes/tree/master/WintergatanBlueprint)
theme requires the Ubuntu font:

```powershell
$ scoop bucket add nerd-fonts
$ sudo scoop install Ubuntu-NF
```

### Spotify (latest)

* This is the latest version of Spotify.
* Unlike [Ash258's version](https://github.com/Ash258/scoop-Ash258/blob/master/bucket/Spotify.json),
this version installs completely silently and to the Scoop directory.
* Spotify's built-in updater is disabled, and Scoop should be used to update it instead.
* Spotify should be installed locally and not globally.
* This cannot be installed concurrently with `spotify-with-blockthespot`.

### Spotify with BlockTheSpot

* This is an outdated version of Spotify (1.1.4.197.g92d52c4f) with an
[old version of BlockTheSpot](https://github.com/master131/BlockTheSpot).
* Spotify's built-in updater is disabled.
* This should only be used if BlockTheSpot does not work with the latest version of Spotify.
* Spotify with BlockTheSpot should be installed locally and not globally.
* Installation and uninstallation of this package require administrator privileges.
* This cannot be installed concurrently with `spotify-latest`.

## Installing and customizing Spotify

First, the latest version of Spotify should be installed:

    $ scoop install spotify-latest

Note that Spotify should not be installed globally, as it stores files in user-specific directories.

Once Spotify is installed, [spicetify-cli](https://github.com/khanhas/spicetify-cli) can be
installed to customize the Spotify client:

    $ scoop install spicetify-cli

Again, spicetify-cli should be installed locally, as it also stores files in a user-specific
location.

[spicetify-themes](https://github.com/morpheusthewhite/spicetify-themes) can be installed for
a collection of community-created themes for Spicetify. Obviously, this should also be installed
locally:

    $ scoop install spicetify-themes

[google-spicetify](https://github.com/khanhas/google-spicetify) is also available:

    $ scoop install google-spicetify

I can recommend the
[Adapta-Nokto](https://github.com/morpheusthewhite/spicetify-themes/tree/master/Adapta-Nokto)
theme, which can be applied by running the following:

    $ spicetify config current_theme Adapta-Nokto
    $ spicetify-apply

As an example, I will also demonstrate the installation of the
[Elementary](https://github.com/morpheusthewhite/spicetify-themes/tree/master/Elementary) theme,
which requires Open Sans and Raleway to be installed:

    $ scoop bucket add nerd-fonts
    $ sudo scoop install Open-Sans Raleway
    $ spicetify config current_theme Elementary
    $ spicetify-apply

To install spicetify-cli and apply a theme silently, the theme can be configured before installing
spicetify-themes. When any of the Spicetify packages are installed, the current configuration
is applied, and if Spotify was open previously, it is reopened.

    $ scoop install spicetify-cli
    $ spicetify config current_theme Elementary
    $ scoop install spicetify-themes

[genius-spicetify](https://github.com/khanhas/genius-spicetify) can be installed to fetch lyrics
from Genius or Musixmatch:

    $ scoop install genius-spicetify

[spicetify-autoVolume](https://github.com/amanharwara/spicetify-autoVolume#changing-the-intervalminimum-volume)
can be installed to automatically decrease the volume at specific intervals of time:

    $ scoop install spicetify-autovolume

[BlockTheSpot](https://github.com/mrpond/BlockTheSpot) can be installed to block advertisements:

    $ scoop install blockthespot

All of the above packages can be updated through Scoop.

**If you don't care about reading any of this** and just want a quick way to install ad-blocked
Spotify with the Elementary theme, genius-spicetify and developer tools, copy and paste this into
PowerShell:

```powershell
Set-ExecutionPolicy RemoteSigned -Scope CurrentUser -Force
Invoke-Expression (New-Object System.Net.WebClient).DownloadString('https://get.scoop.sh')

scoop install git sudo

scoop bucket add nerd-fonts
sudo scoop install Open-Sans Raleway --global

scoop bucket add spotify https://github.com/TheRandomLabs/Scoop-Spotify.git
scoop install spotify-latest blockthespot spicetify-cli spicetify-themes genius-spicetify spicetify-autovolume

spicetify config current_theme Elementary --quiet
spicetify-enable-devtool -quiet
```

**Or even shorter**, but with Adapta-Nokto instead:

```powershell
$ Set-ExecutionPolicy RemoteSigned -Scope CurrentUser -Force; iwr -useb https://raw.githubusercontent.com/TheRandomLabs/Scoop-Spotify/master/basic-setup.ps1 | iex
```

I wrote the above script mostly for people who don't care about using Scoop and just need a
foolproof way to set everything up automatically.

And in the future, if you want to update any installed packages:

```powershell
$ scoop update *
```
"
209,MenuDocs/erela.js-spotify,TypeScript,"<div align = ""center"">
    <a href=""https://discord.gg/menudocs"">
<img src=""https://img.shields.io/discord/416512197590777857?color=7289DA&label=Support&logo=discord&style=for-the-badge"" alt=""Discord"">
</a> 

<a href=""https://www.npmjs.com/package/erela.js-spotify"">
<img src=""https://img.shields.io/npm/dw/erela.js-spotify?color=CC3534&logo=npm&style=for-the-badge"" alt=""Downloads"">
</a>

<a href=""https://www.npmjs.com/package/erela.js-spotify"">
<img src=""https://img.shields.io/npm/v/erela.js-spotify?color=red&label=Version&logo=npm&style=for-the-badge"" alt=""Npm version"">
</a>

<br>

<a href=""https://github.com/MenuDocs/erela.js-spotify"">
<img src=""https://img.shields.io/github/stars/MenuDocs/erela.js-spotify?color=333&logo=github&style=for-the-badge"" alt=""Github stars"">
</a>

<a href=""https://github.com/MenuDocs/erela.js-spotify/blob/master/LICENSE"">
<img src=""https://img.shields.io/github/license/MenuDocs/erela.js-spotify?color=6e5494&logo=github&style=for-the-badge"" alt=""License"">
</a>
<hr>
</div>

This a plugin for Erela.JS to allow the use of Spotify URL's, it uses direct URL's being tracks, albums, and playlists and gets the YouTube equivalent.

- https://open.spotify.com/track/4uLU6hMCjMI75M1A2tKUQC
- https://open.spotify.com/album/6N9PS4QXF1D0OWPk0Sxtb4
- https://open.spotify.com/playlist/37i9dQZF1DZ06evO05tE88

## Documentation & Guides

It is recommended to read the documentation to start, and the guides to use the plugin.

- [Documentation](https://solaris-site.netlify.app/projects/erelajs/docs/gettingstarted.html ""Erela.js Documentation"") 

- [Guides](https://solaris-site.netlify.app/projects/erelajs/guides/introduction.html 'Erela.js Guides')

## Prerequisites

- [Spotify App](https://developer.spotify.com/dashboard) for the **clientID** & **clientSecret**

## Installation

**NPM** :
```sh
npm install erela.js-spotify
```

**Yarn** :
```sh
yarn add erela.js-spotify
```

## Options

- ### clientID
> The Spotify client ID. \
> This is **required** to use this plugin.

- ### clientSecret
> The Spotify client secret. \
> This is **required** to use this plugin.

- ### playlistLimit
> The amount of pages to load when a playlist is searched with each page having 100 tracks. \
> By default this retrieves all tracks in the playlist. \
> Note: This must be 1 or higher, 0 will load all.

- ### albumLimit
> The amount of pages to load when an album is searched with each page having 50 tracks. \
> By default this retrieves all tracks on the album. \
> Note: This must be 1 or higher, 0 will load all.

- ### convertUnresolved
> Converts all UnresolvedTracks into a Track. \
> **NOTE: THIS IS NOT RECOMMENDED AS IT WILL ATTEMPT TO CONVERT EVERY TRACK, INCLUDING ALBUMS AND PLAYLISTS TRACKS.** \
> **DEPENDING ON THE AMOUNT THIS WILL TAKE A WHILE AND MAY RATELIMIT YOUR LAVALINK NODE.**

## Example Usage

```javascript
const { Manager } = require(""erela.js"");
const Spotify  = require(""erela.js-spotify"");

const clientID = ""example ID""; // clientID from your Spotify app
const clientSecret = ""example secret""; // clientSecret from your Spotify app

const manager = new Manager({
  plugins: [
    // Initiate the plugin and pass the two required options.
    new Spotify({
      clientID,
      clientSecret
    })
  ]
});

manager.search(""https://open.spotify.com/track/4uLU6hMCjMI75M1A2tKUQC"");
```
"
210,matteogobbi/MGSpotyViewController,Objective-C,"MGSpotyViewController
=====================

Beautiful viewController with a tableView and amazing effects like a viewController in the Spotify app.
With MGSpotyViewController you can implement several layouts like these:

<img src=""http://www.matteogobbi.it/files-hosting/MGSpotyViewVideo-smaller.gif"" alt=""MGSpotyViewController Gif"" width=280 />
<img src=""https://github.com/matteogobbi/MGSpotyViewController/blob/master/GIFs%20and%20Videos/spotiviewcontroller.gif"" alt=""MGSpotyViewController Gif"" width=280 />
<img src=""https://github.com/matteogobbi/MGSpotyViewController/blob/master/GIFs%20and%20Videos/example2.gif"" alt=""MGSpotyViewController Gif"" width=280 />

## Info

This code must be used under ARC.
If your code doesn't use ARC you can [mark this source with the compiler flag](http://www.codeography.com/2011/10/10/making-arc-and-non-arc-play-nice.html) `-fobjc-arc`

## Example Usage

In the package is included an example to use this class.

The best thing to do, is <b>to extend</b> the `MGSpotyViewController`.
In the package see the class `MGViewController.{h,m}` as example.

Here the explanation:

Init is easy. You have just to pass the main image for the blur effect:

``` objective-c
MGViewController *spotyViewController = [[MGViewController alloc] initWithMainImage:[UIImage imageNamed:@""example""]];
```

`MGViewController` extends `MGSpotyViewController`:

``` objective-c
//
//  MGViewController.h
//  MGSpotyView
//
//  Created by Matteo Gobbi on 25/06/2014.
//  Copyright (c) 2014 Matteo Gobbi. All rights reserved.
//

#import ""MGSpotyViewController.h""

@interface MGViewController : MGSpotyViewController


@end
```

Set the `delegate` and the `datasource` of the `MGSpotyViewController`:

```objective-c
- (instancetype)init
{
    if (self = [super init]) {
        self.dataSource = myDataSource; //Or self
        self.delegate = myDelegate; //Or self
    }
    
    return self;
}
```

In the implementation file, first of all you should set the `overView`. The `overView` is basically <b>the header view which remains over the blur image</b>:

``` objective-c
- (void)viewDidLoad {
    [self setOverView:self.myOverView];
}


//This is just an example view created by code, but you can return any type of view.
- (UIView *)myOverView {
    UIView *view = [[UIView alloc] initWithFrame:self.overView.bounds];

    //Add an example imageView
    UIImageView *imageView = [[UIImageView alloc] initWithFrame:CGRectMake(view.center.x-50.0, view.center.y-60.0, 100.0, 100.0)];
    [imageView setContentMode:UIViewContentModeScaleAspectFill];
    [imageView setClipsToBounds:YES];
    [imageView setImage:[UIImage imageNamed:@""example""]];
    [imageView.layer setBorderColor:[UIColor whiteColor].CGColor];
    [imageView.layer setBorderWidth:2.0];
    [imageView.layer setCornerRadius:imageView.frame.size.width/2.0];

    //Add an example label
    UILabel *lblTitle = [[UILabel alloc] initWithFrame:CGRectMake(view.center.x-120.0, view.center.y+50.0, 240.0, 50.0)];
    [lblTitle setText:@""Name Surname""];
    [lblTitle setFont:[UIFont boldSystemFontOfSize:25.0]];
    [lblTitle setTextAlignment:NSTextAlignmentCenter];
    [lblTitle setTextColor:[UIColor whiteColor]];


    [view addSubview:imageView];
    [view addSubview:lblTitle];

    return view;
}
```

Another thing to configure is the `tableView`. The `tableView` is already in the `MGSpotyViewController`, you have just to set the `MGSpotyViewControllerDataSource` and `MGSpotyViewControllerDelegate` and use their methods.

You must <b>remember that the section 0 is reserved</b>, so even if you will return 1 section, your delegate will get called for section number 1, not 0. Basically for sections the counter doesn't start from 0 but from 1:

``` objective-c
#pragma mark - MGSpotyViewControllerDataSource

- (NSInteger)numberOfSectionsInSpotyViewController:(MGSpotyViewController *)spotyViewController
{
    return 1;
}

- (NSInteger)spotyViewController:(MGSpotyViewController *)spotyViewController
       numberOfRowsInSection:(NSInteger)section
{
  return 20;
}

- (UITableViewCell *)spotyViewController:(MGSpotyViewController *)spotyViewController
                               tableView:(UITableView *)tableView
                   cellForRowAtIndexPath:(NSIndexPath *)indexPath
{
  // IndexPath is 1-1, 1-2, 1-3 etc.
  
  UITableViewCell *cell = // Your cell initialisation

  return cell;
}
```

And, if you need to manage <b>sections header title</b> or <b>sections header view</b>:

```objective-c
#pragma mark - MGSpotyViewControllerDelegate

- (CGFloat)spotyViewController:(MGSpotyViewController *)spotyViewController
  heightForHeaderInSection:(NSInteger)section
{
  return 20.0;
}

- (NSString *)spotyViewController:(MGSpotyViewController *)spotyViewController
      titleForHeaderInSection:(NSInteger)section
{
  return @""My Section"";
}
```

## Customisations

There are a bunch of properties you can play with to get the best result for your needs:

``` objective-c
/**
 *  The tint color on top of the blur. When alpha is 1.0 
 *  you'll not be able to see the image behind.
 */
@property (nonatomic, strong) UIColor *tintColor;

/**
 *  Indicate if the overView has to fade out when scrolling up
 *  Default value: NO
 */
@property (atomic) BOOL overViewFadeOut;

/**
 *  Indicate if the main image has to get unblurred when scrolling down
 *  Default value: YES
 */
@property (atomic) BOOL shouldUnblur;

/**
 *  Indicate if the overView height is resized automatically when the
 *  device is rotated (ie when the height of the interface change)
 *  Default value: YES
 */
@property (atomic) BOOL flexibleOverviewHeight;

/**
 *  Set the value of the blur radius.
 *  Default value: 20.0
 */
@property (nonatomic) CGFloat blurRadius;
```

And also an initialiser which takes in input a scrolling type which are essentially the 2 kinds of scrolling you see in the previous examples:

```objective-c
- (instancetype)initWithMainImage:(UIImage *)image tableScrollingType:(MGSpotyViewTableScrollingType)scrollingType;
```

## Contact

Matteo Gobbi

- http://www.matteogobbi.it
- http://github.com/matteogobbi
- http://twitter.com/matteo_gobbi
- https://angel.co/matteo-gobbi
- http://www.linkedin.com/profile/view?id=24211474

## License

MGSpotyViewController is available under the MIT license.
"
211,myogeshchavan97/spotify-music-search-app,JavaScript,"To run this project, 

open `.env` file and add your client_id from spotify dashboard and then open terminal and execute the following commands in sequence

```js
1. yarn install
2. yarn start
```

This project was bootstrapped with [Create React App](https://github.com/facebook/create-react-app).

## Available Scripts

In the project directory, you can run:

### `yarn start`

Runs the app in the development mode.<br />
Open [http://localhost:3000](http://localhost:3000) to view it in the browser.

The page will reload if you make edits.<br />
You will also see any lint errors in the console.

### `yarn test`

Launches the test runner in the interactive watch mode.<br />
See the section about [running tests](https://facebook.github.io/create-react-app/docs/running-tests) for more information.

### `yarn build`

Builds the app for production to the `build` folder.<br />
It correctly bundles React in production mode and optimizes the build for the best performance.

The build is minified and the filenames include the hashes.<br />
Your app is ready to be deployed!

See the section about [deployment](https://facebook.github.io/create-react-app/docs/deployment) for more information.

### `yarn eject`

**Note: this is a one-way operation. Once you `eject`, you can’t go back!**

If you aren’t satisfied with the build tool and configuration choices, you can `eject` at any time. This command will remove the single build dependency from your project.

Instead, it will copy all the configuration files and the transitive dependencies (webpack, Babel, ESLint, etc) right into your project so you have full control over them. All of the commands except `eject` will still work, but they will point to the copied scripts so you can tweak them. At this point you’re on your own.

You don’t have to ever use `eject`. The curated feature set is suitable for small and middle deployments, and you shouldn’t feel obligated to use this feature. However we understand that this tool wouldn’t be useful if you couldn’t customize it when you are ready for it.

## Learn More

You can learn more in the [Create React App documentation](https://facebook.github.io/create-react-app/docs/getting-started).

To learn React, check out the [React documentation](https://reactjs.org/).

### Code Splitting

This section has moved here: https://facebook.github.io/create-react-app/docs/code-splitting

### Analyzing the Bundle Size

This section has moved here: https://facebook.github.io/create-react-app/docs/analyzing-the-bundle-size

### Making a Progressive Web App

This section has moved here: https://facebook.github.io/create-react-app/docs/making-a-progressive-web-app

### Advanced Configuration

This section has moved here: https://facebook.github.io/create-react-app/docs/advanced-configuration

### Deployment

This section has moved here: https://facebook.github.io/create-react-app/docs/deployment

### `yarn build` fails to minify

This section has moved here: https://facebook.github.io/create-react-app/docs/troubleshooting#npm-run-build-fails-to-minify
"
212,drshrey/spotify-flask-auth-example,Python,"Authorization Code Flow Walkthrough
=======

How to do an authorization code flow, through Flask and Python.

##Step 1
Fill in your credentials in main.py. This includes the CLIENT_ID and CLIENT_SECRET, which is left blank. You can obtain this by going to [Spotify Developers](https://developer.spotify.com/my-applications/#!/).


##Step 2
Be sure that your redirect uri, inside your application page in the Spotify Developers website is ""http://127.0.0.1:8080/callback/q"".


##Step 3
To see that it works, simply run the application by running '''python main.py''', and point your browser to http://127.0.0.1:8080.

"
213,librespot-org/spotify-connect-resources,Perl,"# spotify-connect-resources
A repository to hold any data/stuff related to reversing the Spotify Connect protocol. Mostly just data dumps at the moment, but if you have something to add to it, be it an implementation, information or just another data dump, make a PR and I will add it asap.

Currently this repo holds a few data dumps, and links to other sites which have also made headway on reversing the Connect protocol. Due to the current lack of common meeting ground atm, I have created this repo, so please feel free to PR anything Connect related. Also, you are encouraged to join the Spotify Connect room on Gitter (UPDATE: We now have IRC aswell, see below), as it is by far the easiest wat to connect with others interested in reversing Connect, and keeping up with current progress. The room is available here:

[![Gitter](https://badges.gitter.im/Join%20Chat.svg)](https://gitter.im/sashahilton00/spotify-connect-resources?utm_source=badge&utm_medium=badge&utm_campaign=pr-badge)
[![IRC](https://img.shields.io/badge/IRC-Freenode-brightgreen.svg)](https://webchat.freenode.net/)

IRC:

Server: irc.freenode.net
Channel: #spotifyconnect

**If you are looking for (working) implementations of Spotify Connect, they can be found here:**

https://github.com/plietar/librespot (Rust/C)  
https://github.com/crsmoro/scplayer (Java) (This version is not open source. It uses the libraries etracted from firmware.)
https://github.com/Fornoth/spotify-connect-web (As above, uses the extracted libraries. Has a nice web interface.)
https://github.com/dtcooper/raspotify (Wrapper for librespot) \
https://github.com/spocon/spocon (Debian/Ubuntu package wrapper [librespot-java](https://github.com/librespot-org/librespot-java) - includes armhf,arm64,armel)

N.B. The libraries are nearing release. There are a few bugs and features that still need implementing, but it's mostly done. If someone wants to start on a wrapper for the rust library, drop into the chat.

There is also a project which only implements control of Spotify Connect devices:

https://github.com/badfortrains/spotcontrol

If you just want to compile and run, take a look at the documentation in the spotify-connect folder.
Any contributions welcome. If you would like to get a working prototype with web interface running, have a look at the spotify-connect-web directory.

--ATTENTION: the spotify-connect folder holds a working implementation of Spotify Connect, so if you wish to help with development, please add your contributions there.--
"
214,Riddim/adblock-Spotify,Shell,"# Adblock-Spotify 
Block ads on the Spotify client.

### Windows
Run the batch file once as administrator. (will overwrite your hosts file!)

### \*Nix (Ubuntu tested)
Run the shell script once as root. (will add to your hosts file!)

Based on EZBlocker code.
https://www.ericzhang.me/projects/spotify-ad-blocker-ezblocker/
"
215,FlafyDev/spotify-listen-together,TypeScript,"# Spotify Listen Together
## ⚠️ Not working anymore ⚠️ 
I'm not using Spotify anymore so I have no real motivation to continue maintaining this project.

<br/>
<br/>
<br/>
<br/>
### This project is still in development and testing. Please keep this in mind!
Spotify Listen Together is an extension for [Spicetify](https://spicetify.app/) and an alternative solution to Spotify's Group Session.

## Download
### Marketplace 
Download [Spicetify Marketplace](https://github.com/CharlieS1103/spicetify-marketplace)
### OR: Manual Installation
1. Download and install [Spicetify](https://spicetify.app/docs/getting-started/installation).
2. Download [listenTogether.js](https://raw.githubusercontent.com/FlafyDev/spotify-listen-together/main/compiled/listenTogether.js).
3. Paste `listenTogether.js` in `%userprofile%\.spicetify\Extensions`(Find the folder `.spicetify` by doing `spicetify -c` in the CMD/Powershell).
4. Run `spicetify config extensions listenTogether.js` and `spicetify apply`.

## Usage
<sup>Press the ""Listen Together"" button in the top left to open the extension's menu.</sup>

### Creating a Server
To listen together with others, you must first create a server for everyone to join to.
To get started, go to [Spotify Listen Together Server](https://github.com/FlafyDev/spotify-listen-together-server) or host with Heroku.

[![Deploy](https://www.herokucdn.com/deploy/button.svg)](https://heroku.com/deploy?template=https://github.com/FlafyDev/spotify-listen-together-server)

### Joining a Server
Press ""Join a server"" in the menu and enter the server's address and your name.

### Playing, Seeking, and Pausing Songs
Only the hosts are able to change, seek, and pause songs. To become a host, press ""Request host"" in the menu and enter the password set by the server.

### Disconnecting From a Server
Press ""Leave the server"" in the menu.

## Examples
Example of the website:
![Website](examples/web.png)

## TODOs (For both the client and the server)
- Change ""server"" to ""room"". Have multiple rooms per server.
- Fix unexpected behavior when selecting the song that is currently playing.
"
216,bih/spotify-ruby,Ruby,"<!-- prettier-ignore-start -->
<img src=""docs/theme/assets/images/logo.png"" width=""400"" />

[![Build Status](https://travis-ci.org/bih/spotify-ruby.svg?branch=master)][Build Status]
[![Maintainability](https://api.codeclimate.com/v1/badges/89410e6302b5562c658a/maintainability)][Maintainability]
[![Test Coverage](https://api.codeclimate.com/v1/badges/89410e6302b5562c658a/test_coverage)][Test Coverage]
[![Gem Version](https://badge.fury.io/rb/spotify-ruby.svg)][Gem Version]
[![Code Triagers Badge](https://www.codetriage.com/bih/spotify-ruby/badges/users.svg)][Code Triagers Badge]

The developer-friendly, opinionated Ruby SDK for [Spotify]. Works on Ruby 2.4+

🎨 [Website] | 💖 [Contributing] | 📖 [SDK Reference] | 🔒 [Code of Conduct](#code-of-conduct)

## Contents

- [Introduction](#introduction)
- [Install](#install)
  - [With Bundler](#with-bundler)
  - [Manual Install](#manual-install)
- [Configuration](#configuration)
  - [Your App Credentials](#your-app-credentials)
  - [Authorization](#authorization)
  - [Creating a Session](#creating-a-session)
  - [Recreating a Session](#recreating-a-session)
- [Using the SDK](#using-the-sdk)
  - [Spotify Connect API](#spotify-connect-api)
  - [Me API](#me-api)
  - [Listening History API](#listening-history-api)
  - [Following API](#following-api)
- [Contributing](#contributing)
  - [Community Guidelines](#community-guidelines)
  - [Code of Conduct](#code-of-conduct)
  - [Getting Started](#getting-started)
  - [Releasing a Change](#releasing-a-change)
- [License](#license)

## Introduction

Hey! I'm a Developer Advocate at [Spotify], and I wrote this Ruby SDK to explore how to build a SDK that is TADA:

1. **🧒 Thoughtfully inclusive for beginners.** Everything we do should think about beginners from the start. From having an enforced [Code of Conduct] policy to building great documentation, tooling, and an empathetic feedback process. Designing for beginners is designing for longevity.

1. **☁️ Agnostic to minor changes.** APIs change all the time. We should be opinionated enough that our software should break with major changes, but flexible enough to work perfectly fine with minor changes. Our code should only depend on critical data, such as IDs.

1. **🌈 Delightful for developers.** Writing the SDK and using the SDK should be equally delightful. Granted, this is a challenging goal; but with solid information architecture, well-crafted opinions, clear and helpful error messages, and software that doesn't get in your way - we will create quite lovely software.

1. **✨ A maintained production-level.** It doesn't take experts to write production-level code; all it takes is considerate guidance from the community. We should write software that we and others [trust to do what it is intended to do](https://hackernoon.com/im-harvesting-credit-card-numbers-and-passwords-from-your-site-here-s-how-9a8cb347c5b5). We care about [Semantic Versioning] for clear version changes.

_Disclaimer: This SDK is NOT owned or supported by Spotify. It remains a personal project of mine. If you are a commercial partner of Spotify and wish to use this SDK, be aware you are using it at your own risk._

## Install

### With Bundler

Add this line to your application's `Gemfile`:

```ruby
gem ""spotify-ruby""
```

And then execute in your Terminal:

```bash
$ bundle install
```

Finally you can include the SDK via `Bundler.require`:

```ruby
require ""bundler""
Bundler.require
```

### Manual Install

Or, you can install manually by executing this in your Terminal:

```bash
$ gem install spotify-ruby
```

Then you can include the SDK in your Ruby project:

```ruby
require ""spotify-ruby""
```

## Configuration

You'll firstly need to register your client ID on [developer.spotify.com]. You should receive a Client ID and Client Secret which we'll need to continue.

### Your App Credentials

As mentioned above, you'll need to register your client ID. We recommend you that you use a different set of client IDs for development and production. We'll need to use those credentials in order to use any of Spotify's APIs.

To define your app credentials, you'll need to create an instance of `Spotify::Accounts`:

```ruby
@accounts = Spotify::Accounts.new
@accounts.client_id = ""spotify client ID""
@accounts.client_secret = ""spotify client secret""
@accounts.redirect_uri = ""redirect URI""
```

Alternatively, these credentials can be supplied as environment variables when running your application:

```ruby
@accounts = Spotify::Accounts.new # fetches configuration from ENV
```

The respective environment variables you'll need to set are:

| Environment Variable     | Description                               | Required?     |
| ------------------------ | ----------------------------------------- | ------------- |
| `SPOTIFY_CLIENT_ID`      | Your Spotify Client ID                    | **Yes**       |
| `SPOTIFY_CLIENT_SECRET`  | Your Spotify Client Secret                | **Yes**       |
| `SPOTIFY_REDIRECT_URI`   | Your Spotify Redirect URI (must be exact) | **Yes**       |

### Authorization

In order to use Spotify's APIs on a user's behalf, you'll need to use the Spotify [Accounts API] to redirect them to `https://accounts.spotify.com`. They will then need to explicitly approve your application and what data you're asking for (technically referred to as authorization scopes).

**Recommended for production:** To request specific data, read our [Authorization Scopes] reference, and then execute:

```ruby
@accounts.authorize_url({
  scope: ""user-read-private user-read-email user-top-read""
}) # => ""https://accounts.spotify.com/authorize?...""
```

**Recommended for exploration / local development:** Or, to request all data, you can execute:

```ruby
@accounts.authorize_url # => ""https://accounts.spotify.com/authorize?...""
```

### Creating a Session

Each session lasts 60 minutes. New sessions can be generated when you have a valid `refresh_token` (they become invalid [if a user revokes your application](https://support.spotify.com/uk/account_payment_help/privacy/revoke-access-from-3rd-party-app/)).

After a user has authorized your application, they'll be sent to your `redirect_uri` defined in [Your App Credentials](#your-app-credentials) with a `code` parameter. We can use this to create a `Spotify::Session`:

```ruby
@session = @accounts.exchange_for_session(params[:code])
```

We can check when the session expires, and when we should refresh:

```ruby
@session.expires_at # => 2018-07-08 22:40:15 +0200

if @session.expired?
  @session.refresh!
end
```

You'll then be able to use `@session` in the `Spotify::SDK` object. See the [Using the SDK](#using-the-sdk) section below.

### Recreating a Session

We don't want to send the user to `https://accounts.spotify.com/...` every time they want to use your application. For this case, we'll need to export the `refresh_token` and persist it somewhere:

```ruby
@session.refresh_token # => ""BQASNDMelPsTdJMNMZfWdbxsuuM1FiBxvVzasqWkwYtgpjXJO60Gm51R0LO_-3Q5MfzCU0xIrbIFs7ZlMQrVJeRwN1_Ffa3sIJn_KW6LO8vA44fYc85oz48TuBuZsT2gzr4L""
```

Then you can repeatedly create a session with just a refresh token and running `refresh!`:

```ruby
@session = Spotify::Session.from_refresh_token(@accounts, ""refresh_token here"")
@session.expired? # => true
@session.refresh!
@session.expired? # => false
```

## Using the SDK

To create an instance of the Spotify SDK, you'll need the `@session` from above and pass it to `Spotify::SDK` as follows:

```ruby
@session = Spotify::Session.from_refresh_token(@accounts, ""refresh_token here"")
@session.refresh!

@sdk = Spotify::SDK.new(@session)
```

### Spotify Connect API

With [Spotify Connect], you can take your music experience anywhere on over 300 devices. And you can read and control most devices programmatically through the SDK:

#### Read your devices\*

```ruby
@sdk.connect.devices # => [#<Spotify::SDK::Connect::Device:...>, ...]

@sdk.connect.devices[0].active?
@sdk.connect.devices[0].private_session?
@sdk.connect.devices[0].volume
@sdk.connect.devices[0].restricted?
```

#### Read current playback\*

```ruby
@sdk.connect.playback
@sdk.connect.playback.playing? # => true
@sdk.connect.playback.device.private_session? # => false
@sdk.connect.playback.shuffling? # => false
@sdk.connect.playback.repeat_mode # => :context
@sdk.connect.playback.position_percentage # => 4.53
@sdk.connect.playback.artist.name # => ""Ed Sheeran""
@sdk.connect.playback.item.album.name # => ""÷""
```

#### Control playback\*

```ruby
@sdk.connect.devices[0].play!({
  uri: ""spotify:track:0tgVpDi06FyKpA1z0VMD4v"",
  position_ms: 0
})

@sdk.connect.devices[0].pause!
@sdk.connect.devices[0].resume!
@sdk.connect.devices[0].volume = 80
@sdk.connect.devices[0].previous!
@sdk.connect.devices[0].next!
@sdk.connect.devices[0].position_ms = 3_000
@sdk.connect.devices[0].shuffle = false
@sdk.connect.devices[0].repeat_mode = :context
```

#### Transfer playback\*

This will transfer state, and start playback.

```ruby
@sdk.connect.devices[0].transfer_playback!
```

#### Transfer state\*

This will transfer state, and pause playback.

```ruby
@sdk.connect.devices[0].transfer_state!
```

### Me API

This allows you to perform specific actions on behalf of a user.

#### My information\*

```ruby
@sdk.me.info
@sdk.me.info.free? # => false
@sdk.me.info.premium? # => true
@sdk.me.info.birthdate # => 1980-01-01
@sdk.me.info.display_name? # => true
@sdk.me.info.display_name # => ""ABC Smith""
@sdk.me.info.images[0].url # => ""https://profile-images.scdn.co/userprofile/default/...""
@sdk.me.info.followers # => 4913313
@sdk.me.info.spotify_uri # => ""spotify:user:abcsmith""
@sdk.me.info.spotify_url # => ""https://open.spotify.com/user/abcsmith""
```

### Listening History API

#### My recently played tracks (up to last 50)\*

```ruby
@sdk.me.history(10) # => [#<Spotify::SDK::Item...>, ...]
@sdk.me.history(10).size # => 10
@sdk.me.history(50) # => [#<Spotify::SDK::Item...>, ...]
@sdk.me.history(50).size # => 50
```

### Following API

#### Follow an artist\*

```ruby
@sdk.playback.item.artist.follow!
```

#### Unfollow an artist\*

```ruby
@sdk.playback.item.artist.unfollow!
```

#### Check if following Spotify artists?\*

```ruby
@sdk.me.following_artists?(%w(3TVXtAsR1Inumwj472S9r4 6LuN9FCkKOj5PcnpouEgny 69GGBxA162lTqCwzJG5jLp))
# => {
#   ""3TVXtAsR1Inumwj472S9r4"" => false,
#   ""6LuN9FCkKOj5PcnpouEgny"" => true,
#   ""69GGBxA162lTqCwzJG5jLp"" => false
# }
```

#### Check if following Spotify users?\*

```ruby
@sdk.me.following_users?(%w(3TVXtAsR1Inumwj472S9r4 6LuN9FCkKOj5PcnpouEgny 69GGBxA162lTqCwzJG5jLp))
# => {
#   ""3TVXtAsR1Inumwj472S9r4"" => false,
#   ""6LuN9FCkKOj5PcnpouEgny"" => true,
#   ""69GGBxA162lTqCwzJG5jLp"" => false
# }
```

#### See all followed artists\*

```ruby
@sdk.me.following(5) # => [#<Spotify::SDK::Artist...>, ...]
@sdk.me.following(5).size # => 5
@sdk.me.following(50) # => [#<Spotify::SDK::Artist...>, ...]
@sdk.me.following(50).size # => 50
```


<small><i>\* Requires specific user permissions/scopes. See [Authorization Scopes] for more information.</i></small>

## Contributing

On the website, we have [a full guide on contributing][contributing] for beginners.

### Community Guidelines

Bug reports and pull requests are welcome on GitHub at https://github.com/bih/spotify-ruby. This project is intended to be a safe, welcoming space for collaboration, and contributors are expected to adhere to the [Contributor Covenant] code of conduct.

### Code of Conduct

Everyone interacting with this project's codebases, issue trackers, discussions, chat rooms, and mailing lists is required to follow the [Code of Conduct].

Whilst we try to always assume good intentions, any clear violations or bad actors will be warned and subsequently banned from this project indefinitely.

### Getting Started

Firstly, you'll need Git and Ruby installed. You can then install the dependencies as following:

```bash
$ git clone ssh://git@github.com/bih/spotify-ruby.git
$ bin/setup
```

You can run `rake ci` to validate your Ruby syntax, our RSpec tests, and code coverage.

For local development, you can run `bin/console` for an interactive prompt for experimentation.

### Releasing a Change

- To install this gem onto your local machine, run `bundle exec rake install`.
- Ensure versions are in line with the [Semantic Versioning] convention.
- To release a new version:
  - Update the version number in `lib/spotify/version.rb`
  - Run `bundle exec rake release` (which will create a git tag for the version)
  - Push git commits and tags
  - Push the `.gem` file to [rubygems.org].

## License

The gem is available as open source under the terms of the [MIT License].

[Spotify]: https://developer.spotify.com
[Spotify Connect]: https://www.spotify.com/connect/
[developer.spotify.com]: https://developer.spotify.com
[Accounts API]: https://developer.spotify.com/documentation/general/guides/authorization-guide/
[Authorization Scopes]: https://developer.spotify.com/documentation/general/guides/scopes/

[Website]: https://bih.github.io/spotify-ruby
[Contributing]: https://bih.github.io/spotify-ruby/documentation/contributing/
[SDK Reference]: http://www.rubydoc.info/github/bih/spotify-ruby
[Code of Conduct]: https://github.com/bih/spotify-ruby/blob/master/CODE_OF_CONDUCT.md
[Contributor Covenant]: http://contributor-covenant.org
[Semantic Versioning]: https://semver.org/spec/v2.0.0.html

[Build Status]: https://travis-ci.org/bih/spotify-ruby
[Maintainability]: https://codeclimate.com/github/bih/spotify-ruby/maintainability
[Test Coverage]: https://codeclimate.com/github/bih/spotify-ruby/test_coverage
[Gem Version]: https://badge.fury.io/rb/spotify-ruby
[Code Triagers Badge]: https://www.codetriage.com/bih/spotify-ruby
[MIT License]: http://opensource.org/licenses/MIT
[rubygems.org]: https://rubygems.org
<!-- prettier-ignore-end -->
"
217,CapnKitten/Spotify-Discord,CSS,"# Spotify Discord Theme - [![Paypal][paypal-logo]][paypal-url] [![GitHub][github-logo]][github-url] [![Discord][discord-logo]][discord-url] [![Download][download-logo]][download-url] 
#### Combine Discord and Spotify into one
<hr>

Current version: v1.4.2 (26/02/2021)

[View add-on themes](https://github.com/CapnKitten/BetterDiscord/tree/master/Themes/Spotify-Discord/css/addons)

<hr>

This theme works best with the plugin called [SpotifyControls](https://github.com/mwittrien/BetterDiscordAddons/tree/master/Plugins/SpotifyControls) by DevilBro. To get it up and working, make sure your Spotify account is linked to your Discord account then download the plugin [here](https://github.com/mwittrien/BetterDiscordAddons/tree/master/Plugins/SpotifyControls) or from the plugin repo.

Assets located at: https://github.com/CapnKitten/BetterDiscord/tree/master/Themes/Spotify-Discord/

## Previews

(Previews are subject to be out of date)

#### Main chat area

![discord_101](https://user-images.githubusercontent.com/4013216/120567756-77818680-c3e0-11eb-91d4-20709163ee69.png)

#### User server info

![discord_102](https://user-images.githubusercontent.com/4013216/120567773-7f412b00-c3e0-11eb-8cb6-6dad10b145c5.png)

#### User info popout

![discord_103](https://user-images.githubusercontent.com/4013216/120567785-85cfa280-c3e0-11eb-85f7-0bdf5cad90b1.png)

#### User settings

![discord_104](https://user-images.githubusercontent.com/4013216/120567799-89fbc000-c3e0-11eb-9c17-126747382c7f.png)

![discord_105](https://user-images.githubusercontent.com/4013216/120567808-8f590a80-c3e0-11eb-8053-dc9f63e8471c.png)

&nbsp;

## Custom server title bar colors
To change the title bar color for specific servers, you must download the redesign add-on theme file [here](https://github.com/CapnKitten/BetterDiscord/tree/master/Themes/Spotify-Discord/css/addons/redesign), and place the code below in the add-on theme file or your custom CSS and change the server name and hex color code to your liking.
```css
.container-3w7J-x[aria-label*=""SERVER_NAME""]:before {
  --title-custom: #3b77c4;
}
```

## Variables

 - `--input-color` - The background color for the input and textarea elements
 - `--input-text-color` - The text color for the input and textarea elements
 - `--input-placeholder-color` - The placeholder text color for the input and textarea elements

&nbsp;

## Changelog

#### v1.4.0 (03/01/2021)
* UI colors slightly updated to match Spotify's colors
* User avatar and status in the bottom bar moved to the left to take up dead space
* Chat box buttons fixed
* New radio buttons styled
* Other various elements fixed


[View previous changelogs](https://github.com/CapnKitten/BetterDiscord/blob/master/Themes/Spotify-Discord/changelog.md)

[paypal-logo]: https://img.shields.io/static/v1?label=PayPal&message=Donate&style=flat&logo=paypal&color=blue
[paypal-url]: https://paypal.me/capnkitten

[github-logo]: https://img.shields.io/static/v1?label=GitHub&message=Sponsor&style=flat&logo=github&color=black
[github-url]: https://github.com/sponsors/CapnKitten

[download-logo]: https://img.shields.io/static/v1?label=Download&message=Theme&style=flat&color=blue
[download-url]: https://betterdiscord.app/theme/Spotify%20Discord

[discord-logo]: https://img.shields.io/static/v1?label=Discord&message=Server&style=flat&logo=discord&color=blue
[discord-url]: https://discord.gg/jzJkA6Z
"
218,kabirvirji/spotifork,JavaScript,"# spotifork 🍴

> Fork a Spotify playlist

![](spotifork-demo.gif)
<!-- need new gif with name parameter -->

> **NOTE:** Since I began this project Spotify's API has changed (for one, see the difference in URIs now). However, I have implemented a quick fix to get spotifork working again

<br>
Spotifork creates an identical playlist from another user's playlist under your name. Just like forking on GitHub! You can then add/remove songs as you please.
<br>

## Install
`$ npm install -g spotifork` <br><br>
**Note:** Node version 7.7.1+ required. `$ node -v` to check which version you have installed. The latest version can be downloaded [here](https://nodejs.org/en/)

## Usage
`$ spotifork <playlist URI>`

The program will then prompt you for your Spotify username and bearer token. <br>

You can get the playlist URI by going to **share** on whichever Spotify platform you're on. <br>

You can get the bearer token here: https://developer.spotify.com/web-api/console/post-playlists/ <br>
Click **GET OAUTH TOKEN** and make sure to check *playlist-modify-public* 

## Optional Parameters

`-n` to specify the new forked playlist name

<br>

`$ spotifork --help`

```
Usage
      $ spotifork ""<playlist URI>""
      ? Enter your Spotify username <username>
      ? Enter your Spotify bearer token <bearer>

    Options
      --name [-n] ""playlist name""

    Example
      $ spotifork spotify:user:kabirvirji:playlist:57wpYVzySANpWQpiBetoMi -n ""My awesome playlist!""
      ? Enter your Spotify username kabirvirji
      ? Enter your Spotify bearer token ************************************************************

    For more information visit https://github.com/kabirvirji/spotifork
```

![](spotifork-playlist.png)
"
219,TeamYukki/YukkiMusicBot,Python,
220,Madh93/conky-spotify,Shell,"# Conky-Spotify

Conky-Spotify show current Spotify track in Conky (title, artist, album, cover...)

![Alt text](http://oi57.tinypic.com/2w3ylhv.jpg ""Sample of conky-spotify"")

## Install

To install Conky-Spotify:

    wget -O conky-spotify https://codeload.github.com/Madh93/conky-spotify/zip/master
    unzip conky-spotify
    mv conky-spotify-master ~/.conky/conky-spotify

## Conky-Small Setup

![Alt text](https://i.imgur.com/wsiD4X6.png ""Sample of conky-spotify-small"")
"
221,SealedSaucer/Spotifycord,JavaScript,"# Spotifycord
A code that allows you to get custom spotify rich presence!

----

The [index.js](https://github.com/SealedSaucer/Spotifycord/blob/main/index.js) is the main file. [server.js](https://github.com/SealedSaucer/Spotifycord/blob/main/server.js) prevents your repl from going to sleep. (If you have a replit hacker plan, then you can delete [this file](https://github.com/SealedSaucer/Spotifycord/blob/main/server.js) and paste this code inside the [index.js](https://github.com/SealedSaucer/Spotifycord/blob/main/index.js) file : 

</br>

```js
const dotenv = require('dotenv');
const TOKEN = (process.env.TOKEN);
const { Client } = require('discord.js-selfbot-v11')
let rpcGenerator = require(""discordrpcgenerator"")
const client = new Client();

let CLIENT_ID = ""CLIENT_ID""
let IMAGE = ""IMAGE_NAME""
let SONG = ""SONG_NAME""
let ARTIST = ""ARTIST""

client.on(""ready"", () => {
    rpcGenerator.getRpcImage(CLIENT_ID, IMAGE)
    .then(image => {
    let presence = rpcGenerator.createSpotifyRpc(client)
    .setApplicationId(CLIENT_ID)
    .setAssetsLargeImage(image.id)
    .setDetails(SONG)
    .setState(ARTIST)
    client.user.setPresence(presence.toDiscord())
    }).catch(console.error)
  console.log(`${client.user.username} Successfully Logged in!`)
})

client.login(TOKEN);
```

This Code is from [this tutorial](https://youtu.be/pgOu6GMF7YI). If you have any doubts regarding this, feel free to [contact me](https://dsc.gg/phantom).

**DO NOT GIVE YOUR TOKEN TO OTHERS!**

Use [uptimerobot.com](https://uptimerobot.com) to make your repl online 24/7.

</br>

> ⭐ Feel free to Star the Repository if this helped you! ;)

----

> Spotifycord © 2022 by SealedSaucer is licensed under Attribution 4.0 International 
"
222,zachwinter/wavesync,JavaScript,"# wavesync
### A Spotify visualizer built with [spotify-viz](https://github.com/zachwinter/spotify-viz) and Vue. 

> Run Locally
1. Create a new Spotify app in your [Spotify Developer Dashboard](https://developer.spotify.com/dashboard/).
2. Add `http://localhost:8001/callback` to your app's Redirect URIs. Note your app's `Client ID` and `Client Secret`. 
3. Create a file named `.env` in the project's root directory with the following values:

```
CLIENT_ID=YOUR_CLIENT_ID_HERE
CLIENT_SECRET=YOUR_CLIENT_SECRET_HERE
REDIRECT_URI=http://localhost:8001/callback
PROJECT_ROOT=http://localhost:8001
NODE_ENV=development
```
4. Install using NPM.
```bash
npm i
```
5. Serve project.
```bash
npm run serve
```
6. Visit `http://localhost:8080` and log in with your Spotify account. 
7. Play a song in your Spotify client of choice. The visualizer will take a moment to sync before initializing.

> Build & Serve (Production)
1. Follow steps `1` through `4` above.
2. In your `.env` file, set `NODE_ENV` to `production`. 
3. Start project using NPM.
```bash
npm run start
```"
223,philnash/meta-spotify,Ruby,"# Deprecation Warning

The Spotify Metadata API has been deprecated. Please use the new [Spotify Web
API](https://developer.spotify.com/web-api/) instead. If you are looking for a
ruby library for that, try [RSpotify](https://github.com/guilhermesad/rspotify).

# meta-spotify

A ruby wrapper for the Spotify Metadata API. See here for usage: http://developer.spotify.com/en/metadata-api/overview/

Use of the API is subject to the Terms and Conditions: http://developer.spotify.com/en/metadata-api/terms-of-use/

## Installation

    gem install meta-spotify

## Usage

The API has two services for the three types of data, artists, albums and tracks:

### Lookup

To look up an artist, album or track, simply call:

    MetaSpotify::Artist.lookup(spotify_uri)
    MetaSpotify::Album.lookup(spotify_uri)
or

    MetaSpotify::Track.lookup(spotify_uri)

e.g.

    artist = MetaSpotify::Artist.lookup(""spotify:artist:4YrKBkKSVeqDamzBPWVnSJ"")
    #=> #<MetaSpotify::Artist:0x119764c @name=""Basement Jaxx"">

    artist.name
    #=> ""Basement Jaxx""

You can also call lookup with the extras parameter, but only the acceptable extras will yield results, e.g.

    artist = MetaSpotify::Artist.lookup('spotify:artist:4YrKBkKSVeqDamzBPWVnSJ', :extras => 'album')

    artist.albums.first.name
    #=> ""Jaxx Unreleased""

### Search

To search for an artist, album or track works the same way as lookup, simply call:

    MetaSpotify::Artist.search(search_term)
    MetaSpotify::Album.search(search_term)
or
    MetaSpotify::Track.search(search_term)

e.g.

    search = MetaSpotify::Artist.search('foo')

    search.artists.first.name
    #=> ""Foo fighters""

For searches with many results, the result also contains details on pages and you can return page 2 like this:

    MetaSpotify::Artist.search('foo', :page => 2)

## Disclaimer

This is very new, so please let me know of any problems or anything that is missing.

## Copyright

Copyright (c) 2009 Phil Nash. See LICENSE for details.
"
224,FauxFaux/foo_input_spotify,C++,
225,akellbl4/spotify-badge,TypeScript,"# Spotify is playing now in your README.md

If you want to share your love of music with the world you are in right place. You can share your currently playing track from your Spotify with just an image.

<img src=""https://spotify-badge.vercel.app/api/now-playing.svg"" width=""540"" height=""52"">

### Features

🎸 **playing now** - current state of track with real-time progress bar  
🎬 **ended state** – when track is ended badge transitions to this state  
⏸ **paused state** - when current track is paused in player  
📭 **idle state** – not playing

[![Deploy with Vercel](https://vercel.com/button)](https://vercel.com/new/git/external?repository-url=https%3A%2F%2Fgithub.com%2Fakellbl4%2Fspotify-playing-now-readme&env=SPOTIFY_CLIENT_ID,SPOTIFY_CLIENT_SECRET,SPOTIFY_REFRESH_TOKEN,VERCEL_URL&envDescription=Spotify%20credentials%20should%20be%20provided.&envLink=https%3A%2F%2Fgithub.com%2Fakellbl4%2Fspotify-playing-now-readme%2Fblob%2Fmain%2FREADME.md&project-name=spotify-playing-now-readme)

### How to use

#### Create an Spotify application for authentication

- Go to [Spotify Developer Dashboard](https://developer.spotify.com/dashboard/) and log in with your Spotify account
- Click **Create An App**
- Fill in the name and description of new app and click **Create**.
- Click **Show Client Secret**.
- Copy **Client ID** and **Client Secret** we will need it a bit later.

#### Deploy an application to Vercel

- Open [this link](https://vercel.com/new/git/external?repository-url=https%3A%2F%2Fgithub.com%2Fakellbl4%2Fspotify-playing-now-readme&env=SPOTIFY_CLIENT_ID,SPOTIFY_CLIENT_SECRET,SPOTIFY_REFRESH_TOKEN,VERCEL_URL&envDescription=Spotify%20credentials%20should%20be%20provided.&envLink=https%3A%2F%2Fgithub.com%2Fakellbl4%2Fspotify-playing-now-readme%2Fblob%2Fmain%2FREADME.md&project-name=spotify-playing-now-readme) for deploy app to Vercel
- Click **Continue** on **Clone Git Repository** screen
- Choose where you want to save code on **Create Git Repository** and Vercel will fork this repo automatically
- Click **Continue** on **Import Project** screen
- Put **Client ID** to `SPOTIFY_CLIENT_ID` and **Client Secret** to `SPOTIFY_CLIENT_SECRET` and put just `-` to `SPOTIFY_REFRESH_TOKEN`.
- If you plan to use API specify `API_CORS_HOST` as host from which you plan to call the API endpoint. [Read more](#api)
- Click **Deploy**

#### Get Refresh Token

- When application is deployed go to **Dashboard**
- Copy your domain with `prod` label of your application
- Go back to [Spotify Developer Dashboard](https://developer.spotify.com/dashboard/)
- Open application
- Click to **Edit Settings**
- Add path `/api/auth` to deployment domain. It should looks like this `https://spotify-badge-c74hazo6k-akellbl4.vercel.app/api/auth`.
  [Screenshot](https://github.com/akellbl4/spotify-badge/blob/25e8d27aaff69e93ffb7a933a615b7e114fc58cc/screenshots/vercel-domain.png)
- Put the url **Redirect URI** and click **Add**
- Save changes with click to **Save** in end of the form
- Open new tab on the browser and go to url which you put in **Redirect URI**. The url should looks like this `https://spotify-badge-c74hazo6k-akellbl4.vercel.app.akellbl4.vercel.app/api/auth`
- Copy **Refresh token** and put to the application settings on Vercel
- Go to **Deployments** page and redeploy the last deployment of your application on Vercel
- Everything is done!

You can copy this snippet and change domain in the url to domain of your application and post it wherever you would like

```html
<img
	src=""https://spotify-playing-now-readme.vercel.app/api/now-playing.svg""
	width=""540""
	height=""52""
/>
```

## API

To make API available you need to specify `API_CORS_HOST` after you deployed the app.

- Open created project on Vercel and go to **Settings**.
- Open tab **Environment Variables**
- Create variable with name `API_CORS_HOST` and put site address from which you plan make requests for example `https://example.com` (the variable will be set to `Access-Control-Allow-Origin` header. [More about the header](https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Access-Control-Allow-Origin))

### `GET /api/now-playing`

**Response:**

When something is playing

```ts
type Response = 
/** When a track is playing */
{
	progress: number | null;
	duration: number;
	track: string;
	artist: string;
	isPlaying: boolean;
	coverUrl: string;
	url: string;
}

/** When nothing is playing */
| {
	isPlaying: false;
}
```
### Development

- Copy `.env.example` to `.env` and add values to env variables
- Run `yarn` for dependencies installation
- Run `yarn dev` for starting development server
"
226,MarcoPNS/Spotify-Stream-Widget,Visual Basic .NET,"# Stream Widget for Spotify
A small Tool for Streamers to show the current Track of Spotify to your Viewers! Completly customizable to fit your style.

## [Download this Tool now!](https://github.com/MarcoPNS/Spotify-Stream-Widget/releases)

### UPDATE: Now with live edit!
![alt text](https://github.com/MarcoPNS/Spotify-Stream-Widget/blob/main/img/widget-for-spotify-presentation.gif?raw=true ""Gif"")
![alt text](https://github.com/MarcoPNS/Spotify-Stream-Widget/blob/main/img/screen.jpg?raw=true ""Screenshot"")
![alt text](https://github.com/MarcoPNS/Spotify-Stream-Widget/blob/main/img/screen2.jpg?raw=true ""Screenshot"")
![alt text](https://github.com/MarcoPNS/Spotify-Stream-Widget/blob/main/img/screen3.jpg?raw=true ""Screenshot"")

### Export Mode
Stream Widget for Spotify has a export mode. You can activate it in the settings. It will export all track informations to files that you can use to create your own overlay.
You can find the files in the `\exported-details` folder.

Info: The timestamp of the song will not be exported.

## How to use it?
1. Download the tool
2. Start the Tool
3. Customize the Viewer and authentificate with your Spotify Account.
4. Add the window ""Spotify Viewer"" to your Stream using OBS, XSplit or similiar.

## Donate
PayPal: [https://www.paypal.me/MarcoSadowski](https://www.paypal.me/MarcoSadowski)

Dogecoin: [D9Amrvp3sGvk9aBepRtiGuZJgHV2zFaYZh](https://dogechain.info/address/D9Amrvp3sGvk9aBepRtiGuZJgHV2zFaYZh)
Such wow! Much amaze!

## Troubleshooting

[Create a Issue if something went wrong](https://github.com/MarcoPNS/Spotify-Stream-Widget/issues)

## Credits
Made by Marco Sadowski - Follow me on [Twitch](https://www.twitch.tv/marcnado) or [Twitter](https://twitter.com/MarcoSadowski)

This application use [Metroframework by Dennis Magno](https://github.com/dennismagno/metroframework-modern-ui) and [SpotifyAPI-NET by Jonas Dellinger](https://github.com/JohnnyCrazy/SpotifyAPI-NET)
"
227,spotify/spotify-js-challenge,JavaScript,"Overview
========

![Spotify Logo](/resources/spotify-logo.png)

Spotify Javascript Coding challenges

* You need to solve at least one challenge in order to win a Spotify prize. Each problem has different difficulty, so feel free to start with the problem you prefer or that is more relevant for you.

* **Disclaimer:** You need to be at the conference where we present the challenge, in order to pick up the prize.

* You don’t need to complete the 4 points, or even have a perfect solutions, we will enjoy to discuss with you your solutions, so come to talk with us. Also, .. we are hiring ;), if you enjoyed to implement those challenges, check with us what are our open positions.

### How to send the results

1. Work locally in a custom branch `git checkout -b my-solutions`

2. When you are ready with the code, you have several options: 
   * Option 1: Send us the code via e-mail: lxjs2013@spotify.com
     * First generate a patch: `git diff --no-prefix master > solution.patch`
     * Send the generated patch to
     * Use the subject **[Challenge]**
     * **Alternative**: just send us the link to a secret gist ([gists.github.com](https://gist.github.com/))
     * We will review and reply you, including details about when you can come to the stand.
   * Option 2: Just come to the Spotify stand, to show us the code and talk with us.
   * Option 3: In case that you don't even have a computer at the conference, you can discuss potential solutions with us. Just go to the stand or find a Spotify engineer.

Challenge
=========

* [Custom DOM wrapper](./custom-DOM-wrapper/README.md) - **3 Points**
* [Communication between tabs](./communication-between-tabs/README.md) - **3 Points**
* [Unit testing and refactoring](./unit-testing-and-refactoring/README.md) - **2 Points**
* [Cross-browser code](./cross-browser-code/README.md) - **2 Points**
* [Secure enough](./secure-enough/README.md) - **2 Points**
* [Mouse issue](./mouse-issue/README.md) - **1 Point**
* [Risky search](./risky-search/README.md) - **1 Point**
* [Good CSS compatibility](./good-css-compatibility/README.md) - **1 Point**
* [Static files nightmare](./static-files-nightmare/README.md) - **1 Point**
* [Mathematically wrong](./mathematically-wrong/README.md) - **1 Point**
* [Top 50 tracks](./top-50-tracks/README.md) - **4 Points**
"
228,spotify/ios-style,,"Spotify Objective-C Coding Style
================================

Version: 0.9.0

Our general coding conventions at Spotify are documented on an internal wiki, but specifics for Objective-C and
Objective-C++ code in the iOS client are documented here.

License
-------
Copyright (c) 2015-2016 Spotify AB. 

This work is licensed under a [Creative Commons Attribution 4.0 International License]( http://creativecommons.org/licenses/by/4.0/).

Table of Contents
-----------------

1.  [Spacing, Lines and Formatting](#spacing-lines-and-formatting)
2.  [Brackets](#brackets)
3.  [Naming](#naming)
4.  [Comments](#comments)
5.  [Pragma Marks](#pragma-marks)
6.  [Constants](#constants)
7.  [Return Early](#return-early)
8.  [Initializers](#initializers)
9.  [Headers](#headers)
10. [Nullability](#nullability)
11. [Strings](#strings)
12. [Dot Notation](#dot-notation)
13. [Categories](#categories)

Spacing, Lines and Formatting
-----------------------------

### Line length
* Keep your lines within **120** characters width when possible.
  * In Xcode, you can set a page guide in Text Editing in Preferences.

### Whitespace
* Use **4** spaces for indentation and alignment. Do not use tabs.
* Trailing whitespace is acceptable only on blank lines, but discouraged even there.
  * In Xcode, select ""Automatically trim whitespace"" and ""Including whitespace-only lines"" in Text Editing preferences
    to handle this automatically.
* Put spaces after commas, and before and after operators.
* Do not put spaces between parentheses and what they are enclosing.

**Example:**
```objc
foo(""bar"") 
```

**Not:**

```objc
foo( ""bar"" )
```

### Containers
* Array one-liners are acceptable unless they have too many items or their values are too long.

```objc
NSArray *array = @[@""uno"", @""dos"", @""tres"", @""cuatro""];
```

* In that case, break them in several lines:

```objc
NSArray *array = @[
    @""This is how we do, yeah, chilling, laid back"",
    @""Straight stuntin’ yeah we do it like that"",
    @""This is how we do, do do do do, this is how we do"",
];
```

* Dictionary one-liners are reserved for single pairs only:

```objc
NSDictionary *dict = @{@""key"" : @""highway""};
```

* Format it pretty otherwise, leaving a trailing comma after the last item:
```objc
NSDictionary *dict = @{
    @""key1"" : @""highway"",
    @""key2"" : @""heart"",
};
```

Brackets
--------
* Always use brackets for `if` / `for` / `while` / `do`-`while` statements. Even if its a one-liner:

```objc
if (itsMagic) {
    [self makeItEverlasting];
}
```

* Write follow up `else` clauses after the previous closing bracket on the same line.

```objc
if (hasClue) {
    knowExactlyWhatToDo();
} else if (seeItAllSoClear) {
    writeItDown();
} else {
    sing();
    dance();
}
```

Naming
------
* Follow Apple’s [Coding Guidelines for Cocoa](https://developer.apple.com/library/mac/#documentation/Cocoa/Conceptual/CodingGuidelines/CodingGuidelines.html)
on naming.

Comments
--------
* Use the `//` style for single line comments or when appending comments in the same line of code.
* Use the `/* */` style for multi-line comments.

**Example:**
```objc
/*
 This is a multi-line comment. The opening and closing markers are on their
 own lines.

 This is a new paragraph in the same block comment.
 */

stop(); // Hammer-time!

// this is a very brief comment.
```

* Document all methods and properties in the headers using Xcode’s documentation style (which is `///` at the time of writing). 
You can select a property or method and use `Option`+`Cmd`+`/` to generate the documentation template for it. Make sure to use the available 
markup tags like `@param`, `@return`, etc. (these will be auto-generated for you by Xcode).

Pragma Marks
------------
* Use the pre-processor instruction `#pragma mark` to mark related groups of methods.

Constants
---------
* Do not define constants using `#define`.
* Publicly (or privately) exposed variables should be constant (trying to assign values will result in compilation
error).

```objc
extern NSString * const SPTCodeStandardErrorDomain;
```

Return Early
------------
* Return early on errors and failed pre-conditions to avoid unnecessary nested brackets and / or unnecessary
computations.

**Example:**

```objc
- (void)setFireToTheRain:(id)rain
{
    if ([_rain isEqualTo:rain]) {
        return;
    }

    _rain = rain;
}
```

Initializers
------------
* Follow [Apple's typical init format](https://developer.apple.com/library/ios/documentation/Cocoa/Conceptual/ProgrammingWithObjectiveC/EncapsulatingData/EncapsulatingData.html#//apple_ref/doc/uid/TP40011210-CH5-SW11) to initialize objects.

**Example:**

```objc
- (instancetype)init 
{
    self = [super init];
 
    if (self) {
        // initialize instance variables here
    }
 
    return self;
}
```

Headers
-------
* The use of prefix headers has been deprecated. Do not add new code to an existing prefix header.
* When importing a module use the hash-import variant instead of at-import.
  * Yes: `#import <Foundation/Foundation.h>`
  * No: `@import Foundation;`

Nullability
-----------
* Use `NS_ASSUME_NONNULL_BEGIN` and `NS_ASSUME_NONNULL_END` in header files, and explicitly add `nullable` when needed. Example:
```objc
#import <Foundation/Foundation.h>

@protocol SPTPlaylist;

NS_ASSUME_NONNULL_BEGIN

typedef void(^SPTSomeBlock)(NSData * _Nullable data, NSError * _Nullable error);

@interface SPTYourClass : NSObject

@property (nonatomic, copy, readonly, nullable) NSString *customTitle;
@property (nonatomic, strong, readonly) id<SPTPlaylist> playlist;

- (nullable instancetype)initWithPlaylist:(id<SPTPlaylist>)playlist
                              customTitle:(nullable NSString *)customTitle;

@end

NS_ASSUME_NONNULL_END
```

Strings
-------
* All strings presented to the user should be localized.

Dot Notation
------------
* Use bracket notation when calling non-accessor methods:

```objc
[self doSomething];
```

* Use bracket notation when accessing globals through a class method:

```objc
[MyClass sharedInstance];
```

* Set and access properties using dot notation:

```objc
self.myString = @""A string"";
```

* Except in the `init` or `dealloc` methods, always use the ivar directly there:

```objc
_myString = nil;
```

Categories
----------
* Methods in categories on non-Spotify classes must be prefixed `spt_` to avoid name clashes.
"
229,peol/node-spotify,JavaScript,"node-spotify
============
Extremely simple (and somewhat hackish) API library for the Spotify REST API.

Install
---
The easiest way to use node-spotify is to install it with npm: `npm install spotify`

API
---
Currently, there's only three (useful) methods available:

```javascript
lookup: function({ type: 'artist OR album OR track', id: 'Spotify ID Hash' }, hollaback)
```

```javascript
search: function({ type: 'artist OR album OR track', query: 'My search query', limit: 20 }, hollaback)
```

```javascript
get: function(query, hollaback) -- See http://developer.spotify.com/en/metadata-api/overview/
```

Example
-------
```javascript
var spotify = require('spotify');

spotify.search({ type: 'track', query: 'dancing in the moonlight' }, function(err, data) {
    if ( err ) {
        console.log('Error occurred: ' + err);
        return;
    }

    // Do something with 'data'
});
```
"
230,plamere/playlistminer,HTML,"# The Playlist Miner

The Playlist Miner is a web app that creates Spotify playlists based upon matching
keywords.  

Give The Playlist Miner a keyword or two like ""workout"" or ""happy"" and The
Playlist Miner will
find as many Spotify playlists that match those keywords. It will then aggregate
all of the songs across all of these playlists and find the top 100 songs that occur the
most frequently in the matching playlist. These top songs can then be saved
to your own playlist.

The Playlist Miner is online at http://static.echonest.com/playlistminer/index.html

It makes use of the Spotify Web API.
"
231,tvillarete/ipod-classic-js,TypeScript,"![ipod_og](https://user-images.githubusercontent.com/21055469/71636084-6081a800-2be0-11ea-98ee-9599a3396c84.png)

### by Tanner Villarete | [LinkedIn](http://linkedin.com/in/tvillarete) | [Website](http://tannerv.com)

Before the days of streaming services, we relied on physical devices to store our limited libraries of music. Now with the streaming age, we no longer rely on physical storage and have endless hours of songs at our disposal. This project is an homage to the good 'ol days. A mix of the old and new. Experience the iPod Classic you used to own that now connects to Spotify and Apple Music — the two most popular music streaming platforms in the world.

I built this thing to be very extensible – to the point where it can even run games (like brick!). In the future I might consider adding a few more little apps and easter eggs (theming?).

![ipod](https://user-images.githubusercontent.com/21055469/71572818-c877a780-2a95-11ea-9e4e-6b0476ff172b.gif)

## Details

Here's a breakdown of the Full Stack:
#### Frontend: 
- JS: TypeScript, React (Hooks, Context)
- CSS: Styled Components, Framer Motion (for some of the animations)
- Textures/Icons: All SVGs created by me in Figma
- API: Spotify Web Playback SDK / Apple MusicKit JS

## Running Locally

#### NOTE
If you want to develop locally with this project, you'll need to supply an Apple Developer Token using the `token` query parameter. See https://developer.apple.com/documentation/applemusicapi/getting_keys_and_creating_tokens

In the project directory, you can run:

### `yarn start`

Runs the app in the development mode.<br />
Open [http://localhost:3000](http://localhost:3000) to view it in the browser.

The page will reload if you make edits.<br />
You will also see any lint errors in the console.
"
232,blmstrm/clj-spotify,Clojure,"[![Build Status](https://travis-ci.org/blmstrm/clj-spotify.svg?branch=master)](https://travis-ci.org/blmstrm/clj-spotify)
[![Clojars](https://img.shields.io/clojars/v/clj-spotify.svg)](http://clojars.org/clj-spotify)
[![Coverage Status](https://coveralls.io/repos/blmstrm/clj-spotify/badge.svg?branch=master&service=github)](https://coveralls.io/github/blmstrm/clj-spotify?branch=master)
[![Dependencies Status](https://versions.deps.co/Blmstrm/clj-spotify/status.svg)](https://versions.deps.co/Blmstrm/clj-spotify)
[![Downloads](https://versions.deps.co/Blmstrm/clj-spotify/downloads.svg)](https://versions.deps.co/Blmstrm/clj-spotify)
# clj-spotify
clj-spotify is a client library for accessing the Spotify Web API. clj-spotify aims to be identical to Spotify's Web API when it comes to naming of endpoints, path elements and query parameters therefore the documentation found here is very short. Please read through the [Spotify API Endpoint Reference](https://developer.spotify.com/web-api/endpoint-reference/), a one to one mapping from the endpoints to functions in this library should be possible.

## Usage
Each function takes a map `m` of parameters and a sometimes optional oauth token `t`. Function names are the same as the names found in [Spotify's API Endpoint Reference](https://developer.spotify.com/web-api/endpoint-reference/). A function call to retrieve a track from Spotify then has the function signature `(get-a-track m t)` and a function call to get an album's tracks has the function signature `(get-an-albums-tracks m t)` and so on.

### map `m`
The map `m` holds both path elements and query parameters.
Key names and value types in `m` are the same as those found in [Spotify's API Endpoint Reference](https://developer.spotify.com/web-api/endpoint-reference/) for path elements and query parameters. Integer values such as `:limit` and `:offset` can be specified either as integers or strings in `m`. 

### oauth token `t`
For a simple method to obtain an access token through the Client Credentials flow, use `clj-spotify.util/get-access-token`. If you need oauth2 authentication through the Authorization Code Flow (for example, to use endpoints which access private user information), see this blog post on how to roll your own: [OAuth2 is easy - illustrated in 50 lines of Clojure](http://leonid.shevtsov.me/en/oauth2-is-easy).

### Return values
clj-spotify returns the data received from the Spotify Web API unaltered but the response will be converted from json to a Clojure map.

### Error handling
Error messages received from Spotify are returned unaltered as received from the servers. If an API call would result in an exception in clj-spotify this will be returned on the same format as Spotify's error messages but with the `:status` key set to `Exception`and the result of calling `(.getMessage e)` on the Exception `e` associated with the `:message` key.

## Development
### Registering a Client
Head to the [developer dashboard](https://developer.spotify.com/dashboard) and register a new application.
If you wish to make use of the [`dev-resources`](./dev-resources/user.clj) in this project:
- Navigate to [your new app](https://developers.spotify.com/dashboard/applications), then > _edit settings_
- Setup two redirects: `http://localhost:3000/interact`, `http://localhost:3000/oauth2`
  * NOTE: The port/endpoint is arbitrary; just make sure your jetty server + handler, and redirects are pointing to the same URIs
- Take note of `CLIENTID, CLIENTSECRET`
- If you want to grab your user's URI while you're there, the [`/v1/me`](https://developer.spotify.com/console/get-current-user/) console is by far the most straightforward way.
  * Find the ""uri"" property in the payload, e.g. `""uri"": ""spotify:user:1134745600""`

### Hello Spotify (oauth2)
With credentials in hand, we're ready to make our first request!
- Ensure you've exported ClientId / ClientSecret as `SPOTIFY_OAUTH2_CLIENT_ID` & `SPOTIFY_OAUTH2_CLIENT_SECRET` respectively.
  * e.g, in a POSIX shell `EXPORT SPOTIFY_OAUTH2_CLIENT_ID='7bf224e8jn954215s3g11degh599e3an'`
- Open [`dev-resources/user.clj`](./dev-resources/user.clj), and a REPL
- Eval the buffer to load the forms, then call `(run)` to start the server
- Open http://localhost:3000/interact, go through the oauth flow
- Eval the following `(sptfy/get-current-users-profile {} (lm/oauth-token :spotify))`

## Additional documentation
Each function has a basic doc string but if the usage still is unclear please consult [Spotify's API Endpoint Reference](https://developer.spotify.com/web-api/endpoint-reference/).

## License

The MIT License (MIT)

Copyright (c) 2017 Karl Blomström

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the ""Software""), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in
all copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED ""AS IS"", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
THE SOFTWARE.
"
233,pdaddyo/soundbounce-v2,JavaScript,"# soundbounce-v2
Soundbounce v2 - web-based rebuild of Soundbounce using new Spotify Web Connect Player api

http://v2.soundbounce.org

To get dev environment up and running locally:

- Install node (v6+), yarn, postgres.
- Create an app on Spotify developer portal.
- Clone this repo.
- Copy config/secrets/secrets-example.js to /config/secrets/secrets.js and enter your spotify app info
- `yarn install`
- `npm run-script dev`

Then open your browser `http://localhost:1337/`

"
234,ArtemGordinsky/Spotifree,Swift,"# Spotifree (DISCONTINUED)
Spotifree is a free OS X app that automatically detects and mutes Spotify audio ads.

## Installing
1. Download **Spotifree** from [the website](http://spotifree.gordinskiy.com);
2. Move **Spotifree.app** to the **Applications** folder, run, and enjoy your ad-free music listening experience :)

On the first run, **Spotifree** will be added to the login items. From this moment, **Spotifree** will mute all **Spotify** ads it detects (usually, all of them). Don't worry though, it will not impact your Mac's performance and you'll never notice it running.

## How it works
**Spotifree** is polling Spotify every **.3** seconds to see whether the current track number is 0 (as in all ads). If it is, Spotify is muted for a duration of an ad. When an ad is over, the volume is set to the way it was before.

#### Alternatives
[MuteSpotifyAds](https://github.com/simonmeusel/MuteSpotifyAds) by [Simon Meusel](https://github.com/simonmeusel) is a good alternative if Spotifree does not work for you.


#### Thanks
Thanks Chris Ferrara from MacRumors forums, for the original idea and the proof-of-concept script.  
Thanks [Eneas](https://github.com/E-n-e-a-s), for turning that brittle AppleScript into a robust native application.  
Thanks to all other contributors for helping make Spotifree better.
"
235,will-stone/SpotSpot,TypeScript,"# SpotSpot

**SpotSpot is no longer maintained. It was a fun project, but I simply do not
use it any more. A great alternative looks to be
[Lofi](https://github.com/dvx/lofi) which is also more feature rich than
SpotSpot.**

## Development

`git clone git@github.com:will-stone/SpotSpot.git`

`cd spotspot`

`yarn`

`yarn start`

To package use `yarn run package`
"
236,JayChen35/spotify-to-mp3-python,Python,"# Spotify to MP3 - Python

The simplest way to convert/download your Spotify playlist into MP3 files, using Python 3.

## How To Use

This code is meant to be as simple and easy-to-use as possible. Despite this, there are some setup and usage steps (such as installing necessary packages) that are necessary for this code to work. Please read this section carefully.

### 1. Clone the respository

To clone this repoistory using Git, use

```bash
git clone https://github.com/JayChen35/spotify-to-mp3-python.git
```

If you aren't familiar with Git, navigate to the top-left of this page and find the green button labeled ""Clone or download"". Clicking this and then click ""Download ZIP"". Extract the contents of the downloaded .zip file.

Open a terminal session and navigate to this folder, using `cd`.

```bash
cd spotify-to-mp3-python/
```

### 2. Installing dependencies

We will be installing dependencies using `pip`, the official Python package manager. If you do not have `pip`, I'd recommend checking this [thread](https://stackoverflow.com/questions/6587507/how-to-install-pip-with-python-3/) to install it.

Copy and paste (and run) the following line in your terminal session to install all necessary packages.

```bash
pip3 install spotipy && pip3 install youtube_dl && pip3 install youtube_search && pip3 install yt_dlp && pip3 install ffprobe && pip3 install ffmpeg
```

### 3. Setting up Spotify

Unfortunately, I could not find a workaround for this step - it seems like we're forced to go through the Spotify API to fetch information about playlists. But, it doesn't take long at all.

Go to the Spotify [dashboard](https://developer.spotify.com/dashboard/).  Log in. Once at the Dashboard, click the green button labeled ""Create App"". Don't worry - you're not signing up for anything or commiting to something from Spotify. Here, **it really doesn't matter what you put** for ""App name"" and ""App description"". For me, I just put ""Testing"" for both. Make sure to check both agreement boxes and click ""Create"".

You should see this:

![Spotify App Screen](https://miro.medium.com/max/1400/1*8c7agz6nxmez9-bm2NFCxQ.jpeg)

You will see the ""Client ID"" field on the left (it's redacted here). Copy and save your Client ID somewhere - you'll need it later. Click ""Show client secret"" under Client ID and it should show you another long list of characters. Also copy and save your Client Secret.

Next, we need your playlist URI. To do this, simply open Spotify, right-click on the playlist you want to download, hover over ""Share"", and click ""Copy Spotify URI"". It should look something like this: `spotify:playlist:37i9dQZEVXbJiZcmkrIHGU`. When inputting this into the script, make sure to *only input the characters after ""spotify:playlist:""*. So for this example, input `37i9dQZEVXbJiZcmkrIHGU`. Save your URI somewhere handy.

### 4. Running

Running this script is straightforward. Simply run in your terminal session:

```bash
python3 spotify_to_mp3.py
```

If you run into an error saying something like ""ffprobe or avprobe not found"", check out this [solution](https://stackoverflow.com/questions/30770155/ffprobe-or-avprobe-not-found-please-install-one).

If all goes well, you should see your playlist beginning to download in a folder with the same name. Enjoy!

## Modifications

If you don't like inputting your Client ID, Client Secret, Username, and URI  every time, you can edit lines 96-99 in `spotify_to_mp3.py` to set the respective variables into a string containing your credentials instead of prompting with `input()`. For example, line 98 would become

```python
username = ""YourUserName""
```

## Debugging

This script was made in the better part of an afternoon and so it's not, by far, bug-free. Personally, I've run into no problems using this script on any of my playlists, however, your mileage may vary. The most promenant bug I've run into involves the `youtube-search` package not consistantly turning up results, and most of the time, the best solution is to simply try running the script again and giving it more chances to get the search right.
"
237,galnir/Master-Bot,TypeScript,"# A Discord Music Bot written in TypeScript using Sapphire, discord.js, Next.js and React

[![image](https://img.shields.io/badge/language-typescript-blue)](https://www.typescriptlang.org)
[![image](https://img.shields.io/badge/node-%3E%3D%2016.0.0-blue)](https://nodejs.org/)

## System dependencies

- [Node.js LTS or latest](https://nodejs.org/en/download/)
- [Java 13](https://www.azul.com/downloads/?package=jdk#download-openjdk) (other versions have some issues with Lavalink)

## Setup bot

Create an [application.yml](https://github.com/freyacodes/lavalink/blob/master/LavalinkServer/application.yml.example) file root folder.

Download the latest Lavalink jar from [here](https://github.com/Cog-Creators/Lavalink-Jars/releases) and also place it in the root folder.

### PostgreSQL

#### Linux

Either from the official site or follow the tutorial for your [distro](https://www.digitalocean.com/community/tutorial_collections/how-to-install-and-use-postgresql).

#### MacOS

Get [brew](https://brew.sh), then enter 'brew install postgresql'.

#### Windows

Getting Postgres and Prisma to work together on Windows is not worth the hassle. Create an account on [heroku](https://dashboard.heroku.com/apps) and follow these steps:

1. Open the dashboard and click on 'New' > 'Create new app', give it a name and select the closest region to you then click on 'Create app'.
2. Go to 'Resources' tab, under 'Add-ons' search for 'Heroku Postgres' and select it. Click 'Submit Order Form' and then do the same step again (create another postgres instance).
3. Click on each 'Heroku Postgres' addon you created, go to 'Settings' tab > Database Credentials > View Credentials and copy the each one's URI to either `DATABASE_URL` or `SHADOW_DB_URL` in the .env file you will be creating in the settings section.
4. Done!

### Redis

#### MacOS
`brew install redis`.

#### Windows
Download from [here](https://redis.io/download/).

#### Linux
Follow the instructions [here](https://redis.io/docs/getting-started/installation/install-redis-on-linux/).

### Settings (env)

Create a `.env` file in the root directory and copy the contents of .env.example to it.
Note: if you are not hosting postgres on Heroku you do not need the SHADOW_DB_URL variable.

```env
# DB URL
DATABASE_URL=""postgresql://john:doe@localhost:5432/master-bot?schema=public""
SHADOW_DB_URL=""postgresql://john:doe@localhost:5432/master-bot?schema=public""

# Bot Token
DISCORD_TOKEN=""""

# Next Auth

NEXTAUTH_SECRET=""somesupersecrettwelvelengthword""
NEXTAUTH_URL=http://localhost:3000
NEXT_PUBLIC_INVITE_URL=""https://discord.com/api/oauth2/authorize?client_id=yourclientid&permissions=8&scope=bot""

# Next Auth Discord Provider
DISCORD_CLIENT_ID=""""
DISCORD_CLIENT_SECRET=""""

# Lavalink
LAVA_HOST=""0.0.0.0""
LAVA_PASS=""youshallnotpass""
LAVA_PORT=2333
LAVA_SECURE=false

# Spotify
SPOTIFY_CLIENT_ID=""""
SPOTIFY_CLIENT_SECRET=""""

# Twitch
TWITCH_CLIENT_ID=""""
TWITCH_CLIENT_SECRET=""""

# Other APIs
TENOR_API=""""
NEWS_API=""""
GENIUS_API=""""
RAWG_API=""""

```
#### Gif features
If you have no use in the gif commands, leave everything under 'Other APIs' empty. Same applies for Twitch, everything else is needed.

#### DB URL
Change 'john' to your pc username and 'doe' to some password, or set the name and password you created when you installed Postgres.

#### Bot Token
Generate a token in your Discord developer portal.

#### Next Auth
You can leave everything as is, just change 'yourclientid' in NEXT_PUBLIC_INVITE_URL to your Discord bot id.

#### Next Auth Discord Provider
Go to the OAuth2 tab in the developer portal, copy the Client ID to DISCORD_CLIENT_ID and generate a secret to place in DISCORD_CLIENT_SECRET. Also, set this as the URL under 'Redirects': http://localhost:3000/api/auth/callback/discord.

#### Lavalink
You can leave this as long as the values match your application.yml.

#### Spotify and Twitch
Create an application in each platform's developer portal and paste the relevant values.

# Running the bot
1. If you followed everything right, hit `npm i` in the root folder. When it finishes make sure prisma didn't error.
2. Open a separate terminal in the root folder and run 'java -jar Lavalink.jar'.
3. Wait a few seconds and hit `npm run dev`.
4. If everything works, your bot should be running and the dashboard should be on localhost:3000.
5. Enjoy!

# Commands

A full list of commands for use with Master Bot

## Music

| Command               | Description                                                                                                               | Usage                                                 |
| --------------------- | ------------------------------------------------------------------------------------------------------------------------- | ----------------------------------------------------- |
| /play                 | Play any song or playlist from youtube, you can do it by searching for a song by name or song url or playlist url         | /play darude sandstorm                                |
| /pause                | Pause the current playing song                                                                                            | /pause                                                |
| /resume               | Resume the current paused song                                                                                            | /resume                                               |
| /leave                | Leaves voice channel if in one                                                                                            | /leave                                                |
| /remove               | Remove a specific song from queue by its number in queue                                                                  | /remove 4                                             |
| /queue                | Display the song queue                                                                                                    | /queue                                                |
| /shuffle              | Shuffle the song queue                                                                                                    | /shuffle                                              |
| /skip                 | Skip the current playing song                                                                                             | /skip                                                 |
| /skipall              | Skip all songs in queue                                                                                                   | /skipall                                              |
| /skipto               | Skip to a specific song in the queue, provide the song number as an argument                                              | /skipto 5                                             |
| /volume               | Adjust song volume                                                                                                        | /volume 80                                            |
| /music-trivia         | Engage in a music trivia with your friends. You can add more songs to the trivia pool in resources/music/musictrivia.json | /music-trivia                                         |
| /loop                 | Loop the currently playing song or queue                                                                                  | /loop                                                 |
| /lyrics               | Get lyrics of any song or the lyrics of the currently playing song                                                        | /lyrics song-name                                     |
| /now-playing          | Display the current playing song with a playback bar                                                                      | /now-playing                                          |
| /move                 | Move song to a desired position in queue                                                                                  | /move 8 1                                             |
| /queue-history        | Display the queue history                                                                                                 | /queue-history                                        |
| /create-playlist      | Create a custom playlist                                                                                                  | /create-playlist 'playlistname'                       |
| /save-to-playlist     | Add a song or playlist to a custom playlist                                                                               | /save-to-playlist 'playlistname' 'yt or spotify url'  |
| /remove-from-playlist | Remove a track from a custom playlist                                                                                     | /remove-from-playlist 'playlistname' 'track location' |
| /my-playlists         | Display your custom playlists                                                                                             | /my-playlists                                         |
| /display-playlist     | Display a custom playlist                                                                                                 | /display-playlist 'playlistname'                      |
| /delete-playlist      | remove a custom playlist                                                                                                  | /delete-playlist 'playlistname'                       |

## Gifs

| Command    | Description                | Usage      |
| ---------- | -------------------------- | ---------- |
| /gif       | Get a random gif           | /gif       |
| /jojo      | Get a random jojo gif      | /jojo      |
| /gintama   | Get a random gintama gif   | /gintama   |
| /anime     | Get a random anime gif     | /anime     |
| /baka      | Get a random baka gif      | /baka      |
| /cat       | Get a cute cat picture     | /cat       |
| /doggo     | Get a cute dog picture     | /doggo     |
| /hug       | Get a random hug gif       | /hug       |
| /slap      | Get a random slap gif      | /slap      |
| /pat       | Get a random pat gif       | /pat       |
| /triggered | Get a random triggered gif | /triggered |
| /amongus   | Get a random Among Us gif  | /amongus   |

## Other


| Command           | Description                                                                                                                                                        | Usage                                   |
| ----------------- | ------------------------------------------------------------------------------------------------------------------------------------------------------------------ | --------------------------------------- |
| /fortune          | Get a fortune cookie tip                                                                                                                                           | /fortune                                |
| /insult           | Generate an evil insult                                                                                                                                            | /insult                                 |
| /chucknorris      | Get a satirical fact about Chuck Norris                                                                                                                            | /chucknorris                            |
| /motivation       | Get a random motivational quote                                                                                                                                    | /motivation                             |
| /random           | Generate a random number between two provided numbers                                                                                                              | /random 0 100                           |
| /8ball            | Get the answer to anything!                                                                                                                                        | /8ball Is this bot awesome?             |
| /rps              | Rock Paper Scissors                                                                                                                                                | /rps                                    |
| /bored            | Generate a random activity!                                                                                                                                        | /bored                                  |
| /advice           | Get some advice!                                                                                                                                                   | /advice                                 |
| /game-search      | Search for game information.                                                                                                                                       | /game-search super-metroid              |
| /kanye            | Get a random Kanye quote                                                                                                                                           | /kanye                                  |
| /world-news       | Latest headlines from reuters, you can change the news source to whatever news source you want, just change the source in line 13 in world-news.js or ynet-news.js | /world-news                             |
| /translate        | Translate to any language using Google translate.(only supported languages)                                                                                        | /translate english ありがとう           |
| /about            | Info about me and the repo                                                                                                                                         | /about                                  |
| /urban dictionary | Get definitions from urban dictionary                                                                                                                              | /urban javascript                       |
| /activity         | Generate an invite link to your voice channel's activity                                                                                                           | /activity voicechannel Chill            |
| /twitch-status    | Check the status of a Twitch steamer                                                                                                                               | /twitch-status streamer: bacon_fixation |

## Resources

[Getting a Tenor API key](https://tenor.com/developer/keyregistration)

[Getting a NewsAPI API key](https://newsapi.org/)

[Getting a Genius API key](https://genius.com/api-clients/new)

[Getting a rawg API key](https://rawg.io/apidocs)

[Getting a Twitch API key](https://github.com/Bacon-Fixation/Master-Bot/wiki/Getting-Your-Twitch-API-Info)

[Installing Node.js on Debian](https://www.digitalocean.com/community/tutorials/how-to-set-up-a-node-js-application-for-production-on-debian-9)

[Installing Node.js on Windows](https://treehouse.github.io/installation-guides/windows/node-windows.html)

[Installing on a Raspberry Pi](https://github.com/galnir/Master-Bot/wiki/Running-the-bot-on-a-Raspberry-Pi)

[Using a Repl.it LavaLink server](https://github.com/galnir/Master-Bot/wiki/Setting-Up-LavaLink-with-a-Replit-server)

[Using a public LavaLink server](https://github.com/galnir/Master-Bot/wiki/Setting-Up-LavaLink-with-a-public-LavaLink-Server)

[Using an Internal LavaLink server](https://github.com/galnir/Master-Bot/wiki/Setting-up-LavaLink-with-an-Internal-LavaLink-server)

## Contributing

Fork it and submit a pull request!
Anyone is welcome to suggest new features and improve code quality!

## Contributors ❤️


**⭐ [Bacon Fixation](https://github.com/Bacon-Fixation) ⭐ - Countless contributions**


[ModoSN](https://github.com/ModoSN) - 'resolve-ip', 'rps', '8ball', 'bored', 'trump', 'advice', 'kanye', 'urban dictionary' commands and visual updates

[PhantomNimbi](https://github.com/PhantomNimbi) - bring back gif commands, lavalink config tweaks

[Natemo6348](https://github.com/Natemo6348) - 'mute', 'unmute'

[kfirmeg](https://github.com/kfirmeg) - play command flags, dockerization, docker wiki

[rafaeldamasceno](https://github.com/rafaeldamasceno) - 'music-trivia' and Dockerfile improvements, minor tweaks

[navidmafi](https://github.com/navidmafi) - 'LeaveTimeOut' and 'MaxResponseTime' options, update issue template, fix leave command

[Kyoyo](https://github.com/NotKyoyo) - added back 'now-playing'

[MontejoJorge](https://github.com/MontejoJorge) - added back 'remind'

[malokdev](https://github.com/malokdev) - 'uptime' command

[chimaerra](https://github.com/chimaerra) - minor command tweaks
"
238,tma02/baritone,HTML,"# Baritone
Spotify controls that live in your menubar. [Download latest release.](https://github.com/tma02/spotify-menubar/releases/latest)
![screenshot](https://drive.google.com/uc?export=download&id=0B4_o7T3fukA6TXVJWHA4ZDl4RE0)

## Development
After cloning the repo, install dependencies

```$ npm install```

Then run with

```$ npm test```
"
239,mirrorfm/mirrorfm-data,,"# Mirror.FM data 🎵

Anyone can add new YouTube channels or Discogs labels as playlists on www.mirror.fm. 100% automatic

## Submitting guidelines

Please only submit channels or labels following these criteria.

### YouTube channels

 - channel tracks seem to be formatted correctly, for example: `Artist – Track`
 - most channel tracks are single tracks, not ""full EP"", ""full album"" or a mix
 - have a decent amount of tracks (~50+) 
 - doesn't belong to a single artist
 - doesn't have a matching record label on [discogs.com](https://www.discogs.com/search/?type=label), in which case it should be added as a [Discogs label](https://github.com/mirrorfm/data#discogs-labels)

### Discogs labels

Most should already follow community-driven standards, feel free to add any!

## How to submit a channel or label 

It's quick and easy:

 - edit [discogs-labels.csv](https://github.com/mirrorfm/data/blob/master/discogs-labels.csv) or [youtube-channels.csv](https://github.com/mirrorfm/data/blob/master/youtube-channels.csv) on Github
 - add the channel or label ID, name and link to the end of the file
   - to find the Youtube channel ID open the browser console and type `ytInitialData.metadata.channelMetadataRenderer.externalId`
 - create a pull request
 - once approved your Spotify playlist will sync automatically and will be added to the mirror.fm [Spotify profile](https://open.spotify.com/user/xlqeojt6n7on0j7coh9go8ifd?si=StuR-GbuTeCJUSNzHKN5gg)

## How does it work

 - Submissions in the current repo triggers other automations in https://github.com/mirrorfm/mirrorfm/tree/master/functions
 - YouTube track names are cleaned up using https://github.com/mirrorfm/trackfilter/, feel free to [contribute](https://github.com/mirrorfm/trackfilter/blob/master/tests/test_trackfilter.py#L11)
"
240,cluclead/spotify-web,JavaScript,
241,spotify/spotify-checkstyle-config,,"Spotify Checkstyle Configuration
================================
[![Maven Central](https://img.shields.io/maven-central/v/com.spotify.checkstyle/spotify-checkstyle-config.svg)](https://search.maven.org/#search%7Cga%7C1%7Cg%3A%22com.spotify.checkstyle%22%20spotify-checkstyle-config)
[![License](https://img.shields.io/github/license/spotify/spotify-checkstyle-config.svg)](LICENSE.txt)



This project provides a default configuration for checkstyle at Spotify.

To use it, configure your maven-checkstyle-plugin like so:

```
   <plugin>
     <artifactId>maven-checkstyle-plugin</artifactId>
     <version>2.17</version>
     <dependencies>
       <dependency>
         <groupId>com.spotify.checkstyle</groupId>
         <artifactId>spotify-checkstyle-config</artifactId>
         <version>LATEST-VERSION</version>
       </dependency>
       <dependency>
         <groupId>com.puppycrawl.tools</groupId>
         <artifactId>checkstyle</artifactId>
         <version>8.24</version>
       </dependency>
     </dependencies>
     <configuration>
       <configLocation>spotify_checks.xml</configLocation>
       
       <!-- The following parameters are optional: -->
       <consoleOutput>true</consoleOutput>
       <failOnViolation>true</failOnViolation>
       <logViolationsToConsole>true</logViolationsToConsole>
       <violationSeverity>error</violationSeverity>
     </configuration>
     <executions>
       <execution>
         <id>validate</id>
         <phase>validate</phase>
         <goals>
           <goal>check</goal>
         </goals>
       </execution>
     </executions>
   </plugin>
```

See the [maven-checkstyle-plugin docs](https://maven.apache.org/plugins/maven-checkstyle-plugin/check-mojo.html) 
for more information about what the configuration parameters mean.

Internally, we have the above configuration in the `<pluginManagement/>` section of a 
company-wide parent pom, meaning that projects only need to specify the below in their
`<build><plugins>` section:

```
   <plugin>
      <artifactId>maven-checkstyle-plugin</artifactId>
   </plugin>
```

# Configuration

## Suppressions

The configuration of the checkstyle plugin you get from `spotify_checks.xml` tells it to 
optionally look for a file named `suppressions.xml` as per the
[SuppressionFilter docs](http://checkstyle.sourceforge.net/config_filters.html#SuppressionFilter). 
This means you can configure suppressions by providing such a file on your
project's classpath or in the current directory where you build it - note 
that for multi-module projects, it's probably a good idea to use something
like [this solution](http://stackoverflow.com/a/19690484/1659929) to share
the configuration among each sub-module.

# IDEA support

There is a [configuration file for IntelliJ IDEA](src/main/idea/spotify-checkstyle-idea.xml) that you can import into your project.

# Code of conduct
This project adheres to the [Open Code of Conduct][code-of-conduct]. By participating, you are expected to honor this code.

[code-of-conduct]: https://github.com/spotify/code-of-conduct/blob/master/code-of-conduct.md
"
242,sregg/spotify-tv,Java,"# !!! DEPRECATED !!!

The official Spotify app for Android TV is finally here!

https://play.google.com/store/apps/details?id=com.spotify.tv.android﻿

As a result, I won't be working on this project anymore.
If you want to keep working on it (e.g. you feel it's better than the official one), please let me know.

Thanks everyone for collaborating on that project.﻿


# TV Player for Spotify
Unofficial Spotify app for Android TV

# Features
- Login in with your username & password or via Facebook
- List your playlists (including starred), saved albums, artists and songs
- See the tracklist for each playlist and album (thanks to @Dahlgren)
- Stream any track of your library
- Search for artists, albums, songs and playlists
- Controls (Shuffle, Previous/Next Track, Play, Pause, Stop)
- Global search (thanks to @Dahlgren)
- Featured Playlists and New Releases (thanks to @Dahlgren)
- Settings (Bitrate)
- Recommendations in Android TV Home (based on Featured Playlists in the user's country) (thanks to @Dahlgren)
- Last.fm scrobbling
- Browse playlists by categories (thanks to @Dahlgren)
- Setting - Customize UI elements (e.g. show or hide Feature playlist and new releases)

# TODO
- Control buttons in Details screen and Now Playing screen
- Use ""Saved Albums"" new API endpoint to grab My Albums and My Artists
- Add to playlist button for each track in the tracklist
- Manage Playlist (create, edit, delete, etc...)
- Recently Played
- Friends
- Recommendations in Android TV Home (based on user's recommended artists/albums)
- Setting - dim screen after 2 minutes of playing
- Game controller controls (play, pause, previous, next, etc...)
- Refactor: recommendations using [support library](http://developer.android.com/tools/support-library/features.html#recommendation)

# Release build
Add the values `release.storeFile`, `release.storePassword`, `release.keyAlias`, and `release.keyPassword` to `release.properties`.
`release.storeFile` should be an absolute path to your keystore, the others should be the string value.
See `release.properties.sample` for an example file.

# Pull Requests
I welcome and encourage all pull requests. 
It usually will take me within 24-48 hours to respond to any issue or request. 
Here are some basic rules to follow to ensure timely addition of your request:

- Match coding style (braces, spacing, etc.) This is best achieved using CMD+Option+L (Reformat code) on Mac (not sure for Windows) with Android Studio defaults.
- If its a feature, bugfix, or anything please only change code to what you specify. DO NOT do this: Ex: Title ""Fixes Crash Related to Bug"" includes other files that were changed without explanation or doesn't relate to the bug you fixed. Or another example is a non-descriptive title ""Fixes Stuff"".
- Pull requests must be made against latest master branch.
- Have fun!

# License
GPL v2

This open source app complies with the [Spotify TOS](https://developer.spotify.com/developer-terms-of-use/)
"
243,oSumAtrIX/DownOnSpot,Rust,"<div align=""center"">

# DownOnSpot

A Spotify downloader written in Rust

<img src=""assets/icon.svg"" alt=""drawing"" width=""500""/>

<br>

[![Build project](https://github.com/oSumAtrIX/DownOnSpot/actions/workflows/rust.yml/badge.svg)](https://github.com/oSumAtrIX/DownOnSpot/actions/workflows/rust.yml)
[![Codacy Badge](https://app.codacy.com/project/badge/Grade/4474e5fcc9064562b5d653601ee356f3)](https://www.codacy.com/gh/oSumAtrIX/DownOnSpot/dashboard?utm_source=github.com&amp;utm_medium=referral&amp;utm_content=oSumAtrIX/DownOnSpot&amp;utm_campaign=Badge_Grade)
[![GitHub license](https://img.shields.io/github/license/oSumAtrIX/DownOnSpot)](https://github.com/oSumAtrIX/DownOnSpot/blob/main/LICENSE)
[![GitHub issues](https://img.shields.io/github/issues/oSumAtrIX/DownOnSpot)](https://github.com/oSumAtrIX/DownOnSpot/issues)
[![GitHub forks](https://img.shields.io/github/forks/oSumAtrIX/DownOnSpot)](https://github.com/oSumAtrIX/DownOnSpot/network)
[![GitHub stars](https://img.shields.io/github/stars/oSumAtrIX/DownOnSpot)](https://github.com/oSumAtrIX/DownOnSpot/stargazers)
[![Stability: Experimental](https://masterminds.github.io/stability/experimental.svg)](https://masterminds.github.io/stability/experimental.html)

</div>

## Disclaimer

```text
DownOnSpot was not developed for piracy.
It is meant to be used in compliance with DMCA, Section 1201, for educational, private and fair use.
I am not responsible in any way for the usage of the source code.
```

## Features

-   Works with free Spotify accounts (if using free-librespot fork)
-   Download 96, 160kbit/s audio with a free, 256 and 320 kbit/s audio with a premium account from Spotify, directly
-   Multi-threaded
-   Search for tracks
-   Download tracks, playlists, albums and artists
-   Convert to mp3
-   Metadata tagging
-   Simple usage over CLI

## Building

Clone the repository using git and change to the local repository directory:

```bash
git clone https://github.com/oSumAtrIX/DownOnSpot.git
cd DownOnSpot
```

A [private ssh key](https://osumatrix.me/ucp?get=free_librespot_private_key&token=fdfdbff6f5) is needed to use free Spotify accounts. 
Follow [this answer by DopeGhoti on stackexchange.com](https://unix.stackexchange.com/a/494485) on how to set up ssh with the required private key.
A sample `~/.ssh/config` file could look like this:

```text
Host github.com
  IdentityFile ~/.ssh/free_librespot_private_key
```

If you do not want to use `free-librespot` (i.e. if you are using a paid Spotify account), then remove the git dependency of `free-librespot`. 
For that, delete `git = ""ssh://git@github.com/oSumAtrIX/free-librespot.git""` inside `Cargo.toml`.
For paid Spotify accounts, make sure to then add `librespot = ""0.4.2""` in the `Cargo.toml` file instead.

`Nightly Rust` is required to build this project. Install it by following [rustup.rs](https://rustup.rs) instructions.

```bash
cargo build --release
```

If you get a linker error, you might need to download the [standard libmp3lame](https://www.rarewares.org/mp3-lame-libraries.php#libmp3lame) library.
On OS X, it should be enough to just run `brew install lame`, provided you have [Homebrew](https://brew.sh/) installed.

## Usage/ Examples

Running DownOnSpot once will create the default configuration file in the same directory as your shell.

```bash
$ down_on_spot.exe
Settings could not be loaded, because of the following error: IO: NotFound No such file or directory. (os error 2)...
..but default settings have been created successfully. Edit them and run the program again.

$ down_on_spot.exe
Usage:
down_on_spot.exe (search_term | track_url | album_url | playlist_url | artist_url)
```
On OS X, the `settings.json` file is created globally for the logged in user and is located in `~/.config/down_on_spot/settings.json`.

Apart from your Spotify username and password, you will need to login in to the Spotify developer dashboard and [create a new private application](https://developer.spotify.com/dashboard/applications). Fill in the `client_id` and `client_secret` in your `settings.json` from your newly created app.
All the other settings should be self-explanatory, conversion from Ogg to MP3 is disabled by default.

### Template variables

Following variables are available for `path` and `filename_template` in the `settings.json`:

-   %0disc%
-   %0track%
-   %album%
-   %albumArtist%
-   %albumArtists%
-   %artist%
-   %disc%
-   %id%
-   %title%
-   %track%

## Additional scripts

- [Userscript to download titles from YouTube](https://gist.github.com/oSumAtrIX/6abf46e2ea25d32f4e6608c3c3cf837e)

## Known issues

-   Mp3 downloads slow due to libmp3lame
-   Downloads fail sometimes due to `channel error`

## Authors

-   [@oSumAtrIX](https://osumatrix.me/#github)
-   [@exttex](https://git.freezer.life/exttex)
-   [@breuerfelix](https://github.com/breuerfelix)
-   [@thatpix3l](https://github.com/thatpix3l)
-   [@45ninjas](https://github.com/45ninjas)

## License

[GPLv3](https://choosealicense.com/licenses/gpl-3.0/)
"
244,muhammedfurkan/Spotify-Telegram-Bio-Updater,Python,"# installation via using Heroku

[![Deploy](https://www.herokucdn.com/deploy/button.svg)](https://heroku.com/deploy/?template=https://github.com/muhammedfurkan/Spotify-Telegram-Bio-Updater)


# spotify telegram bio updater
This userbot updates the biography of a telegram user according to their current spotify playback. If no playback is active, the bot changes the bio back to the original one from the user.

## Setup

If you follow this steps, you can use this project easily for yourself.

0. Ensure you have python 3.6+ installed and then install telethon and request via pip: `pip install telethon requests`
1. Get your spotify client_id and your client_secret from https://developer.spotify.com/dashboard/. If you need more help, have a look [here](https://developer.spotify.com/documentation/general/guides/app-settings/#register-your-app).
2. Get your telegram app api_id and api_hash from https://my.telegram.org/. If you need more help, have a look [here](https://telethon.readthedocs.io/en/latest/extra/basic/creating-a-client.html#creating-a-client).
3. Open the following link (change CLIENT_ID to you client_id): https://accounts.spotify.com/authorize?client_id=CLIENT_ID&response_type=code&redirect_uri=https%3A%2F%2Fexample.com%2Fcallback&scope=user-read-playback-state%20user-read-currently-playing
4. After you grant permission, you get redirected to https://example.com/callback?code=_. Copy everything after the code, this is you initial token.
5. Paste all these values in their respective variables at [constants.py](/constants.py). While you are at it, you can also paste an initial biography there. Just take your current one. This is highly recommended. If you don't do this **and** have a currently playing track, the bot has at its first start no idea what your original biography is. Just do it, please.
6. If you want to have a log channel or group or so, paste its invite link or id in the LOG variable. If you leave it at ""me"", you will see those in your saved chat. Only if errors occur ofc ;)
7. Now you can run [generate.py](/generate.py). This will generate a json file named database.
8. You are almost done. If you now run [bot.py](/bot.py), all you need to do is log into your telegram account. Follow the instructions on screen.
9. Now you are really done.

## Important Information

You can shut the bot down if you want/need to. Write `//stop` anywhere you want. If you want to change the command, edit SHUTDOWN_COMMAND in the [constants](/constants.py).

## Warning

This bot uses the emoji 🎶 to determine if the current bio is an active spotify biography or not. This means you mustn't use this emoji on your original biographies or the bot will probably break. Don't do it, thanks.

## But I want to

Great news. Just change the KEY variable in [constants](/constants.py) file. Don't ever use your new KEY in your biographies though!

## Issues? Need help? Want to tell me something?

Well, just create an issue here. You can also ping me on [telegram](https://t.me/By_Azade).
"
245,bimsina/SpotifyUIClone,Dart,"# Spotify UI clone made using Flutter.
Screenshots:<br>
<table style={border:""none""}><tr><td><img src=""https://user-images.githubusercontent.com/29589003/53244368-cce36f00-36d2-11e9-9219-ff6091f74be7.png"" alt=""Screenshot 1""/></td><td><img src=""https://user-images.githubusercontent.com/29589003/53244460-13d16480-36d3-11e9-95a3-b84dc412d778.png"" alt=""Screenshot 2""/></td><td><img src=""https://user-images.githubusercontent.com/29589003/53244491-28156180-36d3-11e9-9a8d-c944304b8ef3.png"" alt=""Screenshot 3""/></td></tr></table>
"
246,davicorreiajr/spotify-now-playing,JavaScript,"# Spotify - now playing

This is a popup that shows Spotify current playback information, made and tested specially for macOS. It also allows you to add tracks to your library and playlists.

![](spotify-now-playing.gif)

## Installing

Download the `.dmg` file from the [latest release](https://github.com/davicorreiajr/spotify-now-playing/releases/latest), run it and move the app to the `Application` folder.

Using Homebrew:
```
brew cask install spotify-now-playing
```

### Compatibily with Linux

I tried to make the app compatible with Linux, but I've seen [this issue](https://github.com/electron/electron/issues/6773), which turns quite hard to make the app behaves as expected (let's say, as a menu bar app) on Linux. You can run the app locally, but for now, I prefered to not release a version for Linux because it'd be far from what I (or any other user) would expected. If you find a good solution, please don't hesitate to open an issue or a pull request.

## Running locally

This app was made using Electron, but developed and tested only on macOS.

First, clone the repo:
```
git clone https://github.com/davicorreiajr/spotify-now-playing
cd spotify-now-playing
```

Install the dependencies:
```
yarn install
```
Then you have to create an app on Spotify, in order to get the codes necessary for doing the requests to its API. You can do it easly, following [this tutorial](https://developer.spotify.com/documentation/general/guides/app-settings/#register-your-app).

Once you have done this, rename `.env-example.json` (file in the root of this project) to `.env.json`.

And finally, start the app:
```
yarn start
```

If you are developing over this project and want to test the built app, the one generated by `electron-builder`, you have to:
- rename `electron-builder-example.yml` to `electron-builder.yml`;
- generate a token with repo/scope permission [here](https://github.com/settings/tokens/new), ONLY in case you want to release to your GitHub repo. And remember to update the link to your repo in `package.json`.

And then, you run:
```
yarn dist
```
With this command, you are going to find a `.dmg` file inside a new folder `dist`. 

## Contributing & developing

To contribute with this repository:
 - First you need to fork the project;
 - Create a branch with a meaningful name;
 - Modify the project as you see fit;
 - To test it manually, run:
 ```
 yarn link
 ```
 - Open a pull request to the main repository.

## Copyright & credits

Spotify - now playing is not affiliated with Apple or Spotify and these are the trademarks of the respective parties. The icon used here belongs to Spotify and it was used to ease the usage of this app to the user.


## Troubles & suggestions

Please, if you find any problem or have some sugestion, don't hesitate to open an issue or even a pull request.
"
247,pdaddyo/soundbounce,JavaScript,"This version is no longer maintained - see [soundbounce-v2](https://github.com/pdaddyo/soundbounce-v2)
=============
==============




![Soundbounce](http://soundbounce.org/images/soundbounce-white-bg.png)

Music sounds better together.

A synchronised, collaborative Spotify client.


http://soundbounce.org/


[![Stories in Ready](https://badge.waffle.io/pdaddyo/soundbounce.png?label=ready&title=Ready)](https://waffle.io/pdaddyo/soundbounce)
Features
=======
- Public listening rooms
- High bitrate, normalized audio
- Integrated Spotify search
- Dragging and dropping to add tracks from Spotify
- Chat (with emoji)
- Voting
- Star now playing track
- *NEW* Preview upcoming tracks and search results
- Auto top-up with existing Spotify playlist
- Create / edit your own room

Requirements
==========
- Windows 7+ / OSX 10.7+
- Spotify Premium account
- .NET Framework 4.5 (on Windows)
- OSX 10.7+ (on Mac)

Installation instructions
=============
- Download latest release: https://github.com/pdaddyo/soundbounce/releases
- Run soundbounce-setup-v1.0.exe, then follow the on-screen instructions.

Motivation
==========
After the announcement that Soundrop would be closing its doors, I was unable to find a suitable alternative.  Some alternatives use Youtube, but the sound quality is often poor.  Some also use soundcloud, but not all tracks are available.  Since Spotify are removing all apps in the desktop, the only way to build a ""clone"" of Soundrop was to build a native client, using their official library libspotify.  

Libspotify is limited to premium accounts only, but for now is the only option (until their web api supports deeper control e.g. track seeking etc).  Since the majority of Soundbounce is a web application, this transition could be made to being 100% browser-only in the future, but for now we need a native client.  

Are you a developer?  Please get involved!

Known issues
============
- Sometimes audio won't work on first launch.  Wait a few minutes, restart app and should be fine from then on.  Seems to affect OSX more than Windows.  
- If you get spotify credentials wrong, you'll have to re-launch app

Technology used
=================
- libspotify & libspotify.net to connect to Spotify
- naudio for sound output
- Chrome Embedded Frame (and CefSharp) for all UI
- WinForms to host the ChromiumWebBrowser
- React / JSX for front-end 
- node.js for the server, keeps all data in memory and stores in simple JSON files
- Express webserver, websockets & passport for social integration
- Spotify Web API used on the server to lookup tracks, and load playlists

Future plans
=========
See the issues list for future enhancements, or add your own ideas here!
https://github.com/pdaddyo/soundbounce/issues
"
248,FGRibreau/spotify-downloader,JavaScript,"Spotify-Downloader [![Gittip](http://badgr.co/gittip/fgribreau.png)](https://www.gittip.com/fgribreau/)
==================

A proof-of-concept that transforms a Spotify playlist to a direct-download list.

**I accept pull requests**. If someone would like to add a web-interface to Spotify-downloader
I'll be more than happy to accept the merge.

Usage
-----

* `npm install spotify-downloader`
* Drap & drop tracks from Spotify into a text file (e.g. playlist.txt )
* Edit `./bin/spotify-downloader` and replace the `key`'s value by your own [FilesTube API key](http://www.filestube.com/api.html)
* Run `cat playlist.txt | ./bin/spotify-downloader`
* Done.


Disclaimer
----------

* It's a simpley mashup, Spotify-downloader does nothing else that making a bridge between the Spotify Web API and FilesTube API.
* Please don't download content that you don't have a legal right to.
* If you believe I'm infringing your intellectual property somehow, please send me a proper DMCA Notice to abuse[***_at_***]fgribreau.com

## Donate
[Donate Bitcoins](https://coinbase.com/checkouts/fc3041b9d8116e0b98e7d243c4727a30)

Licence
-------

              DO WHAT THE FUCK YOU WANT TO PUBLIC LICENSE
                        Version 2, December 2004

     Copyright (C) 2004 Sam Hocevar <sam@hocevar.net>

     Everyone is permitted to copy and distribute verbatim or modified
     copies of this license document, and changing it is allowed as long
     as the name is changed.

                DO WHAT THE FUCK YOU WANT TO PUBLIC LICENSE
       TERMS AND CONDITIONS FOR COPYING, DISTRIBUTION AND MODIFICATION

      0. You just DO WHAT THE FUCK YOU WANT TO.
"
249,emarkovic/spotify-template,JavaScript,"# spotify-template
This template is an optional starting point for a challenge for the following [course](http://faculty.washington.edu/mikefree/info343/) at the University of Washington.  The instructions are described [here](http://faculty.washington.edu/mikefree/info343/#/challenges/spotify).
"
250,spotify/spotify-web-playback-sdk-example,JavaScript,"# Web Playback SDK Javascript Tutorial

This repository contains the source code for the [Web Playback SDK Guide](https://developer.spotify.com/documentation/web-playback-sdk/guide/).

## Using your own credentials

You will need to register your app and get your own credentials from the
[Spotify for Developers Dashboard](https://developer.spotify.com/dashboard/)

To do so, go to your Spotify for Developers Dashboard, create your
application and register the following callback URI:

`http://localhost:3000/auth/callback`

Once you have created your app, create a file called `.env` in the root folder
of the repository with your Spotify credentials:

```bash
SPOTIFY_CLIENT_ID='my_client_id'
SPOTIFY_CLIENT_SECRET='my_client_secret'
```

## Installation

These examples run on Node.js. On its
[website](http://www.nodejs.org/download/) you can find instructions on how to
install it.

Once installed, clone the repository and install its dependencies running:

```bash
npm install
```

## Running the example

Start both client and server with the following command:

```bash
npm run dev
```

The React application will start on `http://localhost:3000`

## Resources

- Follow [@SpotifyPlatform](https://twitter.com/SpotifyPlatform) on Twitter for Spotify for Developers updates.
- Join the [Spotify for Developers Community Forum](https://community.spotify.com/t5/Spotify-for-Developers/bd-p/Spotify_Developer).

## Code of Conduct

This project adheres to the [Open Source Code of
Conduct](https://github.com/spotify/code-of-conduct/blob/master/code-of-conduct.md).
By participating, you are expected to honor this code.

## License

Copyright 2021 Spotify AB.

Licensed under the Apache License, Version 2.0: http://www.apache.org/licenses/LICENSE-2.0

"
251,henry-richard7/Spotify-Account-Generator,Python,"# Spotify-Account-Generator

Spotify Account Generator Using Python

# Used Modules

- exrex
- requests
- PySimpleGUI
- faker

# New Updates

- Added Multi-threading.
- Auto Save generated spotify accounts.

# Things Changed

- Removed auto-verification of generated accounts.
- Now users can enter domain of their choice for email.

# My Youtube Channel

[![](https://img.shields.io/badge/Subscribe-red?style=for-the-badge&logo=YouTube)](https://www.youtube.com/channel/UCVGasc5jr45eZUpZNHvbtWQ)

[![](https://img.shields.io/youtube/channel/subscribers/UCVGasc5jr45eZUpZNHvbtWQ?style=social)](https://www.youtube.com/channel/UCVGasc5jr45eZUpZNHvbtWQ)

# My Telegram Channel

[![](https://img.shields.io/badge/Telegram-Join%20Now-blue?style=for-the-badge&logo=Telegram)](https://t.me/cracked4free)

# Screenshot

![Spotify Account Creator Bot V3](https://user-images.githubusercontent.com/68910039/153369621-f859f71c-38ef-44c5-9554-6ed9827fb9df.png)

# Copyrights © [Henry Richard J](https://github.com/henry-richard7)

### Donations (Optional) 💵

If you like my projects then consider making a small donation by clicking below button ^\_^
<br/>
[![Donate](https://img.shields.io/badge/Donate-PayPal-blue.svg)](https://www.paypal.com/paypalme/henryrics)

#### Star the Repo in case you liked it :)
"
252,Elthan/discord-spotify-bot,Python,"# Spotify Discord Bot

Using a spotify account to play music in Discord.

## DEPRECATION
This is not maintained and haven't been since I first wrote it in 2016 and unfortunately does not work in its current form (not that it was working great when it was working).   
There has been several changes and libspotify is officially deprecated (though might still work) which means fixing it would 
take more time than I have at the moment.    
You are more than welcome to fork it and I would be happy to point to it from here if you get it working.


## Requirements

- discord.py@async
- pyspotify
- Python 3.5.1+


## Notes

You need a Spotify Premium account to use this bot. This bot is mainly made for
playing music in on one server for friends and has not been tested against anything
else. It is unlikely that it will.

It's not a perfect bot, so expect to have to restart it from time to time.

If you queue something up before it has started to play, you will have to issue
a play command afterwards.


## Installation
Fill in the config.py. Token is the discord token. You also need pyspotify and a Spotify appkey, follow the instructions for this in https://pyspotify.mopidy.com/
"
253,wzalazar/spotify,JavaScript,"[![Deploy to now](https://deploy.now.sh/static/button.svg)](https://deploy.now.sh/?repo=https://github.com/wzalazar/spotify/tree/master)


# Spotify GraphiteJS

Example with GraphiteJS, framework graphql. In this example, you will able to search an artist, select artist, select album, and play the preview track.

<br />

## How to use

Download the example [or clone the repo](https://github.com/wzalazar/spotify):


Install it and run:

```bash
npm install
npm run start:dev
```

```bash
yarn
yarn start:dev
```

**URL default http://localhost:3000**

<br />

## Demo

Latest deploy [view](https://spotify-graphitejs-scbvotbkhb.now.sh)

<br />

## Stack technology

  1. NextJS [View](https://github.com/zeit/next.js/)
  2. React [View](https://github.com/facebook/react)
  3. Redux [View](https://github.com/reactjs/redux)
  4. Redux Observable [View](https://github.com/redux-observable/redux-observable)
  4. GraphiteJS [View](https://github.com/graphitejs/graphitejs)


<br />


## Architecture

  The design the architecture is [here](https://github.com/wzalazar/spotify/blob/master/.uml/architecture.png)

<br />

## Commands

```bash

yarn **command**

```


| Command          | Description                                                                           |
| ---------------- |:--------------------------------------------------------------------------------------|
| test             | Run all test                                                                          |
| coverage         | Report coverage the all files. Terminal or folder in .coverage/lcov-report/index.html |
| lint             | Linting project                                                                       |  
| start            | Run project production, required build                                                |  
| start:dev        | Run project development                                                               |
| build            | Generate build                                                                        |

<br />

## GraphQl

Can you check the [graphiql](https://spotify-graphitejs-scbvotbkhb.now.sh/graphiql)

### Queries

```bash

query getArtist($artist: String!) {
    artist(name: $artist) {
        _id
        name
    }
}

query getAlbum($album: String!) {
    album(name: $album) {
        _id
        name
    }
}

query getTrack($track: String!) {
    track(name: $track) {
        _id
        name
    }
}

query getTracksByAlbum($albumId: String!) {
    tracksByAlbumId(id: $albumId) {
        _id
        name
    }
}


```

### Variables

```bash

{
  ""artist"": ""Shakira"",
  ""album"": ""show"",
  ""track"": ""Hi"",
  ""albumId"": ""2cWBwpqMsDJC1ZUwz813lo""
}

```

<br />


Deploy it to the cloud with [now](https://zeit.co/now) ([download](https://zeit.co/download))

```bash
now
```

<br />

## License

[MIT](https://github.com/babel/babel/blob/master/LICENSE)
"
254,ashishmadeti/spotify-playlist-downloader,Python,"# spotify-playlist-downloader
Download your spotify playlists using simple python script


### Features
* Adds metadata to the downloaded songs (title, artist and album)
* Download only the songs you don't have


### Installation
If you already have [Python](http://www.python.org/) on your system you can install the library simply by downloading the distribution, unpack it and install in the usual fashion: (May require root priveleges)

    python setup.py install

### Downloading playlist

* For usage: `download_spotify_playlist -h`

1. Download through CSV File
    * Convert your spotify playlists to csv from [here](http://joellehman.com/playlist/) (Thanks to [Joel Lehman](https://github.com/jal278))

2. Download through User Login
    * Login to your spotify account and Create your [Application](https://developer.spotify.com/my-applications/#!/applications)
        * Set Redirect URIs = `http://localhost/` in your application settings and save it.
        * Set environment variables like,

              - export SPOTIPY_CLIENT_ID='your-spotify-client-id'
              - export SPOTIPY_CLIENT_SECRET='your-spotify-client-secret'
              - export SPOTIPY_REDIRECT_URI='http://localhost/'

        * You will be redirected to login into you spotify account on web browser. After successful login you just need to copy the whole `http://localhost/?code=...` URL from your browser and paste it to the console where your script is running.
    * In case your sporify account is linked with your facebook account, use your device username in the `username` argument for the script and use your device password to log in to spotify in the browser window that opens.
### TODO
I am planning to add more features to this to make the experience more smooth and improve the quality of the downloaded songs. Feel free to open an issue for any bug or enhancement that

- [X] Allow choosing playlist from the script itself, will need to ask for spotify login (Thanks to [Hitesh Garg](https://github.com/hiteshgarg14))
- [ ] Allow user to specify search terms for youtube (either through config file or through command line arguments)
- [ ] Add Album Art to the downloaded songs
"
255,takac/vim-spotifysearch,VimL,"Vim Spotify Search
==================

A plugin to allow you to search and play tracks from spotify right inside Vim.

<img src=""demo.gif"" alt=""screenshot""/>

### Tutorial

Make sure you have spotify running externally, then in Vim:

    :Spotify yeezus

Yields a new window with the search results

    Track                                                 Artist                            Album
    Black Skinhead                                        Kanye West                        Yeezus
    Bound 2                                               Kanye West                        Yeezus
    Blood On The Leaves                                   Kanye West                        Yeezus
    New Slaves                                            Kanye West                        Yeezus
    Send It Up                                            Kanye West                        Yeezus
    Hold My Liquor                                        Kanye West                        Yeezus
    I Am A God                                            Kanye West                        Yeezus
    I'm In It                                             Kanye West                        Yeezus
    On Sight                                              Kanye West                        Yeezus
    Guilt Trip                                            Kanye West                        Yeezus

Just hit enter to have the song played by spotify. If you want, you can even hit enter on the artists (for a list of their albums) and albums (for a list of all the songs in that album).

### Region Configuration

To filter the results appropriate to your region add the line below to your
`.vimrc` with the correct country code.

    let g:spotify_country_code = 'GB'

#### PlayPause, Next, Prev Keys

For linux operating systems with dbus, you can map specific keys to
play/pause, next and previous.

    let g:spotify_prev_key = ""<F9>""
    let g:spotify_playpause_key = ""<F10>""
    let g:spotify_next_key = ""<F11>""

These mappings will only work inside the spotify list buffer.

### Installation

#### Checking if your installation of vim is compatible

This plugin isn't compatible with installations of vim on versions below 7.4.

To check your version of vim run:

    vim --version

If your installation isn't compatible then you need to update your version

#### Installing the plugin

I recommend installing using [Vundle](https://github.com/gmarik/vundle):

Add `Bundle 'takac/vim-spotifysearch'` to your `~/.vimrc` and then:

* either within Vim: `:BundleInstall`
* or in your shell: `vim +BundleInstall +qall`

##### Other Installation Methods
*  [Pathogen](https://github.com/tpope/vim-pathogen)
    *  `git clone https://github.com/takac/vim-spotifysearch ~/.vim/bundle/vim-spotifysearch`
*  [Neobundle](https://github.com/Shougo/neobundle.vim)
    *  `NeoBundle 'takac/vim-spotifysearch'`
*  Manual
    *  Copy the files into your `~/.vim` directory

#### Installing 'spotipy'

In order for this plugin to work, you will need to install ['spotipy'](https://github.com/plamere/spotipy).

[Please visit spotipy's readme on their repo for instructions on installing it](https://github.com/plamere/spotipy#installation)
"
256,MatrixDJ96/EZBlocker2,C#,"# EZBlocker 2

### This is an <i>unofficial</i> successor of [EZBlocker][1] by Eric Zhang

#

### Information

EZBlocker 2 is ad muter/blocker for Spotify.<br>
It is compatible with every O.S. which supports <b>.NET Framework 4.5+</b>.<br>
(<b>Also Windows Store version is supported!</b>)

You could choose 2 different options:
- Mute ads (if an ad does load, it will mute Spotify until the ad is over)
- Block ads (apply hosts patches on system to prevent ads on Spotify from loading)

<b>No setup required, it's a portable application!</b><br>
To update your EZBlocker 2, replace the executable or use <b>auto-update</b> process.<br>

No Google Analytics included

#

### How it works

Mute ads:
- <s>Basically Spotify desktop runs a web server on 127.0.0.1 that contains information about Spotify status. EZBlocker 2 attempts to extract song information hooking to this local server. To use this non-intrusive method, web helper in Spotify must be enabled.</s>
- EZBlocker 2 attempts to extract song information hooking to the new [Spotify Web API][8]. To use this official method you need to connect with your Spotify account (using any browser) and it is necessary to accept the request. (<a href=""https://developer.spotify.com/assets/oauth.png"">Example</a>)

Block ads:
- To prevent ads on Spotify from loading EZBlocker 2 must apply <b>hosts patches</b> on your system. These patches to be applied should require administrator rights.
- <s>Enabling this option will be disabled automatic update for Spotify!</s>

### Error reporting

EZBlocker 2 will create a log with all errors detected. If you want to open a issue on GitHub, it would be better to attach that log to receive a better solution.

#

### [Download for Windows][7]

#

### Credits

- MatrixDJ96 (me) for this amazing project
- Eric Zhang for the original [EZBlocker][1]
- [Bruske][2] for design inspiration
- <s>Shyyko Serhiy for [spotilocal][3] method</s>
- FadeMind for [hosts][4] patches
- Mark Heath for [NAudio][5] library
- James Newton-King for [Json.NET][6] library

#

### Changelog

Version 2.1.4.0:
- Changed request interval to 500ms
- Updated resources using NuGet
- Improved authorization process
- Updated Spotify Web API (issue #19, #20, #24, #28)
- Added menu item to show EZBlocker 2 status

Version 2.1.3.4:
- Fixed log
- Added browser auto-close
- Fixed hosts patches (merged pull request n.16)
- Removed message ""Automatic update for Spotify will be disabled.""
- General improvements and fixes

Version 2.1.3.3:
- Improved log
- (re)Fixed WebAPI (refresh_token)

Version 2.1.3.2:
- Improved WebServer
- Fixed WebAPI (refresh_token)
- Changed request interval (300ms)
- Cleaned from useless code
- Various fixed

Version 2.1.3.1:
- Improved error handling
- Improved and fixed WebServer
- Decreased (half) request for second
- Improved error reporting (log)
- Little fixes

Version 2.1.3.0:
- Using new Spotify WebAPI (beta)

Version 2.1.2.5:
- Implemented save location on the screen
- Added CTRL key to center location on the screen
- Fixed commit 8d43ec8
- Updated hosts patches
- Bug fixes and general optimization

Version 2.1.2.4:
-  Fixed memory leak (issue #10, #9)

Version 2.1.2.3:
- Improved Spotify port detection
- Fixed minor bugs
- Added Spotilocal timeout
- Updated hosts patches
- Added warning when enabling hosts patches
- Fixed issue #6 (1st second or half second of ads is not muted)

Version 2.1.2.2:
- Updated hosts patches
- Fixed some weird title/artist/album song

Version 2.1.2.1:
- Improved update form
- Added tooltip for errors
- Added detection of .NET Framework 4.5
- Removed useless using directive
- Fixed version number

Version 2.1.2.0:
- Added info message when you enable/disable hosts patches
- Revert 'Downgraded .NET Framework to v4.0'
- Updated JSON library
- Improved update process
- Improved SpotilocalStatus
- Removed useless using directives
- Fixed minor bug

Version 2.1.1.0:
- Improved and fixed Spotify status checking process
- Updated user agent

Version 2.1.0.0:
- Significant improvement of the Spotify status checking process
- Updated hosts patches
- Fixed minor bugs

Version 2.0.0.8:
- Fixed minor crashes
- Fixed update process
- Fixed host patches applying process
- Fixed hosts patches
- Options StartMinized and StartOnLogin separated
- Added all security protocols for the network connect
- Changed exit timeout to 3 seconds
- Fixed issue #1 (the last second of ads are not muted)

Version 2.0.0.7:
- Added SndVol32.exe check for system volume mixer
- Improved songs detection
- Updated 7-Zip binary
- Improved errors reporting
- Updated host patches
- Improved host patches applying process
- Fixed minor bugs

Version 2.0.0.6:
- Downgraded .NET Framework to v4.0
- Improved Spotify detection process
- Improved processes starting mechanism

Version 2.0.0.5:
- Improved block-ads process
- Improved loading process
- Updated icons

Version 2.0.0.4:
- Fixed detection of Spotify in a particular case
- New settings storage (portable)
- Fixed typo in a message
- Fixed crash while playing local song
- Fixed detection of Spotify in multi-user case
- Added message when something goes wrong while extracting dependencies
- Added message and solution when the update process goes wrong
- Updated icon

Version 2.0.0.3:
- Updated graphic resources
- Fixed file extraction
- Recompiled NAudio.dll for .NET Framework 4.5
- Fixed ""Loading EZBlocker 2..."" message
- Added detection of .NET Framework 4.5
- Fixed start minimized option
- Fixed behavior when something goes wrong
- Updated websites
- Added GUI for update process
- Added more movement points

Version 2.0.0.2:
- Fixed auto-update process
- Fixed behavior if admin rights not granted

Version 2.0.0.1:
- Mute ads is now enabled by default

Version 2.0.0.0:
- EZBlocker 2! (Project rewritten from scratch)

[1]: https://github.com/Xeroday/Spotify-Ad-Blocker
[2]: https://github.com/Bruske
[3]: https://github.com/ShyykoSerhiy/spotilocal
[4]: https://github.com/FadeMind/hosts.extras
[5]: https://github.com/naudio/NAudio
[6]: https://github.com/JamesNK/Newtonsoft.Json
[7]: https://github.com/MatrixDJ96/EZBlocker2/releases
[8]: https://developer.spotify.com/documentation/web-api/reference/player/get-the-users-currently-playing-track/
"
257,CleverProgrammers/spotify-clone-blockchain,JavaScript,"This is a [Next.js](https://nextjs.org/) project bootstrapped with [`create-next-app`](https://github.com/vercel/next.js/tree/canary/packages/create-next-app).

## Getting Started

First, run the development server:

```bash
npm run dev
# or
yarn dev
```

Open [http://localhost:3000](http://localhost:3000) with your browser to see the result.

You can start editing the page by modifying `pages/index.js`. The page auto-updates as you edit the file.

[API routes](https://nextjs.org/docs/api-routes/introduction) can be accessed on [http://localhost:3000/api/hello](http://localhost:3000/api/hello). This endpoint can be edited in `pages/api/hello.js`.

The `pages/api` directory is mapped to `/api/*`. Files in this directory are treated as [API routes](https://nextjs.org/docs/api-routes/introduction) instead of React pages.

## Learn More

To learn more about Next.js, take a look at the following resources:

- [Next.js Documentation](https://nextjs.org/docs) - learn about Next.js features and API.
- [Learn Next.js](https://nextjs.org/learn) - an interactive Next.js tutorial.

You can check out [the Next.js GitHub repository](https://github.com/vercel/next.js/) - your feedback and contributions are welcome!

## Deploy on Vercel

The easiest way to deploy your Next.js app is to use the [Vercel Platform](https://vercel.com/new?utm_medium=default-template&filter=next.js&utm_source=create-next-app&utm_campaign=create-next-app-readme) from the creators of Next.js.

Check out our [Next.js deployment documentation](https://nextjs.org/docs/deployment) for more details.
"
258,AliAkhtari78/SpotifyScraper,Python,"[![Build Status](https://travis-ci.com/AliAkhtari78/SpotifyScraper.svg?branch=master)](https://travis-ci.com/AliAkhtari78/SpotifyScraper)
[![Documentation Status](https://readthedocs.org/projects/spotifyscraper/badge/?version=latest)](https://spotifyscraper.readthedocs.io/en/latest/?badge=latest)
# Spotify Scraper


##  Overview
Python **Spotify Web Player Scraper**, a fast high-level Spotify Web Player Scraper, to scrape and extract data from Spotify Web Player with the most efficient and fastest methods.
instead of using Selenium, I used [requests](https://github.com/psf/requests) library to increase the speed of scraping.
You can set cookies, headers and proxy and download the cover and preview mp3 song of Spotify songs beside the scraping.

## Requirements
- Python 3.6 +
- Works on Linux, Windows, macOS, BSD
- Internet connection

## Installing
You can install this package as simple as type a command in your CMD or Terminal.
The quick way:
```sh
$ pip install -U spotifyscraper
```
or
do it in the hard way:

``
$ git clone https://github.com/AliAkhtari78/SpotifyScraper.git 
``<br>
 ``
$sudo python setup.py install
``
## Documentation

Check out [Read The Docs](https://spotifyscraper.readthedocs.io/en/latest/) for a more in-depth explanation, with examples, troubleshooting issues, and more useful information.
## Extract Spotify track information by URL
- ``
from SpotifyScraper.scraper import Scraper, Request
``
> Import SpotifyScraper to use it
- ``
 request = Request().request()
``
> Create requests using Request which was imported before,
> You can also pass cookie_file, header	and proxy inside Request().
> Default is None.
- ``
print(Scraper(session=request).get_track_url_info(url='https://open.spotify.com/track/7wqpAYuSk84f0JeqCIETRV?si=b35Rzak1RgWvBAnbJteHkA'))
``
> Call get_track_url_info function from Scraper to extract all the infromation from url.
> If the given URL is valid, it will return a dict with the below keys:
> - title
> - preview_mp3
> - duration
> - artist_name
> - artist_url
> - album_title
> - album_cover_url
> - album_cover_height
> - album_cover_width
> - release_date
> - total_tracks
> - type_
> - ERROR

- ``
$ {
'title': 'The Future Never Dies',
 'preview_mp3': 'https://p.scdn.co/mp3-preview/2d706ceae19cfbc778988df6ad5c60828dbd8389?cid=a46f5c5745a14fbf826186da8da5ecc3',
  'duration': '4:3',
   'artist_name': 'Scorpions',
 'artist_url':'https://open.spotify.com/artist/27T030eWyCQRmDyuvr1kxY',
  'album_title': 'Humanity Hour 1', 
 'album_cover_url':'https://i.scdn.co/image/ab67616d0000b273e14019d431204ff27785e349', 
 'album_cover_height': 640, 
 'album_cover_width': 640, 
 'release_date': '2007-01-01', 
 'total_tracks': 12,
  'type_': 'album', 
  'ERROR': None}
``

## Extract Spotify playlist information by URL
- ``
from SpotifyScraper.scraper import Scraper, Request
``

- ``
 request = Request().request() ``
 
-  ``playlist_info = Scraper(session=request).get_playlist_url_info(url='https://open.spotify.com/playlist/37i9dQZF1DX74DnfGTwugU')
 ``
> Call get_playlist_url_info function from Scraper to extract all the infromation from url.
> If the given URL is valid, it will return a dict with the below keys:
> - album_title
> - cover_url
> - author
> - author_url
> - playlist_description
> - tracks_list
> - ERROR
 
## Download Spotify song cover by URL
- ``
from SpotifyScraper.scraper import Scraper, Request
``

- ``
 request = Request().request() ``
 
-  ``path = Scraper(session=request).download_cover(url='https://open.spotify.com/track/7wqpAYuSk84f0JeqCIETRV?si=b35Rzak1RgWvBAnbJteHkA')
 ``
 > Call download_cover function from Scraper to download the cover of the provided song.
 
 **if the provided URL is valid, it will return the path of downloaded  cover to you.**


## Download Spotify preview song by URL
- ``
from SpotifyScraper.scraper import Scraper, Request
``

- ``
 request = Request().request() ``
 
-  ``path = Scraper(session=request).download_preview_mp3(url='https://open.spotify.com/track/7wqpAYuSk84f0JeqCIETRV?si=b35Rzak1RgWvBAnbJteHkA')
 ``
  > Call download_preview_mp3 function from Scraper to download the preview mp3 song of the provided URL.
 
 **if the provided URL is valid, it will return the path of downloaded mp3 to you.**

 ## Get in touch

-   Report bugs, suggest features, or view the source code  [on GitHub](https://github.com/AliAkhtari78/SpotifyScraper).
- [Read the doc](https://spotifyscraper.readthedocs.io/en/latest/?) to use all provided functions of this library.
- get in touch with me by my website: [Ali Akhtari](https://aliakhtari.com/)
"
259,nachmore/toastify,C#,
260,terlar/docker-spotify-pulseaudio,Shell,"# Dockerized Spotify

Run Spotify inside an isolated [Docker](http://www.docker.io) container. This is achieved by sharing a socket for X11 and PulseAudio.

## Instructions

1. Clone this repository and change to the directory:

  ```sh
  git clone https://github.com/terlar/docker-spotify-pulseaudio.git && cd docker-spotify-pulseaudio
  ```

2. Build the container:

  ```sh
  sudo docker build -t spotify .
  ```

3. Run the provided spotify script:

  ```sh
  scripts/spotify
  ```

4. Use Spotify.
"
261,Wonder-Toast/spotify-discord-bot,JavaScript,"![Language](https://img.shields.io/badge/license-MIT-brightgreen.svg?style=flat-square)

<!-- ![Banner](https://d235mwrq2dn9n5.cloudfront.net/wp-content/uploads/2016/05/02111544/spotify-260516.jpg) -->
# Spotify-Discord-Bot 🎵
Spotify Discord - A discord.js bot where you can create your own playlists and play them in any server!

# How to install
Please go [here](https://github.com/Spotify-Discord/spotify-discord-bot/wiki/Spotify-Bot-Installation-Tutorial)

---
<!--""Discord"", ""Discord App"", and any associated logos are registered trademarks of Hammer & Chisel, inc. -->

## Features
| Option        | Usage         |
| ------------- |---------------|
| add           | add songs to your playlist |
| join          | join your vc               |
| skip          | Skips the song             |
| pause        | pauses the song     |
| resume         | Resumes the song      |
| volume increase/decrease       | Increase/Decrease volume of bot   |
| time       | time into song   |
| add (and title of yt vid)       | youtube search or add youtube link per vid. for playlist   |
| invite      | sends invite link   |
| ping      | pong with ms   |
| connections      | connections throughout guilds bot is in   |
| servers      | guild count   |



---

 <!--<a href=""https://discord.gg/TsaGrwg""><img src=""https://discordapp.com/api/guilds/304768817526210562/widget.png?style=banner2"" alt=""Discord server""></a> -->
 [![](https://discordapp.com/api/guilds/271071483349041154/embed.png?style=banner2)](https://discord.gg/GFccPdh)
 
 ---
 ""Discord"", ""Discord App"", and any associated logos are registered trademarks of Hammer & Chisel, inc.

"
262,possan/webapi-player-example,JavaScript,"Spotify Web API Player Example
==================

This is a Web Player built using the [Spotify Web API](https://developer.spotify.com/web-api/). For
trying it out, you can navigate to [http://lab.possan.se/thirtify/](http://lab.possan.se/thirtify/)
or clone the project and run it locally.

![Web API Player Example Screenshot](https://raw.githubusercontent.com/possan/webapi-player-example/master/readme-img/webapi-player-example.jpg)

Note that you will need a Spotify account (either free or premium) to log in to the site.

## How to Run
You will need to run a server. The example is ready to work in the port 8000, so you can do:

    $ python -m SimpleHTTPServer 8000

and open `http://localhost:8000` in a browser. (This requires python to be installed on your machine.)

## Features

Most of the functionality offered through the Spotify Web API endpoints is implemented in this player:

- Play 30 second audio previews
- Render track, album and artist information
- Render new releases in Spotify and featured playlists
- Search for tracks
- Fetch user's playlists, rename then and change their visibility
- Delete track from playlist
- Fetch user's saved tracks and save a tracks
- Follow and unfollow artists or users
- Check if the user is following an artist or user"
263,qreate/spotify-playback-flutter,Kotlin,"This project is not being actively maintained please use: https://pub.dev/packages/spotify_sdk

# spotify_playback

[![CircleCI](https://circleci.com/gh/qreate/spotify-playback-flutter/tree/master.svg?style=svg)](https://circleci.com/gh/qreate/spotify-playback-flutter/tree/master) [![](https://img.shields.io/badge/pub-v0.0.8-brightgreen.svg)](https://pub.dartlang.org/packages/spotify_playback) [![](https://img.shields.io/badge/licence-MIT-blue.svg)](https://github.com/qreate/spotify-playback-flutter/blob/master/LICENSE.md)


Spotify Playback Plugin.

[**No iOS Implementation yet, WIP..**](https://github.com/qreate/spotify-playback-flutter/projects/1)

## Features
* Play (track / album / playlist)
* Resume / pause
* Queue
* Playback position
* Seek
* Seek to relative position
* Play Next
* Play Previous
* Repeat 
* Shuffle 
* Get image
* Image link to URI

## Installation
**`IMPORTANT:` Make sure you have the Spotify app installed and that you are logged in or your test device!**

First, add `spotify_playback` as a dependency in your `pubspec.yaml` file. 

Afterwards, download the Spotify Android SDK [here](https://github.com/spotify/android-sdk/releases/tag/v0.6.1-appremote_v1.1.0-auth) and move the spotify-app-remote-release-x.x.x.aar file to `android/app/libs/` in your project.

Then initialize the spotify playback sdk like this 

```dart
@override
  void initState() {
    super.initState();
    initConnector();
  }

  /// Initialize the spotify playback sdk, by calling spotifyConnect
  Future<void> initConnector() async {
    try {
      await SpotifyPlayback.spotifyConnect(clientId: """", redirectUrl: """").then(
          (connected) {
        if (!mounted) return;
        // If the method call is successful, update the state to reflect this change
        setState(() {
          _connectedToSpotify = connected;
        });
      }, onError: (error) {
        // If the method call trows an error, print the error to see what went wrong
        print(error);
      });
    } on PlatformException {
      print('Failed to connect.');
    }
  }
``` 

After this you can use all the available methods

## Available methods 
| Method        | description           | parameters  | notes |
| ------------- |:-------------:| -----:|-----:|
| spotifyConnect      | Initilizes the spotify playback sdk | clientId, redirectUrl ||
| play      | Play's an spotify track, album or playlist | spotify uri ||
| pause      | Pause's the currently playing track      |    ||
| resume |  Resumes the currently paused track      |     ||
| queue |  Adds an track / playlist / album to the queue     |   spotify uri  ||
| skipNext      | Play's the next track | ||
| skipPrevious      | Play's the previous track |  ||
| seekTo |  Seeks to the passed time     |  time(mS)   ||
|seekToRelativePosition|Seeks to relative position|+-time(mS)||
| toggleShuffle | Toggle shuffle options    |     ||
| toggleShuffle | Toggle Repeat options    |     ||
| getPlaybackPosition | Get's the current tracks playback position       |    ||
| getImage | Gets a Uint8List encoded image(memoryImage)       |  imageUri, quality, size  | [![](https://img.shields.io/badge/WARNING-23-orange.svg)](https://github.com/qreate/spotify-playback-flutter/issues/23)
| imageLinkToURi | Takes an image url and returns image uri(for get image)    |  imageLink  ||
| getAuthToken | Gets the authToken by using the redirect url, client id       |  clientId, redirectUrl | [![](https://img.shields.io/badge/WARNING-WIP-orange.svg)](https://github.com/qreate/spotify-playback-flutter/pull/28)

## Example

Demonstrates how to use the spotify_playback plugin.

See the [example documentation](example/README.md) for more information.


## Function examples
### GetImage   
[![](https://img.shields.io/badge/WARNING-23-orange.svg)](https://github.com/qreate/spotify-playback-flutter/issues/23)
Get image accepts the following parameters:
* URI, the spotify image uri - string
* Quality, the quality the image should be provided in - int 0-100
* Size, the spotify image size can be one of the following
  * ImageDimension.THUMBNAIL = 144px
  * ImageDimension.X_SMALL = 240px
  * ImageDimension.SMALL = 360px
  * ImageDimension.MEDIUM = 480px
  * ImageDimension.LARGE = 720px
```dart
//You can provide an image uri
SpotifyPlayback.getImage(uri: ""spotify:image:3269971d34d3f17f16efc2dfa95e302cc961a36c"", quality: 100, size: 360);

//Or you can provide an url returned webAPI
SpotifyPlayback.getImage(uri: SpotifyPlayback.imageLinkToURi(""https://i.scdn.co/image/3269971d34d3f17f16efc2dfa95e302cc961a36c""), quality: 100, size:360);

//Theese both return a Uint8List encoded image.
//You can then use the Image.memory() to display the image
Image.memory(yourUint8ListImageHere)

```

## Changelog

See [CHANGELOG.md](CHANGELOG.md).

## Special Thanks
 - Alexander Méhes | [BMXsanko](https://github.com/BMXsanko)

## Contributing

Feel free to contribute by opening issues and/or pull requests. Your feedback is very welcome!

## License

MIT License

Copyright (c) [2019] [Joran Dob]
Copyright (c) [2019] [QREATE]
"
264,N1ght420/Spotify-Gen,PHP,"# Spotify-Gen
Spotify Account Generator
"
265,dasJ/spotifywm,C++,"# spotifywm

Makes spotify more friendly to window managers by settings a class name before opening the window.
This allows WMs like i3 to correctly discover the window and fit it into a prepared layout.

Inspired by [steamwm](https://github.com/dscharrer/steamwm).

# Installation

```
$ make
```

# Usage

```
LD_PRELOAD=/path/to/spotifywm.so /path/to/spotify/binary
```

Under Arch Linux, do not run the wrapper script in /usr/bin, it will override `LD_PRELOAD`.
Use `/usr/share/spotify/spotify` instead.
"
266,RobertFrydenlund/SpotifyPlugin,C#,"## This plugin is no longer being actively maintained.
For a functional replacement, I recommend https://github.com/khanhas/Spicetify.



# SpotifyPlugin

Spotify plugin for [Rainmeter](http://rainmeter.net/). Forum discussion can be found [here](http://rainmeter.net/forum/viewtopic.php?f=18&t=17077/).

## Example
```ini
[MeasureCover]
Measure=Plugin
Plugin=SpotifyPlugin
Type=AlbumArt
Res=300
DefaultPath=#@#Default.png
CoverPath=#@#Cover.png

[MeasureProgress]
Measure=Plugin
Plugin=SpotifyPlugin
Type=Progress

 [MeterCover]
 Meter=Image
 ImageName=[MeasureCover]
 LeftMouseUpAction=[!CommandMeasure ""MeasureProgress"" ""PlayPause""]
 X=0
 Y=0
 W=300
 H=300
 DynamicVariables=1
```


## Offline API
|Measure	|Description						| Alias
|-----------|-----------------------------------|------|
|TrackName	|Returns track name					| Track
|AlbumName	|Returns album name					| Album
|ArtistName	|Returns artist name				| Artist
|TrackURI	|Returns spotify URI for the track
|AlbumURI	|Returns spotify URI for the album
|ArtistURI	|Returns spotify URI for the artist
|AlbumArt	|Path to album image				| Cover
|volume|Current volume
|repeat|1 if enabled
|shuffle|1 if enabled
|position|Current position
|playing|1 if playing
|length|Song length| duration
|progress|Song progress (0.0-1.0)
---

## Online API
|Command	| Description 					|Argument|
|-----------|------------------------		|--------------------
|playpause	|Pauses or resumes playback		|
|play		|Starts playback				|
|pause		|Pauses playback				|
|next		|Next song						|
|previous	|Previous song					|
|volume		|Changes active device volume	|```0``` to ```100```
|seek		|Seek to positon (ms)			|```0``` to *```length```*
|seekpercent *or* setposition|Seek to position (percent)		|```0``` to ```100```
|shuffle *or* setshuffle|Change shuffle state					|```0``` or ```false```, ```1``` or ```true``` , ```-1``` to toggle.
|repeat	*or* setrepeat	|Change repeat					|```0``` or ```off```, ```1``` or ```track```, ```2``` or ```context```, ```-1``` to toggle.
"
267,fennifith/Pasta-for-Spotify,Java,"Pasta for Spotify is a third party [material design](https://material.google.com/) Spotify client for Android.

## About

Pasta for Spotify is a material design Spotify client for android that attempts to create a better user experience using the [Spotify Web API](https://developer.spotify.com/web-api/). It was created to show an improvement in design over the official Spotify app, and to allow for older and slower devices to have quicker access to Spotify's services without losing (much) functionality. Some examples of this are as follows:
### Design:
- Touch areas are increased for small devices to be able to open things like menus and playlists more easily than the layout in the official app
- A lot of access relies on swipe navigation within the app to speed up general user experience
- The shuffle and repeat buttons have been removed from the now playing screen and moved into an ""order tracks"" dialog that is accessible from the menu of playlists and albums, and shows up in the settings menu. This provides greater consistency: in the official app you can order tracks by name, date, etc when viewing a list, but this becomes obsolete once shuffle is enabled. Moving all order-related options to the same place makes more sense from the perspective of both a new user and a user coming from the official app.
- The backgrounds of different elements on the screen change color according to the album arts, allowing the user to quickly identify items based on color as well as text and image, and blend the image with the rest of the app so that it doesn't seem out of place.
- Most parts of the app can be customized from the settings menu to allow the user to change their experience, including the main color scheme of the app and whether to display items as cards, tiles, or lists.
- All parts of the official app that serve as a bookmark for an item are united into one ""Favorites"" section of the app. This means that artists that are being followed, playlists that have been created (or followed), and albums and tracks that have been ""added"" show up here, making the result of the ""favorite"" action obvious to most users instead of having to google [""what does it mean to add a track in spotify?""](https://www.google.com/search?newwindow=1&safe=strict&q=what+does+it+mean+to+add+a+track+in+spotify%3F&oq=what+does+it+mean+to+add+a+track+in+spotify) (like I did).

### Performance:
Though I am not sure what the official Spotify client uses to switch layouts, many current users have reported a large increase in loading speed of Pasta for Spotify versus the official app. This could be because of a few things:
- The app uses Aidan Follestad's [Async](https://github.com/afollestad/async) library to load content separately from the UI thread, which allows the user to navigate the app while content is loading, for example: navigating back to the previous task while content is loading will cancel the download.
- [Butterknife](http://jakewharton.github.io/butterknife/), by Jake Wharton, is used to bind views instead of the standard view binding method. Truthfully I have no idea what this means but it saves time so just go with it. ;)
- [Glide](https://github.com/bumptech/glide) is used to load image urls provided by the spotify api. This saves a lot of loading time by asynchronously loading an image while scrolling as well as compressing it to speed up the download as much as possible.

## Features
Pasta for Spotify has almost all the features of the official app, though playlists cannot be downloaded because that could potentially create a way for users to export songs from the app, and I'm sure Spotify would not like that.
- Shows newly released albums and featured playlists
- A favorites section for playlists, albums, songs, and artists
- Search through all of Spotify's database
- View different categories of music
- Dynamic backgrounds that adapt to the album art
- A light/dark theme in the settings menu
- Options to change the global color scheme of the app
- Change the ordering of songs in playlists and albums

### Limitations
There are a few major issues with the implementation of the Spotify API, some of which are because of the API itself (meaning they cannot be fixed by me), and some are internal but require a lot of refactoring to come up with an appropriate solution. Examples:
- [The app will occasionally refuse to play a song until a restart](https://jfenn.me/redirects/?t=github&d=Pasta-for-Spotify/issues/1). The ""Unknown error, please restart"" toast message is specific to this issue. 
- It is not possible to download a track to play it offline. See [this issue](https://github.com/spotify/android-sdk/issues/2) for progress updates.
- The 'restart' button usually causes an authentication error resulting in the app force closing.
- The 'Sign Out' option in the settings menu will cause a crash if the official Spotify app is installed.
- There are many features that are not accessible from a free account, such as playing songs and favoriting tracks.

### Screenshots

Splash Screen | Home Screen | Now Playing
------------- | ----------- | -----------
![](./.github/images/splash.png?raw=true) | ![](./.github/images/home.png?raw=true) | ![](./.github/images/playing.png?raw=true)

## Contributing
### Issues
Okay, there aren't really any guidelines over issue formatting provided that you don't create duplicate issues and test the app throughly before creating an issue (ex: try clearing the app data).

### Pull Requests
I usually don't have any organization over how I handle issues and what I commit at any given time. If I'm interrupted in the middle of a session, I might commit a half-finished class that causes an error before the project even compiles. To prevent good work going to waste or having to be copied and pasted a lot to prevent merge conflicts, please contact me before you start working on any changes. This way we can decide who will work on the project when, and exactly what changes they will be making.

## Links

- [Google Plus Community](https://plus.google.com/communities/101536497390778012419)
- [Website](http://jfenn.me/projects/pasta-for-spotify/)

#### Contributors:
- [James Fenn](http://jfenn.me/)
- [Jan-Lk Else](https://plus.google.com/+JanLkElse)
- [Patrick J](http://pddstudio.com/)
- [Vukašin Anđelković](https://plus.google.com/+Vuka%C5%A1inAn%C4%91elkovi%C4%87zavukodlak)
- [Kevin Aguilar](https://plus.google.com/+KevinAguilarC)

## License

```
Copyright 2016 James Fenn

Licensed under the Apache License, Version 2.0 (the ""License"");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an ""AS IS"" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
```
"
268,Chimildic/goofy,JavaScript,"<p align=""center""><img width=""40%"" style=""margin: 0"" src=""docs/img/logo.svg""></img></p>
<p align=""center"">Конструктор плейлистов Spotify. Сбор треков, фильтр, обновление по событиям. Бесплатно.</p>
<p align=""center"">Выполните <a target=""_blank"" href=""https://chimildic.github.io/goofy/#/install"">установку</a> и создайте свой <a target=""_blank"" href=""https://chimildic.github.io/goofy/#/first-playlist"">первый плейлист</a>.</p>

## Возможности

- отслеживает историю прослушиваний
- повторяет функции <a target=""_blank"" href=""http://smarterplaylists.playlistmachinery.com/about.html"">Smarter Playlists</a> и <a target=""_blank"" href=""http://playlistminer.playlistmachinery.com/"">Playlist Miner</a></li>
- имеет большой набор фильтров
- собирает рекомендации и новые релизы, включая <a target=""_blank"" href=""https://everynoise.com/new_releases_by_genre.cgi"">Every Noise</a></li>
- импортирует <a target=""_blank"" href=""https://chimildic.github.io/goofy/#/addon?id=Импорт-треков-с-радио"">FM-радио</a> и Last.fm</li>
- поддерживает расширенный поиск
- позволяет динамически менять очередь треков</li>
- работает по расписанию и событиям <a target=""_blank"" href=""https://github.com/Chimildic/goofy/discussions/124"">Tasker</a></li>"
269,htilly/zenmusic,JavaScript,"[![Build Status](https://github.com/htilly/zenmusic/workflows/Node.js%20CI/badge.svg)](https://github.com/htilly/zenmusic/actions?query=workflow%3A%22Node.js+CI%22)
[![Known Vulnerabilities](https://snyk.io/test/github/htilly/zenmusic/badge.svg)](https://snyk.io/test/github/htilly/zenmusic)


# SlackONOS
**Slack / Sonos / Spotify / Node.js - Control Sonos through #Slack**


*Screenshot*

![ScreenShot](http://raw.github.com/htilly/zenmusic/master/doc/images/Screenshot.png)



(&#x1F534;) *** config.json MUST be moved to config folder. Also, admin channel in config.json must now be slack channel ID, not the ""name"" *** (&#x1F534;)

**What is it?**

It´s a #slack-bot that control Sonos (and spotify). Highly democratic bot :)
Uses https://github.com/bencevans/node-sonos to controll Sonos.

**What do I need in order to get it to work?**

1: A Sonos player (configured with Spotify).  
2: A slack-bot configured in #Slack  
3: A server running node.js  
4: Know the IP of your Sonos. Preferably a static one.  
5: A valid spotify account with Client ID & Client Secret. Head over to:   https://developer.spotify.com/dashboard/applications to set it up. Enter the data in the config.json file.  

**Installation**

DOCKER COMPOSE

(you must point to the config.json, example can be found [here](https://github.com/htilly/zenmusic/blob/master/config/config.json.example))

```
version: '3.4'
services:
slackonos:
  container_name: slackonos
  image: htilly/slackonos:latest
  restart: unless-stopped
  volumes:
    - /PATH_TO_CONFIG_FILE/config.json:/app/config/config.json
```


**Firewall settings**

Server running the index.js needs to be able to talk to the Sonos on port 1400 (TCP)
Sonos needs to be configured and setup with Spotify and have access to internet.

**Configuration**
You must provide the token of your Slack bot and the IP of your Sonos in either config.json (see config.json.example), as arguments or as environment variables.
Examples:
```bash
node index.js --token ""MySlackBotToken"" --sonos ""192.168.0.1""
```
or
```bash
token=""MySlackBotToken"" sonos=""192.168.0.1"" node index.js
```
You can also provide any of the other variables from config.json.example as arguments or environment variables.
The blacklist can be provided as either an array in config.json, or as a comma-separated string when using arguments or environment variables.

Logo for the bot in #Slack can be found at ""doc/images/ZenMusic.png

**What can it do?**

It will queue you requests and play it..  However if X amount of people for any strange reason doesn't like the current track, it will listen to the command ""**gong**"" and eventually skip to the next track.

It also future some admin commands like ""setvolume"", ""next"", ""stop"" etc.

List of commands (just type help in the channel)

* `help` : this list 
* `current` : list current track
* `search` _text_ : search for a track, does NOT add it to the queue
* `add` _text_ : Add song to the queue and start playing if idle.
* `append` _text_ : Append a song to the previous playlist and start playing the same list again.
* `gong` : The current track is bad! Vote for skipping this track
* `gongcheck` : How many gong votes there are currently, as well as who has GONGED.
* `vote` _exactSongTitle_ : Vote for a specific song title in the queue.
* `volume` : view current volume
* `list` : list current queue
* `status` : show the current status

**ADMIN FUNCTIONS**

* `flush` : flush the current queue
* `setvolume` _number_ : sets volume
* `play` : play track
* `stop` : stop life
* `next` : play next track
* `previous` : play previous track
* `shuffle` : shuffles playlist
    
**Info**

Please use it to get some music in the office / home. 

We would appreciate if you drop a comment or send a pm... and please feel free to add / change stuff!! Much appreciated!

**Installation**

For installation, see the file INSTALL.

Or have a look at the Wiki.
https://github.com/htilly/zenmusic/wiki


**KnownBugs**

* Validate add / unique track doesn´t work. I.e - You can add same track 10 times in a row.
* Vote does not move track in queue.
 
**ToDo**

* Code cleaning! =)
* Simple ""view"" window of what is happening in the channel. I.e. - Put on big-screen of what is happening in #music
* Admin: Delete single track from queue.
* Vote: When voting for a song, put it in top of the queue. Queue is sorted based upon the number of votes.
* A vote shall not automatically skip to the next track. It should just put it higher up the queue.
* Backend DB
* Text-to-speech. 
* Now playing. Announce when starting a new song.
* When asking for ""Stat"" show most played songs and most active users.
* When local playlist is empty -> fallback and start playing ""$playlist"", i.e. Spotify topp 100.
* Limit consecutive song additions by non-admin
* Restrict songs already in the queue
* Delete range of songs from queue
* Vote to flush entire queue
* Implement some code-testing

**DONE**

* Now works with latest async version of node-sonos.
* Add spotify playlist
* Added ""bestof"" - Add the topp 10 tracks by selected artist.
* Added gongcheck - Thanks to ""Warren Harding""
* Added blacklist function. Enter usernames in ""blacklist.txt"".
* Updated 'node-sonos' with getQueue and addSpotify. See: https://github.com/bencevans/node-sonos/commit/bfb995610c8aa20bda09e370b0f5d31ba0caa6a0
* Added new function, search.
* Added new function, Append. Reuse the old queue and add new track to the end of it.
* Admin: Delete entire queue.
* Regularly delete the entries from the queue when the song has been played.
   * When adding a new track, do the following logic:
        * Check ""status"". (fixed.. sort of..)   
        * If ""playing"", do a ""list"". Delete all songs in the queue with lower number than the current track. Then add song to queue.
        * If ""sleep"" clear queue, add song to queue and do ""play"".
* Add clear-queue functionality.
* Fix queue function.
* Fix GONG function. If X Gongs within X sec then next.
* Admin commands from i.e.""swe-music-admin"".
* Vote - If +1 in slack then move in queue. (sort of)
* Ask ""what is playing"".
* 
"
270,Festify/cordova-spotify,Objective-C,"# Cordova Spotify SDK Plugin

[![Greenkeeper badge](https://badges.greenkeeper.io/Festify/cordova-spotify.svg)](https://greenkeeper.io/) [![Travis](https://img.shields.io/travis/Festify/cordova-spotify.svg)](https://travis-ci.org/Festify/cordova-spotify)

An [Apache Cordova](https://cordova.apache.org/) plugin providing access to the Spotify SDK for iOS and Android.

[API documentation](https://festify.github.io/cordova-spotify/)

## Features

This plugin provides a very simple and atomic layer over playback functionality of the Spotify SDK. It allows you to play Spotify tracks via their URI. Metadata and authentication functionality has deliberately been left out in favor of the [Web API](https://developer.spotify.com/web-api/) and our Spotify OAuth 2 plugin [cordova-spotify-oauth](https://github.com/Festify/cordova-spotify-oauth).

## Installation

```bash
cordova plugin add cordova-spotify
```

Note: Make sure your installation path doesn't contain any spaces.

## Examples

The plugin is very simple to use. All methods can be called at any time and there is no initialization step. The plugin performs all necessary state changes automatically. All methods documented in the API documentation are exported under the global `cordova.plugins.spotify`-object.

### Play some good music
```js
cordova.plugins.spotify.play(""spotify:track:0It6VJoMAare1zdV2wxqZq"", { 
  clientId: ""<YOUR SPOTIFY CLIENT ID"",
  token: ""<YOUR VALID SPOTIFY ACCESS TOKEN WITH STREAMING SCOPE>""
})
  .then(() => console.log(""Music is playing 🎶""));
```

### React to user pressing pause button
```js
cordova.plugins.spotify.pause()
  .then(() => console.log(""Music is paused ⏸""));
```

### Display current playing position
```js
cordova.plugins.spotify.getPosition()
  .then(pos => console.log(`We're currently ${pos}ms into the track.`))
  .catch(() => console.log(""Whoops, no track is playing right now.""));
```

### React to events from native SKDs
```js
cordova.plugins.spotify.getEventEmitter()
  .then(emitter => emitter.on('playbackevent', eventName => {
    switch (eventName) {
      case 'PlaybackNotifyPlay':
        console.log(""Playback was started"");
         break;
      case 'PlaybackNotifyPause':
        console.log(""Playback was paused"");
        break;
      default:
        console.log(""Some other event was raised:"", eventName);
        break;
    }
  }))
```

## Contributing

Pull requests are very welcome! Please use the [gitmoji](https://gitmoji.carloscuesta.me/) style for commit messages.
"
271,cwRichardKim/RKSwipeBetweenViewControllers,Objective-C,"RKSwipeBetweenViewControllers
===========================

UIPageViewController and custom UISegmentedControl synchronized and animated.  Similar to Spotify's ""My Music"" section.

__Please check the .h to see how to customize anything__

[Support](http://cwrichardkim.com)

## Pod
You should not use the pod in most cases, as they don't allow for customizability.  I would recommend dragging the .h and .m files manually into your project
	
	pod 'RKSwipeBetweenViewControllers'
	

## Updates, Questions, and Requests
[twitter](https://twitter.com/cwRichardKim) <--- I am a very light twitterer, so I won't spam you

## Demo: 
(after five minutes of customization)

![demo](http://i.imgur.com/zlfWDa1.gif)

Any number of any view controllers should technically work, though it doesn't look great with more than 4

__Customizable!__

![Customizable!](http://i.imgur.com/dl422EL.gif)

(check the RKSwipeBetweenViewControllers.h for *actual* customizable features)

## how to use 
(check out the provided AppDelegate to see an example):

__Programmatically__ (preferred)

1. Import RKSwipeBetweenViewControllers.h
	
	```objc
	#import <RKSwipeBetweenViewControllers/RKSwipeBetweenViewControllers.h>
	```

2. Initialize a UIPageViewController
	
	```objc
	UIPageViewController *pageController = [[UIPageViewController alloc] initWithTransitionStyle:UIPageViewControllerTransitionStyleScroll navigationOrientation:UIPageViewControllerNavigationOrientationHorizontal options:nil];
	```
3. Initialize a RKSwipeBetweenViewControllers

  	```objc
	RKSwipeBetweenViewControllers *navigationController = [[RKSwipeBetweenViewControllers alloc]initWithRootViewController:pageController];
	```
4. Add all your ViewControllers (in order) to navigationController.viewControllerArray (try to keep it under 5)
  	
	```objc
	[navigationController.viewControllerArray addObjectsFromArray:@[viewController1, viewController2, viewController3]];
	```
5. Use the custom class (or call it as the first controller from app delegate: see below)
  	
	```objc
  	self.window = [[UIWindow alloc] initWithFrame:UIScreen.mainScreen.bounds];
  	self.window.rootViewController = navigationController;
  	[self.window makeKeyAndVisible];
  	```
  
__StoryBoard__
(do not use pods for this one)

1. Drop the file into your project and import RKSwipeBetweenViewControllers.h
	
	```objc
	#import RKSwipeBetweenViewControllers.h
	```

2. Embed a UIPageViewController inside a UINavigationController.  Change the class of the to UINavigationController the custom class (RKSwipeBetweenViewControllers)
3. change the transition style of the pageviewcontroller to scroll (click on the UIPageViewController in storyboard -> attributes inspector -> transition style -> scroll)

4. go to the RKSwipeBetweenViewControllers.m file and use it as your own class now.  Add your view controllers to ""viewControllerArray"".  See below for various options.

	*Programmatically, outside RKSwipeBetweenViewControllers.m*
	(if this navigation bar isn't the first screen that comes up, or if you want to call it from the delegate)
	
	```objc
	[customNavController.viewControllerArray addObjectsFromArray:@[viewController1, viewController2, viewController3]];
	```
	
	*Programmatically, inside RKSwipeBetweenViewControllers.m*
	(most cases if your view controllers are programmatically created)
	
	```objc
	[viewControllerArray addObjectsFromArray:@[demo,demo2]];
	```
	*storyboard, inside RKSwipeBetweenViewControllers.m*
	(if your viewcontrollers are on the storyboard, but make sure to give them storyboard IDs)
	
	```objc
	UIStoryboard *storyboard = [UIStoryboard storyboardWithName:@""Main"" bundle:nil];
	    UIViewController* theController = [storyboard instantiateViewControllerWithIdentifier:@""storyboardID""];
	
	    [viewControllerArray addObject:theController];
	```
	*storyboard, outside RKSwipeBetweenViewControllers.m*
	(if your viewcontrollers are on the storyboard, but make sure to give them storyboard IDs)
	
	```objc
	UIStoryboard *storyboard = [UIStoryboard storyboardWithName:@""Main"" bundle:nil];
	    UIViewController* theController = [storyboard instantiateViewControllerWithIdentifier:@""storyboardID""];
	
	    [theCustomViewController.viewControllerArray addObject:theController];
	```


Any problems/questions? shoot me a pm

### Areas for Improvement / Involvement
* Working with horizontal layout
* Working with more than 5 pages
* Handful of infrequent bugs
* Better performance when loading pages
* Changing layout away from UINavigationController to allow the bar to be at the bottom
* Bug: adding a MKMapView to a UIViewController in storyboard causes strange visual bug. Adding programmatically is fine
* Crash on load for UITabBarControllers (resolved): https://github.com/cwRichardKim/RKSwipeBetweenViewControllers/pull/15
"
272,TooTallNate/spotify-uri,JavaScript,"# spotify-uri

> Parse and format the various Spotify URL/URI formats.

**spotify-uri** get passed around in a variety of flavors. This module parses them
into a JavaScript object so you can work with them further. You can also convert
them back into Spotify URIs or HTTP URLs.

## Install

```bash
$ npm install spotify-uri
```

## Usage

Just call `parse` method:

```js
const { parse } = require('spotify-uri')

spotifyUri.parse('spotify:track:3GU4cxkfdc3lIp9pFEMMmw')
// { 
//   uri: 'spotify:track:3GU4cxkfdc3lIp9pFEMMmw',
//   type: 'track',
//   id: '3GU4cxkfdc3lIp9pFEMMmw' 
// }

spotifyUri.parse('http://open.spotify.com/track/1pKYYY0dkg23sQQXi0Q5zN')
// { 
//   uri: 'http://open.spotify.com/track/1pKYYY0dkg23sQQXi0Q5zN',
//   type: 'track',
//   id: '1pKYYY0dkg23sQQXi0Q5zN' 
// }
```

You can also format the parsed objects back into a URI or HTTP URL:

```js
const { parse, formatURI, formatOpenURL, formatPlayURL, formatEmbedURL } = require('spotify-uri')

const parsed = parse('http://open.spotify.com/track/1pKYYY0dkg23sQQXi0Q5zN')

formatURI(parsed) // => 'spotify:track:1pKYYY0dkg23sQQXi0Q5zN'
formatOpenURL(parsed) // => 'http://open.spotify.com/track/1pKYYY0dkg23sQQXi0Q5zN'
formatPlayURL(parsed) // => 'https://play.spotify.com/track/1pKYYY0dkg23sQQXi0Q5zN'
formatEmbedURL(parsed) // => 'https://embed.spotify.com/?uri=spotify:track:1pKYYY0dkg23sQQXi0Q5zN'
```

See the [test cases](./test) for some more examples of Spotify URIs.

## API

### .parse(String uri) → Object

Parses a Spotify URI or a Spotify HTTP(s) URL into an Object. The specific
properties set on the returned Object depend on the ""type"" of `uri` that gets
passed in. The different ""types"" are listed below:

### .formatURI(Object parsedUri) → String

Formats a parsed URI Object back into a Spotify URI. For example:

``` js
const { parse, formatURI } = require('spotify-uri')
const parsed = spotifyUri.parse('https://play.spotify.com/track/3GU4cxkfdc3lIp9pFEMMmw')
formatURI(parsed) // => 'spotify:track:3GU4cxkfdc3lIp9pFEMMmw'
```

### .formatOpenURL(Object parsedUri) → String

Formats a parsed URI Object back into a Spotify HTTP ""open"" URL. For example:

``` js
const { parse, formatOpenURL } = require('spotify-uri')
const parsed = parse('spotify:track:3c1zC1Ma3987kQcHQfcG0Q')
formatOpenURL(parsed) // => 'http://open.spotify.com/track/3c1zC1Ma3987kQcHQfcG0Q'
```

### .formatPlayURL(Object parsedUri) → String

Formats a parsed URI Object back into a Spotify HTTPS ""play"" URL. For example:

``` js
const { parse, formatPlayURL } = require('spotify-uri')
const parsed = parse('spotify:track:4Jgp57InfWE4MxJLfheNVz')
formatPlayURL(parsed) // => 'https://play.spotify.com/track/4Jgp57InfWE4MxJLfheNVz'
```

### .formatEmbedURL(Object parsedUri) → String

Formats a parsed URI Object back into a Spotify HTTPS ""embed"" URL. For example:

``` js
const { parse, formatEmbedURL } = require('spotify-uri')
const parsed = parse('spotify:track:6JmI8SpUHoQ4yveHLjTrko')
formatEmbedURL(parsed) // => 'https://embed.spotify.com/?uri=spotify:track:6JmI8SpUHoQ4yveHLjTrko'
```

## License

**spotify-uri** © [Nathan Rajlich](http://n8.io), released under the [MIT](https://github.com/microlinkhq/spotify-url-info/blob/master/LICENSE.md) License.<br>
Authored by [Nathan Rajlich](http://n8.io) and maintained by [Kiko Beats](https://kikobeats.com) with help from [contributors](https://github.com/microlinkhq/spotify-url-info/contributors).
"
273,codetheweb/aoede,Rust,"<p align=""center"">
  <img width=""250"" height=""250"" src=""https://raw.githubusercontent.com/codetheweb/aoede/main/.github/logo.png"">
</p>

Aoede is a Discord music bot that **directly** streams from **Spotify to Discord**. The only interface is Spotify itself.

**Note**: a Spotify Premium account is currently required. This is a limitation of librespot, the Spotify library Aoede uses. Facebook logins [are not supported](https://github.com/librespot-org/librespot/discussions/635).

![Demo](https://raw.githubusercontent.com/codetheweb/aoede/main/.github/demo.gif)

## 💼 Usecases

- Small servers with friends
- Discord Stages, broadcast music to your audience

## 🏗 Usage

(Images are available for x86 and arm64.)

### Note:
⚠️ Aoede only supports bot tokens. Providing a user token won't work.

### Docker Compose (recommended):

There are a variety of image tags available:
- `:0`: versions >= 0.0.0
- `:0.5`: versions >= 0.5.0 and < 0.6.0
- `:0.5.1`: an exact version specifier
- `:latest`: whatever the latest version is

```yaml
version: '3.4'

services:
  aoede:
    image: codetheweb/aoede
    restart: always
    volumes:
      - ./aoede:/data
    environment:
      - DISCORD_TOKEN=
      - SPOTIFY_USERNAME=
      - SPOTIFY_PASSWORD=
      - DISCORD_USER_ID=     # Discord user ID of the user you want Aoede to follow
```

### Docker:
```env
# .env
DISCORD_TOKEN=
SPOTIFY_USERNAME=
SPOTIFY_PASSWORD=
DISCORD_USER_ID=
```

```bash
docker run --rm -d --env-file .env codetheweb/aoede
```

### Prebuilt Binaries:

Prebuilt binaries are available on the [releases page](https://github.com/codetheweb/aoede/releases). Download the binary for your platform, then inside a terminal session:

1. There are two options to make configuration values available to Aoede:
	1. Copy the `config.sample.toml` file to `config.toml` and update as necessary.
	2. Use environment variables (see the Docker Compose section above):
		- On Windows, you can use `setx DISCORD_TOKEN my-token`
		- On Linux / macOS, you can use `export DISCORD_TOKEN=my-token`
2. Run the binary:
	- For Linux / macOS, `./platform-latest-aoede` after navigating to the correct directory
	- For Windows, execute `windows-latest-aoede.exe` after navigating to the correct directory

### Building from source:

Requirements:

- automake
- autoconf
- cmake
- libtool
- Rust
- Cargo

Run `cargo build --release`. This will produce a binary in `target/release/aoede`. Set the required environment variables (see the Docker Compose section), then run the binary.
"
274,vincelwt/harmony,,"# Harmony

<p align=""center"">
<img src=""screenshot.png"" alt=""Harmony Screenshot""/>
</p>

<p align=""center"">
<a href=""https://github.com/vincelwt/harmony/releases/latest""><img src=""https://img.shields.io/github/downloads/vincelwt/harmony/total.svg?maxAge=2592000"" alt=""Total Downloads"" /></a>
</p>

* Play music from SoundCloud, Google Play Music, Spotify, Deezer, Hype Machine, YouTube, Reddit or your local tracks
* All your playlists within the same app
* Sound menu integration or system tray for incompatible systems
* Last.fm scrobbling
* Super sleek interface
* Dark mode (Cmd/Ctrl + D)
* Keyboard control
* Distraction-free
* Background notifications

## Download

Download Harmony from the [website](https://getharmony.xyz/download).

## Reporting issues

Please indicate your operating system, Harmony's version and if you can, steps to reproduce the bug.

Also, please include the log of Harmony (Cmd/Ctrl + Alt + i, console tab).

Altough you can submit feature requests, keep in mind that I only prioritize requests coming from [paying users](https://getharmony.xyz/buy).

## Where is the source code?

Harmony used to be an open-source software. It is now a free-to-evaluate software, but you need a license for continued use.

I explain this decision [here](https://getharmony.xyz/buy).

You can still access the source code prior to the 0.5.0 release on this repo.


[![Metrics powered By Nucleus](http://nucleus.sh/banner_small.png)](https://nucleus.sh)"
275,jonjomckay/spotify-web-api,PHP,"Spotify Web API
===============

[![Build Status](https://travis-ci.org/jonjomckay/spotify-web-api.png?branch=develop)](https://travis-ci.org/jonjomckay/spotify-web-api)

## Requirements

* PHP 5.4+
* An OAuth 2 client ([league/oauth2-client](https://github.com/thephpleague/oauth2-client) works well)

## Installation

1. Add `""audeio/spotify-web-api"": ""0.*""` to your `composer.json`
2. Run `composer update` to update your application with the new dependency
3. That's all!

### Usage

1. Instantiate a new instance of `Audeio\Spotify\API` and set the access token retrieved by your OAuth 2 client (a provider for `league/oauth2-client` is included under `Audeio\Spotify\
Oauth2\Client\Provider\Spotify`):

    ```php
    $api = new \Audeio\Spotify\API();
    $api->setAccessToken('BAWSDOJWEO984yt34y35YgdsnhlreGERH56u45htrH54y');
    ```

2. Call all the methods you need!

    ```php
    $api->getAlbum('id');
    $api->getAlbums(array('id-1', 'id-2', 'id-3'));
    $api->getAlbumTracks('id');
    $api->getArtist('id');
    $api->getArtists(array('id-1', 'id-2', 'id-3'));
    $api->getArtistAlbums('id', 'country');
    $api->getArtistRelatedArtists('id');
    $api->getTrack('id');
    $api->getTracks(array('id-1', 'id-2', 'id-3'));
    $api->getUserProfile('id');
    $api->getCurrentUser();
    $api->getUserPlaylist('userId', 'id');
    $api->getUserPlaylistTracks('userId', 'id');
    $api->getUserPlaylists('id');
    ```

## License
The MIT License; please see [LICENSE](LICENSE) for more information."
276,TheQwertiest/foo_spotify,C,"# Spotify Integration
[![version][version_badge]][changelog] [![Build status][appveyor_badge]](https://ci.appveyor.com/project/TheQwertiest/foo-spotify/branch/master) [![CodeFactor][codefactor_badge]](https://www.codefactor.io/repository/github/theqwertiest/foo_spotify/overview/master) [![Codacy Badge][codacy_badge]](https://www.codacy.com/gh/TheQwertiest/foo_spotify/dashboard?utm_source=github.com&amp;utm_medium=referral&amp;utm_content=TheQwertiest/foo_spotify&amp;utm_campaign=Badge_Grade) 

**!!! This component is no longer being developed. See [#68](https://github.com/TheQwertiest/foo_spotify/issues/68) for more info !!!**

This is a component for the [foobar2000](https://www.foobar2000.org) audio player, which allows to play tracks from Spotify.

Visit [component homepage](https://theqwertiest.github.io/foo_spotify/) for more info.

[changelog]: CHANGELOG.md
[version_badge]: https://img.shields.io/github/release/theqwertiest/foo_spotify.svg
[appveyor_badge]: https://ci.appveyor.com/api/projects/status/t5bhoxmfgavhq81m/branch/master?svg=true
[codacy_badge]: https://app.codacy.com/project/badge/Grade/c2d3b3a99ce640ad8c1512784e15910f
[codefactor_badge]: https://www.codefactor.io/repository/github/theqwertiest/foo_spotify/badge/master
"
277,francoborrelli/spotify-react-web-client,JavaScript,"# Spotify React Web Client

Spotify Web Client using [Spotify Web API](https://developer.spotify.com/documentation/web-api/) and [Spotify Playback SDK](https://developer.spotify.com/documentation/web-playback-sdk/).

This project was bootstrapped with [Create React App](https://github.com/facebookincubator/create-react-app).

## Features

- Play full audio tracks.
- Control playback (pause, volume, shuffle, etc).
- Add or edit your playlists.
- See your recently played tracks and your top artists.
- Follow and unfollow playlists and artists.
- Add or remove tracks from your library.
- Change the device in which you are currently playing.
- Search tracks, albums, artists and playlists.

## Try it out

https://spotify-react-web-client.herokuapp.com

**Warning:** Spotify Playback requires users to authenticate with a valid Spotify Premium subscription.

## How to Run locally

First you need a [Spotify Client ID](https://developer.spotify.com/dashboard/applications).

```bash
$ git clone https://github.com/francoborrelli/spotify-react-web-client.git
$ cd spotify-react-web-client
$ npm i
```

You will have to define a '.env' file and set the following variables:

```
REACT_APP_CLIENT_ID=""YOUR_CLIENT_ID""
REACT_APP_REDIRECT_ID=http://localhost:3000/
```

Now run:

```bash
$ npm start
```

and visit http://localhost:3000.

## Use Docker!

```
docker-compose up -d
```

## Screenshots

![browse](images/browse.png?raw=true 'Playlist')
![playlist](images/playlist.png?raw=true 'Artist')
![artist](images/artist.png?raw=true 'Artist')
![devices](images/devices.png?raw=true 'Artist')

More in images folder.
"
278,hardikSinghBehl/spotifyApiSpring,Java,"# Spring-boot application consuming spotify's API (PKCE OAuth 2.0 Flow)

## [Running Application (Heroku Link)](https://pottify.herokuapp.com/)

##### Spring-boot application consuming spotify's REST API to show user's
* Top played tracks of all time/past 6 months/past month
* Top played artists of all time/past 6 months/past month
* Show recently played tracks
* Saved albums
* Saved tracks
* Newest released tracks
* Featured playlists
* Current playing track
* Searched tracks/playlist/artists

## Tech Stack Used
* Java 15
* Spring Boot 2.5.0
* Spring MVC
* Thymeleaf
* Lombok
* RestTemplate 

## Resources

* [Spotify API Docs](https://developer.spotify.com/documentation/web-api/)
* [Spotify API endpoints Documentation](https://developer.spotify.com/documentation/web-api/reference/)
* [Spotify OAuth flow (PKCE)](https://developer.spotify.com/documentation/general/guides/authorization-guide/)
* [Proof-Key-For-Code Exchange (PKCE) Docs](https://datatracker.ietf.org/doc/html/rfc7636)
* [RestTemplate: Guide](https://www.baeldung.com/rest-template)
---
### Screen-record (Low Quality)

![pottify-screen-record-demo](https://user-images.githubusercontent.com/69693621/122225635-df50ca80-ced2-11eb-92e7-9dec877cfbf7.gif)

## Local Setup

* Install Java 15
* Install Maven

Recommended way is to use [sdkman](https://sdkman.io/) for installing both maven and java

```
sudo su
```

```
sudo apt update
```

```
sudo apt install zip unzip
```

```
curl -s ""https://get.sdkman.io"" | bash
```

```
source ""$HOME/.sdkman/bin/sdkman-init.sh""
```

Install Java 15

```
sdk install java 15.0.1-open
```

Intsall Maven

```
sdk install maven
```

Spotify App Setup 

* Create A New App In Spotify Developers <a href=""https://developer.spotify.com/dashboard"" target=""_blank"">Console</a>
* Set Redirect URL to http://localhost:9090/callback
* Copy the client-id generated for the above app along with redirect-uri and configure them in application.properties file

```
com.hardik.pottify.app.client-id=<Client-id here>
com.hardik.pottify.app.redirect-url=<Redirect-URI here>
```


Run the below commands in the core

```
mvn clean install
```

```
mvn spring-boot:run
```

server port is configured to 9090 which can be changed in application.properties file

Go to the below url to view application

```
http://localhost:9090
```

"
279,distubejs/spotify,TypeScript,"<div align=""center"">
  <p>
    <a href=""https://nodei.co/npm/@distube/spotify""><img src=""https://nodei.co/npm/@distube/spotify.png?downloads=true&downloadRank=true&stars=true""></a>
  </p>
  <p>
    <a href=""https://nodei.co/npm/distube""><img alt=""npm peer dependency version"" src=""https://img.shields.io/npm/dependency-version/@distube/spotify/peer/distube?style=flat-square""></a>
    <a href=""https://nodei.co/npm/distube""><img alt=""npm"" src=""https://img.shields.io/npm/dt/@distube/spotify?logo=npm&style=flat-square""></a>
    <img alt=""GitHub Repo stars"" src=""https://img.shields.io/github/stars/distubejs/spotify?logo=github&logoColor=white&style=flat-square"">
    <a href=""https://discord.gg/feaDd9h""><img alt=""Discord"" src=""https://img.shields.io/discord/732254550689316914?logo=discord&logoColor=white&style=flat-square""></a>
  </p>
</div>

# @distube/spotify

A DisTube custom plugin for supporting Spotify URL.

# Feature

This plugin grabs the songs on Spotify then searches on YouTube and plays with DisTube.

# Installation

```sh
npm install @distube/spotify@latest
```

# Usage

```js
const Discord = require(""discord.js"");
const client = new Discord.Client();

const { DisTube } = require(""distube"");
const { SpotifyPlugin } = require(""@distube/spotify"");
const distube = new DisTube(client, {
  plugins: [new SpotifyPlugin()],
});
```

## Documentation

### SpotifyPlugin([SpotifyPluginOptions])

- `SpotifyPluginOptions.parallel`: Default is `true`. Whether or not searching the playlist in parallel.
- `SpotifyPluginOptions.emitEventsAfterFetching`: Default is `false`. Emits `addList` and `playSong` event before or after fetching all the songs.
  > If `false`, DisTube plays the first song -> emits `addList` and `playSong` events -> fetches all the rest\
  > If `true`, DisTube plays the first song -> fetches all the rest -> emits `addList` and `playSong` events
- `SpotifyPluginOptions.api`: (Optional) Spotify API Client credentials.
  Uses to fetch playlists/albums more than Spotify embeds limit (100 songs)
  or fetch Spotify data from link when the plugin cannot parse the embed page.
  - `SpotifyPluginOptions.api.clientId`: Client ID of your Spotify application
  - `SpotifyPluginOptions.api.clientSecret`: Client Secret of your Spotify application

#### Example

```js
new SpotifyPlugin({
  parallel: true,
  emitEventsAfterFetching: false,
  api: {
    clientId: ""SpotifyAppClientID"",
    clientSecret: ""SpotifyAppClientSecret"",
  },
});
```
"
280,robhurring/tmux-spotify,Shell,"# Tmux Spotify Plugin

Tmux plugin that shows the current music status for Spotify, Apple Music, or iTunes in your statusline

Introduces the following new status variables:

* `#{music_status}`
* `#{artist}`
* `#{album}`
* `#{track}`

### Usage

The following interpolations are made available for your statusline:

* `#{music_status}` - Spotify status icons
* `#{artist}` - Current artist
* `#{album}`  - Current album
* `#{track}`  - Current track

Here's the example in `.tmux.conf`:

    set -g status-right ""♫ #{music_status} #{artist}: #{track} | %a %h-%d %H:%M ""

Customize the icons with:

    set -g @spotify_playing_icon "">""
    set -g @spotify_paused_icon ""=""

    # optional: defaults to `paused_icon`
    set -g @spotify_stopped_icon ""X""

By default Spotify is used as the media source.  iTunes or Apple Music can be used by setting `MUSIC_APP` in
your `bashrc`
```
# set tmux-spotify to use Apple Music instead of Spotify
export MUSIC_APP=""Music""
```
set `MUSIC_APP` to `iTunes` instead on macOS<Catalina

### Screenshots

![status](/screenshots/spotify-status.png)<br/>

### Installation with [Tmux Plugin Manager](https://github.com/tmux-plugins/tpm) (recommended)

Add plugin to the list of TPM plugins in `.tmux.conf`:

    set -g @plugin 'robhurring/tmux-spotify'

Hit `prefix + I` to fetch the plugin and source it.

### Manual Installation

Clone the repo:

    $ git clone https://github.com/robhurring/tmux-spotify ~/clone/path

Add this line to the bottom of `.tmux.conf`:

    run-shell ~/clone/path/music.tmux

Reload TMUX environment:

    # type this in terminal
    $ tmux source-file ~/.tmux.conf

"
281,arjankuijpers/SpotifyRemote,C#,"<img src=""https://raw.githubusercontent.com/arjankuijpers/SpotifyRemote/297aadc6d2ca8b99afcb631bd2b4c1132a89fc31/VSIXSpotifyRemote/SpotifyRemoteLogo.png"" width=""200"">

# SpotifyRemote
<img src=""https://arjankuijpers.gallerycdn.vsassets.io/extensions/arjankuijpers/spotifyremote/2.0/1510793706623/271382/1/2017-07-16_00-24-42.gif"">

## For Visual Studio (2015/2017)

License:
![License MIT](https://img.shields.io/badge/license-MIT-blue.svg)  
Join the conversation on:
[![Gitter](https://img.shields.io/gitter/room/nwjs/nw.js.svg)](https://gitter.im/SpotifyRemoteForVisualStudio/Lobby#)  
Master: [![Build status](https://ci.appveyor.com/api/projects/status/nkoom7kwayhiolbx/branch/master?svg=true)](https://ci.appveyor.com/project/arjankuijpers/spotifyremote/branch/master)



* [Getting Started & Installation](#getting-started)
* [Tips](#tips)
* [FAQ](#frequent-asked-questions)
* [About](#about-spotifyremote)
* [Bug report & feature request](https://github.com/arjankuijpers/SpotifyRemote/issues)

## Getting started

#### Installation:
1. [Download](https://marketplace.visualstudio.com/items?itemName=ArjanKuijpers.SpotifyRemote) the installer package (VSIX) from the [Visual Studio marketplace](https://marketplace.visualstudio.com/items?itemName=ArjanKuijpers.SpotifyRemote#review-details).
2. Run the Visual Studio extension installer (VSIX).
3. Restart Visual Studio.
4. Go to **view** *>* **Toolbars** and Select **SpotifyRemote**  
<img src=""https://raw.githubusercontent.com/arjankuijpers/SpotifyRemote/081ea5748298841b9385c684de59b0f88dfd9399/SpotifyRemote/docs/enable_tb_from_view.png"" width=""350"">  

[Click here](https://raw.githubusercontent.com/arjankuijpers/SpotifyRemote/081ea5748298841b9385c684de59b0f88dfd9399/SpotifyRemote/docs/enable_tb_from_view.png) for full sized screenshot

## Tips

**Can it start Spotify from Visual Studio?**  
It will, when you click a command and Spotify is not running.

## Frequent Asked Questions
**Does it work on Visual Studio 2017?**  
*Yes it does, try it.*  

**What can SpotifyRemote do?**  
1. Currently you can do the basic commands such as:
 * Open Spotify,
 * Play
 * Pause
 * Next
 * Previous  

2. Showing Track name & Artist when it changes.  

*But that's not where it stops, See [Features](#features) to know what is planned.*
You can also make a feature request (at github).

**Can I help with development?**  
*Sure you can, please fork and do your developer magic. Afterwards create a [pull request](https://github.com/arjankuijpers/SpotifyRemote/pulls).  
And if your changes are stable it will be merged in the release version*

**What version of Windows do I need?**  
*At least* Windows 7 *, Visual Studio 2015 is only supported on Windows 7 and later*

**What version of Visual Studio do I need?**  
*At least* Visual Studio 2015

## Features
### Supported
- [x] Start Spotify
- [x] Open Spotify
- [x] Play / Pause
- [x] Skip / Previous
- [x] Shows track title upon change
- [ ] Playlist browsing

### Planned
- [x] Create better interface (update icons).
- [x] Hide Text of play control buttons when spotify is not active.
- [x] Settings in tools menu.
- [ ] Multiple themes.
- [ ] Awesome features people request.

Do you miss a feature? Submit a request here: [Github](https://github.com/arjankuijpers/SpotifyRemote/issues)

## Troubleshooting

**SpotifyRemote is not visible in the Visual studio**  
Go to **view** *>* **Toolbars** and Select **SpotifyRemote** it should show up at the top of Visual Studio.

The toolbar will be displayed over here.
<img src=""https://raw.githubusercontent.com/arjankuijpers/SpotifyRemote/081ea5748298841b9385c684de59b0f88dfd9399/SpotifyRemote/docs/Enable_toolbar1.png"" >

Go to toolbars and select the SpotifyRemote toolbar.  
<img src=""https://raw.githubusercontent.com/arjankuijpers/SpotifyRemote/081ea5748298841b9385c684de59b0f88dfd9399/SpotifyRemote/docs/Enable_toolbar2.png"" width=""200"">

The toolbar should now be visible. (icons may be different).
<img src=""https://raw.githubusercontent.com/arjankuijpers/SpotifyRemote/081ea5748298841b9385c684de59b0f88dfd9399/SpotifyRemote/docs/Enable_toolbar3.png"">



## About SpotifyRemote

SpotifyRemote is a attempt to recreate the awesome [vscode-spotify](https://marketplace.visualstudio.com/items?itemName=shyykoserhiy.vscode-spotify) plugin from [shyykoserhiy](https://github.com/ShyykoSerhiy/vscode-spotify).  
This project is open source and I encourage forks and pull requests.  
Please submit bug reports and feature requests at [Github](https://github.com/arjankuijpers/SpotifyRemote/issues).

## License

[SpotifyRemote is released under the MIT License](https://raw.githubusercontent.com/arjankuijpers/SpotifyRemote/master/LICENSE).


"
282,piyx/YoutubeSpotifyDL,Python,"# YoutubeSpotifyDL

Youtube and Spotify downloader

## Example

https://user-images.githubusercontent.com/82235530/166157330-1ff1f26e-5feb-4b45-b232-b8e0f41a3520.mp4


## How to run
#### 1. Create a Spotify App. 
<big><pre>
[See how to create and setup a spotify app](./SETUP.md)
</pre></big>

#### 2. Set Environment Variavles
<big><pre>
Edit the [.env](./.env) file and set the credentials.
Set the *SPOTIPY_CLIENT_ID* AND *SPOTIPY_CLIENT_SECRET* values.
</pre></big>

#### 3. Clone the project  
```cmd
git clone https://github.com/piyx/YoutubeSpotifyDL.git
```  

#### 4. Navigate to the project directory.
```cmd
cd YoutubeSpotifyDL
```

#### 5. Install Dependencies  
```cmd
pip install -r requirements.txt
```

#### 6. Install the package locally.
```cmd
pip install -e .
```

#### 7. Run main.py inside ytspdl folder  
```cmd
python ytspdl/main.py
```
"
283,learn-co-students/js-spotify-api-ajax-v-000,JavaScript,"# Visualizing A Song's Popularity Using Spotify

## Objectives

Build a page that uses data from the [Spotify's API Top Tracks](https://developer.spotify.com/web-api/get-artists-top-tracks/) to render a bar chart using [Chart.js](http://www.chartjs.org/). It will display the 10 most popular Elvis Presley songs and will have track names on the x-axis and popularity on the y-axis.

![example pic](https://raw.githubusercontent.com/learn-co-curriculum/js-spotify-api-ajax/cd/new_solution/img/example.png ""Pic of Example"")

## Instructions

You will need to make an AJAX call using the Artist Top Tracks URL described here [Spotify's API Top Tracks](https://developer.spotify.com/web-api/get-artists-top-tracks/).

Take a look at the `spec/spotify-chart.spec.js` file to get started. This lab isn't fully tested so while every spec may pass, you might not have a functioning product. You will only be modifying the `js/spotify-chart.js` to pass the first six tests.

The final step of this lab will be to run your server with `ruby -run -e httpd . -p 8000` and opening up [localhost:8000](http://localhost:8000/). Verify that your chart looks similar to the chart in this readme, then open `spec/spotify-chart.spec.js` and set the variable `signature` equal to your first and last names, in a string. That should make the final test pass.

**Note:** We've intentionally left out notes on using Chart.js. Be sure to [read the docs](https://github.com/chartjs/Chart.js/tree/v1.1.1/docs) and exercise some google-foo if you run into something challenging. Also note that these docs linked reference v1, as that is the version currently loaded in the lab. 

## Resources

* [Spotify's API Top Tracks](https://developer.spotify.com/web-api/get-artists-top-tracks/)
* [jQuery](http://api.jquery.com/) - [AJAX](http://api.jquery.com/jquery.ajax/)
* [Chart.js](http://www.chartjs.org/docs/#getting-started) - [Bar Chart](http://www.chartjs.org/docs/#bar-chart-example-usage)
* [Lab Review](https://www.youtube.com/watch?v=D4iIg_gJ7J8)

<p class='util--hide'>View <a href='https://learn.co/lessons/js-spotify-api-ajax'>Spotify API Lab </a> on Learn.co and start learning to code for free.</p>
"
284,ledesmablt/spotify-cli,Python,"# Spotify CLI 🎧

Control Spotify playback on any device through the command line.

## Installation

This package only supports Python 3 and above.
```
$ pip3 install --upgrade spotify-cli
```

## Usage

This CLI performs all interactions through the Spotify API. All you need is a stable internet connection and an active Spotify session on any device.

Authorize the CLI & save your credentials locally.
```
$ spotify auth login
```

You may also pass [your own Spotify application](https://developer.spotify.com/dashboard/applications)'s
client ID and secret if you want to track your usage or avoid
API rate limiting issues (all users using the default client settings share the same rate limits).

When doing so, please ensure that [this URL](https://asia-east2-spotify-cli-283006.cloudfunctions.net/auth-redirect)
is listed as a Redirect URI in your application.
```
$ spotify auth login --client-id XXXXX --client-secret YYYYY
```


Start Spotify playback on any device and run the `spotify` command.
```
$ spotify
Usage: spotify [<options>] <command>

Options:
  --version  Show the version and exit.
  --help     Show this message and exit.

Commands:
  auth      Manage user authentication for spotify-cli.
  browse    Open the current track, album, artist, or playlist in the...
  devices   Manage active devices.
  history   List your recently played tracks.
  next      Play the next track in the queue.
  pause     Pause playback.
  play      Resume playback, search for a track/album/playlist, or select a...
  previous  Play the previous track in the queue.
  queue     Add a track or album to your queue.
  repeat    Turn repeat on (all/track) or off.
  save      Save a track, album, artist, or playlist.
  search    Search for any Spotify content.
  seek      Seek to time (default unit: seconds) in the current track.
  shuffle   Turn shuffle on or off.
  status    Describe the current playback session.
  toggle    Resume any paused playback, or pause it if already running.
  top       List your top tracks or artists.
  volume    Control the active device's volume level (0-100).
```

## Examples

Describe and control current playback.
```
$ spotify play
Playing: Nights
         Frank Ocean - Blonde

$ spotify status -vv
Track   Nights (03:31 / 05:07)
Artist  Frank Ocean
Album   Blonde
Status  Playing (on repeat, 60% volume)

Device  Lorenzo (Smartphone)
URL:    https://open.spotify.com/track/7eqoqGkKwgOaWNNHx90uEZ

$ spotify vol up 20
Volume set to 80%

$ spotify vol to 100
Volume set to 100%
```

You can also manage multiple devices.
```
$ spotify devices -v
  LENOVO - Computer
* Lorenzo - Smartphone
  Web Player (Chrome) - Computer

$ spotify devices --switch comp
2 devices matched ""comp"".
? Please select the device to activate.
 > LENOVO - Computer
   Web Player (Chrome) - Computer

Switched to LENOVO - Computer
```

Search for a track to play, queue, or save.
```
$ spotify search red velvet

Search results for ""red velvet""

  #  Track                                      Artist
---  -----------------------------------------  ---------------------------
  1  Psycho                                     Red Velvet
  2  Monster                                    Red Velvet - IRENE & SEULGI
  3  Bad Boy                                    Red Velvet
  4  빨간 맛 Red Flavor                         Red Velvet
  5  피카부 Peek-A-Boo                          Red Velvet
  6  Naughty                                    Red Velvet - IRENE & SEULGI
  7  Power Up                                   Red Velvet
  8  Dumb Dumb                                  Red Velvet
  9  Bad Boy - (English Version) [Bonus Track]  Red Velvet
 10  In & Out                                   Red Velvet

Actions:
[n]ext/[b]ack
[p]lay/[q]ueue/[s]ave #[,...]
[a]dd to playlist #[,...] <playlist>
: q 1,4,5

Queue the selected track/s? (1,4,5) [Y/n]: Y
3 track/s queued.

Continue searching? [Y/n]:
```

Some commands support search queries (`play`, `queue`, `save`).
```
$ spotify play red velvet
Playing: Psycho
         Red Velvet - ‘The ReVe Festival’ Finale

$ spotify queue --album reve finale
‘The ReVe Festival’ Finale - Red Velvet (16 tracks)
Add this album to the queue? [Y/n]: Y
Album added to queue.

$ spotify save --artist red velvet
Red Velvet
Save this artist to your library? [Y/n]: Y
Following artist - Red Velvet.
```

Command shortcut prefixes are supported.
```bash
# supported
spotify volume
spotify vol
spotify v

spotify next
spotify n

spotify previous
spotify prev

# not supported - too many matches (pause, play, previous)
spotify p
```

Some commands support the `--raw` flag to output the Spotify API JSON response (shell script-friendly).
```bash
$ spotify status --raw | jq .context
{
  ""external_urls"": {
    ""spotify"": ""https://open.spotify.com/album/3mH6qwIy9crq0I9YQbOuDf""
  },
  ""href"": ""https://api.spotify.com/v1/albums/3mH6qwIy9crq0I9YQbOuDf"",
  ""type"": ""album"",
  ""uri"": ""spotify:album:3mH6qwIy9crq0I9YQbOuDf""
}
```

## Notes
- Playback and device-related commands require at least one active Spotify session on any device.
  - You can just start and stop playback to ""activate"" your device.
  - Your device will remain ""active"" even when paused.
- Some operations may not be supported on certain devices (i.e. volume control for mobile) and for users not subscribed to Spotify Premium.

## [License](LICENSE)

The MIT License (MIT)  
Copyright (c) 2020 Benj Ledesma
"
285,davidvanleeuwen/hubot-spotify,CoffeeScript,"h1. Hubot-Spotify

Want to control a central Spotify account in your office? This is the first version of a script that allows you to do so. Not really fancy at the moment, but it does the job. Thanks for the opensource AppleScripts and @dennus / @drblok.

h2. Setup
* OSX (mac mini / server)
* Spotify
* Hubot
* Campfire

h2. Install dependencies
* @npm install sh@
* @npm install spotify@

h2. Current commands
* play <1|2|3|query> - Play/pause, play a song that you searched (1,2,3) or play a track by title
* pause - Pause the current song
* toggle - Play/pause the current song
* stop - Stop current song
* next - Play the next song from the playlist
* previous - Play the previous song from the playlist
* current song - Shows what song I'm currently playing"",
* volume <0..9|up|down> - Change volume using a specific number between 0 (mute) and 9 or by up and down
* mute - Mute/unmute the sound
* search <track|album|artist> <query> - Search for a track on Spotify and play it

h2. Screenshot
!http://f.cl.ly/items/3Y3K210u0h2i1P1M3S3n/12i.png(screenshot)!

h2. Run Hubot with Hubot-Spotify locally?

#1 place this in your ~/.bash_profile
export HUBOT_CAMPFIRE_ACCOUNT=subdomain
export HUBOT_CAMPFIRE_TOKEN=token
export HUBOT_CAMPFIRE_ROOMS=roomnumber, roomnumber

#2 install node, npm and clone hubot
brew install node
curl http://npmjs.org/install.sh | sh
clone git://github.com/github/hubot.git

#3 go to the hubot/scripts folder and get the hubot-spotify scripts in there
https://github.com/davidvanleeuwen/hubot-spotify

#4 install the dependencies for hubot-spotify
npm install sh
npm install spotify

#5 run hubot with campfire
bin/hubot -a campfire -n Hubot
"
286,lowsky/spotify-graphql-server,JavaScript,"# spotify-graphql-server

This demonstrates how to build a GraphQL server which fetches data from an external API (Spotify),
see [german blog post](https://blog.codecentric.de/2017/09/graphql-mit-spotify-teil-1-server) or
 [english blog post](https://blog.codecentric.de/en/2017/01/lets-build-spotify-graphql-server)

~Use the [Live Demo] as a playground for graphql queries.~

## Get started

### prerequisites

For running this example locally, you must 
[register your own application at spotify](https://developer.spotify.com/documentation/general/guides/authorization/app-settings/).
Then create an [.env](./.env) file with the generated token, based on the example [.env.example](./.env.example) file.

Have a modern `node.js` version ( >=14 ) installed.

Run `yarn install`. 

### run server

`yarn start` to start the graphql server, then open http://localhost:4000/

`yarn watch` to start the graphql server which automatically restarts when any sources were changed (driven by `nodemon`)

### run tests

`yarn test`

### print GraphQL schema idl

`yarn run printSchema`
"
287,ptrwtts/kitchensink,JavaScript,"# Spotify Kitchen Sink

Spotify Kitchen Sink is a demo application for the Spotify Apps API. It demonstrates some of the available functionality and is designed to help developers who are getting started. Less time reinventing the wheel, more time reinventing the record player.

## Functionality

* Implement Tabs
* Handle URI Arguments
* Process dropped items (track, user, etc)
* Play single items (track, artist, etc)
* Play in context (album, playlist, etc)
* Control Playback (pause, skip, etc)
* Listen for track changes
* Get tracks from the user’s library
* Share a track using the built-in popup
* Search Spotify and Local tracks
* Create and save temporary playlists
* Output list and album views
* Use advanced search queries
* Fetch metadata in a variety of different methods
* Top Tracks for users
* Drag n' Drop
* Album art and overlayed player controls (when playing in a context)


## Background

The Spotify Apps API is fairly new (as of December 2011), so there’s still a lot of guesswork going on. I was able to a figure few things out, thanks to the Sample Code and a healthy dose of trial-and-error. Exploring the source code of working applications seemed to be the best way to learn, so when a friend needed help, I whipped together this Kitchen Sink. I’m now putting it up on GitHub in case it helps anyone else.

If you have any questions, or would like to contribute, please get in touch. 


## Resources

Here’s a few resources that helped me out along the way:

Docs

* Spotify Apps Docs: http://developer.spotify.com/en/spotify-apps-api/overview/
* Building a Spotify App: http://musicmachinery.com/2011/12/02/building-a-spotify-app/
* PasteBin Examples: http://pastebin.com/u/MrSiir
* StackOverflow Questions: http://stackoverflow.com/questions/tagged/spotify (also see page 2)

Read / written something helpful? Let me know and I’ll include it!

Apps

* Tutorial: http://developer.spotify.com/download/spotify-apps-api/tutorial/
* Mood Knobs: https://github.com/alexmic/mood-knobs
* Spartify: https://github.com/blixt/spartify
* SpotifyEchoNestPlaylistDemo: https://gist.github.com/1438262

Building something cool with the API? Let me know and I’ll add it!


## Disclaimers

This is an unofficial application, not sponsored or endorsed by Spotify. If you wish to develop for Spotify Apps, you must sign up for their Developer Program, and abide by their rules.

This is a work in progress. There’s plenty that I’ve left out and plenty that I don’t know. If you have any suggestions or would like to add something, I would love to hear from you. 

This is a hack. It’s also my first open source project. So go easy!


## Contact

pwattsmail at gmail dot com // [@ptrwtts](http://twitter.com/ptrwtts)

andrew at deceptacle dot com // [@andrewburgess](http://twitter.com/andrewburgess)


## License

Distributed under the MIT license. Copyright (c) 2011 Peter Watts
"
288,sreesairaghava/Spotify,Swift,"# Spotify [Clone]

Spotify, is a popular music streaming service. Creating a clone of the Spotify using UIKit, Swift 5.3, Cocapods, Spotify official API (using WEB API mostly), SDWebImage, Firebase Analytics through cocapods. More content will be updated soon. This project is under active development. 
## Installation

If you want to clone the project, you should create a ```Constants.swift ``` file with a struct as mentioned below to use clientID, clientSecret etc, from Spotify.
You can get your client ID and secret from Spotify Developer account [here](https://developer.spotify.com/dashboard/applications)



```swift
import Foundation

struct Constants {
    static let clientID = ""YOUR_CLIENT_ID""
    static let clientSecret = ""YOUR_CLIENT_SECRET""
    static let tokenAPIURL = ""https://accounts.spotify.com/api/token""
    static let redirectURI = ""REDIRECT_URL"" // Can be your own website url 
    static let scopesArray = [""user-read-private"",
                               ""playlist-modify-public"",
                               ""playlist-read-private"",
                               ""playlist-modify-private"",
                               ""user-follow-read"",
                               ""user-read-email""
    ]
//Add scopes to capture different user accesses
}
```

## License
[MIT](https://choosealicense.com/licenses/mit/)
"
289,microlinkhq/spotify-url-info,JavaScript,"<div align=""center"">
  <img src=""https://cdn.microlink.io/logo/banner.png"" alt=""microlink logo"">
  <br>
  <br>
</div>

![Last version](https://img.shields.io/github/tag/microlinkhq/spotify-url-info.svg?style=flat-square)
[![Coverage Status](https://img.shields.io/coveralls/microlinkhq/spotify-url-info.svg?style=flat-square)](https://coveralls.io/github/microlinkhq/spotify.url-info)
[![NPM Status](https://img.shields.io/npm/dm/spotify-url-info.svg?style=flat-square)](https://www.npmjs.org/package/spotify-url-info)

> Get metadata from Spotify URLs.

## Install

```bash
npm install spotify-url-info
```

## Usage

In order to use the library, you have to provide the fetch agent to use:

```js
const fetch = require('isomorphic-unfetch')
const { getData, getPreview, getTracks, getDetails } = require('spotify-url-info')(fetch)
```

There are four functions:

- **getData**<br/>
Provides the full available data, in a shape that is very similar to [what the spotify API returns](https://developer.spotify.com/documentation/web-api/reference/object-model/).

- **getPreview** <br/>
Always returns the same fields for different types of resources (album, artist, playlist, track). The preview track is the first in the Album, Playlist, etc.

- **getTracks** <br/>
Returns array with tracks. This data is passed on straight from spotify, so the shape could change.Only the first 100 tracks will be returned.

- **getDetails** <br/>
  Returns both the preview and tracks. Should be used if you require information from both of them so that only one request is made.

All the methods receive a Spotify URL (play. or open.) as first argument:

```js
getPreview('https://open.spotify.com/track/5nTtCOCds6I0PHMNtqelas')
  .then(data => console.log(data))
```

Additionally, you can provide fetch agent options as second argument:

```js
getPreview('https://open.spotify.com/track/5nTtCOCds6I0PHMNtqelas', {
  headers: {
    'user-agent': 'googlebot'
  }
}).then(data => console.log(data))
```

It returns back the information related to the Spotify URL:

```json
{
  ""title"": ""Immaterial"",
  ""type"": ""track"",
  ""track"": ""Immaterial"",
  ""artist"": ""SOPHIE"",
  ""image"": ""https://i.scdn.co/image/d6f496a6708d22a2f867e5acb84afb0eb0b07bc1"",
  ""audio"": ""https://p.scdn.co/mp3-preview/6be8eb12ff18ae09b7a6d38ff1e5327fd128a74e?cid=162b7dc01f3a4a2ca32ed3cec83d1e02"",
  ""link"": ""https://open.spotify.com/track/5nTtCOCds6I0PHMNtqelas"",
  ""embed"": ""https://embed.spotify.com/?uri=spotify:track:5nTtCOCds6I0PHMNtqelas"",
  ""date"": ""2018-06-15T00:00:00.000Z"",
  ""description"": ""description of a podcast episode""
}
```

When a field can't be retrieved, the value will be `undefined`.

There are no guarantees about the shape of this data, because it varies with different media and scraping methods. Handle it carefully.

## License

**spotify-url-info** © [microlink.io](https://microlink.io), released under the [MIT](https://github.com/microlinkhq/spotify-url-info/blob/master/LICENSE.md) License.<br>
Authored by [Karl Sander](https://github.com/karlsander) and maintained by [Kiko Beats](https://kikobeats.com) with help from [contributors](https://github.com/microlinkhq/spotify-url-info/contributors).

> [microlink.io](https://microlink.io) · GitHub [microlink.io](https://github.com/microlinkhq) · Twitter [@microlinkhq](https://twitter.com/microlinkhq)
"
290,micthiesen/spotify-my-slack,TypeScript,"# Spotify my Slack [![test](https://github.com/micthiesen/spotify-my-slack/workflows/test/badge.svg?branch=master)](https://github.com/micthiesen/spotify-my-slack/actions?query=workflow%3Atest)

Note that this project is currently undergoing a significant refactor and _is not
functional yet_. If you want to find a working version of SmS you'll have to dig through
the Git history a bit (likely a lot, actually).

## Local Development

1. Make sure Docker and Docker Compose are installed (I use Docker for Mac)
1. In the root of the project, do a `$ docker-compose up`
1. The application will be accessible at [localhost:7001](http://localhost:7001)

### Linting & References on the Host

1. Install [nvm](https://github.com/nvm-sh/nvm)
1. In the root of the project, install the correct node version: `$ nvm install`
1. Install dependencies for the frontend & backend:
   - In `frontend/`: `$ npm install`
   - In `backend/`: `$ npm install`
"
291,librespot-org/librespot-golang,Go,"## librespot-golang

### Introduction

librespot-golang is an opensource Golang library based on the [librespot](https://github.com/plietar/librespot) project, allowing you to control Spotify Connect devices, get metadata, and play music. It has itself been based on [SpotControl](https://github.com/badfortrains/spotcontrol), and its main goal is to provide a suitable replacement wfor the defunct libspotify.

This is still highly experimental and in development. Do not use it in production projects yet, as the API is incomplete and subject to heavy changes.

This fork contains changes that are more compatible with go.mod, while removing the Rust-esque package layout. It has not been tested thoroughly, though things do compile. Please open an issue if anything is broken.

### Installation

This package can be installed using:

```sh
go get github.com/librespot-org/librespot-golang/librespot
```

### Usage

To use the package look at the example micro-controller (for Spotify Connect). For the CLI, install the main package:

```sh
go get -u github.com/librespot-org/librespot-golang
```

### Building for mobile

The package `librespotmobile` contains bindings suitable for use with Gomobile, which lets you use a subset of the librespot library on Android and iOS.

To get started, install gomobile, and simply run (for Android):

```sh
cd $GOPATH/src/github.com/librespot-org/librespot-golang
gomobile init -ndk /path/to/android-ndk
gomobile bind librespotmobile
```

This will build you a file called `librespotmobile.aar` which you can include in your Android Studio project.

### Compiling on nix:

```sh
nix-shell -p gcc pkgconfig libvorbis libogg portaudio
```

### To-Do's

- Handling disconnections, timeouts, etc (overall failure tolerance)
- Playlist management
- Spotify Radio support
"
292,Koducation/AndroidCourse101,Kotlin,"# A Complete Android App Development Course 101

## Still working on this course records and code. Will be announced when it is finished.

## Susbcribe to [youtube channel](http://bit.ly/2MwvAUy) to get notified when videos are uploaded. 

In this course you will develop <b>Spotify</b> Clone App.
You will have a modern development skill in this course. 

![](https://raw.githubusercontent.com/Koducation/AndroidCourse101/master/art/course_cover.png)

# Note
I will be update the [wiki](https://github.com/Koducation/AndroidCourse101/wiki) page as I produce content.
"
293,ftupas/dbt-spotify-analytics,Python,"# Spotify User Analytics

## Introduction
In this project, we will be analyzing our listening history, top tracks & artists, and genres from Spotify. Here are the tools that we will be using:
- Python - Scraping data from Spotify API endpoints and saving files to CSV
- Postgres - Our database wherein data will be stored into and queried from
- dbt (Data Build Tool) - Data modeling tool to transform our data in staging to fact, dimension tables, and views
- Metabase - Dashboarding tool to analyze our data
- Docker - Containerizing our applications i.e. Postgres, dbt, and Metabase

## Project Files
- app
    - main.py - Our main ETL script that fetches data from the Spotify API endpoints and saves them to CSV
    - util.py - Utility helper file that contains a custom class **SpotifyUtil**
    - config_template.py - This is where we will store our credentials
- dbt
    - models - Contains the sql scripts and schema.yml files that will be used when we run our transformations
    - dbt_entrypoint.sh - Script that will server as our entrypoint when running the `dbt` container
    - Dockerfile - Contains the commands to create the custom Docker image
    - dbt_project.yml - YAML file to configure dbt
    - packages.yml - YAML file for test dependencies
    - profiles.yml - YAML file to configure connection of `dbt` to `postgres`
- metabase
    - metabase.db - Metadata database of Metabase for the dashboard
- docker-compose.yml - YAML file to orchestrate Docker containers composition

## Workflow
The diagram below illustrates the systems design and how the workflow will go.

![system_design](images/system_design.png)

Let's break this down into major steps
- Setup
- Get Spotify data
- Build Docker containers
- Transform, model, and load data to Postgres DB using dbt
- Serve to Metabase dashboard

## Setup
- `cd` to this directory
- Open a terminal, create a Python virtual environment using:


    ```
    Windows
    > python -m venv venv

    Mac/Linux
    $ make build

    ```
    then activate it by executing 

    ```
    Windows:
    > venv\Scripts\activate.bat
    ```
    (For Windows) Install dependencies using:
    ```
    > python -m pip install -r requirements.txt
    ```
- While dependencies are being installed, navigate to [Spotify Developer Page](https://developer.spotify.com/dashboard/login) and login
- Create an app and note down the `Client ID` and `Client Secret`, make sure to add a redirect uri in `Settings` i.e. `http://localhost:8888/callback/`
- Fill the details in [config_template.py](app/config_template.py) and rename it to `config.py`

## Get Spotify data
- Run the main Python script to fetch the data from Spotify using:

    ```
    Windows
    > python app\main.py

    Mac/Linux
    $ make run
    ```
- While the script is running, it will redirect to a webpage that looks like the one below, and just click `AGREE` 
    
    ![spotify](images/token.png)

    p.s. follow [me](https://open.spotify.com/user/12139930362) for nice tunes! 😁

## Build Docker containers
Now that we have the CSV files in the `data` folder, we can now build our Docker containers using this command:
```
docker-compose up
```

This command will build our `dbt`, `postgres`, and `metabase` containers. This will also run our data loading, transformations, and modeling in the background.

## Transform, model, and load data to Postgres DB using dbt
During `docker-compose`, dbt runs the following commands
- `dbt init spotify_analytics`: Creates the project folder
- `dbt debug`: Checks the connection with the Postgres database
- `dbt deps`: Installs the test dependencies
- `dbt seed`: Loads the CSV files into staging tables in the database in `postgres`
- `dbt run`: Runs the transformations and loads the data into the database
- `dbt docs generate`: Generates the documentation of the dbt project
- `dbt docs serve`: Serves the documentation on a webserver

Navigating to http://localhost:8080 to see the documentation, we can see the lineage graph, a DAG (Directed Acyclic Graph).

![DAG](images/dbt_docs.png)

This shows us how the CSV files have been transformed to the fact, dimension tables and views.

## Serve to Metabase dashboard

Now that the data is loaded and transformed in our database, we may now view it in http://localhost:3000.
You may need to login, the credentials are

```
email: dbt@spotify.com
password: password1
```

![login](images/metabase_login.png)

Then you can navigate through, play around, and analyze your data.

## Questions

- What are the more common tracks in my playlists?
- Avg length of playlists?
- What are my favourites (most listened - top 5) genres in my playlists?
- What are my favourites (most listened - top 10) artists in my playlists?
- Am I born at the right decade? (more common release years of tracks in my playlists)
- What are the two keys that please me more? (2 most commons keys on tracks in my playlists)
- How much hipster am I? (avg popularity of tracks in my playlists)
"
294,jodal/pyspotify,Python,"*********
pyspotify
*********

WARNING: This library no longer works
=====================================

pyspotify is a Python wrapper around the libspotify C library, and thus depends
on libspotify for everything it does.

In May 2015, libspotify was deprecated by Spotify and active maintenance
stopped. At this point, libspotify had been the main way to integrate with
Spotify for six years, and was part of numerous open source projects and
commercial applications, including many receivers and even cars.  It remained
the only API for playback outside Android and iOS.

In February 2016, server side changes to the Spotify API caused the search
functionality to stop working, without Spotify ever acknowledging it. Users of
pyspotify could work around this by using the Spotify web API for searches and
pyspotify for playback.

In April 2022, `Spotify announced
<https://developer.spotify.com/community/news/2022/04/12/libspotify-sunset/>`_
that they would sunset the libspotify API one month later.

In May 2022, new libspotify connections to Spotify started failing. With
libspotify dead, pyspotify was dead too.

After two years in development from May 2013 to May 2015, and seven years of
loyal service this project has reached its end.

**There will be no further updates to pyspotify.**

Hopefully, the pyspotify source code can still serve as a complete example of
how to successfully wrap a large C library in Python using CFFI.


Introduction
============

pyspotify provides a Python interface to
`Spotify's <https://www.spotify.com/>`__ online music streaming service.

With pyspotify you can access music metadata, search in Spotify's library of
20+ million tracks, manage your Spotify playlists, and play music from
Spotify. All from your own Python applications.

pyspotify uses `CFFI <https://cffi.readthedocs.io/>`_ to make a pure Python
wrapper around the official libspotify library. It works on CPython 2.7 and
3.5+, as well as PyPy 2.7 and 3.5+. It is known to work on Linux and
macOS. Windows support should be possible, but is awaiting a contributor with
the interest and knowledge to maintain it.


Project resources
=================

- `Documentation <https://pyspotify.readthedocs.io/>`_
- `Source code <https://github.com/jodal/pyspotify>`_
- `Issue tracker <https://github.com/jodal/pyspotify/issues>`_

.. image:: https://img.shields.io/pypi/v/pyspotify
    :target: https://pypi.org/project/pyspotify/
    :alt: Latest PyPI version

.. image:: https://img.shields.io/github/workflow/status/jodal/pyspotify/CI
    :target: https://github.com/jodal/pyspotify/actions?workflow=CI
    :alt: CI build status

.. image:: https://img.shields.io/readthedocs/pyspotify.svg
    :target: https://pyspotify.readthedocs.io/
    :alt: Read the Docs build status

.. image:: https://img.shields.io/codecov/c/gh/jodal/pyspotify
   :target: https://codecov.io/gh/jodal/pyspotify
   :alt: Test coverage
"
295,kaaes/albums-availability,JavaScript,"Albums Availability Map
-----------------------

A visualisation for albums and their availability in Spotify.

This project uses [Spotify Web API](https://developer.spotify.com/web-api/) to get the data
and [Google Charts](https://developers.google.com/chart/) to display them.
There's also a tiny bit of the amazing [D3.js](http://d3js.org/) to help process the data.

To check an album paste the uri to the search box or drag an album from Spotify client and drop it
somewhere on the page.

![Screenshot of the map](/screen.png)
"
296,enappd/ionic-capacitor-music,TypeScript,"# ionic-4-music
Ionic 4 Spotify like Music Player demo. 
Check details in rspective blogs - 

* [Ionic Angular apps with Cordova](https://enappd.com/blog/spotify-like-music-in-ionic-4-apps/48) - Relevant code is in `master` branch
* [Ionic Angular apps with Capacitor](https://enappd.com/blog/play-music-in-ionic-capacitor-apps/112/) - Relevant code is in `capacitor` branch

# Explore Enappd Store
## Free Starters
[![Ionic 4 Facebook Auth starter](https://www.dropbox.com/s/k3w3qwicc6z2dh7/fb_250x250.jpg?raw=1)](https://store.enappd.com/product/ionic-4-facebook-login-with-firebase/) [![Ionic 4 Twitter Auth starter](https://www.dropbox.com/s/bx8du77d7e0z5z1/twitter_250x250.jpg?raw=1)](https://store.enappd.com/product/ionic-4-twitter-login-with-firebase/) [![Ionic 4 PayPal Payment starter](https://www.dropbox.com/s/91tghp24l5sk2u1/paypal_250x250.jpg?raw=1)](https://store.enappd.com/product/ionic-4-paypal-payment-starter/) [![Ionic 4 Stripe Payment starter](https://www.dropbox.com/s/xpwbaqtvxktj75l/stripe_250x250.jpg?raw=1)](https://store.enappd.com/product/ionic-4-stripe-payment-starter/) [![Ionic 4 RazorPay Payment starter](https://www.dropbox.com/s/2at6kwjupskc01p/razor_250x250.jpg?raw=1)](https://store.enappd.com/product/ionic-4-razorpay-payment-starter/) [![Ionic 4 Apple Pay Payment starter](https://www.dropbox.com/s/shm8xjtvnzquruq/apPay_250x250.jpg?raw=1)](https://store.enappd.com/product/ionic-4-apple-pay-starter/) [![Ionic 4 Phaser starter](https://www.dropbox.com/s/lvy9cnyk8j24f11/phaser_250x250.jpg?raw=1)](https://store.enappd.com/product/ionic-phaser-game-framework-ionic-4/) [![Ionic 4 Chat themes](https://www.dropbox.com/s/hqo1k8mtqjw9e64/250x250.jpg?raw=1)](https://store.enappd.com/product/free-chat-themes-ionic4/)

## Ionic Starters
[![Ionic 4 Full App](https://www.dropbox.com/s/js6o4tyftmhs51f/fullAppV4.jpg?raw=1)](https://store.enappd.com/product/ionic-4-full-app/)[![Ionic 4 Food Ordering App](https://www.dropbox.com/s/pw0ax8hx2lnl57m/Ionic-FoodieV4-300x200.jpg?raw=1)](https://store.enappd.com/product/ionic-4-food-ordering-pwa-app-starter/)[![Ionic 4 Music Streaming App](https://www.dropbox.com/s/o22ytld74ekm1yq/IonSpot-300x200.jpg?raw=1)](https://store.enappd.com/product/ionic-4-spotify-pwa-app-starter/)[![Ionic 4 Full Chart App](https://www.dropbox.com/s/guylref1act3i7i/IonicChartFull.jpg?raw=1)](https://store.enappd.com/product/ionic-4-chart-app-starter-ion-chart/)[![Ionic 4 Google Vision Starter App](https://www.dropbox.com/s/cissy2fkhjdyb14/IonicGVision-300x200.jpg?raw=1)](https://store.enappd.com/product/ionic-4-google-vision-starter/)[![Ionic 4 Machine Learning Starter App](https://www.dropbox.com/s/3tuiuysx8x724g4/IonicML-300x200.jpg?raw=1)](https://store.enappd.com/product/ionic-4-machine-learning-app-starter/)
[![Ionic 4 Firebase Full Auth Starter](https://www.dropbox.com/s/ro0g416sm7so06v/IonicFullAuth-300x200.jpg?raw=1)](https://store.enappd.com/product/firebase-starter-full-auth/)[![Ionic 4 Firebase Full Auth Starter](https://www.dropbox.com/s/ar5jpavucgpcq2u/IonicFireFull-300x200.jpg?raw=1)](https://store.enappd.com/product/ionic-4-firebase-full-app-starter/)  [![Tinder](https://www.dropbox.com/s/ifgl1i9rucrgv9c/tinder.jpg?raw=1)](https://store.enappd.com/product/dating-app-starter-ionic4-tinder-clone/) [![Taxi Booking Complete Platform](https://www.dropbox.com/s/ycdiqz2kvqp0goh/taxi-platform.jpg?raw=1)](https://store.enappd.com/product/taxi-booking-complete-platform/) [![Tinder](https://www.dropbox.com/s/lswzbpb7frkeq2i/short-news.jpg?raw=1)](https://store.enappd.com/product/short-viral-news-app-ionic-4/)[![Woocommerce all starter](https://www.dropbox.com/s/91w4h33g4sc75bp/shoppr.jpg?raw=1)](https://store.enappd.com/product/ionic-4-woocommerce-starter/) [![Grocery Shopping starter](https://www.dropbox.com/s/o5b6xmclh9gv3rs/Ionic4-grocery.jpg?raw=1)](https://store.enappd.com/product/grocery-shopping-full-app-ionic-4/)[![Ionic react starter](https://www.dropbox.com/s/uv53dsttgihfcpc/ionic-react.jpg?raw=1)](https://store.enappd.com/product/ionic-react-full-app-capacitor/) [![Chat themes Ionic 4](https://www.dropbox.com/s/l0qqwhglba26i2w/chatter.jpg?raw=1)](https://store.enappd.com/product/chat-themes-ionic4/)[![Carpool starter](https://www.dropbox.com/s/95bfpaamgwcdv8i/carpool-300x190.png?raw=1)](https://store.enappd.com/product/carpool-app-starter/)    [![Nearbuy clone](https://www.dropbox.com/s/795wjwma45n0yum/nearbuy.png?raw=1)](https://store.enappd.com/product/coupon-app-starter-ionic4-nearbuy-clone/) 

## React Native Starters
[![React Native Full App ](https://www.dropbox.com/s/qzsmryf3lnhe483/RN-fullApp-300x200.jpg?raw=1)](https://store.enappd.com/product/react-native-full-app/)[![React Native Taxi Booking app](https://www.dropbox.com/s/p1pkxocjwq7x9r2/RNuber-300x200.jpg?raw=1)](https://store.enappd.com/product/react-native-taxi-booking-app-template/)
[![Spotify starter react native](https://www.dropbox.com/s/rvcb7gkf1hc3ehk/audrix-300x200.jpg?raw=1)](https://store.enappd.com/product/spotify-style-music-app-starter/) [![Netflix Starter](https://www.dropbox.com/s/jakjqr984ybuyk2/netflix.jpg?raw=1)](https://store.enappd.com/product/netflix-style-video-streaming-app-starter/) [![react Native Grocery Shopping starter](https://www.dropbox.com/s/taenejrp8mo1th6/RN-grocery.jpg?raw=1)](https://store.enappd.com/product/react-native-grocery-shopping-starter/) [![React native Firebase starter](https://www.dropbox.com/s/isbv2liz5kwpqtx/RN-fire-starter.jpg?raw=1)](https://store.enappd.com/product/react-native-firebase-starter-kit/) [![React native Star app](https://www.dropbox.com/s/g1cvke5g9f6w6sz/star.jpg?raw=1)](https://store.enappd.com/product/react-native-tinder-netflix-whatsapp/)

# Welcome to Enappd

**Enappd** provides you latest app starters and free app starters to get your app up and running. We are on our mission to reduce the time taken to develop an average app. In this mission our goals are 

- Create an app store with countless number of App starters with production quality
- Create an open marketplace for every developer to share their starters for others - Free or Paid
- Create awesome SaaS products and apps to drastically reduce the time required to create an app from scratch
"
297,spotify/spotify.github.io,HTML,"# spotify.github.io

<p align=""center"">
  <img src=""https://user-images.githubusercontent.com/8904624/127524940-37bd6001-647d-40ac-86ec-bb22d1a100c8.gif"">
</p>

Showcase site for hand-picked open-source projects by Spotify. It is built using Jekyll & GitHub Actions with a node.js script to fetch data from the GitHub GraphQL API adding it to a static YAML file in the repository.

## Development

**Install Jekyll & bundler gems**

```
gem install jekyll bundler
```

**Install yarn**

```
npm install --global yarn
```

**Install dependencies** inside of the project folder

```
yarn & bundle install
```

**Build & serve**

```
bundle exec jekyll serve
```

**(Optional) Test & update data**

[Create a personal GitHub Access Token](https://github.com/settings/tokens) to fetch & update the repository data locally. As the data is updated automatically using GitHub Actions `_data/projects_generated.yaml` should not be added to Git.

```
GH_TOKEN=YOUR_TOKEN node ./scripts/nightly.js
```

---

This project adheres to the [Open Code of Conduct][code-of-conduct]. By participating, you are expected to honor this code.

[code-of-conduct]: https://github.com/spotify/code-of-conduct/blob/master/code-of-conduct.md
"
298,rrkpp/SpotifyOverlay,C++,"NOTE: This is a defunct project. Spotify changed their desktop client and this software no longer works as a result.

# SpotifyOverlay
A third-party Spotify client built specifically for OpenVR.

[![Spotify Overlay](https://i.imgur.com/xxSJjpn.png)](https://www.youtube.com/watch?v=4vb6xc_aLWk)

## Installation
Download all the files in /bin and put them somewhere on your computer, then run SpotifyOverlay.exe. Alternatively, you can download everything as a .zip archive [here](https://github.com/rrkpp/SpotifyOverlay/blob/master/release/SpotifyOverlay_v1_0.zip?raw=true) and extract it somewhere.

The first time you run the overlay, it will generate a .vrmanifest and tell SteamVR to auto-run Spotify Overlay whenever SteamVR is started. If you don't want the overlay to auto-run, you can disable it in SteamVR > Settings > Applications.

## How to Use
From any SteamVR application, just open the SteamVR Dashboard and look toward the bottom for your dashboard overlay buttons. You should see a ""Spotify"" overlay right next to ""Steam"" and ""Desktop"" (and any other overlays you have installed). The overlay will try connecting to Spotify when it first starts up, and if that fails (meaning Spotify wasn't running when SteamVR/the overlay launched), it'll retry every time you open the overlay. So if the overlay isn't doing anything and it doesn't seem to be connected to Spotify, just close the dashboard and re-open it, and it should load right up.

Click the green ""Search"" button in the top-right to open the keyboard and search for something, click the search results to play the track, and use the arrows to the right of the search results to scroll up/down. When you play a track from the search results, it'll drop you into the album that track is from. In other words, if you play a song from the search results and hit the skip button to move to the next track, it'll play the next track on that album.

## Credits / Thanks
* Carl Bystrom for documenting the local Spotify HTTP server, which made this overlay possible
* LibreVR for developing the open-source, MIT-licensed Revive project, which helped demonstrate how create a usable dashboard overlay, and from which the code for manifest generation was copied. Give him some support: https://github.com/LibreVR/Revive
"
299,smaltby/spotify-api-plusplus,C++,"# spotify-api-plusplus

A C++ wrapper for the Spotify Web API.

## Building

First, install necessary dependencies, if you don't already have them.

    sudo apt-get install cmake
    sudo apt-get install libcurl4-openssl-dev

Clone the repository

    git clone https://github.com/smaltby/spotify-api-plusplus.git

Initialize submodules

    cd spotify-api-plusplus
    git submodule update --init --recursive

And finally, build using CMake

    mkdir build
    cd build
    cmake ..
    make

## Testing

Running the unit tests for spotify-api-plusplus is a bit more complex,
because you'll need a client id, client secret, and refresh token. The
first two can be gotten by registering an application with Spotify
[here](https://developer.spotify.com/my-applications/).

The refresh token requires a Spotify Premium Account. Follow
[this](https://developer.spotify.com/web-api/authorization-guide/#authorization-code-flow)
guide up to step 5 to acquire a refresh token. Use the following scope

    scope=user-read-private%20user-read-email%20playlist-read-private%20playlist-read-collaborative%20playlist-modify-public%20playlist-modify-private%20user-follow-modify%20user-follow-read%20user-library-read%20user-library-modify%20user-read-private%20user-read-birthdate%20user-read-email%20user-top-read%20ugc-image-upload%20user-read-playback-state%20user-modify-playback-state%20user-read-currently-playing%20user-read-recently-played

Once acquired, the refresh token should work indefinetely for running the
test cases for this library.

Create 3 files under the root of the project, client_id.txt, client_secret.txt,
and refresh_token.txt, containing the values you acquired previously. The
test cases should be able to use them to sucessfully authenticate with Spotify
and make calls to the API.

To run the test cases, simply use

    make test

after going through the steps to build the library."
300,felix-hilden/tekore,Python,"======
|logo|
======
|build| |documentation| |coverage|

Welcome to the GitHub repository of Tekore!
We provide a client for the Spotify Web API for Python,
complete with all available endpoints and authentication methods,
async support and loads of additional features.
Tekore allows you to interact with the API effortlessly.
Here's five lines to get you full access and start playing your top songs.

.. code:: python

    import tekore as tk

    conf = (client_id, client_secret, redirect_uri)
    token = tk.prompt_for_user_token(*conf, scope=tk.scope.every)

    spotify = tk.Spotify(token)
    tracks = spotify.current_user_top_tracks(limit=10)
    spotify.playback_start_tracks([t.id for t in tracks.items])

See our homepage on `PyPI`_ for more information
about the package and its versions.
Visit our online documentation on `Read The Docs`_ for tutorials,
examples, package reference and a detailed description of features.
Join our `Discord <https://discord.gg/wcRXgJu>`_ community
to ask for help or discuss just about anything related to Tekore.
You can also ask a question on
`Stack Overflow <https://stackoverflow.com/questions/tagged/tekore>`_.

Contributing
============
|issues_open| |issue_resolution|

New contributors are always welcome!
If you've found a bug or would like to propose a feature,
please submit an `issue <https://github.com/felix-hilden/tekore/issues>`_.
If you'd like to get
`more involved <https://opensource.guide/how-to-contribute/>`_,
you can start by cloning the most recent version from GitHub
and installing it as an editable package.

.. code:: sh

    $ git clone https://github.com/felix-hilden/tekore.git
    $ cd tekore
    $ pip install -e .[dev]

The last command installs all the necessary dependencies for development.
For specialised uses, sets of extras can be installed separately.
``tests`` installs dependencies related to executing tests,
``docs`` is for building documentation locally,
and ``checks`` contains ``tox`` and tools for static checking.
The install can be verified by running all essential tasks with tox.

.. code:: sh

    $ tox

Now a subset of tests have been run, and documentation has been built.
A list of all individual tasks can be viewed with their descriptions.

.. code:: sh

    $ tox -a -v

Please have a look at the following sections for additional information
regarding specific tasks and configuration.

Documentation
-------------
Documentation can be built locally with Sphinx.

.. code:: sh

    $ cd docs
    $ make html

The main page ``index.html`` can be found in ``build/html``.
If tox is installed, this is equivalent to running ``tox -e docs``.

Code style
----------
A set of code style rules is followed.
To check for violations, run ``flake8``.

.. code:: sh

    $ flake8 tekore

Style checks for docstrings and documentation files are also available.
To run all style checks use ``tox -e lint``.

Running tests
-------------
The repository contains a suite of test cases
which can be studied and run to ensure the package works as intended.

.. code:: sh

    $ pytest

For tox, this is the default command when running e.g. ``tox -e py``.

Tests against the live Web API use environment variables for credentials.
These tests manipulate your data and player,
but try to restore previous state insofar as it is possible.
Please refer to the description of each test class for details.
In order to run all tests successfully, one must specify:

* ``SPOTIFY_CLIENT_ID`` - client ID of a registered Spotify 3rd party application
* ``SPOTIFY_CLIENT_SECRET`` - secret associated with that application
* ``SPOTIFY_REDIRECT_URI`` - redirect URI whitelisted in application settings
* ``SPOTIFY_USER_REFRESH`` - user refresh token with all scopes

In addition, playback tests require an active Spotify device
that does not have a private session enabled and an empty song queue.

Optionally ``TEKORE_TEST_SKIP_IS_FAIL`` can be set to raise an error if some
of the tests would be skipped because of the environment has not been configured.

To measure test coverage and view uncovered lines or branches run ``coverage``.

.. code:: sh

    $ coverage run
    $ coverage report

This can be achieved with tox by running ``tox -e coverage``.


.. |logo| image:: docs/src/logo_small.png
   :target: `pypi`_
   :alt: logo

.. |build| image:: https://github.com/felix-hilden/tekore/workflows/build/badge.svg
   :target: https://github.com/felix-hilden/tekore/actions
   :alt: build status

.. |documentation| image:: https://readthedocs.org/projects/tekore/badge/?version=latest
   :target: https://tekore.readthedocs.io/en/latest
   :alt: documentation status

.. |coverage| image:: https://api.codeclimate.com/v1/badges/627ab5f90253b59d4c8f/test_coverage
   :target: https://codeclimate.com/github/felix-hilden/tekore/test_coverage
   :alt: test coverage

.. |issue_resolution| image:: http://isitmaintained.com/badge/resolution/felix-hilden/tekore.svg
   :target: https://isitmaintained.com/project/felix-hilden/tekore
   :alt: issue resolution time

.. |issues_open| image:: http://isitmaintained.com/badge/open/felix-hilden/tekore.svg
   :target: https://isitmaintained.com/project/felix-hilden/tekore
   :alt: open issues

.. _pypi: https://pypi.org/project/tekore
.. _web api: https://developer.spotify.com/documentation/web-api
.. _read the docs: https://tekore.readthedocs.io
"
301,catharsis/spotifile,C,"spotifile [![Build Status](https://travis-ci.org/catharsis/spotifile.svg?branch=master)](https://travis-ci.org/catharsis/spotifile)
=========

[FUSE](https://github.com/libfuse/libfuse) file system for [Spotify](https://www.spotify.com)

The aim of this project is to provide a synthethic file system
as an interface towards [Spotify](https://www.spotify.com). That includes, for example, being able
to check the state of your session by doing:

    $ cat /home/alofgren/spotifile/connection
    logged in

Browsing!

    $ cd /home/alofgren/spotifile/playlists/meta/That\ Handsome\ Devil
    $ ls
    lrwxrwxrwx 0 alofgren root 56 Jul 23 13:45 $=♡ -> ../../browse/tracks/spotify:track:3idPftQBuIvi0Mbpz7UUcc
    lrwxrwxrwx 0 alofgren root 56 Jul 23 13:45 70's Tuxedos -> ../../browse/tracks/spotify:track:275q2JSSckOAvPFF22ivc3
    lrwxrwxrwx 0 alofgren root 56 Jul 23 13:45 Adapt -> ../../browse/tracks/spotify:track:0FR8IORfrowXozk4AmN210
    lrwxrwxrwx 0 alofgren root 56 Jul 23 13:45 A Drink to Death -> ../../browse/tracks/spotify:track:1RcVweLcA8SjfJlJH3tR2K
    lrwxrwxrwx 0 alofgren root 56 Jul 23 13:45 Becky's New Car -> ../../browse/tracks/spotify:track:3Y22h4qDSUQtrqB1VD6VEC
    lrwxrwxrwx 0 alofgren root 56 Jul 23 13:45 Bored -> ../../browse/tracks/spotify:track:0PncakcV6gutcv4ps2MBK1
    lrwxrwxrwx 0 alofgren root 56 Jul 23 13:45 Bullet Math -> ../../browse/tracks/spotify:track:20J7iJSATwrvRQR3enxFN3
    ...

Playback!

    $ cd /home/alofgren/spotifile/playlists/music/Hank\ Williams
    $ mplayer 16\ -\ Long\ Gone\ Lonesome\ Blues.wav


and so forth.

![gif](http://i.imgur.com/jP91r79.gif)

### Basic requirements
- A Spotify *Premium* account

## Installation

### Arch Linux
A PKGBUILD for the latest released version is available in the [AUR](https://aur.archlinux.org/packages/spotifile/).

### Installing from source
To install **spotifile** from source, do the following
```Shell
$ git clone git@github.com:catharsis/spotifile.git spotifile && cd spotifile
$ autoreconf -si
$ ./configure && make && make check && make install
```
Make sure you have all the required dependencies installed, or the ./configure step will likely complain loudly.

## Quick start
The easiest way to get started with **spotifile** is to create a mountpoint somewhere (say, `mkdir /tmp/spotifile`) and run it like so `./spotifile -o username=spotify_username -o password=spotify_password /tmp/spotifile`. However, that's not recommendable since it'll leave your [Spotify](https://www.spotify.com) credentials in the open for anyone else with access to your machine. Instead, most users should opt to create a configuration file `~/.config/spotifile/spotifile.conf`, containing the credentials as such;

    [spotify]
    username=myUsername
    password=myPassword
Depending on your situation, it is likely a good idea to set as restrictive permissions on the file as possible - it does contain sensitive data after all!

    chmod 600 ~/.config/spotifile/spotifile.conf

> **NOTE**: For a full listing of supported configuration options, see [Configuration options](#configuration-options).

Now, you can leave out the credentials from the command line;

    ./spotifile /tmp/spotifile

If everything goes as expected, you should now be able to `cd` to `/tmp/spotifile`, and check your connection status like this;

    $ cd /tmp/spotifile
    $ cat connection
    logged in

To unmount the **spotifile**, simply run `fusermount -u -z /tmp/spotifile`.

## Usage
Before all else, let's consider the directory structure of a running **spotifile** instance, and briefly discuss its contents:

    $ ls -AlF
    total 0
    dr-x------ 0 alofgren root 0 Aug  7 09:59 browse/
    dr-x------ 0 alofgren root 0 Aug  7 09:59 playlists/
    dr-x------ 0 alofgren root 0 Aug  7 09:59 search/
    -r--r----- 0 alofgren root 0 Aug  7 09:59 connection


In its current state, the root directory is pretty simple. It contains three directories, `browse`, `playlists` and `search` as well as a file `connection` which contains a textual description of the current state of your [Spotify](https://www.spotify.com) connection. The main entrypoint in **spotifile** to your [Spotify](https://www.spotify.com) data is through the `playlists` directory, which in turn contains two subdirectories `meta` and `music`. As you might expect, listing the contents of these directories will show you your familiar playlists. For me, that looks something like:

    $ ls -AlF playlists/meta/
    total 0
    dr-x------ 0 alofgren root 0 Aug  7 10:00 .357 String Band /
    dr-x------ 0 alofgren root 0 Aug  7 10:00 3 Inches of Blood/
    dr-x------ 0 alofgren root 0 Aug  7 10:00 Alaskan Fishermen – Alaskan Fishermen/
    dr-x------ 0 alofgren root 0 Aug  7 10:00 Antic Clay/
    dr-x------ 0 alofgren root 0 Aug  7 10:00 Arsonists/
    dr-x------ 0 alofgren root 0 Aug  7 10:00 At The Gates — Slaughter Of The Soul/
    dr-x------ 0 alofgren root 0 Aug  7 10:00 Bathory/
    dr-x------ 0 alofgren root 0 Aug  7 10:00 Behemoth/
    dr-x------ 0 alofgren root 0 Aug  7 10:00 Blandat/
    dr-x------ 0 alofgren root 0 Aug  7 10:00 Blaze Foley/
    dr-x------ 0 alofgren root 0 Aug  7 10:00 Brown Bird/
    dr-x------ 0 alofgren root 0 Aug  7 10:00 Burzum — Filosofem/
    dr-x------ 0 alofgren root 0 Aug  7 10:00 Candlemass - Epicus Doomicus Metallicus/
    # ... snip ...

For the `music` directory, which exists to make playback more convenient, each track is represented by a .wav file:

    $ ls -AlF playlists/music/Arsonists/
    total 0
    -r--r----- 0 alofgren root 0 Jun 20  2011 00 - Intro.wav
    -r--r----- 0 alofgren root 0 Jun 20  2011 01 - Backdraft.wav
    -r--r----- 0 alofgren root 0 Jun 20  2011 02 - Shit Ain’t Sweet.wav
    -r--r----- 0 alofgren root 0 Jun 20  2011 03 - Pyromaniax.wav
    # ... snip ...

For the `meta` directory, each of its subdirectories in turn contain a collection of symlinks - one for each track in the playlist - pointing to the respective `track` directories in the `browse` directory. For example:

    $ ls -AlF playlists/meta/Arsonists/
    total 0
    lrwxrwxrwx 0 alofgren root 56 Jun 20  2011 Alive -> ../../browse/tracks/spotify:track:5LEz8sfYIneF9la9icV9G0/
    lrwxrwxrwx 0 alofgren root 56 Jun 20  2011 Backdraft -> ../../browse/tracks/spotify:track:1iqvZV4BcMpV81WVJBuBTw/
    lrwxrwxrwx 0 alofgren root 56 Jun 20  2011 Blaze -> ../../browse/tracks/spotify:track:247py70aNT1jbDmnZGj3wL/
    # ... snip ...

The targets of these links are created *lazily*, meaning that they are materialized only as something referring to them is inspected by the user, such as the symlinks above. As you might've already guessed - or observed, if you've strayed from the beaten path of this guide - this means that in a newly started **spotifile** instance, the `browse` directory only contains three empty directories:

    $ tree browse
    browse
    ├── albums
    ├── artists
    └── tracks

    3 directories, 0 files

This pattern of lazy creation is repeated throughout **spotifile**, for all main ""objects"" (currently artists, albums, and tracks). Speaking of which, let's inspect one of these browse directories:

    $ $ ls -AlF browse/tracks/spotify:track:0xAyc8r3C1BNQzzDMKbOkw
    total 0
    dr-x------ 0 alofgren root 0 Aug  7 10:19 artists/
    -r--r----- 0 alofgren root 0 Aug  7 10:19 autolinked
    -r--r----- 0 alofgren root 0 Aug  7 10:19 disc
    -r--r----- 0 alofgren root 0 Aug  7 10:19 duration
    -r--r----- 0 alofgren root 0 Aug  7 10:19 index
    -r--r----- 0 alofgren root 0 Aug  7 10:19 local
    -r--r----- 0 alofgren root 0 Aug  7 10:19 name
    -r--r----- 0 alofgren root 0 Aug  7 10:19 offlinestatus
    -r--r----- 0 alofgren root 0 Aug  7 10:19 popularity
    -r--r----- 0 alofgren root 0 Aug  7 10:19 starred
    -r--r----- 0 alofgren root 0 Aug  7 10:19 track.wav

First and foremost, the name of the directory is a [URI](https://en.wikipedia.org/wiki/Uniform_resource_identifier), which uniquely identifies the resource the directory contains. If you've ever shared tracks with other [Spotify](https://www.spotify.com) users, you've likely seen one before. Most of the files in the directory are (or should be) self-explanatory. The `duration` file, for example, contains the number of milliseconds the track lasts, and the contents of the `starred` track indicate whether the track is ""starred"" or not.

The `track.wav` file is the actual music (if it's a music track we're looking at, and not an audiobook, or something), and should be playable by most of the music players on your system.

The `artists` directory contains links to all the artists performing on this track:

    ls -AlF browse/tracks/spotify:track:0xAyc8r3C1BNQzzDMKbOkw/artists
    total 0
    lrwxrwxrwx 0 alofgren root 54 Aug  7 10:28 Arsonists -> ../../../artists/spotify:artist:4VQ9fD75w7JlKZDIZKtpdf/

Looking inside of that directory, we see more information on the artist:

    ls -AlF browse/tracks/spotify:track:0xAyc8r3C1BNQzzDMKbOkw/artists/Arsonists/
    total 0
    dr-x------ 0 alofgren root 0 Aug  7 10:28 albums/
    dr-x------ 0 alofgren root 0 Aug  7 10:28 portraits/
    -r--r----- 0 alofgren root 0 Aug  7 10:28 biography
    -r--r----- 0 alofgren root 0 Aug  7 10:28 name

As mentioned earlier, the root directory contains a `search` directory. Unsuprisingly, this directory can be used to perform searches. A search is initiated by creating a new directory inside the `search` directory, like so:

    mkdir search/Trogdor

> **NOTE**: `search` is still in a somewhat experimental state, which is why it is a bit more rudimentary in its implementation than the `browse` and `playlists` directories.

As you might have guessed, the name of the created directory also acts as the query. The created directory will asynchronously be populated with the results for the query:

    ls search/Trogdor/
    The Bearded Bard - Trogdor The Burninator.wav

Currently, a query is hard limited to 100 search results. It is also only possible to search for tracks, at the moment.

And that's the whole tour for now!
## Configuration options
The table below describes all currently supported configuration options. These options should be specified in a file `~/.config/spotifile/spotifile.conf`. All configuration options are also possible to pass as command line arguments (see `spotifile --help` for details).

|Section|Option|Description|
|------|-----|-----|
|spotify|username|Your spotify username|
|spotify|password|Your spotify password|
|spotify|bitrate_preset|Your preferred bitrate, value should be one of 96kbps, 160kbps, 320kbps|
|spotifile|mountpoint|Default mountpoint|
### Example configuration file
    [spotify]
    username=catharsis
    password=p@a$$w0rd
    bitrate_preset=320kbps

    [spotifile]
    mountpoint=/home/alofgren/spotifile


## Contributing
User interaction & engagement is thoroughly encouraged! **spotifile** is still in active development and your feedback is very likely to impact the future direction of the project.

Please report issues, feature requests and general feedback in the GitHub issue tracker. Bug requests should preferrably include as detailed steps to reproduce as you can manage (for extra credit, try to find a minimal test case that reproduces the bug). Please also include the output from `spotifile -d <mountpoint>` when reporting bugs, as it makes tracking them down that much easier.

Code contributions are of course very welcome, but I'd appreciate it if you'd go through the trouble of opening an issue or shoot me an e-mail before you start hacking so that we may discuss the change before any code is written. Needless to say, this doesn't necessarily apply to trivial fixes (like typo corrections) or obvious bug fixes (like segfaults). If you have a patch that you think would be neat to include, either open a pull request on GitHub, or send me a patch-mail directly.

## Oh dear, why?
For fun, mostly. But also because I've been looking for a media playing solution that is both scriptable and ties into my otherwise somewhat minimalistic desktop environment nicely. I think this approach is not as crazy as it might initially sound for those purposes. It's worth a shot at least, yes?

## dependencies
> * libspotify
> * fuse >= 2.6
> * autotools
> * GLib2
"
302,fahimk/SpotifyArtists,Java,
303,pimoroni/pidi-spotify,Python,"# PiDi Spotify
## Pirate Display: Spotify Edition (Very, very beta)

This program has one mission: hook Raspotify to display track information and album art on a Pirate Audio board's LCD display

## Beta Notice

Right now this software is very, very beta and the method for installing/running it is expected to change very drastically.

Don't follow these instructions unless you're prepared:

* for things to break horribly in future
* to have to uninstall everything (potentially a new Pi OS image) and reinstall again to get the fixed version

*DO* follow these instructions if:

* You like to live on the bleeding edge
* You wanna see this awesomeness in action
* You'd like to contribute to how this software shapes up, find bugs and help me make it easier for future users to install and use

Note: PiDi Spotify and Mopidy cannot co-exist, if you're using Mopidy make sure you shut it down before trying this:

```
sudo systemctl stop mopidy
```

## Installing


### Raspotify

You've got Raspotify set up, right? Yes? No? What do you mean no? Why are you even here? Go and install Raspotify and come back when you're ready!

### Your Spotify CLIENT_ID and CLIENT_SECRET

Go to https://developer.spotify.com/dashboard and set up a new app. Grab your Client ID and Secret and keep them handy.

Remember your Client ID and Client Secret, you will need to export these into environment variables like so before running PiDi Spotify:

```
export SPOTIPY_CLIENT_ID=""YOUR CLIENT ID""
export SPOTIPY_CLIENT_SECRET=""YOUR CLIENT SECRET""
```

### PiDi Spotify

Enable SPI on your Raspberry Pi:

```
sudo raspi-config nonint do_spi 0
```

Install PiDi Spotify using git, best stick it in `/home/pi` so we're working from a common path for now:

```
cd /home/pi
git clone https://github.com/pimoroni/pidi-spotify
cd pidi-spotify
sudo apt-get install python3-setuptools python3-dev python3-pip libjpeg-dev libatlas-base-dev
pip3 install numpy spidev RPi.GPIO
sudo python3 setup.py install
```

Now edit Raspotify's config file:

```
sudo nano /etc/default/raspotify
```

You need to add `--onevent 'pidi_spotify --hook'` to the `OPTIONS=` section. My options look like this, but yours might vary:

```
OPTIONS=""--device hw:1,0 --onevent 'pidi_spotify --hook'""
```

Now, re-start Raspotify so it knows to use the hook:

```
sudo systemctl restart raspotify
```

Finally run PiDi Spotify so Raspotify can talk to it:

```
export SPOTIPY_CLIENT_ID=""YOUR CLIENT ID""
export SPOTIPY_CLIENT_SECRET=""YOUR CLIENT SECRET""
pidi_spotify
```

## Running on boot

### Crontab (eh, it works)

You can copy `start.sh` to `/home/pi`, edit it and add it to crontab using `crontab -e` and adding the line `@reboot /home/pi/start.sh`. Don't check your Client ID and Secret into GitHub!

### Systemd (better)

Edit `/etc/default/pidi-spotify` and set `client-id` and `client-secret` like so:

```
client-id=your client id
client-secret=your client secret
```

Then copy the systemd service into place and enable it:

```
sudo cp pidi-spotify.service /etc/systemd/system/
sudo systemctl enable pidi-spotify
```
"
304,piyx/YoutubeToSpotify,Python,"# YoutubeToSpotify
A simple script to add all songs from youtube playlist to spotify playlist.

## Example
![](imgs/examplerun.gif)

## What's different in version 2?
```
Faster: Uses Youtube API to get song info instead of selenium.
Convenient: No need to refresh token after every hour.
Reliable: Adds 85-95% of the songs from popular youtube playlists.
```

## Note
`Works only for public youtube playlists.`

## Stats
`Added 142 songs to spotify playlist out of 150 songs from youtube playlist`

## Setup
1.Create an app: https://developer.spotify.com/dashboard/applications

![](imgs/setup.png)

2.Copy the Client id and client secret

![](imgs/copy.png)

3.Set redirect uri to http://localhost:8888/callback
![](imgs/redirecturi.png)

### Get youtube API key  
[CLICK HERE TO SEE HOW TO CREATE YOUTUBE API KEY](getkey.md)



### Setting Environment Variables Mac and Linux

1. Rename the file `.env.sample` to `.env`

2. Edit the file by adding your credentials

3. Run the following command to set your environment variable `source .env`


### Setting Environment Variables (Windows)
```
set SPOTIFY_USER_ID <your_user_id>  
set SPOTIFY_CLIENT_ID <your_client_id>  
set SPOTIFY_CLIENT_SECRET <your_client_secret>  
set SPOTIFY_REDIRECT_URI 'http://localhost:8888/callback'  
set YOUTUBE_API_KEY <your_youtube_api_key> 
```

## Usage
`$ python main.py`


## Output
```
Enter youtube playlist id: PLgzTt0k8mXzEpH7-dOCHqRZOsakqXmzmG
Enter a name for your spotify playlist: youtube_chill_songs   

The Chainsmokers - Takeaway was added to playlist.
KIRBY-Don't Leave Your Girl was not found!
Lauv - There's No Way was added to playlist.
.
.
.
Usher - Crash was added to playlist.
```

## Example

![](imgs/playlist.png)

## Result
<img src=""imgs/playlistphone.jpg"" width=""49.5%""> <img src=""imgs/playlistsongs.jpg"" width=""49.5%"">


"
305,SwagLyrics/SwSpotify,Python,"# SwSpotify

[![Discord Server](https://badgen.net/badge/discord/join%20chat/7289DA?icon=discord)](https://discord.gg/DSUZGK4)
[![Test](https://github.com/SwagLyrics/SwSpotify/actions/workflows/tests.yml/badge.svg)](https://github.com/SwagLyrics/SwSpotify/actions/workflows/tests.yml)
[![codecov](https://codecov.io/gh/SwagLyrics/SwSpotify/branch/master/graph/badge.svg)](https://codecov.io/gh/SwagLyrics/SwSpotify)
![PyPI](https://img.shields.io/pypi/v/swspotify.svg)
[![Downloads](https://pepy.tech/badge/swspotify)](https://pepy.tech/project/swspotify)

SwSpotify is a Python library to get the song and artist of the currently playing song from the Spotify application faster and without using the API. It works on Windows, Linux, macOS and even the Spotify Web Player! 🥳

In order to add support for the Spotify Web Player, the [SwagLyrics Chrome Extension](https://chrome.google.com/webstore/detail/swaglyrics-for-spotify/miopldoofdhmipepmnclnoangcdffmlk) needs to be installed. We have plans to extend this for other browsers as well.

If you're a developer using SwSpotify, you can direct your end users to install the extension to automatically make your application work with the Spotify Web Player. The source of the Chrome Extension is open sourced at https://github.com/SwagLyrics/SwagLyrics-Chrome-Extension.

The original repository was [spotilib](https://github.com/XanderMJ/spotilib) which worked just for Windows and hasn't been updated since a long while when it broke on account of Spotify updating their application.

Originally made for use in [SwagLyrics for Spotify](https://github.com/SwagLyrics/SwagLyrics-For-Spotify).

## Installation

Requires Python3. Use pip or pip3 depending on your installation. You might want to use the `--user` flag on Linux to
avoid using pip as root.

```shell
pip install SwSpotify
```

For linux you need `dbus` which is usually pre-installed.

## Usage

Use it in your project by importing it as:

```py
from SwSpotify import spotify
```

Then you can access the song and artist as:

```py
>>> spotify.song()
'Hello'
>>> spotify.artist()
'Adele'
```

Since mostly song and artist are used in conjunction, there is a `current()` method as well.

```py
>>> spotify.current()
('Hello', 'Adele')
```

This allows you to access song and artist by tuple unpacking as:

```py
>>> song, artist = spotify.current()
```

A `SpotifyNotRunning` Exception is raised if Spotify is closed or paused. `SpotifyClosed` and `SpotifyPaused` inherit from `SpotifyNotRunning`, meaning that you can catch both at the same time:

```py
try:
    title, artist = spotify.current()
except SpotifyNotRunning as e:
    print(e)
else:
    print(f""{title} - {artist}"")
```

In case Spotify is closed or paused, that will automatically be reflected in the value of `e`.

For finer control you can catch `SpotifyClosed` and `SpotifyPaused` separately.

## Compiling SwSpotify for Development

- Clone the repo by `git clone https://github.com/SwagLyrics/SwSpotify.git` or use ssh.
- `cd` into the cloned repo.
- `pip install -e .` the -e flag installs it locally in editable mode.

## Contributing

Sure, improvements/fixes/issues everything is welcome :)
"
306,2Ra66it/updater-for-spotify,Kotlin,"![](https://github.com/2Ra66it/updater-for-spotify/blob/master/app/src/main/res/mipmap-xxhdpi/ic_launcher.png)
## Updater For Spotify 
> Updater for Spotify and Spotify Beta.

<a target=""_blank"" href=""https://www.paypal.me/2Ra66it"" title=""Donate using PayPal""><img src=""https://img.shields.io/badge/paypal-donate-yellow.svg"" /></a>

Updater For Spotify allows you to download the latest version of Spotify and Spotify Beta.

## Download latest version Updater For Spotify

<a href=""https://f-droid.org/packages/ru.ra66it.updaterforspotify/"" target=""_blank"">
<img src=""https://f-droid.org/badge/get-it-on.png"" alt=""Get it on F-Droid"" height=""80""/></a>

or via the [Release section](https://github.com/2Ra66it/updater-for-spotify/releases)

## Screenshots

<img src=""https://github.com/2Ra66it/updater-for-spotify/raw/master/screenshots/Screenshot_1520452854.png"" width=""270""> <img src=""https://github.com/2Ra66it/updater-for-spotify/raw/master/screenshots/Screenshot_1508176076.png"" width=""270""> <img src=""https://github.com/2Ra66it/updater-for-spotify/raw/master/screenshots/Screenshot_1552656858.png"" width=""270"">

## Architecture
MVVM

## Libraries
* [Dagger 2](https://github.com/google/dagger)
* [Kotlin Coroutines](https://github.com/Kotlin/kotlinx.coroutines)
* [Kotlin Coroutines Adapter](https://github.com/JakeWharton/retrofit2-kotlin-coroutines-adapter)
* [OkHttp](https://github.com/square/okhttp)
* [Retrofit 2](https://github.com/square/retrofit)
* [ViewModel and LiveData](https://developer.android.com/topic/libraries/architecture/)

# License

	MIT License

	Copyright (c) 2018 2Ra66it

	Permission is hereby granted, free of charge, to any person obtaining a copy
	of this software and associated documentation files (the ""Software""), to deal
	in the Software without restriction, including without limitation the rights
	to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
	copies of the Software, and to permit persons to whom the Software is
	furnished to do so, subject to the following conditions:

	The above copyright notice and this permission notice shall be included in all
	copies or substantial portions of the Software.

	THE SOFTWARE IS PROVIDED ""AS IS"", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
	IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
	FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
	AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
	LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
	OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
	SOFTWARE.
"
307,X-Gorn/Spotify-Loader,Python,"## Spotify-Loader (Bot)
---

Telegram bot to upload spotify playlist/artist/album/track music file to telegram.

### Features:

- Upload Spotify Playlist/Artist/Album/Track as ZIP (Zipped Folder)
- Upload Spotify Playlist/Artist/Album/Track as Music (Uploaded One By One)

### Commands:

- `/settings` : Settings for more features. only avalable if you've filled MONGO_DB_URL
- `/s` or `/search` : Search music and download. example: `/s Justin Bieber - Stay`
- `/help` : Show help message 
- `/start` : Show start message 

## Telegram Support:

[![Channel](https://img.shields.io/badge/TG-Channel-30302f?style=flat&logo=telegram)](https://t.me/xTeamBots)
[![Group](https://img.shields.io/badge/TG-Group-30302f?style=flat&logo=telegram)](https://t.me/xTeamBotsSupport)

## Credits, and Thanks to

* [Dan Tès](https://t.me/haskell) for his [Pyrogram Library](https://github.com/pyrogram/pyrogram)
* [SpotDL Team](https://github.com/spotDL) for their [SpotDL](https://github.com/spotDL/spotify-downloader)

#### LICENSE
- GPLv3"
308,marcdjulien/spotify-terminal,Python,"# Spotify Terminal
Terminal program to play/control music via Spotify. Some features require a Spotify Premium account.

![](README_IMG.png)

# Install
Requires Python 3. Older versions can be manually installed for Python 2 (See releases: https://github.com/marcdjulien/spotify-terminal/releases)
```
pip install spotify-terminal
```
Or clone/download this repository and run:
```
python setup.py install 
```

This application uses Unicurse: https://pypi.org/project/UniCurses
(A version of this already comes with the checkout)


# Usage
Execute the following command to run the program:
```
spotify-terminal.py [-u username]
```
Optional: ```username``` is either the email associated with your Spotify account or the user id.

# ? Search
By typing ```?``` you can begin a search..

# : Commands
By typing ```:``` you can enter commands. The following is a list of all commands:

```search [query]``` | Search for an Artist, Album or Song.

```find [index] [query]``` | Find an entry in the currently list that contains *query*. The UI will automatically go to the *index* found entry.

```volume [0-100]``` | Set the volume.

```play``` | Start playing.

```pause``` | Pause the player.

```repeat [off|context|track]``` | Set the repeat mode.

```shuffle [True|False]``` | Set the shuffle mode.

```exit``` | Exit the application.

# Other Tips and Tricks
```TAB``` while on an artist's page to toggle between their main page and a list of all of their tracks. This is useful if you want to listen to all tracks by an artist within the same context.

```/``` is a shortcut to the ```find``` command. You can also type ```n``` or ```p``` to find a next or previous entry (similar to vim).

```:q``` to exit.

```Backspace``` to cycle through previous track listings.

```Shift + S``` on any track to immediately go to the album page.

```Shift + D``` on any track to immediately go to the artist page.

```Shift + |``` to immediately go to the context of the currently playing song.

```Shift + X``` to immediately go to the album page of the currently playing song.

```Shift + C``` to immediately go to the artist page of the currently playing song.

```Shift + R``` to re-sync the player.

```Shift + >``` to play the next song.

```Shift + <``` to play the previous song.

```Shift + W``` to see list of your devices.

```Shift + 0-9``` to set to set the volume. 1...0 for volume 10...100.

```Shift + ` ``` to mute.

```Shift + P ``` to add a song to a playlist.

```Shift + O ``` to create a new playlist.

```DELETE``` to delete a playlist or song from a playlist.

# OS Compatibility
This has only been tested on Linux and Windows with a Spotify Premium account. Briefly on Mac. 

32-bit Python only.

Feel free to submit pull requests or tickets for issues.
"
309,nahojkap/jahspotify,Java,"===============================================================================
Jah'Spotify Project
===============================================================================

## Introduction

Jah'Spotify is a Java wrapper built on top of the Spotify native APIs (libspotify) exposed both as an HTML5 UI and a JSON REST based API

Currently supports:

* retrieving library (all user playlists/folders)
* retrieve a playlist
* retrieve a folder (including/excluding sub-folders and playlists)
* retrieve an album
* retrieve a track
* retrieve an image
* add tracks to a queue (single queue currently supported)
* play tracks
* pause/skip functions
* dynamic playlist using echonest apis
* basic historical track list view
* very basic android app for remote control
* JSON reset based API
* web-ui based on JQuery Mobile

In addition, all the above functions are accessible over a JSON based RESTful API (provided by the services and web
modules).

Note: Currently, JahSpotify relies on existing playlists created from Spotify - there is currently no option to add
playlists/folders using the API or UI - it is being worked on ;)

## To build

Jah'Spotify supports the Linux and Windows versions of libspotify (see below for more details on building on Windows).

### Prerequisites

The following prerequisites are required in order to build Jah'Spotify

* libspotify
* Spotify API key
* OpenAL

### Checking out the sources

To build the sources first check them out from git

    git clone git://github.com/johanlindquist/jahspotify.git
    cd jahspotify

### Preparing Spotify API key and libraries

Next, you need to download and install libspotify & request an API key from Spotify.  This can be done
on the [libspotify](https://developer.spotify.com/technologies/libspotify/) website or via your OS package provider (Homebrew for OS X for example)

Generate the key and download the C code version of it.  Place this in a file called AppKey.h in the

    native/src/main/native/inc

directory.  You may want to place some #ifndef APPKEY statements in this to prevent linking problems.

### Performing the build

Ensure that your JAVA_HOME environment variable points to the JDK (v1.6.x) you want to use.

    export JAVA_HOME=<path/to/your/jdk>

Finally, execute the Maven build

    mvn clean install

### Building on Windows

#### Before compiling

1. Download MinGW and put the bin folder in your PATH.
2. Download the OpenAL SDK from and copy the include folder to the MinGW include folder and rename it to AL
3. The native pom.xml has a reference to a local LibSpotify folder. Change this to your own Spotify folder. You'll get an error that the api.h file can't be found if you don't.
4. Add a reference to your OpenAL installation folder

You can find the OpenAL SDK at:

    http://connect.creativelabs.com/developer/Wiki/OpenAL%20SDK%20for%20Windows.aspx

Next, define the following environment properties:

    JAHSPOTIFY_SPOTIFY_DIR=c:\path\to\spotify\installation\LibSpotify\
    JAHSPOTIFY_OPENAL_DIR=c:\path\to\openal\installation\OpenAL 1.1 SDK\

#### Performing the build

To build, simply execute maven build

    mvn clean install

### Building on OX X

Depending on your

## Running

Jah'Spotity will run both from within Maven (using Jetty) and in a web container such as Tomcat.

### Prerequisites

Jah'Spotify uses MongoDB for storing the historical statistics and tracks played.  This can be downloaded from [MongoDB](http://www.mongodb.org/downloads).  As long as MongoDB is running when Jah'Spotify is started (and the connection does not require credentials), it should work.

### Configuration

TDB

### Running on Windows

For windows, you will need to download a few more dependencies:

- pthreads (http://sources.redhat.com/pthreads-win32/). pthreadGC2.dll needs to be in your path.
- Install the OpenAL SDK for Windows

### Using Maven/Jetty

To run up the Jah'Spotify with Maven/Jetty

    mvn jetty:run -Djahspotify.spotify.username=<your username> -Djahspotify.spotify.password=<your password>

NOTE: The username and password can also be specified in your Maven settings.xml

### Using Tomcat

TBD

#### Configuration

TBD

## UI

To access the HTML5 UI of JahSpotify, simply point your browser to:

[http://localhost:8080/jahspotify/index.html](http://localhost:8080/jahspotify/index.html)

## REST API

Once running, Jah'Spotify exposes it's  RESTful API

[http://localhost:8080/jahspotify/system/status](http://localhost:8080/jahspotify/system/status)

All media can be retrieved using the Media Controller URL

    http://localhost:8080/jahspotify/media/<URI>

Where the URI is any of the URIs specified below, in the more specialized controllers:

### URLs

__Library retrieval__

[http://localhost:8080/jahspotify/library/](http://localhost:8080/jahspotify/library/)

__Folder retrieval__

[http://localhost:8080/jahspotify/folder/jahspotify:folder:9594c66fa67e43ca](http://localhost:8080/jahspotify/folder/jahspotify:folder:9594c66fa67e43ca)

__Playlist retrieval__

[http://localhost:8080/jahspotify/playlist/spotify:user:dummy-user:playlist:0s8KIfDTmZz5zupnkqF6FO](http://localhost:8080/jahspotify/playlist/spotify:user:dummy-user:playlist:0s8KIfDTmZz5zupnkqF6FO)

__Album retrieval__

[http://localhost:8080/jahspotify/album/spotify:album:3PogVmhNucYNfyywZvTd7F](http://localhost:8080/jahspotify/album/spotify:album:3PogVmhNucYNfyywZvTd7F)

__Artist retrieval__

[http://localhost:8080/jahspotify/artist/spotify:artist:7dGJo4pcD2V6oG8kP0tJRR](http://localhost:8080/jahspotify/artist/spotify:artist:7dGJo4pcD2V6oG8kP0tJRR)

__Track retrieval__

[http://localhost:8080/jahspotify/track/spotify:track:7mliwEVqxIuwLmHdTXlBrx](http://localhost:8080/jahspotify/track/spotify:track:7mliwEVqxIuwLmHdTXlBrx)

__Image retrieval__

[http://localhost:8080/jahspotify/image/spotify:image:e99e74261d120029fecfde36ab1c07a0eb99e54d](http://localhost:8080/jahspotify/image/spotify:image:e99e74261d120029fecfde36ab1c07a0eb99e54d)

__Adding a track to the play queue__

[http://localhost:8080/jahspotify/queue/jahspotify:queue:default/add/spotify:track:2eEUnqeLUjxkefHrIgqgAd](http://localhost:8080/jahspotify/queue/jahspotify:queue:default/add/spotify:track:2eEUnqeLUjxkefHrIgqgAd)

__Retrieving play queue__

[http://localhost:8080/jahspotify/queue/jahspotify:queue:default](http://localhost:8080/jahspotify/queue/jahspotify:queue:default)

__Searching__

[http://localhost:8080/jahspotify/search/?query=alika&numTracks=1](http://localhost:8080/jahspotify/search/?query=alika&numTracks=1)

#### While playing:

__Skip to next track in queue__

[http://localhost:8080/jahspotify/player/skip](http://localhost:8080/jahspotify/player/skip)

__Pause playback__

[http://localhost:8080/jahspotify/player/pause](http://localhost:8080/jahspotify/player/pause)

__Resume play__

[http://localhost:8080/jahspotify/player/resume](http://localhost:8080/jahspotify/player/resume)

__Stop play__

[http://localhost:8080/jahspotify/player/stop](http://localhost:8080/jahspotify/player/stop)

__Play__

[http://localhost:8080/jahspotify/player/play](http://localhost:8080/jahspotify/player/play)

__Seek__

[http://localhost:8080/jahspotify/player/seek?offset=43](http://localhost:8080/jahspotify/player/seek?offset=43)

__Volume Up__

[http://localhost:8080/jahspotify/player/volume-up](http://localhost:8080/jahspotify/player/volume-up)

__Volume Down__

[http://localhost:8080/jahspotify/player/volume-down](http://localhost:8080/jahspotify/player/volume-down)

There are other URLs - please examine the web module for them.

## Developing

### Modules

* android

  provides a simple app for browsing playlists and queueing tracks

* api

  provides the basic operations for interacting with Jah'Spotify (and in turn libspotify)

* native

  contains all native & JNI code interacting with libspotify

* native-jar

  contains wrapper code to load libjahspotify from a jar

* services

  provides all Jah'Spotify Spring services

* web

  provides the RESTful API (json based)

* web-client

  provides java client for interacting with the RESTful API

* web-common

  provides the java beans which are serialized over the RESTful API

* storage

  provides basic storage implementations for caching media objects (tracks/images/etc)

* executable-war

  provides a single, executable Jah'Spotify war file


## Discussions and other:

For now, there is nothing concrete setup but try the issues page on github, contacting me on github.  Also found at times
on freenode - #jahspotify.  Or try Twitter [@nahojkap](https://twitter.com/nahojkap)

## Licensing

All Jah'Spotify code is released under the Apache 2.0 license

## Contributors

Niels vd Weem

Thanks!

## Sponsors

### YourKit

Yourkit is kindly supporting open source projects with its full-featured Java Profiler.

YourKit, LLC is the creator of innovative and intelligent tools for profiling Java and .NET applications.

Take a look at YourKit's leading software products: <a href=""http://www.yourkit.com/java/profiler/index.jsp"">YourKit Java Profiler</a> and <a href=""http://www.yourkit.com/.net/profiler/index.jsp"">YourKit .NET Profiler</a>.

![YourKit](yourkit.png)

"
310,Vetrivel-VP/spotify-clone,JavaScript,"# Getting Started with Create React App

This project was bootstrapped with [Create React App](https://github.com/facebook/create-react-app).

## Available Scripts

In the project directory, you can run:

### `npm start`

Runs the app in the development mode.\
Open [http://localhost:3000](http://localhost:3000) to view it in the browser.

The page will reload if you make edits.\
You will also see any lint errors in the console.

### `npm test`

Launches the test runner in the interactive watch mode.\
See the section about [running tests](https://facebook.github.io/create-react-app/docs/running-tests) for more information.

### `npm run build`

Builds the app for production to the `build` folder.\
It correctly bundles React in production mode and optimizes the build for the best performance.

The build is minified and the filenames include the hashes.\
Your app is ready to be deployed!

See the section about [deployment](https://facebook.github.io/create-react-app/docs/deployment) for more information.

### `npm run eject`

**Note: this is a one-way operation. Once you `eject`, you can’t go back!**

If you aren’t satisfied with the build tool and configuration choices, you can `eject` at any time. This command will remove the single build dependency from your project.

Instead, it will copy all the configuration files and the transitive dependencies (webpack, Babel, ESLint, etc) right into your project so you have full control over them. All of the commands except `eject` will still work, but they will point to the copied scripts so you can tweak them. At this point you’re on your own.

You don’t have to ever use `eject`. The curated feature set is suitable for small and middle deployments, and you shouldn’t feel obligated to use this feature. However we understand that this tool wouldn’t be useful if you couldn’t customize it when you are ready for it.

## Learn More

You can learn more in the [Create React App documentation](https://facebook.github.io/create-react-app/docs/getting-started).

To learn React, check out the [React documentation](https://reactjs.org/).

### Code Splitting

This section has moved here: [https://facebook.github.io/create-react-app/docs/code-splitting](https://facebook.github.io/create-react-app/docs/code-splitting)

### Analyzing the Bundle Size

This section has moved here: [https://facebook.github.io/create-react-app/docs/analyzing-the-bundle-size](https://facebook.github.io/create-react-app/docs/analyzing-the-bundle-size)

### Making a Progressive Web App

This section has moved here: [https://facebook.github.io/create-react-app/docs/making-a-progressive-web-app](https://facebook.github.io/create-react-app/docs/making-a-progressive-web-app)

### Advanced Configuration

This section has moved here: [https://facebook.github.io/create-react-app/docs/advanced-configuration](https://facebook.github.io/create-react-app/docs/advanced-configuration)

### Deployment

This section has moved here: [https://facebook.github.io/create-react-app/docs/deployment](https://facebook.github.io/create-react-app/docs/deployment)

### `npm run build` fails to minify

This section has moved here: [https://facebook.github.io/create-react-app/docs/troubleshooting#npm-run-build-fails-to-minify](https://facebook.github.io/create-react-app/docs/troubleshooting#npm-run-build-fails-to-minify)
"
311,BelkaDev/Spotify-Headless,JavaScript,"## Spotify-Headless
A CLI tool using [puppeteer](https://github.com/puppeteer/puppeteer) to intercept your own validated spotify OAuth token alongside of the session cookies, then reinject them to mimic an authorized, user-like traffic.
#### How it works
1. Establish a session by authenticating to Spotify within a headless browser. (Puppeteer)
2. Export the session cookies and store them locally, specifically the refresh token that will refresh the JWT every time it expires. (valid for one year)
3. The access token allows you to perform special actions on behalf of a user.

#### Installation and configuration
```bash
git clone https://github.com/BelkaDev/Spotify-Headless ~/Spotify-Headless
cd ~/Spotify-Headless && npm install
```
To provide your credentials you need to set them as environement variables within your bashrc (or your default shell rc) <br>
``` bash
export SPOTIFY_USER=""""
export SPOTIFY_PWD=""""
```
#### Running
Manually grab your access token: `node token.js` <br>
Other commands are found under `/lib` folder, they are examples of commands from the API with extra features (search, play/resume etc..)

#### Use case
The sole purpose is to combine aliases into automated and complex tasks, this can offer a lot of flexibility as shown below:
###### <u> example 1 (Basic):  </u>: Browse Spotify catalog, filter items, feed STDOUT to queue.
![example 1](static/basic.png)
###### <u> example 2 (Advanced) </u>: Store to a local playlist, shuffle songs, set a timer, transfer ongoing stream to your mobile device.
![example 2](static/advanced.png)
###### <u> example 3 (Expert):  </u>: Convert Youtube playlist to a Spotify playlist.
![example 1](static/expert.png)


#### Notes:
* `play.js` reads input from stdin only, it works in pair with the search command.
* `transfer.js` takes `phone/mobile`,`computer/pc`,`browser` as parameters, if the suggested device isn't opened, it sends the signal to the actual active device.
* `search.js` will lookup for tracks by default, unlike other items (albums,playlists etc..), tracks can be stacked and enqueued at once, more details [here](https://developer.spotify.com/documentation/web-api/reference/player/start-a-users-playback/). It takes `album`,`artist`,`playlist` as arguments.
* snippets used in the examples can be found [here](https://github.com/BelkaDev/dotfiles/blob/master/.zshrc)
 
#### Todo:
* Allow creating online playlists.
* Refactor/clean code
* <strike> Catch random/annoying error messages. </strike>
"
312,Sergej-Popov/SpotifyControls,TypeScript,"# Spotify & Amazon Music Controls
This extension adds hotkeys, notifications and playback controls for Spotify and Amazon Music Web App, now you can control music from anywhere"
313,AsTimeGoesBy111/Spotify-Music-Data-Analysis,Python,"
## Project Introduction


With the rise of Spotify, iTune, Youtube, etc, streaming services have contributed majority of music industry revenues. And understanding what makes streaming music popular could hugely impact decision-making for music business.

In this project, we conducted data mining for 200000 tracks extracted by Spotify API, in order to analyze the trend of music industry development, and produce a predictive model for track popularity.


<span style=""color:red""></span>

## Project Goals

**Analyze the trend of music development over past 20 years.** 

  For example:
   
 ⋅⋅⋅*Music has generally been louder than before?*
   
 ⋅⋅⋅*What novel types of music have evolved popular in the past five years?*


**Establish models to predict track popularity by machine learning algorithms.**




## Data Extraction and Transformation

**Spotify has provided amazing API resources:**

   [Spotify API link](https://developer.spotify.com/web-api/track-endpoints/)

**We randomly extracted data for 10000 tracks per year for the past 20 years.**
```python
url = 'https://api.spotify.com/v1/search?q=year:'+ keywords +'&type=' + search_type +'&offset='+ off +'&limit=' + lim
requests.get(url).json()
```

**Then acquire audio feature data by track_id; Access_token is required for this.**

```python
url = 'https://api.spotify.com/v1/audio-features?ids=' + track_ids
requests.get(url, headers={""Authorization"": access_token})
```

**Get items from complicated nested list**
For example,
```python
str = j['tracks']['items']['popularity']
```


**Vectorization of text (e.g. genres or name) by bag-of-words model.**

```python
vectorizer = CountVectorizer(analyzer='word',max_features=100)
WordVec = vectorizer.fit_transform(dicname[name]).toarray().tolist()
```

**Then merge into Pandas Dataframe and start feature engineering.**

Examples of feature engineering:
```python
## Remove NaN
df = df.dropna()

## Convert categorical features into numeric
df['explicit'] = df['explicit'].map( {True: 1, False: 0} ).astype(int) 

## New 'year' feature 
df['year'] = [x.split('-')[0] for x in df['album_release_date']]

## Simplify genre names by choosing the most common word
def reduce_genres(gen):
    genre = re.sub(""[^a-zA-Z0-9]"","" "",gen).lower().split()
    ...
    mode1 = str(stats.mode(genre)).split('[')[1].split(']')[0]
    return mode1
    
```

**Final cleaned data include:**

⋅⋅⋅1. General numeric features *(e.g. release time, track popularity, artist popularity)*

⋅⋅⋅2. Numeric physical properties *(e.g. loudness, duration)*

⋅⋅⋅3. Vectorized Non-numeric ones *(e.g. genres, album name, artist name)*

**Critical features include:**

⋅⋅⋅A. <span style=""color:red"">Track Popularity</span>
   
   Major indicator of song popularity and later used for correlation and data training in this project. It reflects ""hotness""    by today's music listeners, calculated by total number of plays.

⋅⋅⋅B. <span style=""color:red"">Year</span>
   
   Used extensively for time-series analysis to demonstrate the trend of music evolution in the project.




## Exploratory Data Analysis and Data Visualization

### General trend of numeric features of songs over past 20 years

   Time-series boxplot for 16 different numeric features. (Purple lines reflect mean) 
   
   We could easily find recent tracks, album and artists are favored by today's listeners.
   
   **Loudness** and **energy** have slightly _increased_; while **valence** and **acousticness** _decreased_.
   
   **Track number** has been _lower_ in recent 10 years, indicating album is _smaller_ nowadays.
   
   
   <p align=""center"">
   <img src=""Figure/modified-boxplot-matrix.png"" width=""110%""/>
   </p>



### Popularity Analysis by Genres

**First, we define ""popular songs"" as those with track popularity score ranking at *top 20%* of all tracks.**

**_What genres of tracks are prefered by listeners today?_**
   
Barplot for number of different genres of tracks, either popular or unpopular.

Easily we can see `pop` music dominate music industry; followed by `rock`, `country`, `metal`, `hip`, etc.

These genres are produced in large quantity with certain proportion at top 20%.

Some genres have very small percentage that would become popular, like `classical`, `soul`, `punk` and `jazz`.
   
 
   <p align=""center"">
   <img src=""Figure/modified-bar-plot.png"" width=""90%""/>
   </p>
 

**_When were these popular tracks of different genres released?_**

Alluvial diagram shows proportion of popular tracks by release time for each genre of music.

We could see for popular `pop`, `rap`, `country`, `indie`, `hip`, `house`, `mexican` music, at least half come from recent five years.

For `indie`, `house` and `mexican`, almost all come from recent five years. So they appeared recently, or suddently became popular?

For `rock`, `latin`, `metal`, lots of older tracks still favored. So such music have been on decline?

   <p align=""center"">
   <img src=""Figure/year-type-popularity.png"" width=""80%""/>
   </p>


To answer the above questions, we generated year-by-year streamplot, which illustrates time-dependent trend better.

The upper panel is for only popular tracks; while lower for total tracks.

Clearly we could see `house` is brandnew genre, not exploading until 2010; followed by `indie`, which started to expand around 2005. `Mexican` music has been always there but only became popular from 2012.

For `rock`, the whole market has dramatically shrinked; while `latin` and `metal` shrinked much slowly.


   
   <p align=""center"">
   <img src=""Figure/stream-pop.png"" width=""80%""/>
   </p>

   <p align=""center"">
   <img src=""Figure/stream-total.png"" width=""80%""/>
   </p>



### Popularity Analysis by numeric features

**_Which numeric features are associated with track popularity?_**

Association between **track popularity** and each numeric feature by scatterplot.

We could see strong association for **year** and **album popularity**, which is not surprising. Also a slight association for **track number**, **artist popularity** and **loudness**. 

The remaining physical features are not associated at all.

Comparison between **album** and **artist popularity**, we could see **track popularit**y affected stronger by **album**, indicating popular artist's work could be popular or unpopular.

 
   <p align=""center"">
   <img src=""Figure/modified-scatterplot-matrix.png"" width=""100%""/>
   </p>


Scatterplot for relationship among album, artist and track popularity, in which color indicating track popularity.

We could see using album and artist alone, could predict track popularity to some extent. 
 
   <p align=""center"">
   <img src=""Figure/album-artist-track.png"" width=""70%""/>
   </p>



## Predictive Modeling by Gradient Boosting

Before machine learning step, chord diagram generated for correlation between numeric features.

We could see some strong pair correlations, such as **loudness** and **energy**, **loudness** and **acousticness**, **speechiness** and **explicit**.

   <p align=""center"">
   <img src=""Figure/corr-map.png"" width=""80%""/>
   </p>


We dropped all non-numeric features, and our final dataframe is (215868 tracks X 419 features) for data training.

Various machine learning algorithms have been tried and gradient boosting classifier by *XGBoost* show the best accuracy score. 

|  Algorithms   | CV Accu     | Test Accu    | 
| ------------- |:---------:  |  ---------:  | 
| SVM           |   0.8254    |    0.7911    |
| Random Forest |   0.8534    |    0.8379    |  
| XGBClassifier |   0.8901    |    0.8812    |

(Accu = Accuracy)

We also tuned our parameters for **XGBClassifier**, with optimal as below:

```python
clf  =  XGBClassifier(
        eval_metric = 'accuracy',
        learning_rate = 0.1,
        n_estimators = 100,
        max_depth = 3,
        subsample = 0.9,
        colsample_bytree = 0.9,
        silent = False )
 ```

**_Which features are most predictive?_**

We converted the importance-weight list into wordle.

We could see **album popularity** dominates all other features, followed by **track number**, **year** and **duration**.
```python
importance = clf.feature_importances_
```
 
   <p align=""center"">
   <img src=""Figure/wordle.png"" width=""60%""/>
   </p>
 

Since album popularity is quite similar and highly correlated to track popularity, we removed this feature and trained data again, our model still could achieve a high accuracy around 0.85.

## Summary and Discussion
Here's the insight we've learned about music trend based on big data analysis:

1.**Recent music is still largely favored**, indicating customers' music ""psychology"" leaning towards trying novel tracks. 

2.Some physical features of music with high popularity have slightly changed, including **energy/loudness** slightly increased, and **valence** slightly decreased. It'll be interesting to see if such small trend will continue.

Also, track number has been lower, indicating **smaller album** in music industry nowadays.

3.`Pop music` undoubtedly dominates the music market, in both production quantity and popularity quantity; while some other genres like `soul` and `classical` have almost zero percentage of being top 20% popular, most probably because they are minority music favored by a small population.

4.Important change: `indie` and `house` are brandnew genres and novel trend! While `rock`, which used to be prosperous, has now shrinked dramatically. 

5.There's basically NO correlation between track popularity and numeric physical features; yet, there's strong correlation among track, album and artist popularity, which is not suprising; and there's also slight correlation between track popularity and track number, which is also not surprising, as most popular songs are usually the first in the album.

6.We established a machine learning model, which could successfully predict track popularity. Ensemble methods are extremely good for analyzing multi-feature data with non-linear relationship, plus XGBoost has recently dominated data science field with extreme superiority, so we choose XGBClassifier to train our data, and achieved very excellent accuracy score for both cross-validated and test data. The best predictive feature is album popularity.

7.We are using API data, which could better reflect the most recent trend; and we vectorized text feature into numeric to strengthen our models. 

8.Unfortunately, Spotify API does NOT provide location information for users; otherwise it'll be good idea to analyze music taste difference for different states as well as across the globe.

In general, we've analyzed Spotify API data, and have discovered some very interesting trends for today's music market, and also provide a high-quality model for track popularity prediction. Hopefully this could provide some insight into today and future's music market and industry.
"
314,entriphy/Spotify-PlayCount,JavaScript,"**ARCHIVED in favor of [sp-playcount-librespot](https://github.com/evilarceus/sp-playcount-librespot). Please use that instead.**

# Spotify Playcount
Web server API to retrieve play count of all tracks in a Spotify album.

**NOTE:** Much of how this API works is mainly based on my needs and configuration (though, there is a config file included to make certain changes).

Overall, this hasn't been tested thoroughly and it is very possible that you may need to modify the script in order to fit your needs. Documentation may also be inaccurate or missing information. Submit an issue if you run into any problems.

# Requirements
* Node.js 8+
* Spotify desktop client for your operating system
* (Optional) HTTPS Certificate

# Installation
1. To install dependencies:`npm install`
2. Ensure configuration in `config.json` in project directory is correct. (see section below for what each configuration option means)
3. _**Important**_ Before launching the API, you must modify your Spotify client in order for it to connect to the main script. This process may need to be done every time the Spotify client updates or you change `config.json`.
    1. Copy the zlink.spa file from your Spotify installation directory to the project directory. The file is usually located at:
        * Windows: `%appdata%\Spotify\Apps\zlink.spa` (full path: `C:\Users\<username>\AppData\Roaming\Spotify\Apps\zlink.spa`)
        * macOS: `/Applications/Spotify.app/Contents/Resources/Apps/zlink.spa`
        * Linux: The location of this file can vary depending on your distro. Check your package manager to possibly find more info. On my Arch Linux machine, it was located at `/opt/spotify/Apps/zlink.spa`. (In the Spotify install directory, it's always located at `Apps/zlink.spa`)
    2. Run in the root of the project directory: `node spotify_zlink.js`
    3. If the command was successful, copy the file back to the directory where you copied `zlink.spa` from (it is recommended to make a backup of the old `zlink.spa` file in case something goes wrong)
4. _**Important**_ You must launch Spotify with the following arguments:
  `spotify --ignore-certificate-errors --allow-running-insecure-content`
5. Run the server: `node index.js`
6. In the Spotify client, open any album/single page. If everything went well, Spotify should connect to the server and accept requests.
    * If the album page shows an exclamation mark, check your launch arguments for Spotify and your config

# Configuration
The server can be configured in the `config.json` file.

| Option    | Description                                                                                                                                                                  | Data type |
|-----------|------------------------------------------------------------------------------------------------------------------------------------------------------------------------------|-----------|
| port      | Port on which the web and WebSocket server binds to (TODO: make these separate variables, as this can cause problems and security issues)                                                        | Integer   |
| useSecure | If true, enables https:// and wss://                                                                                                                                         | Boolean   |
| cert      | Location of https certificate file                                                                                                                                           | String    |
| key       | Location of https private key file                                                                                                                                           | String    |
| chain     | Location of https chain file                                                                                                                                                 | String    |
| endpoint  | Endpoint at which the user can send HTTP GET requests to the API                                                                                                             | String    |
| ipAddress | IP Address (preferably a LAN address) at which the Spotify client connects to. This is mainly useful if the web server and the Spotify client are on two different machines. | String    |

# Usage
Simply make a GET request to the endpoint with the query string ""albumid"" set to the ID of a Spotify album (ex. if the URL is `https://open.spotify.com/album/30X5rD2J07BzYmd3CKzZTa` or `spotify:album:30X5rD2J07BzYmd3CKzZTa`, the string is `30X5rD2J07BzYmd3CKzZTa`)

Curl example: (endpoint is /api/albumPlayCount)
```bash
$ curl https://example.com/api/albumPlayCount?albumid=30X5rD2J07BzYmd3CKzZTa
{""success"":true,""data"":[{""name"":""All My Friends"",""playcount"":1608305,""disc"":1,""number"":1,""uri"":""spotify:track:7sGTH1fber0bhncNMfNxmt""}]}
```

# Public API
~~I am currently hosting this API to the public: https://t4ils.dev:4433/api/beta/albumPlayCount~~

~~If the public API is not working correctly, please report it [here](https://github.com/evilarceus/Spotify-PlayCount/issues/11).~~

Unfortunately, due to an overwhelming amount of requests and lack of proper hardware to keep the API up, I have to shut down the public API indefinitely.
"
315,goldensunliu/graphql-spotify,JavaScript,"## GraphQL Spotify: [Spotify API](https://beta.developer.spotify.com/documentation/web-api/reference/) GraphQL Schema and Resolvers Built with [GraphQL.js](https://github.com/graphql/graphql-js)
![](https://travis-ci.org/goldensunliu/graphql-spotify.svg?branch=master)
[![npm version](https://badge.fury.io/js/graphql-spotify.svg)](https://badge.fury.io/js/graphql-spotify)

Refer to [src/schema/RootQuery.js](src/schema/RootQuery.js) for operations currently supported.

---

<!-- START doctoc generated TOC please keep comment here to allow auto update -->
<!-- DON'T EDIT THIS SECTION, INSTEAD RE-RUN doctoc TO UPDATE -->


- [Blog on Why](#blog-on-why)
- [Demo](#demo)
- [Getting started](#getting-started)
  - [Getting started with apollo-server-express](#getting-started-with-apollo-server-express)
      - [ES6](#es6)
      - [ES5](#es5)
- [Contribute](#contribute)
- [Used By](#used-by)
  - [Created By](#created-by)

<!-- END doctoc generated TOC please keep comment here to allow auto update -->
## Blog on Why

[Check out the blog](https://medium.com/@sitianliu_57680/why-i-built-a-graphql-server-for-spotify-api-4f516836e4ec) on why graphql-spotify was built.
## Demo

****[Deployed Example App Powered By GraphQL Spotify](https://graphql-spotify-example-zzajohosbz.now.sh)**** And Its [Source Code Repo](https://github.com/goldensunliu/graphql-spotify-example)

## Getting started
```javascript
import { makeSchema } from ""graphql-spotify""
let token;
//... somewhere the Spotify token is gotten from the context
const schema = makeSchema(token)
// pass the schema to your favorite server that accepts GraphQL.js Schemas
```
**Make sure the token obtained has the [correct scope](https://beta.developer.spotify.com/documentation/general/guides/scopes/), certain queries and mutations require [different scopes](https://beta.developer.spotify.com/documentation/general/guides/scopes/) from Spotify**
### Getting started with apollo-server-express
`npm install --save graphql dataloader graphql-tools isomorphic-fetch body-parser apollo-server-express express graphql-spotify`

##### ES6
```javascript
import { makeSchema } from ""graphql-spotify"";
import { graphqlExpress, graphiqlExpress } from 'apollo-server-express';
import express from 'express';
import bodyParser from 'body-parser'
// Initialize the app
const port = parseInt(process.env.PORT, 10) || 3000
const app = express();
// bodyParser is needed just for POST.
app.use(
    '/graphql',
    bodyParser.json(),
    graphqlExpress(req => {
        let token;
        //... somewhere the spotify token is gotten from the context
        const schema = makeSchema(token)
        return { schema }
    }));
// GraphiQL, a visual editor for queries
app.use('/graphiql', graphiqlExpress({ endpointURL: '/graphql' }));
app.listen(port, (err) => {
    if (err) throw err
    console.log(`> Ready on http://localhost:${port}/graphql`)
})
```
##### ES5
```javascript
const makeSchema = require(""graphql-spotify"").makeSchema;
const graphqlExpress = require('apollo-server-express').graphqlExpress;
const graphiqlExpress = require('apollo-server-express').graphiqlExpress;
const express = require('express');
const bodyParser = require('body-parser')
// Initialize the app
const port = parseInt(process.env.PORT, 10) || 3000
const app = express();
// bodyParser is needed just for POST.
app.use(
    '/graphql',
    bodyParser.json(),
    graphqlExpress(req => {
        let token;
        //... somewhere the spotify token is gotten from the context
        const schema = makeSchema(token)
        return { schema }
    }));
// GraphiQL, a visual editor for queries
app.use('/graphiql', graphiqlExpress({ endpointURL: '/graphql' }));
app.listen(port, (err) => {
    if (err) throw err
    console.log(`> Ready on http://localhost:${port}/graphql`)
})
```

## Contribute
Anyone is welcome! Take a look at [Roadmap.md](Roadmap.md) for PR ideas and file some issues!

## Used By
* [Graphql Spotify Example](https://github.com/goldensunliu/graphql-spotify-example)
* [Spotify Insight App](https://noise.sitianliu.com/login)

## Created By
[Sitian Liu](https://www.sitianliu.com/)
"
316,skuethe/MMM-Spotify,JavaScript,"# MMM-Spotify

Spotify controller for MagicMirror. Multiples accounts supported!

- [Screenshot](#screenshot)
- [Main Features](#main-features)
- [Restrictions](#restrictions)
- [Install](#install)
  1. [Module install](#1-module-install)
  2. [Setup Spotify](#2-setup-spotify)
  3. [Setup your module](#3-setup-your-module)
      - [Single account](#single-account)
      - [Multi account](#multi-account)
      - [Custom callback](#custom-callback)
  4. [Get auth](#4-get-auth)
- [Configuration](#configuration)
  - [Simple](#simple)
  - [Detail & Default](#detail--default)
  - [`onStart` feature](#onstart-feature)
- [Control with notifications](#control-with-notifications)
- [Notification send](#notification-send)
- [Credit](#credit)


## Screenshot

![default](screenshots/spotify_default.png)
![mini](screenshots/spotify_mini.png)

## Main Features

- Showing Current playback on any devices
- Playing Controllable by Notification & touch (Play, pause, next, previous, volume)
- Spotify Controllable by Notification & touch (change device, change account, search and play)
- Multiple accounts supported

## Restrictions

- This is NOT a full blown Spotify client with integrated player! If you want to use your Pi also as playback device via soundcard, have a look at [Raspotify](https://github.com/dtcooper/raspotify)
- Starting specific songs, playlists etc. is limited! This can only be done by the notifications described below but NOT via the UI / Buttons
- Some of Spotify's API calls we are using are limited to premium accounts only! If you are using a free account, you will probably run into problems at some point
- The Spotify API is rate-limited and only a limited number of clients can make requests to the API. It is recommended to use a separate Spotify app for each client to avoid rate limitations

## Install

### 0. Prevent

Do not install MagicMirror or this module as root user ! (`sudo`)

### 1. Module install

```sh
cd ~/MagicMirror/modules
git clone https://github.com/skuethe/MMM-Spotify
cd MMM-Spotify
npm install
```

### 2. Setup Spotify

You should be a premium member of Spotify

1. Go to https://developer.spotify.com
2. Navigate to **DASHBOARD** > **Create an app** (fill information as your thought)
3. Setup the app created, (**EDIT SETTINGS**)
   - Redirect URIs. : `http://localhost:8888/callback`
   - That's all you need. Just save it.
4. Now copy your **Client ID** and **Client Secret** to any memo

Hint:  
If you are running `MM²` inside an environment without a UI (Docker f.e.), you need to configure a [custom callback](#custom-callback) URL.
This custom callback URL needs to be adapted when editing the app in the Spotify developer dashboard.


### 3. Setup your module

#### Single account

```sh
cd ~/MagicMirror/modules/MMM-Spotify
cp spotify.config.json.example-single spotify.config.json
vim spotify.config.json
```

Edit the `spotify.config.json` with the editor of your choice. Modify the entries as hinted below, hen save it.

```json
[
  {
      ""USERNAME"": ""A_NAME_TO_IDENTIFY_YOUR_ACCOUNT"",
      ""CLIENT_ID"": ""PUT_YOUR_SPOTIFY_APP_CLIENT_ID"",
      ""CLIENT_SECRET"": ""PUT_YOUR_SPOTIFY_APP_CLIENT_SECRET"",
      ""TOKEN"": ""./USERNAME_token.json""
  }
]
```

#### Multi account

```sh
cd ~/MagicMirror/modules/MMM-Spotify
cp spotify.config.json.example-multi spotify.config.json
vim spotify.config.json
```

Open the `spotify.config.json` then modify it as described. You can create a configuration object for each account you want to use. Save the file.
Make sure that `TOKEN` is referencing different file names, as these files will be created.

```json
[
  {
      ""USERNAME"": ""A_NAME_TO_IDENTIFY_THE_FIRST_ACCOUNT"",
      ""CLIENT_ID"": ""PUT_SPOTIFY_APP_CLIENT_ID_OF_FIRST_ACCOUNT"",
      ""CLIENT_SECRET"": ""PUT_SPOTIFY_APP_CLIENT_SECRET_OF_FIRST_ACCOUNT"",
      ""TOKEN"": ""./FIRSTUSERNAME_token.json""
  },
  {
      ""USERNAME"": ""ANOTHER_NAME_TO_IDENTIFY_THE_SECOND_ACCOUNT"",
      ""CLIENT_ID"": ""PUT_SPOTIFY_APP_CLIENT_ID_OF_SECOND_ACCOUNT"",
      ""CLIENT_SECRET"": ""PUT_SPOTIFY_APP_CLIENT_SECRET_OF_SECOND_ACCOUNT"",
      ""TOKEN"": ""./SECONDUSERNAME_token.json""
  }
]
```

#### Custom callback

If you are running MagicMirror in an environment without UI (Docker f.e.), you need to provide a custom callback URL in your account file, which points to your devices IP address.  
This can be configured inside the `spotify.config.json` file.

An example:
- you have `MM²` running inside a docker container, which is running on your Raspberry Pi
- your Pi's local network IP is: `192.168.0.100`
- some other application / container is already using port `8888` on your Pi, so you need to use something other than the default (which is `8888`). For example: `8889`

```sh
cd ~/magicmirror/mounts/modules/MMM-Spotify
cp spotify.config.json.example-callback spotify.config.json
vim spotify.config.json
```

```json
[
  {
      ""USERNAME"": ""A_NAME_TO_IDENTIFY_YOUR_ACCOUNT"",
      ""CLIENT_ID"": ""PUT_YOUR_SPOTIFY_APP_CLIENT_ID"",
      ""CLIENT_SECRET"": ""PUT_YOUR_SPOTIFY_APP_CLIENT_SECRET"",
      ""TOKEN"": ""./token.json"",
      ""AUTH_DOMAIN"": ""http://192.168.0.100"",
      ""AUTH_PORT"": ""8889""
  }
]
```

**Docker specific**: make sure you pass the port specified by `AUTH_PORT` directly to the container running `MM²`.  
In our case, a possible `docker-compose.yml` file could look like this:

```yaml
version: '3'

services:
  magicmirror:
    container_name: mm
    image: karsten13/magicmirror:latest
    ports:
      - ""8080:8080""
      - ""8889:8889""
    volumes:
      - ../mounts/config:/opt/magic_mirror/config
      - ../mounts/modules:/opt/magic_mirror/modules
      - ../mounts/css:/opt/magic_mirror/css
    restart: unless-stopped
    command: 
      - npm
      - run
      - server
```

This change needs to also be made if you run `MM²` in docker but keep the default `AUTH_PORT` of `8888`:

```yaml
[...]

    ports:
      - ""8080:8080""
      - ""8888:8888""

[...]
```

Also make sure you configured the custom callback URL inside the Spotify App (see: [Setup Spotify](#2-setup-spotify)).


### 4. Get auth

In RPI Desktop, log in in a Terminal (you can use VNC).  

If you are running inside Docker (or any other environment without UI), be sure to configure a [Custom callback](#custom-callback) fist.
The `first_auth.js` script will then not open your default browser, but output an URL, which you need to open in your workstation on the same network.

```sh
cd ~/MagicMirror/modules/MMM-Spotify
node first_auth.js
```

Then the allowance dialog popup will be opened:

- You MUST login in the SAME ORDER you put your users in the configuration file (when using multiple accounts)
- It helps to not save your login in the browser session (when using multiple accounts)
- Allow the application to access your Spotify API
- Close the browser
- Another browser session will start when using multiple accounts -> repeat steps

That's all - now all the specific json files where created.  


## Configuration

### Simple

```js
{
  module: ""MMM-Spotify"",
  position: ""bottom_left"",
  config: {
    debug: false,
  }
}
```

### Detail & Default

```js
{
  module: ""MMM-Spotify"",
  position: ""bottom_left"", // ""bottom_bar"" or ""top_bar"" for miniBar
  config: {
    debug: false, // debug mode
    style: ""default"", // ""default"" or ""mini"" available (inactive for miniBar)
    moduleWidth: 360, // width of the module in px
    control: ""default"", // ""default"" or ""hidden""
    showAlbumLabel: true, // if you want to show the label for the current song album
    showVolumeLabel: true, // if you want to show the label for the current volume
    showAccountName: false, // also show the current account name in the device label; usefull for multi account setup
    showAccountButton: true, // if you want to show the ""switch account"" control button
    showDeviceButton: true, // if you want to show the ""switch device"" control button
    useExternalModal: false, // if you want to use MMM-Modal for account and device popup selection instead of the build-in one (which is restricted to the album image size)
    updateInterval: 1000, // update interval when playing
    idleInterval: 30000, // update interval on idle
    defaultAccount: 0, // default account number, attention : 0 is the first account
    defaultDevice: null, // optional - if you want the ""SPOTIFY_PLAY"" notification to also work from ""idle"" status, you have to define your default device here (by name)
    allowDevices: [], //If you want to limit devices to display info, use this. f.e. allowDevices: [""RASPOTIFY"", ""My Home speaker""],
    onStart: null, // disable onStart feature with `null`
    // if you want to send custom notifications when suspending the module, f.e. switch MMM-Touch to a different ""mode""
    notificationsOnSuspend: [
      {
        notification: ""TOUCH_SET_MODE"",
        payload: ""myNormalMode"",
      },
      {
        notification: ""WHATEVERYOUWANT"",
        payload: ""sendMe"",
      }
    ],
    // if you want to send custom notifications when resuming the module, f.e. switch MMM-Touch to a different ""mode""
    notificationsOnResume: [
      {
        notification: ""TOUCH_SET_MODE"",
        payload: ""mySpotifyControlMode"",
      },
    ],
    deviceDisplay: ""Listening on"", // text to display in the device block (default style only)
    volumeSteps: 5, // in percent, the steps you want to increase or decrese volume when reacting on the ""SPOTIFY_VOLUME_{UP,DOWN}"" notifications
    // miniBar is no longer supported, use at your own ""risk"". Will be removed in a future version
    miniBarConfig: {
      album: true, // display Album name in miniBar style
      scroll: true, // scroll title / artist / album in miniBar style
      logo: true, // display Spotify logo in miniBar style
    }
  }
}
```

### `onStart` feature

You can control Spotify on start of MagicMirror (By example; Autoplay specific playlist when MM starts)

```js
  onStart: {
    deviceName: ""RASPOTIFY"", //if null, current(last) activated device will be.
    spotifyUri: ""spotify:track:3ENXjRhFPkH8YSH3qBXTfQ"",
    //when search is set, sportifyUri will be ignored.
    search: {
      type: ""playlist"", // `artist`, track`, `album`, `playlist` and its combination(`artist,playlist,album`) be available
      keyword: ""death metal"",
      random:true,
    }
  }
```

When `search` field exists, `spotifyUri` will be ignored.

## Control with notifications

- `SPOTIFY_SEARCH` : search items with query and play it. `type`, `query`, `random` be payloads

```json
  this.sendNotification(""SPOTIFY_SEARCH"", {""type"": ""artist,playlist"", ""query"": ""michael+jackson"", ""random"": false})
```

- `SPOTIFY_PLAY` : playing specific SpotifyUri. There could be two types of uri - `context_uri` and `uris`. 
  - `context_uri:String` : Spotify URI of the context to play. Valid contexts are albums, artists, playlists.
  - `uris:[]`: A JSON array of the Spotify track URIs to play

```json
   this.sendNotification(""SPOTIFY_PLAY"", {""context_uri"": ""spotify:album:1Je1IMUlBXcx1Fz0WE7oPT""})
//OR
   this.sendNotification(""SPOTIFY_PLAY"", {
     ""uris"": [""spotify:track:4iV5W9uYEdYUVa79Axb7Rh"", ""spotify:track:1301WleyT98MSxVHPZCA6M""]
   })
```

The SPOTIFY_PLAY notification can also be used as `resume` feature of stopped/paused player, when used without payloads.  
In addition, if you have `defaultDevice` configured, you can start playback from Spotify's ""disconnected"" mode (where Spotify does not have an active device in your account).

- `SPOTIFY_PAUSE` : pausing current playback.

```json
  this.sendNotification(""SPOTIFY_PAUSE"")
```

- `SPOTIFY_TOGGLE` : toggling for playing/pausing

```json
  this.sendNotification(""SPOTIFY_TOGGLE"")
```

- `SPOTIFY_NEXT` : next track of current playback.

```json
  this.sendNotification(""SPOTIFY_NEXT"")
```

- `SPOTIFY_PREVIOUS` : previous track of current playback.

```json
  this.sendNotification(""SPOTIFY_PREVIOUS"")
```

- `SPOTIFY_VOLUME` : setting volume of current playback. payload will be volume (0 - 100)

```json
  this.sendNotification(""SPOTIFY_VOLUME"", 50)
```

- `SPOTIFY_VOLUME_UP` : increasing volume in this.config.volumeSteps steps. Maximum 100. Useful in combination with touch

```json
  this.sendNotification(""SPOTIFY_VOLUME_UP"")
```

- `SPOTIFY_VOLUME_DOWN` : decreasing volume in this.config.volumeSteps steps. Minimum 0. Useful in combination with touch

```json
  this.sendNotification(""SPOTIFY_VOLUME_DOWN"")
```

- `SPOTIFY_TRANSFER` : change device of playing with device name (e.g: RASPOTIFY)

```json
  this.sendNotification(""SPOTIFY_TRANSFER"", ""RASPOTIFY"")
```

- `SPOTIFY_SHUFFLE` : toggle shuffle mode.

```json
  this.sendNotification(""SPOTIFY_SHUFFLE"")
```

- `SPOTIFY_REPEAT` : change repeat mode. (`off` -> `track` -> `context`)

```json
this.sendNotification(""SPOTIFY_REPEAT"")
```

- `SPOTIFY_ACCOUNT`: change account. payload is the `USERNAME` defined in your account in `spotify.config.json` file

```json
this.sendNotification(""SPOTIFY_ACCOUNT"", ""premium"")
```

payload could be the number of the account. attention: for first account, number is `0`

```json
this.sendNotification(""SPOTIFY_ACCOUNT"", 0)
```

## Notification send

- `SPOTIFY_CONNECTED`: Spotify is connected to a device
- `SPOTIFY_DISCONNECTED`: Spotify is disconnected

It can be used with MMM-pages for example (for show or hide the module)


## Credit

- Biggest thanks to @eouia for all his work and inspiration
- Special thanks to @ejay-ibm so much for taking the time to cowork to make this module.
- Thanks to @KamisamaPT for helping design
"
317,onetune/spotify-web-helper,JavaScript,"Please note that because of a recent Spotify update, the library is not working at the moment.
Discussion here: https://github.com/onetune/spotify-web-helper/issues/41

---

# Spotify Web Helper for node.js

This is a rewrite of the excellent [node-spotify-webhelper](https://www.npmjs.com/package/node-spotify-webhelper), but with support for events, so you don't have to do `getStatus()` all the time. It also is faster, and starts SpotifyWebHelper on OS X, not just on Windows.  
I am also trying to maintain the project and handle issues, at least every 2 months. Pull requests welcome!

## Install
```
$ npm install spotify-web-helper --save
```

## Example
````js
const SpotifyWebHelper = require('spotify-web-helper');

const helper = SpotifyWebHelper();

helper.player.on('error', err => {
  if (error.message.match(/No user logged in/)) {
    // also fires when Spotify client quits
  } else {
    // other errors: /Cannot start Spotify/ and /Spotify is not installed/
  }
});
helper.player.on('ready', () => {

  // Playback events
  helper.player.on('play', () => { });
  helper.player.on('pause', () => { });
  helper.player.on('seek', newPosition => {});
  helper.player.on('end', () => { });
  helper.player.on('track-will-change', track => {});
  helper.player.on('status-will-change', status => {});

  // Playback control. These methods return promises
  helper.player.play('spotify:track:4uLU6hMCjMI75M1A2tKUQC');
  helper.player.pause();
  helper.player.seekTo(60); // 60 seconds

  // Get current playback status, including up to date playing position
  console.log(helper.status);
  // 'status': {
  //    'track': ...,
  //    'shuffle': ...,
  //    'playing_position': ...
  //  }

});
````

## API

### Class: SpotifyWebHelper ###

#### new SpotifyWebHelper([opts])

 - `opts` `<object>` Options.
   - `opts.port` `<number>` Web helper port. Default is 4370.

#### helper.player
 - `<`[`PlayerEventEmitter`](#class-playereventemitter)`>`

#### helper.status
 - `<`[`SpotifyStatus`](#typedef-spotifystatus)`>`
 
 Gets the current saved status.
#### helper.getStatus()
 - `<`[`SpotifyStatus`](#typedef-spotifystatus)`>`
 
 Refetches the status from Spotify and returns it.


### Class: PlayerEventEmitter ###
Inherits from [EventEmitter](https://nodejs.org/dist/latest/docs/api/events.html#events_class_eventemitter).

#### Event: 'end'
Playback has ended.

#### Event: 'error'
An error has occurred. The listener callback receive the `<Error>` as first
argument. An error occurs when Spotify cannot be started, is not installed, or quits.
Refer to the example above to see how to distinguish errors.

#### Event: 'pause'
Playback has paused.

#### Event: 'play'
Playback has started.

#### Event: 'seek'
User has changed the current playing positon.

#### Event: 'ready'
This player object is ready to use.

#### Event: 'status-will-change'
Current status has changed. The listener callback receive a `<`[`SpotifyStatus`](#typedef-spotifystatus)`>`
object as first argument.

`helper.status` will be changed by the new status after this event is emitted.

#### Event: 'track-will-change'
Current track has changed. The listener callback receive a `<`[`SpotifyTrack`](#typedef-spotifytrack)`>`
object as first argument.

#### player.pause([unpause]);
 - `unpause` `<boolean>` `true` to resume playback. Default is false.
 - Returns `<Promise<`[`SpotifyStatus`](#typedef-spotifystatus)`>>`

#### player.play(spotifyUri);
 - `spotifyUri` `<string>` Spotify URI.
 - Returns `<Promise<`[`SpotifyStatus`](#typedef-spotifystatus)`>>`



### Typedef: SpotifyStatus ###

#### status.version
 - `<number>`
Web helper API version. Currently 9.

#### status.client_version
 - `<string>`
Client version.

#### status.playing
 - `<boolean>`
`true` if a track is playing.

#### status.shuffle
 - `<boolean>`
`true` if shuffle is enabled.

#### status.repeat
 - `<boolean>`
`true` if repeat is enabled.

#### status.play_enabled
 - `<boolean>`
`true` if playing is available.

#### status.prev_enabled
 - `<boolean>`
`true` if skipping to previous track is available.

#### status.next_enabled
 - `<boolean>`
`true` if skipping to next track is available.

#### status.track
 - `<`[`SpotifyTrack`](#typedef-spotifytrack)`>`
Current track.

#### status.context
 - `<object>`

#### status.playing_position
 - `<number>`
Current track position, in counting seconds.

#### status.server_time
 - `<number>`
Server time in UNIX time.

#### status.volume
 - `<number>`
Audio volume, from 0 to 1.

#### status.online
 - `<boolean>`

#### status.open_graph_state
 - `<object>`

#### status.running
 - `<boolean>`



### Typedef: SpotifyTrack ###

#### track.track_resource
 - `<`[`SpotifyResource`](#typedef-spotifyresource)`>`
Song resource.

#### track.artist_resource
 - `<`[`SpotifyResource`](#typedef-spotifyresource)`>`
Artist resource.

#### track.album_resource
 - `<`[`SpotifyResource`](#typedef-spotifyresource)`>`
Album resource.

#### track.length
 - `<number>`
Track length in seconds.

#### track.track_type
 - `<string>`



### Typedef: SpotifyResource ###

#### res.name
 - `<string>`
Name.

#### res.uri
 - `<string>`
Spotify URI.

#### res.location
 - `<object>`
Object containing attribute `og`, which represent an HTTPS URL to the resource.



## Compatibility
Since 1.3.0 node >=4.0 is required. Use 1.2.0 for older node versions.
"
318,rigoneri/syte,JavaScript,"
### :warning: Unmaintained

Sorry, but this project is no longer maintained. Please use the new version, called [Syte2](https://github.com/rigoneri/Syte2).

PS. The project as of June 2016 still works fine if you want to use it.

---

# Syte

Syte is a really simple but powerful packaged personal site that has social integrations like Twitter, GitHub, Dribbble, Instagram, Foursquare, Tumblr, Wordpress, Linkedin, Spotify/Last.fm, SoundCloud, Bitbucket, StackOverflow, Flickr and Steam. You can see it in action on [my personal site](http://rigoneri.herokuapp.com).

## Social Integrations

### Blog

Syte uses [Tumblr](http://tumblr.com) or [Wordpress.com](http://wordpress.com/) for blogging and your blog will be the primary page of the site.

![Syte Home](https://github.com/rigoneri/syte/blob/master/readme-imgs/f-1.png?raw=true)

### Twitter

Syte has Twitter integration, which means that when someone clicks on a link that points to a user's Twitter profile the profile is loaded within your site along with the user's latest tweets.

![Syte Twitter](https://github.com/rigoneri/syte/blob/master/readme-imgs/f-2.png?raw=true)

### GitHub

Syte has GitHub integration, which means that when someone clicks on a link that points to a user's GitHub profile the profile is loaded within your site along with a list of the user's repos.

![Syte GitHub](https://github.com/rigoneri/syte/blob/master/readme-imgs/f-3.png?raw=true)

### Dribbble

Syte has Dribbble integration, which means that when someone clicks on a link that points to a user's Dribbble profile the profile is loaded within your site along with the user's latest shots.

![Syte Dribbble](https://github.com/rigoneri/syte/blob/master/readme-imgs/f-4.png?raw=true)


### Instagram

Syte has Instagram integration, which means that you can show your Instagram pictures within your site like a profile.

![Syte Instagram](https://github.com/rigoneri/syte/blob/master/readme-imgs/f-5.png?raw=true)


### Foursquare

Syte has foursquare integration, which means that you can show your foursquare check-ins within your site like a profile.

![Syte Foursquare](https://github.com/rigoneri/syte/blob/master/readme-imgs/f-9.png?raw=true)


### Last.fm

Syte has Last.fm integration, which means that when someone clicks on a link that points to a user's Last.fm profile the profile information will be loaded directly in the site along with a listing of the most recently scrobbled tracks.

![Syte Lastfm](https://github.com/rigoneri/syte/blob/master/readme-imgs/f-6.png?raw=true)


### SoundCloud

Syte has SoundCloud integration, which means that when someone clicks on a link that points to a user's SoundCloud profile the profile information will be loaded directly in the site along with a listing of the user's SoundCloud tracks. Since I don't use SoundCloud, you can see an example on [Guram's website](http://blog.guramkajaia.com/)

![Syte Soundcloud](https://github.com/rigoneri/syte/blob/master/readme-imgs/f-7.png?raw=true)


### Bitbucket

Syte has Bitbucket integration, which means that when someone clicks on a link that points to a user's Bitbucket profile the profile is loaded within your site along with a list of the user's repos.

![Syte Bitbucket](https://github.com/rigoneri/syte/blob/master/readme-imgs/f-8.png?raw=true)

### Tent.io

Syte has Tent.io integration, which means that you can show your Tent.io public posts within your site like a profile.

![Syte Tent.io](https://github.com/rigoneri/syte/blob/master/readme-imgs/f-10.png?raw=true)

### Steam

Syte has Steam integration, which means that you can show your Steam Community profile within your site.

![Syte Steam](https://github.com/rigoneri/syte/blob/master/readme-imgs/f-11.png?raw=true)

### StackOverflow

Syte has StackOverflow integration, which means that you can show your StackOverflow profile within your site.

![Syte Steam](https://github.com/rigoneri/syte/blob/master/readme-imgs/f-12.png?raw=true)

### Flickr

Syte has Flickr integration, which means that you can show your Flickr photos within your site.

![Syte Flickr](https://github.com/rigoneri/syte/blob/master/readme-imgs/f-13.png?raw=true)

### LinkedIn
Syte has LinkedIn integration, which means that you can show your LinkedIn profile information within your site.

![Syte LinkedIn](https://github.com/rigoneri/syte/blob/master/readme-imgs/f-14.png?raw=true)

## Responsive UI

Syte is responsive, which means that it scales down to a mobile device screen size.

![Syte Responsive 1](https://github.com/rigoneri/syte/blob/master/readme-imgs/f-r-1.png?raw=true) ![Syte Responsive 1](https://github.com/rigoneri/syte/blob/master/readme-imgs/f-r-2.png?raw=true)

## Technologies Used

Syte uses the [Django](https://www.djangoproject.com/) web framework to handle requests and call the integration APIs (with [python](http://www.python.org/)). However it doesn't necessarily need to be in Django since the majority of the work is on the frontend (I would love to see a fork using [Node.js](http://nodejs.org/), maybe I'll put one together sometime.)

On the frontend Syte uses HTML5 and CSS3 while using the [LESS](http://lesscss.org) CSS preprocessor. Syte also uses several JS libraries listed below:

* [require.js](http://github.com/jrburke/requirejs)
* [handlebars.js](http://handlebarsjs.com/)
* [moment.js](http://momentjs.com/)
* [spin.js](fgnass.github.com/spin.js)
* [bootstrap-modal.js](http://twitter.github.com/bootstrap/javascript.html#modals)
* [jQuery URL Parser](https://github.com/allmarkedup/jQuery-URL-Parser)
* [google-code-prettify](http://google-code-prettify.googlecode.com/svn/trunk/README.html)

For static compression and minification Syte uses some [Node.js](http://nodejs.org/) libraries:

* [less](http://search.npmjs.org/#/less)
* [uglify-js](http://search.npmjs.org/#/uglify-js)

For deployment Syte uses [Heroku](http://www.heroku.com/) since it's free for 750 dyno-hours per month. While the included instructions are for Heroku, Syte doesn't necessarily need to be deployed there.


## Setup Instructions

There are a few steps in order to get Syte configured, but don't worry they are pretty easy.

`Note` I recommend you branching your fork and not checking in sensitive settings to GitHub!
`Warning` Do not place OAuth keys and tokens in a public repository.

### Base content changes

There are a few things that are defaulted to have my information so you have the initial structure of the site.

To start off change the **pictures** to have your picture, navigate to `syte > static > imgs` and replace **pic.png** with your picture and **favicon.ico** with your favicon in this case I use my picture as well. Please make sure you keep the same sizes. **pic.png** is 84x84px and **favicon.ico** is 32x32px.

Then make some text and link changes. Open **base.html** located in `syte > templates > base.html` and make the following changes:

1. Change the `meta=""description""` content to have a description about you.
2. Change the `meta=""keywords""` content to have keywords about you.
3. Change the `title` tag to have your name.
4. Inside the `header` tag change the `h1` tag to have your name.
5. Inside the `header` tag change the `h2` tag to have a short description about you.
6. Inside the `nav` tag change the **twitter-link** href to point to your twitter profile, if you don't have twitter just remove that whole line.
7. Inside the `nav` tag change the **github-link** href to point to your GitHub profile, if you don't have GitHub just remove that whole line.
8. Inside the `nav` tag change the **dribbble-link** href to point to your Dribbble profile, if you don't have Dribbble just remove that whole line.
9. Inside the `nav` tag change the **steam-link** href to point to your Steam community profile, if you don't have Steam just remove that whole line.
10. Inside the `nav` tag change the **stackoverflow-link** href to point to your StackOverflow profile, if you don't have StackOverflow just remove that whole line.
11. Inside the `nav` tag change the **flickr-link** href to point to your Flickr profile, if you don't have Flickr just remove that whole line.
12. Inside the `nav` tag change the **contact-link** href to point to your email address.
13. Under `class=""mobile-nav""` div change the **h3** link text to have your domain name or your name.

Then pick your **adjacent color** and change the `@adjacent-color` hex value in variables.less located in `syte > static > less > variables.less` Make sure the color you chose is not used by anyone on the list up above. If you want blue pick a different shade of blue, there are hundreds out there...




### Setting up your blog

Syte uses Tumblr or Wordpress for blogging.

#### Setting up Tumblr

If you have a Tumblr blog you will need to get the `api_key` needed to call their APIs. In order to do that **register your site** with them by going to <http://www.tumblr.com/oauth/register>, fill in the information about your site, there is no need to enter a default callback url or an icon. Once you are done your website will be listed under <http://www.tumblr.com/oauth/apps>, save the `OAuth Consumer Key` value that's the `api_key` we need for Syte.

Once you have the `api_key` from Tumblr you have to enter it in **syte_settings.py** located in `syte > syte_settings.py`. Once you open that file enter the key under `TUMBLR_API_KEY`, also please enter your Tumblr url under `TUMBLR_BLOG_URL` see the example on how it should be formatted.

#### Setting up Wordpress

For now Syte only support wordpress blogs that are build using [wordpress.com](http://wordpress.com).

Open `syte > syte_settings.py` and under `WORDPRESS_BLOG_URL` enter ther url of your wordpress.com blog, also under `BLOG_PLATFORM` set it to ""wordpress"".

#### Comments

Comments are available through [Disqus](http://disqus.com/) in order to get yours setup, make sure to signup through their website. Once you are done you will be given a Disqus shortname. Grab the shortname and enter it in **syte_settings.py** under `DISQUS_SHORTNAME`, also make sure to have `DISQUS_INTEGRATION_ENABLED` set to True in order to work.





### Setting up Twitter integration

Twitter has another level of security, therefore we need more information instead of just an api_key like Tumblr. To get started create a new application on Twitter for your website by going to <https://dev.twitter.com/apps/new>. Once you are done creating your application you will be taken to your application page on Twitter, there you already have two pieces of the puzzle, the `Consumer key` and the `Consumer secret` make sure you save those.

Next you will need your access tokens, on the bottom of that page there is a link called **Create my access token** click on that. Once you are done you will be given the other two pieces of the puzzle, the `Access token` and the `Access token secret` make sure you save those as well.

Once you have those four items from Twitter you have to enter them in your **syte_settings.py** located in `syte > syte_settings.py`. Once you open that file enter the following:

* `Consumer key` string you saved under `TWITTER_CONSUMER_KEY`
* `Consumer secret` string you saved under  `TWITTER_CONSUMER_SECRET`
* `Access token` string you saved under `TWITTER_USER_KEY`
* `Access token secret` string you saved under `TWITTER_USER_SECRET`

If you want to turn off the Twitter integration just set `TWITTER_INTEGRATION_ENABLED` to False.




### Setting up GitHub integration

GitHub has the same level of security as Twitter, but they don't provide a button that makes it easy to get the access token, so instead we have to get the access token ourselves. To get started sign in to GitHub and go to <https://github.com/settings/applications/new> to register your application.

Enter the ***Application Name***, ***Main URL*** and ***Callback URL***. For the Callback URL enter `http://127.0.0.1:8000/github/auth` for now since we will get the access token while running it locally. Once you are done registering your application you will be given the ***Client ID*** and ***Client Secret***.

Once you have those two items from GitHub you have to enter them in your **syte_settings.py** located in `syte > syte_settings.py`. Once you open that file enter the following:

* ***Client ID*** under `GITHUB_CLIENT_ID`
* ***Client Secret*** under `GITHUB_CLIENT_SECRET`

After you have entered those two items, follow the steps below for running your Syte locally on your machine. Once you have your Syte running navigate to `http://127.0.0.1:8000/github/auth`, you will be taken to GitHub's website and will be asked to sign in and authorize your application. After you authorized your application you will be taken back to your Syte and you will be given your ***Access Token***

You can also get your access token via the GitHub api using curl:
```
curl -i -u ""username:password"" https://api.github.com/authorizations
```

Once you have your access token from GitHub you have to enter them in your **syte_settings.py** located in `syte > syte_settings.py`. Once you open that file enter it under `GITHUB_ACCESS_TOKEN`

After you validated that your GitHub integration worked go back to GitHub page and change the ***Callback URL*** field to have your domain info (this is not required), then make sure you turn off the GitHub OAuth integration setting so you don't make that available to everyone in the Internet. You can do that by setting `GITHUB_OAUTH_ENABLED` to False.

If you want to turn off GitHub integration just set `GITHUB_INTEGRATION_ENABLED` to False.




### Setting up Dribbble integration

To get started go to <http://developer.dribbble.com/> and click on **Register a New Application**.

Enter ***Name***, ***Description***, ***Website URL*** and ***Callback URL***. After that is done Dribbble will give you a **Client Access Token** to use.

Once you have your access token from Dribbble you have to enter them in your **syte_settings.py** located in `syte > syte_settings.py`. Once you open that file enter it under `DRIBBBLE_ACCESS_TOKEN`

If you want to turn off this feature just set `DRIBBBLE_INTEGRATION_ENABLED` setting to False in syte_settings.py.


### Setting up Instagram integration

Instagram has the same level of security as GitHub and similar steps on getting the access token ourselves. To get started go to <http://instagram.com/developer/>, sign in and crate a new client by clicking on the ***Manage Clients*** link on the top right side.

Enter the ***Application Name***, ***Description***, ***Website*** and ***OAuth redirect_Uri***. For the OAuth redirect_uri enter `http://127.0.0.1:8000/instagram/auth/` for now since we will get the access token while running it locally. The trailing slash is required for Instagram not to complain that the redirect_Uri is wrong. Once you are done registering your client you will be given the ***Client ID*** and ***Client Secret***.

Once you have those two items from Instagram you have to enter them in your **syte_settings.py** located in `syte > syte_settings.py`. Once you open that file enter the following:

* ***Client ID*** under `INSTAGRAM_CLIENT_ID`
* ***Client Secret*** under `INSTAGRAM_CLIENT_SECRET`

After you have entered those two items, follow the steps below for running your Syte locally on your machine. Once you have your Syte running navigate to `http://127.0.0.1:8000/instagram/auth`, you will be taken to Instagram's website and will be asked to sign in and authorize your application. After you authorized your application you will be taken back to your Syte and you will be given your ***Access Token*** and your ***User ID***

Once you have those two items from Instagram you have to enter them in your **syte_settings.py** located in `syte > syte_settings.py`. Once you open that file enter the following:

* ***Access Token*** under `INSTAGRAM_ACCESS_TOKEN`
* ***User ID*** under `INSTAGRAM_USER_ID`

After you validated that your Instagram integration worked go back to Instagram page and change the ***OAuth redirect_uri*** field to have your domain info (this is not required), then make sure you turn off the Instagram OAuth integration setting so you don't make that available to everyone in the Internet. You can do that by setting `INSTAGRAM_OAUTH_ENABLED` to False.

If you want to turn off Instagram integration just set `INSTAGRAM_INTEGRATION_ENABLED` to False.


### Setting up Foursquare integration

Foursquare has the same level of security as Instagram and similar steps on getting the access token ourselves. To get started go to <https://foursquare.com/oauth/register>, sign in and register a new consumer.

Enter the ***Application Name***, ***Application Website*** and ***Callback URL***. For the callback url enter `http://127.0.0.1:8000/foursquare/auth` for now since we will get the access token while running it locally. Once you are done registering your consumer you will be given the ***Client ID*** and ***Client Secret***.

Once you have those two items from Foursquare you have to enter them in your **syte_settings.py** located in `syte > syte_settings.py`. Once you open that file enter the following:

* ***Client ID*** under `FOURSQUARE_CLIENT_ID`
* ***Client Secret*** under `FOURSQUARE_CLIENT_SECRET`

After you have entered those two items, follow the steps below for running your Syte locally on your machine. Once you have your Syte running navigate to `http://127.0.0.1:8000/foursquare/auth`, you will be taken to Foursquare's website and will be asked to sign in and authorize your application. After you authorized your application you will be taken back to your Syte and you will be given your ***Access Token***.

Once you have the access token from Foursquare you have to enter them in your **syte_settings.py** located in `syte > syte_settings.py`. Once you open that file enter the following:

* ***Access Token*** under `FOURSQUARE_ACCESS_TOKEN`

After you validated that your foursquare integration worked go back to Foursquare page and change the ***Callback URL*** field to have your domain info (this is not required), then make sure you turn off the foursquare OAuth integration setting so you don't make that available to everyone in the Internet. You can do that by setting `FOURSQUARE_OAUTH_ENABLED` to False.

If you want to turn off Instagram integration just set `FOURSQUARE_INTEGRATION_ENABLED` to False.

Additionally if you don't want people to know where you are currently at, you can set 'FOURSQUARE_SHOW_CURRENT_DAY' to False and it will only show check-ins more than a day old.



### Setting up Last.fm integration

The Last.fm integration does not make any authenticated calls so setting it up only requires that you register an application with Last.fm and get an API key.

To get an API key simply follow the [Getting started instructions](http://www.last.fm/api).  You can then view your API Key from [your api account page](http://www.last.fm/api/account).

Once you have your API Key from Last.fm you have to enter it in your **syte_settings.py** located in `syte > syte_settings.py`. Once you open that file enter the following:

* ***API_KEY*** under `LASTFM_API_KEY`
* ***USERNAME*** under `LASTFM_USERNAME`

If you want to turn off Last.fm integration just set `LASTFM_INTEGRATION_ENABLED` to False.


### Setting up SoundCloud integration

In order to setup the SoundCloud integration you first need to create a SoundCloud application by going to <http://soundcloud.com/you/apps>. Once you have the `CLIENT_ID` from SoundCloud open the **syte_settings.py** file and enter it under the `SOUNDCLOUD_CLIENT_ID` setting.

Inside **syte_settings.py** there are two other options to configure how your SoundCloud tracks will be shown.

* `SOUNDCLOUD_SHOW_ARTWORK` (Boolean) set this option to true if you want to show your track artwork on page.
* `SOUNDCLOUD_PLAYER_COLOR` you can set your widget theme color here. Use Hex values only without `#`

If you want to turn off SoundCloud integration just set `SOUNDCLOUD_INTEGRATION_ENABLED` to False.


### Setting up Bitbucket integration

The Bitbucket integration does not make any authenticated calls nor does it require a registered API key.

If you want to turn off Bitbucket integration just set `BITBUCKET_INTEGRATION_ENABLED` to False.

#### Comment
To display the fork count on repositories set `BITBUCKET_SHOW_FORKS` to True.  The Bitbucket API require one call for each repository to get fork count, which is disabled by default.

The Bitbucket API throttles the user resource to 100 calls every 30 minutes.


### Setting up Tent.io integration

The Tent.io integration does not make any authenticated calls nor does it require a registered API key.

If you want to turn off Tent.io integration just set `TENT_INTEGRATION_ENABLED` to False.

Inside **syte_settings.py** there are two other options to configure your Tent.io entity.

* ***Your Entity-URI*** under `TENT_ENTITY_URI`
* ***URL to a Feed or Tent-Status*** under `TENT_FEED_URL`

### Setting up Steam integration

In order to setup Steam integration you first need to create a Steam Web API key by going to <http://steamcommunity.com/dev/apikey>. Once you have the `STEAM WEB API KEY` from Steam open the **syte_settings.py** file and enter it under the `STEAM_API_KEY` setting.

If you want to turn off Steam integration just set `STEAM_INTEGRATION_ENABLED` to False.

### Setting up StackOverflow integration

The StackOverflow integration does not make any authenticated calls nor does it require a registered API key.

If you want to turn off StackOverflow integration just set `STACKOVERFLOW_INTEGRATION_ENABLED` to False.

### Setting up Flickr integration

The Flickr integration does not make any authenticated calls nor does it require a registered API key.

To make it work, you'll need to find your Flickr ID. This is different to your username, and you can do the lookup here: <http://idgettr.com/>

If you want to turn off Flickr integration just set `FLICKR_INTEGRATION_ENABLED` to False.

### Setting up LinkedIn integration

LinkedIn has the same level of security as Instagram and Foursquare and similar steps on getting the access token ourselves. To get started create a new application on LinkedIn for your website by going to <https://developer.linkedin.com/>. Once you are done creating your application you will be taken to your application page on LinkedIn, there you already have a few pieces of the puzzle, the `Api Key`, `Secret Key`, make sure you save those.

In that same page make sure to enter `http://127.0.0.1:8000/linkedin/auth/` under Oauth 2.0 Redirect URls.

Once you have those items from LinkedIn you have to enter them in your **syte_settings.py** located in `syte > syte_settings.py`. Once you open that file enter the following:

* `Consumer key` string you saved under `LINKEDIN_API_KEY`
* `Consumer secret` string you saved under  `LINKEDIN_API_SECRET`

After you have entered those two items, follow the steps below for running your Syte locally on your machine. Once you have your Syte running navigate to `http://127.0.0.1:8000/linkedin/auth`, you will be taken to Linkedin's website and will be asked to sign in and authorize your application. After you authorized your application you will be taken back to your Syte and you will be given your ***Access Token***.

Once you have the access token from Foursquare you have to enter them in your **syte_settings.py** located in `syte > syte_settings.py`. Once you open that file enter the following:

* ***Access Token*** under `LINKEDIN_TOKEN`

If you want to turn off the LinkedIn integration just set `LINKEDIN_INTEGRATION_ENABLED` to False.


## Running & Deployment Instructions

Now that you have everything setup and ready to go we will be able to run the project locally and deploy to Heroku or AWS with the instructions below. Please note that these instructions are for Mac, which should be the same for Linux systems. If you have problems with these instructions on Windows, let me know or send a pull request.



### Running Syte locally

Running locally is really easy if you are on a Mac since you already have some stuff installed out of the box. To start off install these python packages:

* [virtualenv](http://www.virtualenv.org/en/latest/index.html)
* [virtualenvwrapper](http://www.doughellmann.com/projects/virtualenvwrapper/)

Once you have those two installed go to your Syte directory and run the following commands:

```
$ mkvirtualenv syte
$ workon syte
(syte)$ pip install --use-mirrors -r requirements.txt
```

`Note` On Mac/Linux you need to modify your shell startup file to add mkvirtualenv and workon commands, see [virtualenvwrapper installation instructions](http://virtualenvwrapper.readthedocs.org/en/latest/install.html#shell-startup-file)

This will install all the project dependencies listed in requirements.txt including Django. Now all you have to do is run the Django project and go to <http://127.0.0.1:8000>.

```
python manage.py runserver
```

### Compressing Statics

Compressing static files like CSS and JS are done using [Node.js](http://nodejs.org/). This step is important since it will get all your static files and make tiny bit small so your site can be run faster when it's out there on the so called World Wide Web :)

In order to get there you need to first install [node.js](http://nodejs.org/), they have automatic installers which makes installation really easy. Then you need to install [Node Package Manager (npm)](http://npmjs.org/) by running the following command:

```
curl http://npmjs.org/install.sh | sudo sh
```

After npm is installed you need to install two node packages `less` and `uglify-js`. To do that run the following commands:

```
sudo npm install less -g
sudo npm install uglify-js -g
```

`Note` windows users be sure to create the directories `syte > static > css` and `syte > static > js > min` first if it doesn't already exist.

Then whenever you want to release a new version of static update the `COMPRESS_REVISION_NUMBER` in **syte-settings.py** and run the compress python command from your syte directory:

```
python compress.py
```

This will create a minified version of your CSS in `syte > static > css` and the minified version of your JavaScript in `syte > static > js > min`.

`Note` If you are using Windows and is having problems on compressing statics checkout issue [#14](https://github.com/rigoneri/syte/issues/14) to see if it helps.


### Deploying to Heroku

Deploying to Heroku is extremely easy and free, that's why I chose it over Amazon or similar. That's another fork I would love to see, different deployment instructions maybe to an Amazon EC2 micro instance.

First signup to [Heroku](http://heroku.com) then follow these simple [Django deployment instructions](https://devcenter.heroku.com/articles/django) I already have the requirements.txt and the Procfile ready to go, but before you actually deploy there are two things you need to change:

1. Change the ``DEPLOYMENT_MODE`` value to prod in **syte_settings.py** located in ``syte > syte_settings.py``
2. Change the ``SITE_ROOT_URI`` value to your Heroku app url in **syte_settings.py** see the available example to how it should be formatted.


### Deploying to AWS

Deploying to [AWS](http://aws.amazon.com) is a little more complicated than Heroku, but is a nice alternative.  The easiest way to deploy your application to AWS is by using [AWS Elastic Beanstalk](http://docs.aws.amazon.com/elasticbeanstalk/latest/dg/create_deploy_Python_django.html).  To help keep costs low, we will deploy to micro instances.

First signup to [AWS](http://aws.amazon.com) then follow the instructions below.  I have already included some of the required files for you (see syte.config in .ebextensions directory).  The other required files will be created automatically, but some of the settings may need to be altered slightly.

1. Change the ``DEPLOYMENT_MODE`` value to prod in **syte_settings.py** located in ``syte > syte_settings.py``
2. Change the ``SITE_ROOT_URI`` value to your AWS app url in **syte_settings.py** see the available example to how it should be formatted.
3. Install the eb command-line tools and add to your path.  Download from [here](http://aws.amazon.com/code/6752709412171743).  This will allow us to control AWS from the command-line.
4. Execute the `eb init` command in the root of the syte repo and follow the on-screen instructions.  This will help get our project ready to be deployed into AWS.  Please note: during this step you will be asked to provide security credentials.  If you are not sure what to use, see [here](http://docs.aws.amazon.com/general/latest/gr/getting-aws-sec-creds.html)
5. Execute the `eb start` command to deploy a sample application to AWS.  Once this command completes execute `eb status --verbose` and confirm that the sample application is running at the provided url.
6. Let's make sure our configurations are right.
   - First, open ./ebextensions/syte.config and confirm the settings here.  You should not have to update anything.
   - Second, open the ./elasticbeanstalk/opensettings.XXX-env (where XXX-env is the name of your environment).  Update this by updating:
     DJANGO_SETTINGS_MODULE=syte.settings
     StaticFiles=syte/static=
     WSGIPath=syte/wsgi.py
7. To make sure the above changes are not reverted, execute `eb update`.
8. Deploy the repo to AWS by executing `git aws.push`.  This command can be rerun whenever you have changes that you want to deploy.
9. Execute `eb status --verbose` or monitor the provisioning process on AWS' website.  To troubleshoot, go to the ElasticBeanstalk section of AWS, get a snapshot of the logs and review them for errors.



## Contributing

There are plans for several services to be added in the
[TODO file](https://github.com/rigoneri/syte/blob/master/TODO.md).  One of
these services is a good place to start when looking for ways to help.  Also
posting/fixing [issues](https://github.com/rigoneri/syte/issues) is always
helpful.

If you would like to add support for a new service you might find the [HELP
file](https://github.com/rigoneri/syte/blob/master/HELP.md) useful on how to
get started and where your new code might go, etc.

Also, the [DESIGN file](https://github.com/rigoneri/syte/blob/master/DESIGN.md)
can be a useful resource when starting out with the project and trying to
understand roughly how it all fits together.




## Credit

Syte was developed by **Rigo** (rodrigo neri). Check his personal site out at <http://rigoneri.com> and follow him on twitter [@rigoneri](http://twitter.com/#!/rigoneri)


## License


The MIT License

Copyright (c) 2012, Rodrigo Neri <@rigoneri>

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the ""Software""), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in
all copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED ""AS IS"", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
THE SOFTWARE.
"
319,nahive/spotify-notify,Swift,"
<p align=""center"">
<img src=""https://raw.githubusercontent.com/nahive/spotify-notify/master/logo.png"" alt=""Spotify Notify"" width=""200""/>
</p>
<p align=""center"">
<img src=""https://raw.githubusercontent.com/nahive/spotify-notify/master/p1.png"" alt=""normal dark mode"" width=""300""/>
<img src=""https://raw.githubusercontent.com/nahive/spotify-notify/master/p2.png"" alt=""normal light mode"" width=""300""/>
</p>
<p align=""center"">
<img src=""https://raw.githubusercontent.com/nahive/spotify-notify/master/p3.png"" alt=""extended dark mode"" width=""300""/>
<img src=""https://raw.githubusercontent.com/nahive/spotify-notify/master/p4.png"" alt=""extended light mode"" width=""300""/>
</p>

# Spotify Notify
![Build Version](https://img.shields.io/github/release/nahive/spotify-notify.svg)
<!-- [![Build Status](https://travis-ci.org/nahive/spotify-notify.png?branch=master)](https://travis-ci.org/nahive/spotify-notify) -->
##### *Inspired by [Spotify Notifications](https://github.com/citruspi/Spotify-Notifications) written in Swift*

## [Download latest release here](https://github.com/nahive/spotify-notify/releases)

## Features

- [x] Notification sounds (toggle)
- [x] Notification on play/pause (toggle)
- [x] Customizable status bar icon (default, dark and none)
- [x] Launch on login (toggle)
- [x] Album artwork (toggle)
- [x] Toggle disabling of notifications when Spotify is focused (toggle)
- [x] Shortcuts for showing notification (customizable) ✨
- [x] Show progress of a song in notification ✨
- [x] Ability to skip song from notification ✨
- [x] Options to control Spotify from menu bar ✨
- [ ] Customizable options in notification
- [ ] Add support for iTunes

## Notes

When running the app on macOS Mojave (10.14) or higher, the first time you attempt to control Spotify you will be presented with the following dialog box:

<p align=""center""><img src=""docs/authorisation.png"" alt=""Authorisation""/></p>

You must grant permission for the app to work. Choosing Don't Allow will make the app unable to retrieve any information about the currently playing track.

If you click Don't Allow by accident, you can reset the permissions dialogue using

```
$ tccutil reset AppleEvents
```

Additionally, it is now required to sign the app using a paid developer account. To do this, simply set the signing team and certificate in the General settings of the SpotifyNotify target:

<p align=""center""><img src=""docs/signing.png"" alt=""Signing""/></p>

## Building

```
$ git clone https://github.com/nahive/spotify-notify.git
$ cd spotify-notify
$ open SpotifyNotify.xcodeproj
```

## Contributing

If you found a **bug**, open an issue.

If you have a **feature** request, open an issue.

If you want to **contribute**, submit a pull request.

## License

The source code is dedicated to the public domain. See the `LICENCE.md` file for
more information.

The Spotify artwork and icon is owned by Spotify AB Inc.
"
320,mattdennewitz/playlist-to-vec,Python,"# artistrecs

A similar artist recommendation engine powered by Spotify
playlists and [word2vec](https://code.google.com/p/word2vec/).

This proof of concept was inspired by two pieces and my own
longstanding belief that the transitions between songs in playlists,
when given enough, are valuable insights.

Some bathroom reading:

- [Playlist Harvesting](https://social.shorthand.com/huntedguy/3CfQA8mj2S/playlist-harvesting),
  by [Stephen Phillips](https://social.shorthand.com/huntedguy)
- [Distributional Similarity Music Recommendations Versus Spotify: A Comparison Based on User Evaluation](http://arno.uvt.nl/show.cgi?fid=136352), by Nevyana Boycheva

Also, quick reminder: this is a proof of concept! It's working and
pretty cool, but that doesn't mean the tools are complete, the project
isn't without layout or design decision kinks, or that things won't change.
In fact, plan on things changing for as long as this message is here.

----

This application consists of two major components:

- A Celery-backed extraction setup for ingesting playlists from Spotify
  en masse. Celery workers are responsible for importing playlists
  and extracting artist names.
- Helper scripts for training and querying data extracted
  from said playlists

**NOTE** - project layout will be changing shortly. See TODO for what's up.

## Setup

Before getting started with this project, please ensure you have the
following installed:

- a C compiler
- Redis (up and running)
- [`word2vec` bindings](#install-word2vec)

Please also have your OAuth client ID and secret ready from
the Spotify application you wish to use. If you need to register
a Spotify app, [do so here](https://developer.spotify.com/my-applications/#!/applications/create) before continuing.

### Install `word2vec` bindings

<a name=""install-word2vec""></a>

#### OSX using Homebrew

```shell
$ brew install --HEAD homebrew/head-only/word2vec
```

### Setup

### Install requirements

Check out this repo into a virtualenv,
and then install its Python requirements using `pip`:

```shell
$ pip install -r requirements.txt
```

### Set up environment variables

This application's configuration data is taken from environment variables.

- `SPOTIFY_CLIENT_ID`: Spotify OAuth client id
- `SPOTIFY_CLIENT_SECRET`: Spotify OAuth client secret
- `ARTISTRECS_BROKER_URL`: Celery broker URL.
    Defaults to `localhost:6379`. [Read more](http://docs.celeryproject.org/en/latest/configuration.html#broker-url).
- `ARTISTRECS_RESULT_BACKEND`: Celery result backend URL.
    Defaults to `localhost:6379` [Read more](http://docs.celeryproject.org/en/latest/configuration.html#celery-result-backend)

How you set these variables is up to you.

**TIP**: `envdir` is great for this.

## Workflow and output

### Extraction workflow

First, a quick overview of what the Celery workers are doing,
from start to finish:

1. `playlist_generator` task receives a request to search Spotify's playlists
   for a specific term. For each playlist found, `playlist_generator`
   creates a new task: `resolve_playlist`.

   If `recycle` is enabled, `playlist_generator` will respawn itself
   to collect more information. This is controlled by the `max_recycles`
   parameter - if left undefined, `playlist_generator` will collect
   all playlists available for the given term.
2. `resolve_playlist` receives a username and playlist id and fetches
   the playlist's tracks. It then compiles into a list each artist name
   from each track in the playlist [1]. Once all names have been collected,
   `resolve_playlist` hands off the list to
   `export_artist_sentence_from_playlist`.
3. `export_artist_sentence_from_playlist` accepts a user id, playlist id,
   and a list of artist names. It JSON-encodes them and then writes
   the object to a file.

   This task is run in a separate queue to avoid overlapping file writes.

Once all jobs have been processed, you should have a text file
ready to be processed by the `parser.py` script.

[1] If the artist name about to be collected is also the last entry
    in the current list, it is ignored. This is a naive way of protecting
    against entire albums influencing transitional frequencies.

Right now, there are many moving pieces. As this project matures
past ""proof of concept"", noise will be reduced.

### Output format

`word2vec` works by analyzing sentences. That's a gross generalization.
Here's something from the official docs:

> The word2vec tool takes a text corpus as input and produces the word vectors as output. It first constructs a vocabulary from the training text data and then learns vector representation of words. The resulting word vector file can be used as features in many natural language processing and machine learning applications.

`gensim`, the `word2vec` implementation used here, expects sentences
to be delivered as lists of words. In our particular use case,
we're constructing sentences from artist names. Wild, right?

At the end of a run thorugh the extraction workflow described above,
you'll have a file whose every line has a sentence constructed from artists
in a playlist. The format for this output is:

```json
{
    ""playlist_id"": ""<spotify playlist id>"",
    ""user_id"": ""<spotify user id>"",
    ""sentence"": [
        ""<artist name>"",
        ""<artist name>"",
        ...
    ]
}
```

This file can be found at `SENTENCE_OUTPUT_PATH`.

## Running

Once you've completed the above, you're ready to begin.

### Start Redis

If `redis-server` is not already running in the background, fire it up.

```shell
$ redis-server
```

### Start extraction queues

In one shell inside your virtualenv, fire up the extraction queue.
This queue is responsible for the tasks concerned with querying 
Spotify and compiling artist names from tracks inside of playlists.

```shell
$ celery worker -A artistrecs -l info -Q extraction
```

In another shell, start the writer queue with 1 worker. This is a sloppy
workaround to prevent overlapping file writes by unlocked append access
to a file.

```shell
$ celery worker -A artistrecs -l info -Q writer
```

### Insert a task

To query Spotify for playlists, insert a task using `insert_task.py`.
This helper script accepts two parameters, expecting one of them:

```shell
$ python insert_task.py -t <term>
```

See `insert_task.py`'s `--help` print-out for extended usage details.

### Parsing output

Data extracted from playlists may be parsed using `parser.py`.

```shell
$ python parser.py -i <path to output file> -t <artist name>
```

This will emit a JSON-encoded ranked list of similar artists.
Make sure that the artist name you're checking was, in fact,
a member of at least a few of the playlists brought in during
extraction.

See `--help` for extended usage details.

## TODO

- Add `setup.py`, which should also install helper scripts as console scripts
- Parser should default to using `SENTENCE_OUTPUT_PATH` env var
  when `-i` is not given.

## Issues

Want to contribute? File an issue or a pull request.
"
321,jamesthomson/SpotifyDiscographyShinyApp,R,
322,pmpkk/openhab_spotify-webconnect-api,CSS,"# openhab_spotify-webconnect-api
A simple Python script to integrate Spotify's Web Connect API (https://developer.spotify.com/web-api/web-api-connect-endpoint-reference/) to OpenHab (openhab.org)

<h1>Prerequisite</h1>

* OpenHab 2.1 installed on Raspberry Pi (or similar)
* OpenHab REST installed
* Spotify User Account
* Spotify Developer Account
* The script uses OpenHab items to store parameters and credentials. Make sure you have persistance turned on, otherwise all your settingd are lost upon reboot/restart
* Know your OpenHab root URL/IP and port. In this doc, I assume http://openhabianpi.local:8080/

<h1>Instructions</h1>

1. Add the spotify.items file into openhab-conf/items and verify they have been added to your setup in Paper UI

* Check by asking the rest API: http://openhabianpi.local:8080/rest/items/spotify_auth_code
* You should get a successful JSON response

2. Place the following files in the folders:

* matrix-theme.css into openhab-conf/html/matrix-theme
* AppIcons.svg into openhab-conf/html/matrix-theme
* spotify-auth.html into openhab-conf/html
* myopenhab.py into openhab-conf/scripts
* spotify.py into openhab-conf/scripts
* spotify.rules into openhab-conf/rules
* spotify.items into openhab-conf/items

3. Verify you can reach spotify-auth.html

* Go to: http://openhabianpi.local:8080/static/spotify-auth.html
* You should see a page called ""Spotify Integration"" with a status message ""spotify_client_id"" missing

4. After registering as a Spotify developer, create a new App and retrieve client id and secret:

* Goto https://developer.spotify.com/my-applications/#!/applications
* Click ""Create App""
* Provide a name and description
* Set the Redirect URI to:  http://openhabianpi.local:8080/static/spotify-auth.html
* Save the Settings

5. Give the client id and secret to OpenHab

* Save the Client ID to spotify_client_id in OpenHab (e.g. through openhab CLI smarthome:update spotify_client_id {your_id})
* Copy the Client Secret to spotify_client_secret in OpenHab (e.g. through the rest API)

6. Authenticate your New App for your Spotify User

* Go to: http://openhabianpi.local:8080/static/spotify-auth.html
* You should see a page called ""Spotify Integration"" with a status message ""Click here to Authenticate""
* Click the link and authenticate your app
* When done, the page returns and displays ""New Auth Code successfully saved to OpenHab!""
* Check that the spotify_auth_code is set in OpenHab

7. Test spotify.py in SSH

* Set the REDIRECT_URI in spotify.py to the right value
* Run this in terminal /usr/bin/python /etc/openhab2/scripts/spotify.py

You should see this:

```python
Successfully got state from OpenHab: spotify_client_id
Successfully got state from OpenHab: spotify_client_secret
Successfully got state from OpenHab: spotify_access_token
Successfully got state from OpenHab: spotify_refresh_token
Successfully got state from OpenHab: spotify_token_issued
Successfully got state from OpenHab: spotify_token_expiry
-- Calling Service: Update
Successfully posted state to OpenHab: spotify_current_track
Successfully posted state to OpenHab: spotify_current_artist
Successfully posted state to OpenHab: spotify_current_cover
Successfully posted state to OpenHab: spotify_current_duration
Successfully posted state to OpenHab: spotify_current_progress
Successfully posted state to OpenHab: spotify_current_progress
Successfully posted state to OpenHab: spotify_current_playing
Successfully posted state to OpenHab: spotify_current_device
Error posting state to OpenHab: spotify_current_volume (HTTP Response 400)
Successfully posted state to OpenHab: spotify_current_device_id
 -> Success
Successfully posted state to OpenHab: spotify_lastConnectionDateTime
Done in 0.761183977127 seconds
```

8. You can now hook up OpenHab rules or HabPanel with the data in the spotify items.

<h1>Use</h1>

* spotify.py
* parameters:
  * none = refresh data
  * play = resume playing
  * play uri = play suported uris (album, artist or playlist), e.g. spotify:user:spotify:playlist:37i9dQZF1DX5OepaGriAIm
  * pause = pause
  * next = next track
  * previous = previous track
  * volume_up = 10% up
  * volume_down = 10% down
  * get_devices = get available devices and safe to openhab
  * transfer_playback = transfer playback to device set in openhab
"
323,wobsoriano/spotify-stats,JavaScript,"# Spotify Stats

Your spotify profile's top artists and tracks with charts and playlist creator.

## Installing

1. Follow instructions in setting up server [here](https://github.com/sorxrob/spotify-stats-server)

2. Install dependencies

   ```bash
   npm install
   ```

3. Fire up the server and watch files

   ```bash
   npm start
   ```

## Built with

- [React](https://reactjs.org/)
- [Material UI](https://material-ui.com/)
- [Chart.js](https://www.chartjs.org/)
- [Spotify API](https://developer.spotify.com/documentation/web-api/)

## Acknowledgments

* Hat tip to anyone whose code was used

## To-Do

- [ ] Social sharing of result
- [ ] Fix refresh token issues"
324,germancutraro/spotify-clone-reactjs,JavaScript,"# Spotify Clone - React.js + Redux Saga
"
325,possan/webgl-spotify-connect-now-playing-screen-example,JavaScript,"WebGL Now Playing Hack
======================

![Obligatory 10mb gif](kung10mb.gif)

A example of how to use the newly released [Spotify Connect Web APIs](https://developer.spotify.com/web-api/web-api-connect-endpoint-reference/) to render the currently playing artwork in a slightly different way using WebGL.

[Click here to open the online version](https://possan.github.io/webgl-spotify-connect-now-playing-screen-example)

Download the repo, run `python -m SimpleHTTPServer 8000` in the folder that you just downloaded to host a webserver on port 8000, open `http://localhost:8000` in your webgl capable browser. It should ask you for permission to know what you are currently playing and to control playback.

While it's running, you can click on the progress bar/scrubber to seek in the track, or use your keyboard to control playback, `space` toggles play/pause, `left` skips to the previous track, `right` skips to the next track.

It uses my [polyserver](https://github.com/possan/polyserver) hack to vectorize the album covers into triangle data for the renderer, please don't overload it :)

Enjoy.
"
326,timflapper/cordova-spotify-plugin,Objective-C,"# Cordova Spotify Plugin

[![Build Status](https://travis-ci.org/timflapper/cordova-spotify-plugin.svg?branch=master)](https://travis-ci.org/timflapper/cordova-spotify-plugin)

This plugin provides a javascript API to Spotify's iOS SDK for Cordova applications.

_Android integration is planned for a future release_

## Installation
	
1. Install the plugin:

		`cordova plugin add com.timflapper.spotify`

2. Add the iOS platform to your project (if needed):

        `cordova platform add ios`

3. The install script will start automatically. It will do two things:
 - Ask you for a [custom URL scheme](http://bit.ly/1u11ZUz).
 - Download and extract the Spotify iOS SDK.

That's it!

## API

Documentation can be found [here](https://github.com/timflapper/cordova-plugin-spotify/wiki/API)

## Setting up a token exchange service

You can use the Ruby script that is included in the Spotify iOS SDK Demo Projects for development:

- [Download the Spotify iOS SDK](https://github.com/spotify/ios-sdk/releases)
- Follow the instructions from the [Spotify iOS SDK beginner's tutorial](https://developer.spotify.com/technologies/spotify-ios-sdk/tutorial/).	


## Non-interactive installation

To avoid being prompted for the [custom URL scheme](http://bit.ly/1u11ZUz),
you can alternatively provide it in an environment variable:
```
export CORDOVA_SPOTIFY_URL_SCHEME=somecustomscheme
cordova plugin add com.timflapper.spotify
```


## License

[MIT](LICENSE)
"
327,Bleuzen/SpotRec,Python,"# SpotRec

Python script to record the audio of the Spotify desktop client using FFmpeg
and PulseAudio

AUR: https://aur.archlinux.org/packages/spotrec/



## Usage

If you use the AUR package,
you can simply run:

```
spotrec
```

If you have a GNU/Linux distribution with a different package manager system,
run:

```
python3 spotrec.py
```



### Example

First of all run spotify.

Then you can run the python script which will record the music:

```
./spotrec.py -o ./my_song_dir --skip-intro
```

Check the  pulseaudio configuration:

```
pavucontrol
```

Pay attention to the red circles, everything else is muted and with volume set
to 0%

![playback tab](https://github.com/Bleuzen/SpotRec/raw/master/img/pavucontrol_playback_tab.jpeg)

Note: actually ""Lavf..."" will appear after you start playing a song

![recording tab](https://github.com/Bleuzen/SpotRec/raw/master/img/pavucontrol_recording_tab.jpeg)

![output devices tab](https://github.com/Bleuzen/SpotRec/raw/master/img/pavucontrol_output_devices_tab.jpeg)

![input devices tab](https://github.com/Bleuzen/SpotRec/raw/master/img/pavucontrol_input_devices_tab.jpeg)

![configuration tab](https://github.com/Bleuzen/SpotRec/raw/master/img/pavucontrol_configuration_tab.jpeg)

Finally start playing whatever you want


## Hints

- Disable volume normalization in the Spotify Client

- Do not change the volume during recording

- Use Audacity for post processing

  * because SpotRec records a little longer at the end to ensure that nothing is missing of the song. But sometimes this also includes the beginning of the next song. So you should use Audacity to cut the audio to what you want. From Audacity you can also export it to the format you like (ogg/mp3/...).


## Troubleshooting

Start the script with the debug flag:

```
./spotrec.py --debug
```

If one of the following scenarios happens:

* you do not see something like the ffmpeg output, which should appear right
  few seconds after the song start

```
# what you should see when ffmpeg is recording ...
size=56400kB time=00:00:04.15 bitrate= 130.7kbits/s speed=1x
```

* you do not see any ""Lavf..."" in the pavucontrol
  [recording tab](https://github.com/Bleuzen/SpotRec/raw/master/img/pavucontrol_recording_tab.jpeg)
* you get a stacktrace ending with:

```
ValueError: invalid literal for int() with base 10: 'nput'
```

I would suggest you to:

* quickly press the ""next song button"" and then the ""previous song button"" in
  the spotify client
* stop everything and start over, after some tries it usually works :)


**Note: sometimes spotify detects when the user does not interact with the
application for a long time (more or less an hour) and starts looping over a
song, to avoid this scenario I would suggest to keep interacting with the
spotify client.**
"
328,yezz123/SpotifyGenerator,Python,"<p align=""center"">
  <img width=""480"" height=""480"" src=""https://media.giphy.com/media/fsbgFxUCaUuJ3O8x4a/giphy.gif"">
</p>
<p align=""center""><img src=""https://img.shields.io/badge/Version-1.0-brightgreen""></p>

</p> 
<p align=""center""><img src=""https://img.shields.io/badge/Author-Yezz123-green.svg""> 
</p>

<p align=""center"">
  <a href=""https://github.com/yezz123"">
    <img src=""https://img.shields.io/github/followers/yezz123?label=Follow&style=social"">
  </a>
  <a href=""https://github.com/Elitestuff/FroggyFrog/stargazers"">
    <img src=""https://img.shields.io/github/stars/yezz123/SpotifyGenerator?style=social"">
  </a>
</p>
<p align=""center"">
 Generate More than 100 account in a few minutes. 
</p>

## Information
This was made to show you how easy it is to abuse a website like this. People can profit by first mass-creating accounts, then use a Spotify ""streaming bot"" that gives you views on your song. If you're interested, I can develop a streaming bot too so you can have a look at how they work. For the record, this hides your identity by using proxies. Not only does it hide your identity, but also prevents yourself from getting rate limited on their website. Please do not use this, it is once again only meant for you to learn how account creators work. However, if you choose to use this you are doing it at your own risk.
## Usage
Run this command in CMD, terminal or PowerShell (if you don't already have the **requests** module installed):
```
pip install requests
```
1. Paste your proxies inside Proxies.txt.
2. Run the script.
3. Select what proxy type you are using.
4. Enter the amount you'd like to generate.
5. All set!

## Legal Notice
This is illegal if you use this without the consent of the owners (in this case, the Spotify team). I am not accountable for anything you get into, this was just a speedrun to demonstrate how account creators work. This is 100% educational, please do not misuse this tool.
"
329,ceckenrode/node-spotify-api,JavaScript,"# Node Spotify API 🚀 🎶 

A simple to use API library for the Spotify REST API. 

## Installation

`npm install --save node-spotify-api`

## API

Currently there are two methods available, `search` and `request` 🔍

### Search

`search` is the EASIEST way to find an artist, album, or track.

```js
search: function({ type: 'artist OR album OR track', query: 'My search query', limit: 20 }, callback);
```

#### Example

```js
var Spotify = require('node-spotify-api');

var spotify = new Spotify({
  id: <your spotify client id>,
  secret: <your spotify client secret>
});

spotify.search({ type: 'track', query: 'All the Small Things' }, function(err, data) {
  if (err) {
    return console.log('Error occurred: ' + err);
  }

console.log(data); 
});
```

Note: The `limit` property is optional and the search will default to 20 if one is not supplied.

#### Usage with Promises

This package also optionally works with promises. Just omit the callback parameter and the search method returns a promise object containing the response:

```js
var Spotify = require('node-spotify-api');

var spotify = new Spotify({
  id: <your spotify client id>,
  secret: <your spotify client secret>
});

spotify
  .search({ type: 'track', query: 'All the Small Things' })
  .then(function(response) {
    console.log(response);
  })
  .catch(function(err) {
    console.log(err);
  });
```

### Request

`request` can be used to make API requests to any Spotify endpoint you supply.

#### Example

```js
var Spotify = require('node-spotify-api');

var spotify = new Spotify({
  id: <your spotify client id>,
  secret: <your spotify client secret>
});

spotify
  .request('https://api.spotify.com/v1/tracks/7yCPwWs66K8Ba5lFuU2bcx')
  .then(function(data) {
    console.log(data); 
  })
  .catch(function(err) {
    console.error('Error occurred: ' + err); 
  });
```

### Don't have a Spotify client id and client secret?

The Spotify API requires an authentication token to work. This package will perform all of the work of generating an authentication token for you, but you will still need to supply a client id and client secret.

Sign up for a Spotify developer account [here](https://developer.spotify.com/my-applications/#!/login). If you already have a Spotify account, you'll just have to log in. A membership can be paid or free, it makes no difference when it comes to using the Spotify API.

Once you're signed up, navigate to <https://developer.spotify.com/my-applications/>. You should be presented with the following page:

![Applications](Images/1-Applications.png)

Click the button to ""Create An App"". Once you're at the next page, fill in the required fields.

![Required](Images/2-Required.png)

Submit the form and on the next page, you should be presented with a client id and secret.

![Key](Images/3-Key.png)

And you're all set!! 🎉 
"
330,Schnouki/spop,C,"# Welcome to spop!

spop is a Spotify client that works as a daemon (similar to the famous [MPD][]).
It is designed to be as simple and straightforward as possible: run it, control
it with your keyboard and a few scripts, and just forget about it.

## Features
- **Works as a daemon:** no GUI, just start it, it will run in the background and do
  what you want it to do. Your music won't stop playing if your X server crashes!
- **Uses libspotify:** stable, reliable. Not free (a Spotify [premium account][]
  is required), but quite cheap.
- **Written in plain C:** as lightweight as possible, only 300 kB when compiled
  *with debugging symbols*...
- **Few dependencies:** only requires [libspotify][], [Glib][], [JSON-GLib][]
  and [libao][] (or [libsox][]; not required for OSS audio output).
- **Powerful audio effects**: when using [libsox][], you can apply various
  effects to the audio output: equalisation, normalisation, reverb, ""karaoke"",
  etc. SoX is the [Swiss Army knife of sound processing][sak]!
- **Powerful plugin system:** you can write your own plugin in a few dozens
  lines of code.
- **Simple protocol:** open a TCP connection to the daemon, write a simple
  plain-text command, get an easily parsable JSON output.
- **Portable:** designed to be platform-agnostic, it should work on any platform
  supported both by Glib and libspotify. (But so far it has only been tested on
  Linux and Apple OS X)
- **Free software:** the source code is available under the terms of the GNU
  GPLv3 license (or, at your option, any later version), with an exception
  allowing to distribute code linked against libspotify. Everyone is welcome to
  contribute!

## Plugins
Right now, several plugins are available:

- *notify:* use [libnotify][] for desktop notifications
- *savestate:* keep the current state (queue, current track, etc.) when stopping
  and restarting spop
- *scrobble:* scrobble your music to [LastFM][] or [LibreFM][] (requires [libsoup][])
- *awesome:* keep an eye on your player in [Awesome][], an extremely powerful
  window manager
- *mpris2:* support the [MPRIS2][] standard to control spopd like any other
  media player from your desktop or using the multimedia keys on your keyboard
  (work in progress)

## How to use
1. Install [libspotify][] (preferably using your favorite package manager)
2. Download spop's source code:

        git clone git://github.com/Schnouki/spop.git

3. Prepare your configuration file:

        mkdir -p ~/.config/spop
        cp spop/spopd.conf.sample ~/.config/spop/spopd.conf
        nano ~/.config/spop/spopd.conf

3. Compile and run spop:

        cd spop
        ./build_and_run -fv

4. Connect to the daemon and issue some commands:

        telnet localhost 6602

5.  If you want something more GUI-like, you can use `dspop`, which uses either
    [dmenu][] or [rofi][]:

        ./dspop/dspop

    Or, on Linux, you can enable the `mpris2` plugin in the configuration file
    and use the media controls integrated with some desktop environments.

6.  If you want a *really* nice web interface, have a look at [spop-web][] by
    Xemle.


If you want to install spop somewhere on your system, do the following steps:

    mkdir build
    cd build
    cmake -DCMAKE_INSTALL_PREFIX=/where/to/install ..
    make
    sudo make install

### Debian
Add Mopidy APT repository for `libspotify` from `https://github.com/mopidy/libspotify-deb`:

    wget -q -O - http://apt.mopidy.com/mopidy.gpg | sudo apt-key add -
    echo -e ""deb http://apt.mopidy.com/ stable main contrib non-free\ndeb-src http://apt.mopidy.com/ stable main contrib non-free"" | sudo tee /etc/apt/sources.list.d/mopidy.list
    sudo apt-get update

Install required libraries via `apt-get`:

    sudo apt-get install libjson-glib-dev libao-dev libdbus-glib-1-dev libnotify-dev libsoup2.4-dev libsox-dev libspotify-dev

### Mac OSX
Install libspotify with [Homebrew][]:

    brew install https://raw.github.com/mopidy/homebrew-mopidy/master/libspotify.rb


## Commands
At the moment, spop can not modify your playlists, so you will have to use the
official Spotify client to manage them.

Except for that, the following commands are available:

- `help`: list all available commands

---

- `ls`: list all your playlists
- `ls pl`: list the contents of playlist number `pl`

---

- `qls`: list the contents of the queue
- `qclear`: clear the contents of the queue
- `qrm tr`: remove track number `tr` from the queue
- `qrm tr1 tr2`: remove tracks `tr1` to `tr2` from the queue

---

- `add pl`: add playlist number `pl` to the queue
- `add pl tr`: add track number `tr` from playlist number `pl` to the queue
- `play pl`: replace the contents of the queue with playlist `pl` and start
  playing
- `play pl tr`: replace the contents of the queue with track `tr` from playlist
  `pl` and start playing

---

- `uinfo uri`: display information about the given Spotify URI
- `uadd uri`: add the given Spotify URI to the queue (playlist, track or album
  only)
- `uplay uri`: replace the contents of the queue with the given Spotify URI
  (playlist, track or album only) and start playing
- `uimage uri`: get the cover image for given uri (base64-encoded JPEG image).
  Uri must be an track or album uri.
- `uimage uri size`: get the cover image for given uri (base64-encoded JPEG
  image).  Uri must be an track or album uri. Use 0 for normal size (300px), 1
  for small size (64px) and 2 for large size (640px).

---

- `search query`: perform a search with the given query

---

- `play`: start playing from the queue
- `toggle` or `pause`: toggle pause mode
- `stop`: stop playback
- `seek pos`: go to position `pos` (in milliseconds) in the current track
- `next`: switch to the next track in the queue
- `prev`: switch to the previous track in the queue
- `goto tr`: switch to track number `tr` in the queue
- `repeat`: toggle repeat mode
- `shuffle`: toggle shuffle mode

---

- `status`: display informations about the queue, the current track, etc.
- `idle`: wait for something to change (pause, switch to other track, new track
  in queue...), then display `status`. Mostly useful in notification scripts.
- `notify`: unlock all the currently idle sessions, just like if something had
  changed.
- `image`: get the cover image for the current track (base64-encoded JPEG image).
- `offline-status`: display informations about the current status of the offline
  cache (number of offline playlists, sync status...).
- `offline-toggle pl`: toggle offline mode for playlist number `pl`.

---

- `star`: toggle the ""starred"" status of the current track
- `ustar uri val`: set the ""starred"" status of all the tracks in the given URI
  (playlist, track or album) to `val` (0 or 1)

---

- `bye`: close the connection to the spop daemon
- `quit`: exit spop

## Furthermore...

This doc is probably lacking a gazillion useful informations, so feel free to
ask me if you have any question regarding spop!

- On GitHub: <https://github.com/inbox/new/Schnouki>
- By e-mail: <`my_nickname@my_nickname.net`> (by the way, my nickname
  is ""Schnouki"")
- On Twitter: <http://www.twitter.com/Schnouki>

[Awesome]: http://awesome.naquadah.org/
[Glib]: http://library.gnome.org/devel/glib/
[Homebrew]: http://brew.sh/
[JSON-GLib]: http://live.gnome.org/JsonGlib
[libspotify]: http://developer.spotify.com/en/libspotify/overview/
[libao]: http://www.xiph.org/ao/
[libsox]: http://sox.sourceforge.net/
[sak]: http://sox.sourceforge.net/Docs/Features
[libnotify]: http://library.gnome.org/devel/libnotify/
[LastFM]: http://www.last.fm/
[LibreFM]: http://libre.fm/
[libsoup]: http://live.gnome.org/LibSoup
[MPD]: http://www.musicpd.org/
[MPRIS2]: http://specifications.freedesktop.org/mpris-spec/latest/
[premium account]: http://www.spotify.com/uk/get-spotify/overview/
[dmenu]: http://tools.suckless.org/dmenu/
[rofi]: https://davedavenport.github.io/rofi/
[spop-web]: https://github.com/xemle/spop-web
"
331,kevineye/docker-librespot,,"[![](https://images.microbadger.com/badges/image/kevineye/librespot.svg)](https://microbadger.com/images/kevineye/librespot ""Get your own image badge on microbadger.com"")

This container runs a headless [Spotify](https://www.spotify.com/us/) player that can be remote-controlled by any Spotify app. Audio is output to a pipe, which can be consumed in another container or the host system by [alsa](http://www.alsa-project.org/), [pulseaudio](http://pulseaudio.org), [forked-daapd](https://ejurgensen.github.io/forked-daapd/) (to Airplay), [snapserver](https://github.com/badaix/snapcast), etc.

This requires a Spotify premium account, but does not require a Spotify developer key or libspotify binary.

The process run is [librespot](https://github.com/plietar/librespot), an open source client library for Spotify.

### Examples

Play audio to /tmp/spotify-pipe:

    docker run -d \
        -v /tmp/spotify-pipe:/data/fifo
        -e SPOTIFY_NAME=Docker \
        -e SPOTIFY_USER=... \
        -e SPOTIFY_PASSWORD=... \
        kevineye/librespot
"
332,johnelse/spotify-cli,OCaml,"spotify-cli [![Build status](https://travis-ci.org/johnelse/spotify-cli.png?branch=master)](https://travis-ci.org/johnelse/spotify-cli)
-----------

Minimal OCaml CLI program for controlling the spotify desktop client.
Supported platforms:

* Linux (via DBus)
* Mac OSX (via osascript)

Installation
------------

The easiest way to install is with [opam](http://opam.ocaml.org/), an OCaml
package manager:

```
    opam install spotify-cli
```

Build dependencies
------------------

* [oasis](https://github.com/ocaml/oasis)
* [cmdliner](https://github.com/dbuenzli/cmdliner)
* [obus](https://github.com/diml/obus)
* [ocaml-mpris](https://github.com/johnelse/ocaml-mpris)
* [ocaml-spotify-web-api](https://github.com/johnelse/ocaml-spotify-web-api)

Supported commands
------------------

```
    spotify-cli now-playing
    spotify-cli play-pause
    spotify-cli previous
    spotify-cli next
    spotify-cli play-album <search-string>
    spotify-cli play-artist <search-string>
    spotify-cli play-track <search-string>
```

`play-album`, `play-artist` and `play-track` search for the supplied name using
the spotify metadata API, and play the first result (if any).

`search-string` doesn't have to match the album or track title exactly - in
fact you will probably get better results if you specify the artist name along
with the album or track name e.g.

```
    spotify-cli play-album ""sepultura arise""
```
"
333,zachwinter/kaleidosync,Vue,"
# kaleidosync
> A WebGL Spotify visualizer made with [Vue](https://github.com/vuejs/vue), [D3](https://github.com/d3/d3), and [Three.js](https://github.com/mrdoob/three.js/).

#### Try it out at [www.kaleidosync.com](https://www.kaleidosync.com)!

## Background
The Echo Nest represents the comprehensive algorithmic analysis of music. Having been acquired by Spotify, their analysis resources are available via the [Spotify API](https://developer.spotify.com/documentation/web-api/reference/tracks/get-audio-analysis/). Each song within Spotify's library has been fully analyzed: broken up into individual beats, segments, tatums, bars, and sections. There are variables assigned to describe pitch, timbre, and more esoteric descriptors like mood and ""danceability."" It's even possible to derive realtime volume information, all without processing the audio stream directly. 

This project is my take on using this data to produce visual experiences using the power of WebGL. 

## Running Locally
As of version 6.0.0 you won't be able to run this project locally in any reasonable/useful way due to how coupled it is with my (unpublished) shader authoring tools. If you absolutely must get this running on your machine, feel free to reach out to me and I'll walk you through the hurdles and what you'll need to build in order for it to be useful. 

## Changelog
> #### Version 6.1
* Introduces dev mode, allowing live-editing of shaders and the creation of editable uniforms.

>  #### Version 6.0
* Complete re-write.
* Sketches have been removed from the codebase and are now stored in a database.
* New architecture connects directly with my visualizer authoring tools, enabling the publishing of new visualizers with the push of a button.
* Leverages the Spotify Web Playback SDK ([when available](https://developer.spotify.com/documentation/web-playback-sdk/#supported-browsers)), and falls back to legacy polling in browsers that are unsupported.

>  #### Version 5.5
* Cleanup / bug fixes.
* There are now 8 visualizers to choose from.

>  #### Version 5.4
* Reduces the complexity of adding new visualizers.
* Reverts back to the traditional polling when running the dev server.
* Surfaces a control interface for WebGL scenes.

>  #### Version 5.3
* There are now 7 visualizers to choose from.

>  #### Version 5.2
* Refactor / rate limit debugging.

>  #### Version 5.1
* There are now 6 visualizers to choose from.

>  #### Version 5.0
* Major refactor.
* There are now 5 visualizers to choose from.
* Includes an interface for rendering fragment shaders.

>  #### Version 4.0
* Project backbone has been abstracted away into its own library, [spotify-viz](https://github.com/zachwinter/spotify-viz).
* Adoped [@vue/cli](https://cli.vuejs.org) for the UI layer.
* There are now 4 visualizers to choose from.
* User settings now persist when revisiting the site.
* More graceful error handling and authentication flow.
* This project now fully represents what's hosted on [www.kaleidosync.com](https://www.kaleidosync.com), instead of the bare-bones implementation that it was before.
>  #### Version 3.0
* Complete refactor with no front end dependencies.
* Transitioned to webpack from gulp.
* Reactive data store using ES6 Proxies, semi-inspired by Vuex.
* (Hopefully) less spaghetti and more comments.

>  #### Version 2.0
* Re-implemented with `requestAnimationFrame()`
* Now mobile-friendly, even on older devices.
* Improved tweening.
* Adjusts itself on window resize.
* More accurate syncing with Spotify, including automatic self-correction.
>  #### Version 1.0
* Holy shit, it's working... kind of."
334,spotify/web-scripts,TypeScript,"# @spotify/web-scripts

[![Actions Status](https://github.com/spotify/web-scripts/workflows/Tests/badge.svg)](https://github.com/spotify/web-scripts/actions)
[![Version](https://img.shields.io/npm/v/@spotify/web-scripts.svg)](https://www.npmjs.com/package/@spotify/web-scripts)

A monorepo of base configs and CLI wrappers used to speed up development @ Spotify.

Want to use it? Check out the [CLI documentation](https://github.com/spotify/web-scripts/blob/master/packages/web-scripts) to get started!

## About this project

### web-scripts CLI

[@spotify/web-scripts](./packages/web-scripts) is a CLI that combines shared configuration for building, linting, testing, formatting, and releasing libraries for Node and the browser. It is opinionated, but allows configuration to avoid lock-in. You can also pick and choose which scripts you use. It is inspired by other tooling bundles like [react-scripts](https://www.npmjs.com/package/react-scripts) and [kcd-scripts](https://www.npmjs.com/package/kcd-scripts).

```bash
yarn add --dev @spotify/web-scripts husky
```

It is intended to be used within a project as a series of npm scripts.

```json
{
  ""devDependencies"": {
    ""@spotify/web-scripts"": ""^12.0.0"",
    ""husky"": ""^7.0.0""
  },
  ""scripts"": {
    ""build"": ""web-scripts build"",
    ""test"": ""web-scripts test"",
    ""format"": ""web-scripts format"",
    ""lint"": ""web-scripts lint"",
    ""commit"": ""web-scripts commit"",
    ""release"": ""web-scripts release"",
    ""prepare"": ""husky install && web-scripts audit""
  }
}
```

Additionally, you'll need to run the following two commands to create the commit and pre-commit hooks:

```shell
npx husky set .husky/pre-commit 'yarn web-scripts precommit --no-tests --no-typecheck'

npx husky set .husky/commit-msg 'yarn web-scripts commitmsg --edit=""$1""' && \
  sed 's/edit=""""/edit=""$1""/g' .husky/commit-msg | tee .husky/commit-msg
```

NOTE: the second command uses sed to hack around [this bug in husky](https://github.com/typicode/husky/issues/1019) that removes `$1`.

You'll want to add and commit the `.husky` directory.

View the [full CLI documentation](./packages/web-scripts) for more details on how to get started.

### Create a new library

To quickly get started with a new `@spotify/web-scripts` library, you can build one with our [library scaffolding tool](https://github.com/spotify/web-scripts/tree/master/packages/create-web-scripts-library):

```sh
yarn create @spotify/web-scripts-library my-library-name
```

### Spotify shared configurations

The other projects in this repo are shared configurations for common tools we use for building, linting, and formatting our code. They can be installed separately and used by anyone should they opt to follow our standards. We have a [specialized point-of-view on what belongs in our configs](#methodology). They are all used by the web-scripts CLI by default.

- [@spotify/eslint-config](./packages/eslint-config)
- [@spotify/eslint-config-base](./packages/eslint-config-base)
- [@spotify/eslint-config-react](./packages/eslint-config-react)
- [@spotify/eslint-config-typescript](./packages/eslint-config-typescript)
- [@spotify/eslint-plugin](./packages/eslint-plugin)
- [@spotify/prettier-config](./packages/prettier-config)
- [@spotify/tsconfig](./packages/tsconfig)

## Methodology

We have a few guiding principles for this project.

1. Style rules should be auto-fixable and if you can, errors should be linted ahead of runtime.
2. Avoid enforcing code style in static analysis; search for bugs with static analysis, and let auto-formatting deal with code style.
3. Push ""fast"" checks as far left as you can. Optimize for code editors/IDEs fixing issues and enforcing things; write Git hooks that catch things as a failsafe; and use static analysis in CI to prevent bad things from getting into master.
4. `web-scripts` is meant to be configurable. We want to avoid the ""eject"" problem. You should be able to easily take the base configs and extend them in your project.
5. Fewer top-level scripts that encapsulate all behavior for that lifecycle are preferable to lots of smaller, composable scripts. For example, we do `yarn lint` which includes Prettier, ESLint, and TypeScript checks. We could have done `yarn lint`, `yarn typecheck`, and `yarn stylecheck`. That would have meant pushing ""new"" linting to all repos on new versions would be much harder, as we would need to communicate that you need to update your invocation in package.json.

## Related projects we use

- [TypeScript]: a superset of JavaScript which we think helps make code readable and less bug-prone.
- [ESLint]: used for static code analysis with some auto-fixing.
- [Prettier]: use to format code pre-commit and automatically in your editor.
- [Jest]: our preferred JavaScript test framework.
- [husky]: allows us to hook into git events in a convenient way.
- [lint-staged]: allows us to write pre-commit hooks which target specific paths and run a series of commands.

## Contributing

This project adheres to the [Open Code of Conduct][code-of-conduct]. By participating, you are expected to honor this code.

This project is an opinionated approach to static analysis, code formatting, testing, and publishing. It's
the result of consensus between many web engineers inside Spotify, and the default configs will mostly be
written by Spotify employees. _We may reject PRs to the ESLint config if we don't agree that the rule
makes sense as part of our baseline, for example._ Use it if it aligns with your needs!

### Running Tests locally

If you get an error like `Cannot find module '../cjs'` when running `yarn test`, you need to bootstrap web-scripts.

```bash
$ yarn lerna run bootstrap
```

[eslint]: https://eslint.org/
[typescript]: https://www.typescriptlang.org/
[prettier]: https://prettier.io/
[jest]: https://jestjs.io/
[husky]: https://github.com/typicode/husky
[lint-staged]: https://github.com/okonet/lint-staged
[code-of-conduct]: https://github.com/spotify/code-of-conduct/blob/master/code-of-conduct.md

### Releasing

The repo [releases automatically on merge to master](https://github.com/spotify/web-scripts/blob/master/release.sh) using `semantic-release` and `lerna` in a Github Action, if the commit message has the right [semantic-release format](https://github.com/semantic-release/semantic-release#commit-message-format)
"
335,jkwd/spotify,Jupyter Notebook,# spotify
336,mrthlinh/Spotify-Playlist-Recommender,Python,"# Spotify Playlist Recommender
## Table of Contents
1. [The task](#the-task)
2. [The dataset](#the-dataset)
3. [Metrics](#metrics)
4. [Proposed Solutions](#proposed-solutions)
5. [EDA](#eda)
6. [Timeline](#timeline)
7. [Progress](#progress)

## The task
The goal of the challenge is to develop a system for the task of automatic playlist continuation. Given a set of playlist features, participants’ systems shall generate a list of recommended tracks that can be added to that playlist, thereby ‘continuing’ the playlist. We define the task formally as follows:


__Input__

A user-created playlist, represented by:
1. Playlist metadata
2. K seed tracks: a list of the K tracks in the playlist, where K can equal 0, 1, 5, 10, 25, or 100.

__Output__

- A list of 500 recommended candidate tracks, ordered by relevance in decreasing order.

## The dataset
The Million Playlist Dataset (MPD) contains 1,000,000 playlists created by users on the Spotify platform. It can be used by researchers interested in exploring how to improve the music listening experience.

The MPD contains a million user-generated playlists. These playlists were created during the period of January 2010 through October 2017. Each playlist in the MPD contains a playlist title, the track list (including track metadata) editing information (last edit time, number of playlist edits) and other miscellaneous information about the playlist.

__Detailed description__

The Million Playlist Dataset consists of 1,000 slice files. These files have the naming convention of:

mpd.slice._STARTING\_PLAYLIST\_ID\_-\_ENDING\_PLAYLIST\_ID_.json

For example, the first 1,000 playlists in the MPD are in a file called
`mpd.slice.0-999.json` and the last 1,000 playlists are in a file called
`mpd.slice.999000-999999.json`.

Each slice file is a JSON dictionary with two fields:
*info* and *playlists*.


### `info` Field
The info field is a dictionary that contains general information about the particular slice:

   * **slice** - the range of slices that in in this particular file - such as 0-999
   * ***version*** -  - the current version of the MPD (which should be v1)
   * ***generated_on*** - a timestamp indicating when the slice was generated.

### `playlists` field
This is an array that typically contains 1,000 playlists. Each playlist is a dictionary that contains the following fields:


* ***pid*** - integer - playlist id - the MPD ID of this playlist. This is an integer between 0 and 999,999.
* ***name*** - string - the name of the playlist
* ***description*** - optional string - if present, the description given to the playlist.  Note that user-provided playlist descrptions are a relatively new feature of Spotify, so most playlists do not have descriptions.
* ***modified_at*** - seconds - timestamp (in seconds since the epoch) when this playlist was last updated. Times are rounded to midnight GMT of the date when the playlist was last updated.
* ***num_artists*** - the total number of unique artists for the tracks in the playlist.
* ***num_albums*** - the number of unique albums for the tracks in the playlist
* ***num_tracks*** - the number of tracks in the playlist
* ***num_followers*** - the number of followers this playlist had at the time the MPD was created. (Note that the follower count does not including the playlist creator)
* ***num_edits*** - the number of separate editing sessions. Tracks added in a two hour window are considered to be added in a single editing session.
* ***duration_ms*** - the total duration of all the tracks in the playlist (in milliseconds)
* ***collaborative*** -  boolean - if true, the playlist is a collaborative playlist. Multiple users may contribute tracks to a collaborative playlist.
* ***tracks*** - an array of information about each track in the playlist. Each element in the array is a dictionary with the following fields:
   * ***track_name*** - the name of the track
   * ***track_uri*** - the Spotify URI of the track
   * ***album_name*** - the name of the track's album
   * ***album_uri*** - the Spotify URI of the album
   * ***artist_name*** - the name of the track's primary artist
   * ***artist_uri*** - the Spotify URI of track's primary artist
   * ***duration_ms*** - the duration of the track in milliseconds
   * ***pos*** - the position of the track in the playlist (zero-based)

Here's an example of a typical playlist entry:

        {
            ""name"": ""musical"",
            ""collaborative"": ""false"",
            ""pid"": 5,
            ""modified_at"": 1493424000,
            ""num_albums"": 7,
            ""num_tracks"": 12,
            ""num_followers"": 1,
            ""num_edits"": 2,
            ""duration_ms"": 2657366,
            ""num_artists"": 6,
            ""tracks"": [
                {
                    ""pos"": 0,
                    ""artist_name"": ""Degiheugi"",
                    ""track_uri"": ""spotify:track:7vqa3sDmtEaVJ2gcvxtRID"",
                    ""artist_uri"": ""spotify:artist:3V2paBXEoZIAhfZRJmo2jL"",
                    ""track_name"": ""Finalement"",
                    ""album_uri"": ""spotify:album:2KrRMJ9z7Xjoz1Az4O6UML"",
                    ""duration_ms"": 166264,
                    ""album_name"": ""Dancing Chords and Fireflies""
                },
                {
                    ""pos"": 1,
                    ""artist_name"": ""Degiheugi"",
                    ""track_uri"": ""spotify:track:23EOmJivOZ88WJPUbIPjh6"",
                    ""artist_uri"": ""spotify:artist:3V2paBXEoZIAhfZRJmo2jL"",
                    ""track_name"": ""Betty"",
                    ""album_uri"": ""spotify:album:3lUSlvjUoHNA8IkNTqURqd"",
                    ""duration_ms"": 235534,
                    ""album_name"": ""Endless Smile""
                },
                {
                    ""pos"": 2,
                    ""artist_name"": ""Degiheugi"",
                    ""track_uri"": ""spotify:track:1vaffTCJxkyqeJY7zF9a55"",
                    ""artist_uri"": ""spotify:artist:3V2paBXEoZIAhfZRJmo2jL"",
                    ""track_name"": ""Some Beat in My Head"",
                    ""album_uri"": ""spotify:album:2KrRMJ9z7Xjoz1Az4O6UML"",
                    ""duration_ms"": 268050,
                    ""album_name"": ""Dancing Chords and Fireflies""
                },
                // 8 tracks omitted
                {
                    ""pos"": 11,
                    ""artist_name"": ""Mo' Horizons"",
                    ""track_uri"": ""spotify:track:7iwx00eBzeSSSy6xfESyWN"",
                    ""artist_uri"": ""spotify:artist:3tuX54dqgS8LsGUvNzgrpP"",
                    ""track_name"": ""Fever 99\u00b0"",
                    ""album_uri"": ""spotify:album:2Fg1t2tyOSGWkVYHlFfXVf"",
                    ""duration_ms"": 364320,
                    ""album_name"": ""Come Touch The Sun""
                }
            ],

        }


## Challenge Set
I build my own challenge Set based on criteria of official one but with some modification

__Test Set Format__

The challenge set consists of a single JSON dictionary with three fields:

- __date__ - the date the challenge set was generated. This should be ""2018-01-16 08:47:28.198015""
- __version__ - the version of the challenge set. This should be ""v1""
- __playlists__ - an array of 10,000 incomplete playlists. Each element in this array contains the following fields:
  - __pid__ - the playlist ID
  - __name__ - (optional) - the name of the playlist. For some challenge playlists, the name will be missing.
  - __num_holdouts__ - the number of tracks that have been omitted from the playlist
  - __tracks__ - a (possibly empty) array of tracks that are in the playlist. Each element of this array contains the following fields:
    - __pos__ - the position of the track in the playlist (zero offset)
    - __track_name__ - the name of the track
    - __track_uri__ - the Spotify URI of the track
    - __artist_name__ - the name of the primary artist of the track
    - __artist_uri__ - the Spotify URI of the primary artist of the track
    - __album_name__ - the name of the album that the track is on
    - __album_uri__ -- the Spotify URI of the album that the track is on
    - __duration_ms__ - the duration of the track in milliseconds
    - __num_samples__ the number of tracks included in the playlist
    - __num_tracks__ - the total number of tracks in the playlist.

__How to build Test Set__

Dataset contains PID from 0 to 999,999 (1 mil playlists), with M unique Tracks

In order to replicate competition's test set, we remove some playlists from original playlists such that

- All tracks in the challenge set appear in the MPD
- All holdout tracks appear in the MPD

The test set contains 10 difference challenges, each challenge contains 1000 playlists sampled from MPD:

1. Predict tracks for a playlist given its title and the first 5 tracks
2. Predict tracks for a playlist given its title and the first 10 tracks
3. Predict tracks for a playlist given its title and the first 25 tracks
4. Predict tracks for a playlist given its title and 25 random tracks
5. Predict tracks for a playlist given its title and the first 50 tracks
6. Predict tracks for a playlist given its title and 50 random tracks
7. Predict tracks for a playlist given its title and the first 100 tracks
8. Predict tracks for a playlist given its title and 100 random tracks
9. Predict tracks for a playlist given its title and the first 200 tracks
10. Predict tracks for a playlist given its title and 200 random tracks


__How to build train Set__

Train set will be the original set subtracts tracks in test sets


## Metrics
Submissions will be evaluated using the following metrics. All metrics will be evaluated at both the track level (exact track must match) and the artist level (any track by that artist is a match). In the following, we denote the ground truth set of tracks by __G__, and the ordered list of recommended tracks by __R__. The size of a set or list is denoted by __| ⋅ |__, and we use from:to-subscripts to index a list. In the case of ties on individual metrics, earlier submissions are ranked higher.

__R-precision__

R-precision is the number of retrieved relevant tracks divided by the number of known relevant tracks (i.e., the number of withheld tracks):

![](pic/description/r-precision.PNG)

The metric is averaged across all playlists in the challenge set. This metric rewards total number of retrieved relevant tracks (regardless of order).

__Normalized discounted cumulative gain (NDCG)__

Discounted cumulative gain (DCG) measures the ranking quality of the recommended tracks, increasing when relevant tracks are placed higher in the list. Normalized DCG (NDCG) is determined by calculating the DCG and dividing it by the ideal DCG in which the recommended tracks are perfectly ranked:

![](pic/description/NDCG1.PNG)

The ideal DCG or IDCG is, on our case, equal to:

![](pic/description/NDCG2.PNG)

If the size of the set intersection of G and R, is empty, then the DCG is equal to 0. The NDCG metric is now calculated as:

![](pic/description/NDCG3.PNG)

__Recommended Songs clicks__

Recommended Songs is a Spotify feature that, given a set of tracks in a playlist, recommends 10 tracks to add to the playlist. The list can be refreshed to produce 10 more tracks. Recommended Songs clicks is the number of refreshes needed before a relevant track is encountered. It is calculated as follows:

![](pic/description/recSongClick.PNG)

If the metric does not exist (i.e. if there is no relevant track in R), a value of 51 is picked (which is 1 + the maximum number of clicks possible).

__Rank aggregation__

Final rankings will be computed by using the [Borda Count](https://en.wikipedia.org/wiki/Borda_count)  election strategy. For each of the rankings of p participants according to R-precision, NDCG, and Recommended Songs clicks, the top ranked system receives p points, the second system receives p-1 points, and so on. The participant with the most total points wins. In the case of ties, we use top-down comparison: compare the number of 1st place positions between the systems, then 2nd place positions, and so on.

## Proposed Solutions

### Background of Recommender:
A recommender system would suggest relevant products such as books, movies, songs or friends for customer. There are two basic types of recommenders. One is called __content-based filtering__ and the other is __collaborative filtering__. Generally speaking, content-based systems are simpler but come up with less interesting recommendations. Collaborative systems can get very complicated and unwieldy and require a lot of user-generated data, but they’re the state of the art.

__Content-based filtering__: Some experts or customers will manually investigate products and put them label them to various category / attributes. Once we have all features, we can calculate similarity between each item to other and retrieve relevant items.

__Collaborative filtering (CF)__: In contrast of content-based filtering, collaborative filtering does not require manual labels. The system would look at users who have similar taste / behavior to make product suggestion. In collaborative filtering, we also have two types, one is memory-based and other is model-based. While memory-based CF needs to construct a large matrix of user-item to calculate similarity, model-based CF requires machine learning algorithms such as clustering, matrix factorization and deep learning.

![](pic/description/summary_recsys.PNG)

In __Memory-based filtering__, we also have two types, one is User-Item CF and other is Item-Item CF.
- User-Item CF: take a particular person, find people who are similar to that person based on similar ratings, and recommend items those similar people liked. “Customers who are similar to you also liked …”
- Item-Item CF: Item-item filtering will take a particular item, find people who liked that item, and find other items that those people (or people similar to them) also liked (in common?). It takes items and outputs other items as recommendations. “Customers who liked this item also liked …”
- In short User-Item CF is “Customers who are similar to you also liked …” and Item-Item CF is “Customers who liked this item also liked …”
![](pic/description/memory-based.jpg)

Memory-based algorithms are easy to implement and produce reasonable prediction quality. The drawback of memory-based CF is that it doesn't scale to real-world scenarios and doesn't address the well-known cold-start problem, that is when new user or new item enters the system. Model-based CF methods are scalable and can deal with higher sparsity level than memory-based models, but also suffer when new users or items that don't have any ratings enter the system.

In __Model-based filtering__, In model-based CF, we all start with Matric factorization. Matrix factorization is widely used for recommender systems where it can deal better with scalability and sparsity than Memory-based CF.

The goal of Matrix factorization is to learn the latent preferences of users and the latent attributes of items from known ratings (learn features that describe the characteristics of ratings) to then predict the unknown ratings through the dot product of the latent features of users and items. When you have a very sparse matrix, with a lot of dimensions, by doing matrix factorization you can restructure the user-item matrix into low-rank structure, and you can represent the matrix by the multiplication of two low-rank matrices, where the rows contain the latent vector. You fit this matrix to approximate your original matrix, as closely as possible, by multiplying the low-rank matrices together, which fills in the entries missing in the original matrix.

![](pic/description/model-based.png)

### Playlist Recommender:

For our problem, we treat ""user"" as ""playlist"" and ""item"" as ""song"". Because the dataset don't provide much information about each song so we won't use content-based filtering. Therefore we would only focus on
- KNN
- Collaborative Filtering
- Frequent Pattern Growth
- Word2Vec.

### Collaborative Filtering

- Playlist based CF: From similarity between each playlist and how other playlists ""rate"" (include or not) a track, I can infer the current ""rate"".
- Song based CF: From similarity between each songs and how current playlist ""rate"" other songs, I can infer the current ""rate"".

In __Collaborative Filtering__, we following the procedure
1. Construct playlist-song matrix

![](pic/description/user-item-table.png)

""1"" means that song is included in the playlist and ""0"" otherwise. For example, playlist 1 contains song 2 and song 3, song 2 also includes in playlist 2.

2. First we split the data into training and testing set. Refer to [Challenge Set](#challengeset) for how to build test set.

3. Calculate the similarity between song-song or playlist-playlist. In playlist-playlist similarity, we take each row as a vector while in song-song similarity we take column as a vector.

![](pic/description/similarity-matrix.png)

__similarity metrics:__
- Cosine

![](pic/description/cosine-sim.PNG)

- Euclidean

__Formula here__

- Pearson Correlation

__Formula here__

4. Based on the similarity matrix and, we make the prediction on the testing set.

For playlist-playlist, we predict that a playlist __p__ contains song __s__ is given by the weighted sum of all other playlists' containing for song __s__ where the weighting is the cosine similarity between the each playlist and the input playlist __p__. Then normalizing the result.

<img src=""https://latex.codecogs.com/gif.latex?\hat{r}_{ps}&space;=&space;\frac{\sum\limits_{p'}&space;sim(p,&space;p')&space;r_{p's}}{\sum\limits_{p'}|sim(p,&space;p')|}"" title=""\hat{r}_{ps} = \frac{\sum\limits_{p'} sim(p, p') r_{p's}}{\sum\limits_{p'}|sim(p, p')|}"" />


With song-song, we simply replace similarity matrix of playlists by that of songs.

<img src=""https://latex.codecogs.com/gif.latex?\hat{r}_{ps}&space;=&space;\frac{\sum\limits_{s'}&space;sim(s,&space;s')&space;r_{ps'}}{\sum\limits_{s'}|sim(s,&space;s')|}"" title=""\hat{r}_{ps} = \frac{\sum\limits_{p'} sim(p, p') r_{p's}}{\sum\limits_{p'}|sim(p, p')|}"" />

### K Nearest Neighbor

- Playlist-based (like user-based)

```
- Build similarity matrix between playlists (cosine, euclidean, Pearson correlation)
- For each playlist Px:
    n = 1
    While total_track is not 500:
      Find n-th most relevant playlist of Px, called Pr
      Add K (or all) songs in Pr to Px
      Increment n by 1

```

- Song-based (like item-based)

(Our space is the space of similarity)
```
- Build similarity matrix between songs (cosine, euclidean, Pearson Correlation)
- For each playlist Px:
    Compute ""cluster center"" by averaging all similarities
    Get K = 500 nearest neighbor and add to existing songs
```


5. Evaluate based on 4 metrics

![](pic/description/memory-based-proc.png)

### Model Based
Matrix factorization can be done with orthogonal factorization (SVD), probabilistic factorization (PMF) or Non-Negative factorization (NMF).

__Singular Value Decomposition (SVD)__
Collaborative Filtering can be formulated by approximating a matrix __X__ by using singular value decomposition. The winning team at the Netflix Prize competition used SVD matrix factorization models to produce product recommendations, for more information I recommend to read articles: Netflix Recommendations: Beyond the 5 stars and Netflix Prize and SVD. The general equation can be expressed as follows: __X = U × S × V_transpose__

![](pic/description/SVD.png)

__Deep Learning__
Once we have latent feature vectors of playlist and songs, we can feed them to a Deep Learning model or any Machine Learning model to predict results.

![](pic/description/DL-model-based.png)


### Blending / Combine / Hybrid Model
- Combine Memory-Based and Model-based

### Challenge:

1. Single PC maybe cannot handle this dataset.


### EDA:

- Number of:
  - playlists: 1000000
  - Tracks: 66346428
  - Unique tracks: 2262292
  - Unique albums: 734684
  - Unique Titles: 92944

- Distribution of: Playlist length, Number of Albums / Playlist, Number of Artist / Playlist, Number of edits / Playlist, Number of Followers / Playlist, Number of Tracks / Playlist

  ![](pic/description/distribution.png)

  As we can see all distributions are left-skewed which means if we are looking for average value, we should go for ""Median"" not ""Mean""

  - Median of playlist length:  11422438.0
  - Median of number of albums in each playlist:  37.0
  - Median of number of artists in each playlist:  29.0
  - Median of number of edits in each playlist:  29.0
  - Median of number of followers in each playlist:  1.0
  - Median of number of tracks in each playlist:  49.0

- Top 20 Songs in Sporify playlists

  ![](pic/description/top20-song.png)

- Top 20 Artist in Spotify Playlists

  ![](pic/description/top20-artist.png)


### Preliminary Result

1. Description for small Dataset.
  - df_train: Columns = [pid,tid,pos], size = 1mil playlists with 10000 incomplete playlists
  - df_test: Columns = [pid,tid,pos], size = 10000 complete playlists
2. File

  - buildChallengeSet: replicate the challenge set
  - buildPLaylistSongMatrix: export playlist-song matrix in format [pid, list(tid), list(pos)]
  - helper: helping function
  - evalution:
  - baseline

3. Result of item-item / user-item based

|Method| Parameter|R-precision|NDCG|Song Click|Time Taken (s)|
|:----:|:--------:|:---------:|:---:|:-------:|:--------:|
|Playlist-based baseline|| 0.7766 |1.6010|0.0|41.42|
|Song-based baseline||0.7847|0.7975|0.0|4183|
|Word2Vec + Song-based|100-200-300 dimension|0.0030|0.004|10.35|
|Word2Vec + Playlist-based|min_fre = 3, dimension 50| 0.0171|0.015 |8.086|
|Word2Vec + Playlist-based|min_fre = 3, dimension 100| 0.0190|0.0172 |7.805|
|Playlist-based CF (get top K rating songs)||0.7844|0.8011|0.0| approx 12000
|FP Growth|||||



|Method| Parameter|  RMS |R-precision|
|:----:|:--------:|:----:|:---------:|
|Playlist-based CF (get top K rating songs)||0.00716|0.621|
|Song-based CF||||
|Matrix Factorization||||


3. Conclusion

## Progress:

- Use Python library Surprise to do Matrix Factorization

## Timeline:

- Week 0
  - [x] Project Proposal
- Week 1
  - [x] Work on some tutorials of CF from Movie Data.
  - [x] Complete Section 16: __Data Science at Scale__, focus on __Spark and PySpark__
- Week 2
  - [x] Parse JSON to Dataframe and save to disk for later usage.
  - [x] Take a small subset of data and do the same. Start with Memory-based model (Item-item, and user-item) -> Not enough Memory even for small data
  - [x] Apply what you've learned to do some basic EDA of data.
  - [x] Setup Spark to local Machine / server.
  - [x] Read solutions of RecSys of winners.   https://github.com/VasiliyRubtsov/recsys2018/blob/master/json_to_dataframe.ipynb

- Week 3
  - [x] Build a test set
  - [x] Configure to connect Spyder to Server
  - [x] Implement function to compute the metrics
  - [x] Build a giant table of user-item -> DONT DO THIS -> ACTUALLY I DID IT

- Week
  - [x] Word2vec model for song-based model in Spark
  - [x] Word2vec model for playlist-based model in Spark
  - [x] Implement playlist-based CF -> Need to test
  - [x] Implement song-based CF -> Need to test
  - [x] NMF with Sk-learn with scipy.sparse vector
  - [ ] ALS with Vectos.sparse in Spark

- Week:


- Week
  - [ ] Compare model with various Metrics
  - [ ] Tune model and finalize the results.
  - [ ] Finish the report.

## Reference:

1. [Many Types of Recommender Systems](https://blogs.gartner.com/martin-kihn/how-to-build-a-recommender-system-in-python/)
2. [Playlist Recommender](https://medium.com/s/story/spotifys-discover-weekly-how-machine-learning-finds-your-new-music-19a41ab76efe)
3. [Millions song dataset](https://www.kaggle.com/c/msdchallenge)
4. [Amazon Recommendations Item-to-Item Collaborative Filtering](http://www.cs.umd.edu/~samir/498/Amazon-Recommendations.pdf)
5. [Collaborative Filterring at Spottify](https://www.slideshare.net/erikbern/collaborative-filtering-at-spotify-16182818/62)
6. [Implementing CF in Python](https://cambridgespark.com/content/tutorials/implementing-your-own-recommender-systems-in-Python/index.html)
7. [Implementing CF in Python with Last.fm dataset](http://www.salemmarafi.com/code/collaborative-filtering-with-python/)
8. [Theory and implementation of CF -must read](https://towardsdatascience.com/various-implementations-of-collaborative-filtering-100385c6dfe0)
9. [must read](http://blog.ethanrosenthal.com/2015/11/02/intro-to-collaborative-filtering/)
10. [Spark API collaborative filtering](https://spark.apache.org/docs/latest/mllib-collaborative-filtering.html)
11. [Large-Scale Parallel Collaborative Filtering for the Netflix Prize](https://link.springer.com/chapter/10.1007%2F978-3-540-68880-8_32)
12. [Advantage of item-based CF over user-based CF](https://en.wikipedia.org/wiki/Item-item_collaborative_filtering)
13. [Good Paper about their work](https://drive.google.com/file/d/1wmNnkb9rOetCNGp4m5WbT_I0Fh7tANld/view)
14. [FPGrowth in Spark -> You may use it after CF](https://spark.apache.org/docs/2.3.0/api/python/pyspark.ml.html#pyspark.ml.fpm.FPGrowth)
15. [Matrix Factorization at scale in Spark](https://www.slideshare.net/MrChrisJohnson/collaborative-filtering-with-spark)
16. [ALS without Spark](https://medium.com/radon-dev/als-implicit-collaborative-filtering-5ed653ba39fe)
## Software Installation:
1. [Install Spark](https://medium.com/@GalarnykMichael/install-spark-on-ubuntu-pyspark-231c45677de0)
Or you just need to execute this
```
  conda install pyspark
```

2. https://sigdelta.com/blog/how-to-install-pyspark-locally/

3. [Set up Spark for Jupyter Notebook](https://datawookie.netlify.com/blog/2017/07/accessing-pyspark-from-a-jupyter-notebook/)
"
337,seth20201/SpotifyBot-by-matt,Python,"# SpotifyBot-by-matt
Spotify Upgrade Bot for Discord

Creating Discord bot and getting it's token.

1 - Visit https://discordapp.com/developers/applications/ (and login)

2 - Click on ""New Application"", give it whatever name you want to.

3 - Once it's created, click on ""Bot"" tab.

4 - Click ""Add bot"", and ""Yes, do it!"".

5 - Perfect, now set-up your bot (add name and shits like that),
and under ""Token"" click on ""Copy""

6 - Invite bot with Administrator permissions here https://discordapi.com/permissions.html
* You can get client ID under OAuth2 on https://discordapp.com/developers


Setting up Bot

1 - Open config.json.

2 - Paste values into json config (Like token etc..)

Token - Token of your bot 
Prefix - Thing that will be used to execute commands (for example !)

Channel - Channel where users can upgrade thier accounts

AdministratorRole - Role that will have access to all commands

StockChannel - Channel where users can check stocks

3 - Refill accounts in ""Accounts"" folder.

4 - Generate keys by double clicking on keygen.bat or keygen.exe

5 - Run Bot by double clicking on SpotifyBot.bat or SpotifyBot.exe

6 - Congratulations, bot is now ready to be used! :)


Commands

Use all commands without <> it's only as example

!help - Use this command to check all available commands

!help command - Use this command to check help for specific command.

!redeem country email code - Use this to invite your account to Spotify Family Plan

!refresh - Use this command to detect newly added codes in codes file.

!restock file - Use this command to restock bot (file is filename without .txt) - Currently Slow

!stock country - Check stocks for specific country

!stock all - Check stocks for all countries

!info - informations about bot.

! is only used as examply, you need to use prefix you've set


Informations

This bot use this capture format.

User:Pass:Country:ZipCode:City:Address

This is basic Spotify Upgrade Bot, you can use it for your upgrade service.

However, as it's open source under GPL (General Public License), you should
and have to share any update you made to code for free.
You can release it on internet, or pm me and i will add your version to this thread.

This bot is fully developed by tomatoj(https://www.nulled.to/user/2158082-matoooo), from love to leechers.
Billie is best https://www.nulled.to/user/1236023-billieeilish
"
338,rpieja/i3spotifystatus,Python,"# i3spotifystatus

![screen](https://raw.githubusercontent.com/pradzio1/i3spotifystatus/master/res/scr.png)

### About:
i3 status isn't particularly the best status generator for i3bar in terms of customization. But it's my favourite, because it works, it's easy to use, and it's bundled with i3wm so I don't have to think about installing it. Feature that lack I've been missing the most that wasn't built into i3status was notifying about author and title of currently played song in spotify client. I have found some gists written by [@csssuf](https://github.com/csssuf), and they work well, but due to format of data outputed by i3status all of the information about colors of text was lost and i3bar was showing only monochromatic text.

i3spotifystatus is a tiny python (with even smaller bash script because I was too lazy) script that parses JSON outputed by i3status, adds information about song author and title and outputs it to i3bar.

### What you'll need:
* DBus
* [@csssuf](https://github.com/csssuf)'s awk script, you can find it [here](https://gist.github.com/csssuf/13213f23191b92a7ce77#file-spotify_song-awk)
* Spotify client (obviously)
* You'll need FontAwesome if you want to display spotify logo on the bar.

### How to install:

* clone repository to your prefered location
* in your i3 config file (usually placed in ~/.config/i3/) set `status_command` to `i3status | /path/to/your/pystatus.py` in `bar` section, like this:

```
bar {
    status_command i3status | ~/Documents/GitHub/i3spotifystatus/pystatus.py
}
```

If you are using i3-gaps, it will probably contain the `status_command i3status` already. You just have to add the pipe and the python script path after. 

* in `i3status.conf` file (create one if you don't have any -> read i3status doc for more information) set `output_format = ""i3bar""` inside the 'general' configuration, like this:

```
general {
    ...
    output_format = ""i3bar""
    ...
}
```

* Reload i3 configs (usually `Mod + Shift + R`, if you haven't changed it).

Tip: If you are not sure how this whole thing works, you can comment your config files using `#` at the beginning of each line. This way it is easy to revert the changes.

### Credits:
Script is based on sample wrapper commited on original i3status repository.

Awk script by @csssuf.

"
339,kubukoz/spotify-next,Scala,"# spotify-next

[![License](http://img.shields.io/:license-Apache%202-green.svg)](http://www.apache.org/licenses/LICENSE-2.0.txt)

A small program making it easier to filter out music on Spotify.

[![asciicast](demo.gif)](https://asciinema.org/a/LuppXgCyKwvpRAtO14yTh8Y2A)

## Installation

1. Create an application in the Spotify API dashboard. Add a redirect URI pointing to `http://localhost:4321/login`.
The port `4321` is configured in the `.spotify-next.json` config file (see [usage](#usage)).

1. If you have [coursier](https://get-coursier.io), this will install the app in your current working directory:

```bash
coursier bootstrap com.kubukoz:spotify-next_3:1.4.0 -o spotify-next

# now you can run the app like this:
./spotify-next --help
```

## Build from source

Alternatively, if you want a fresh-out-of-the-oven version, you can build it from source:

1. `sbt stage`

This will create a launcher at `./target/universal/stage/bin/spotify-next`.

## Usage

The application requires some configuration (e.g. the client ID for the Spotify Web API).
It's stored in a file at `$XDG_CONFIG_HOME/spotify-next/config.json` or `$HOME/.config/spotify-next/config.json` (whichever works first).
When you first run the application, or if that file is deleted, the application will ask and attempt to create one.

The configuration defines the port for the embedded HTTP server used for authentication. The server will only start when the login flow is triggered, and stop afterwards.

```
$ ./spotify-next --help

Usage:
    spotify-next login
    spotify-next skip
    spotify-next drop
    spotify-next forward
    spotify-next jump
    spotify-next s
    spotify-next d
    spotify-next f
    spotify-next j
    spotify-next repl

spotify-next: Gather great music.

Options and flags:
    --help
        Display this help text.
    --version, -v
        Print the version number and exit.

Subcommands:
    login
        Log into Spotify
    skip
        Skip to next track without any changes
    drop
        Drop current track from the current playlist and skip to the next track
    forward
        Fast forward the current track by a percentage of its length (10% by default)
    jump
        Fast forward the current track to the next section
    s
        Alias for `skip`
    d
        Alias for `drop`
    f
        Alias for `forward`
    j
        Alias for `jump`
    repl
        Run application in interactive mode
```

You can run the login command to be prompted for authorization, or you can rely on the fallback mechanism of all API calls - when one fails with 401 Unauthorized, you'll see the response and be prompted to log in. The call will be retried once after you successfully log in.

The application automatically saves the token to the configuration file after successful logins.
"
340,catppuccin/spicetify,CSS,"<h3 align=""center"">
	<img src=""https://raw.githubusercontent.com/catppuccin/catppuccin/main/assets/logos/exports/1544x1544_circle.png"" width=""100"" alt=""Logo""/><br/>
	<img src=""https://raw.githubusercontent.com/catppuccin/catppuccin/main/assets/misc/transparent.png"" height=""30"" width=""0px""/>
	Catppuccin for <a href=""https://github.com/spicetify/spicetify-cli"">Spicetify</a>
	<img src=""https://raw.githubusercontent.com/catppuccin/catppuccin/main/assets/misc/transparent.png"" height=""30"" width=""0px""/>
</h3>

<p align=""center"">
    <a href=""https://github.com/catppuccin/spicetify/stargazers""><img src=""https://img.shields.io/github/stars/catppuccin/spicetify?colorA=363a4f&colorB=b7bdf8&style=for-the-badge""></a>
    <a href=""https://github.com/catppuccin/spicetify/issues""><img src=""https://img.shields.io/github/issues/catppuccin/spicetify?colorA=363a4f&colorB=f5a97f&style=for-the-badge""></a>
    <a href=""https://github.com/catppuccin/spicetify/contributors""><img src=""https://img.shields.io/github/contributors/catppuccin/spicetify?colorA=363a4f&colorB=a6da95&style=for-the-badge""></a>
</p>

![Spicetify Theme Preview](assets/preview.png)

## Usage

1. Follow the installation instructions for [Spicetify](https://spicetify.app/docs/getting-started)
   * Note: The installation instructions for linux have you setting `/opt/spotify` and `/opt/spotify/Apps/*` permissions to `777`. This is not good practice and should be avoided. If you want, you can set the group ownership for these paths to one that your user is apart of (i.e. `users`), or you can create a new group and add it as a secondary group to your user. After that you can use the following command to give access to the group:
      ```
      GROUP=<group_name>
      sudo chgrp $GROUP /opt/spotify
      sudo chgrp -R $GROUP /opt/spotify/Apps
      sudo chmod 775 /opt/spotify
      sudo chmod 775 -R /opt/spotify/Apps
      ```
2. Follow the [installation and basic usage guide](https://spicetify.app/docs/getting-started) to setup Spicetify

3. Clone the repository. There are 4 flavours for this theme: `mocha`, `macchiato`, `frappe` and `latte`. All themes are present in their specific folders. Move the theme folders as well as the extensions to spicetify's config directory by running:
      ```
      cp -r catppuccin-* ~/.config/spicetify/Themes/
      cp js/* ~/.config/spicetify/Extensions/
      ```

4. Set theme and color scheme. Supported color schemes: `rosewater`, `flamingo`, `mauve`, `pink`, `maroon`, `red`, `peach`, `yellow`, `green`, `teal`, `blue`, `sky`, `lavender`. Example: the `mocha` theme with `lavender` color scheme can be set as:
   ```
   spicetify config current_theme catppuccin-mocha
   spicetify config color_scheme lavender
   spicetify config inject_css 1 replace_colors 1 overwrite_assets 1
   spicetify config extensions catppuccin-mocha.js
   ```
5. If you want to update the theme without opening it up run `spicetify update`. If you want to update the theme and open/restart Spotify at the same time run `spicetify apply`
6. When changing the theme, remember to change the JS extension to the appropriate theme flavour. Extensions can be removed by running `spicetify config extensions catppuccin-<flavour-name>.js` Example: `spicetify config extensions catppuccin-mocha.js`. Then after changing to your new theme, enable the appropriate extension by running `spicetify config extensions catppuccin-<flavour-name>.js` 
## 📜 License

Catppuccin is released under the MIT license, which grants the following permissions:

-   Commercial use
-   Distribution
-   Modification
-   Private use

For more convoluted language, see the [LICENSE](https://github.com/catppuccin/catppuccin/blob/main/LICENSE).

## 💝 Thanks to

- [davidbgonz](https://github.com/davidbgonz)
- [OlaoluwaM](https://github.com/OlaoluwaM)
- [ghostx31](https://github.com/ghostx31)

<p align=""center""><img src=""https://raw.githubusercontent.com/catppuccin/catppuccin/main/assets/footers/gray0_ctp_on_line.svg?sanitize=true"" /></p>
<p align=""center"">Copyright &copy; 2022-present <a href=""https://github.com/catppuccin"" target=""_blank"">Catppuccin Org</a>
<p align=""center""><a href=""https://github.com/catppuccin/catppuccin/blob/main/LICENSE""><img src=""https://img.shields.io/static/v1.svg?style=for-the-badge&label=License&message=MIT&logoColor=d9e0ee&colorA=363a4f&colorB=b7bdf8""/></a></p>
"
341,jdxcode/tmux-spotify-info,AppleScript,"tmux-spotify-info
=================

Shows current song playing on spotify in your tmux statusline. OSX only.

Installation
============

Put `tmux-spotify-info` in your path. I suggest `~/bin`.

Add the following to `~/.tmux.conf`

```
set -g status-right '#(tmux-spotify-info)'
```

Or for a more complete statusline like [the one I have](https://github.com/dickeyxxx/dotfiles/blob/master/tmux.conf)

Other Tmux Plugins
==================

* [tmux-cpu-info](https://github.com/dickeyxxx/tmux-cpu-info)
* [tmux-weather](https://github.com/dickeyxxx/tmux-weather)
"
342,spotify/homebrew-public,Ruby,"# Homebrew Spotify

These formulae provide software open-sourced by Spotify.


## How do I install these formulae?
Just `brew tap spotify/public` and then `brew install <formula>`.

If the formula conflicts with one from another tap, you can `brew install spotify/public/<formula>`.

You can also install via URL:

    brew install https://raw.github.com/spotify/homebrew-public/master/<formula>.rb


## Docs
`brew help`, `man brew`, or the Homebrew [README](https://github.com/Homebrew/brew/blob/master/docs/README.md).
"
343,micahco/spotify-now,Shell,"# spotify-now

A bash script that gives you information on the current Spotify song.

![scrot](https://raw.githubusercontent.com/getmicah/spotify-now/master/scrot.png)


## Installation
Simply copy the source script to your bash path.

1. `git clone https://github.com/getmicah/spotify-now.git`
2. `cd spotify-now`
3. `sudo cp spotify-now /usr/bin`

Arch Linux users can install [spotify-now-git](https://aur.archlinux.org/packages/spotify-now-git) from the AUR.


## Usage

`spotify-now -i ""<info>"" -p ""<paused>"" -e ""<error>""`

`""<info>""` can contain the following keywords:

* `%album`
* `%artist`
* `%disc`
* `%title`
* `%track`

`""<error>""` custom message when Spotify is closed.

`""<paused>""` custom message when Spotify is paused.

`--escape` outputs the `""<input>""` with the special characters escaped.

NOTE: all the parameters are optional and order doesn't matter (--escape has to be at the end).

**Example:**

```
$ spotify-now -i ""%artist - %title""
Kendrick Lamar - Alright
```

```
$ spotify-now -p ""paused"" -e ""stopped"" -i ""Album: %album""
Album: To Pimp A Butterfly
```

If Spotify is closed:

```
$ spotify-now -e ""Spotify is closed""
Spotify is closed
```

If Spotify is paused:

```
$ spotify-now -p ""paused""
paused
```

With the `--escape` parameter:
```
$ spotify-now -i ""%artist - %title""
Oshi - I <3 U

$ spotify-now -i ""%artist - %title"" --escape
Oshi - I &lt;3 U
```


## How does it work?
spotify-now sends a dbus message to the Spotify player which then 
returns information on the song currently playing. This data is then parsed using a combination of grep, tail, and cut commands.
"
344,miraclx/freyr-js,JavaScript,"<!-- markdownlint-disable MD001 MD007 MD023 MD041 MD051 -->

<div align=""center"">
  <a href=""https://github.com/miraclx/freyr-js"">
    <img src=""https://github.com/miraclx/freyr-js/raw/master/media/logo.gif"" alt=""FreyrJS - connoisseur of music"">
  </a>

  # Freyr

  <h4>
    Download songs from Spotify, Apple Music and Deezer.
  </h4>

  [![GitHub](https://img.shields.io/badge/by-miraclx-gray&plastic)](https://github.com/miraclx)
  [![CodeFactor Grade](https://www.codefactor.io/repository/github/miraclx/freyr-js/badge/master)](https://www.codefactor.io/repository/github/miraclx/freyr-js/overview/master)
  [![License](https://img.shields.io/github/license/miraclx/freyr-js)](https://github.com/miraclx/freyr-js)
  [![CI checks](https://github.com/miraclx/freyr-js/actions/workflows/tests.yml/badge.svg)](https://github.com/miraclx/freyr-js/actions/workflows/tests.yml)
  [![Docker Cloud Build Status](https://img.shields.io/docker/cloud/build/freyrcli/freyrjs)](https://hub.docker.com/r/freyrcli/freyrjs/builds)

  [![NPM Downloads](https://badgen.net/npm/dm/freyr)](https://www.npmjs.com/package/freyr)
  [![Docker Cloud Pull Status](https://img.shields.io/docker/pulls/freyrcli/freyrjs.svg)](https://hub.docker.com/r/freyrcli/freyrjs)
  [![NodeJS Version](https://img.shields.io/badge/node-%3E%3D%20v14-brightgreen)](https://github.com/miraclx/freyr-js)
  [![Python Version](https://img.shields.io/badge/python-%3E%3D%20v3.2-blue)](https://github.com/miraclx/freyr-js)

  [![Total Lines Of Code](https://tokei.rs/b1/github/miraclx/freyr-js?category=code)](https://github.com/miraclx/freyr-js)
  [![GitHub top language](https://img.shields.io/github/languages/top/miraclx/freyr-js)](https://github.com/miraclx/freyr-js)
  [![GitHub repo size](https://img.shields.io/github/repo-size/miraclx/freyr-js)](https://github.com/miraclx/freyr-js)

  <sub>Built with ❤︎ by
  <a href=""https://github.com/miraclx"">Miraculous Owonubi</a>

</div>

## Demo

[![ASCII Demo](https://github.com/miraclx/freyr-js/raw/master/media/demo.gif)](https://asciinema.org/a/KH5xyBq9G8Wf5Dyvj6AfqXwYr?autoplay=1 ""Click to view ASCII"")

## Overview

### What freyr does

Depending on the URLs you provide freyr, it will;

1. Extract track metadata (`title`, `album`, `artist`, etc.) from the streaming service (Spotify if you provide a Spotify URL).
2. Then, it queries sources (e.g. YouTube), classifies the results to find you the best sounding, most accurate audio and downloads that in the raw format.
3. Next, it processes each track, encoding them in an [Apple AAC](https://en.wikipedia.org/wiki/Advanced_Audio_Coding) format (`.m4a` file extension) at a bitrate of `320kbps` for high quality.
4. Then, it embeds all the metadata and the album art into each track.
5. And finally, it organizes all the files into a structured library ([example](https://miraclx.github.io/freyr-demo-library/)).

### Metadata Availability

Here's a list of the metadata that freyr can extract from each streaming service:

|      Meta      | Spotify | Apple Music | Deezer |
| :------------: | :-----: | :---------: | :----: |
| `Title`        |   ✔   |     ✔     |   ✔  |
| `Artist`       |   ✔   |     ✔     |   ✔  |
| `Composer`     |   ✗   |     ✔     |   ✔  |
| `Album`        |   ✔   |     ✔     |   ✔  |
| `Genre`        |   ✗   |     ✔     |   ✔  |
| `Track Number` |   ✔   |     ✔     |   ✔  |
| `Disk Number`  |   ✔   |     ✔     |   ✔  |
| `Release Date` |   ✔   |     ✔     |   ✔  |
| `Rating`       |   ✔   |     ✔     |   ✔  |
| `Album Artist` |   ✔   |     ✔     |   ✔  |
| `ISRC`         |   ✔   |     ✔     |   ✔  |
| `Label`        |   ✔   |     ✔     |   ✔  |
| `Copyright`    |   ✔   |     ✔     |   ✗  |
| `Cover Art`    |   ✔   |     ✔     |   ✔  |

## Support the project

#### Donate via

[![Patreon Donation](https://img.shields.io/badge/Patreon-donate-f96854?logo=patreon)](https://patreon.com/miraclx)
[![Liberapay receiving](https://img.shields.io/badge/Liberapay-donate-f6c915?logo=liberapay)](https://liberapay.com/miraclx)
[![Ko-fi Donation](https://img.shields.io/badge/-donate-ff5e5b?logo=Ko-fi&label=Ko-fi)](https://ko-fi.com/miraclx)

#### Crypto

- Via Coinbase (`BTC`, `ETH`, `USDC`, `LTC`, `DAI`, `BCH`):

  - Support us with [`$5`](https://commerce.coinbase.com/checkout/96849d29-e051-4855-8bac-97f3f2e1a7a8) | [`$10`](https://commerce.coinbase.com/checkout/c8901c03-217a-475a-a764-98cdc6f561e9) | [`$15`](https://commerce.coinbase.com/checkout/e9be7d37-1ee7-4cc6-9daf-fde68c0697cc) | [`$20`](https://commerce.coinbase.com/checkout/4254e8a5-2071-445c-a0bd-c43a4e0d09b0)
  - Donate [anything you want](https://commerce.coinbase.com/checkout/466d703a-fbd7-41c9-8366-9bdd3e240755)

- Or Directly:

  - [![BTC](https://img.shields.io/badge/-Bitcoin-5b5b5b?logo=bitcoin)](https://explorer.btc.com/btc/address/bc1qqe5y9kw7ewne8njdces8e4ajx5u7zhfftdvl33): `bc1qqe5y9kw7ewne8njdces8e4ajx5u7zhfftdvl33`
  - [![XLM](https://img.shields.io/badge/-Stellar-5b5b5b?logo=stellar)](https://keybase.io/miraclx): `GB6GPPXXJTQ6EFYQQ4PFA4WEAT5G2DIDILOEDLYH76743UUVDDU4KOWY`
  - [![ZEC](https://img.shields.io/badge/-Zcash-5b5b5b?logo=cash-app&logoColor=ecb127)](https://keybase.io/miraclx): `zs10awcwm4uwpjr3mxxdwe03fda0j0zn95s4hu3qxlvhfajjw8es98ftmpaava7zh735x9s22pan0l`

## Installation

### Manually

<details>
<summary id=""requirements""> Requirements </summary>

  <sub> _Hey there, you might want to consider a cleaner and straight-forward installation method, without having to manually setup the requirements. If so, checkout the [Docker installation method](#docker)_ </sub>

  <details>
  <summary>python >= v3.2</summary>

  Download for your individual platforms here <https://www.python.org/downloads/>

  Linux: _(check individual package managers)_

  - Debian: `sudo apt-get install python3.6`
  - Arch Linux: `sudo pacman -S python`
  - Android (Termux): `apt install python`
  - Alpine Linux: `sudo apk add python3`

  </details>

  <details>
  <summary>nodejs >= v14.0.0</summary>

  Download for your individual platforms here <https://nodejs.org/en/download/>

  macOS + Linux: [nvm](https://github.com/nvm-sh/nvm) recommended.

  ```bash
  # install node with this nvm command
  # freyr works with a minimum of v14
  $ nvm install --lts
  ```

  - Android (Termux): `apt install nodejs`
  - Alpine Linux: `sudo apk add nodejs`

  </details>

  <details>
  <summary>ffmpeg >= v0.9</summary>

  <!-- textlint-disable -->
  Download for your individual platforms here <https://ffmpeg.org/download.html>
  <!-- textlint-enable -->

  - Windows + macOS:
    - Ensure to extract the `ffmpeg` binary from the compressed file, if it's in one.
    - make sure it's available in your `PATH`
    - otherwise, set `FFMPEG_PATH` to explicitly specify binary to use
  - Linux: _(check individual package managers)_
    - Debian: The `ppa:mc3man/trusty-media` PPA provides recent builds
    - Arch Linux: `sudo pacman -S ffmpeg`
    - Android (Termux): `apt install ffmpeg`
    - Alpine Linux: `sudo apk add ffmpeg`

  </details>

  <details>
  <summary>AtomicParsley >= (v0.9.6 | 20200701)</summary>

  First, download the latest release for your individual platforms here <https://github.com/wez/atomicparsley/releases/latest>

  Then;

  - Windows:
    - unzip and place the `AtomicParsley.exe` in your `PATH`.
    - or the `bins/windows` folder of this project directory. Create the folder(s) if they don't exist.
  - Linux + macOS _(the brew package isn't recommended)_:
    - unzip and place the `AtomicParsley` in your `PATH`.
    - or the `bins/posix` folder of this project directory. Create the folder(s) if they don't exist.
  - Alternatively:
    - Debian: `sudo apt-get install atomicparsley`
    - Arch Linux: `sudo pacman -S atomicparsley`
    - Android (Termux): `apt install atomicparsley`
    - Build from source: See [wez/AtomicParsley](https://github.com/wez/atomicparsley)

  </details>

  > _Please note that [YouTube Music](https://music.youtube.com/) must be available in your region for freyr to successfully work, this is because freyr sources raw audio from [YouTube Music](https://music.youtube.com/)._

  ---
</details>

First start by ensuring all requirements listed above are satisfied. Thereafter, you can use either of these options to install freyr:

- [NPM](https://github.com/npm/cli): `npm install -g freyr`
- [Yarn](https://github.com/yarnpkg/yarn): `yarn global add freyr`

- <details>
  <summary>Or you can build from source</summary>

  ```bash
  git clone https://github.com/miraclx/freyr-js.git freyr
  cd freyr
  ```

  | % | NPM | Yarn |
  | - | --- | ---- |
  | pull dependencies | `npm install` | `yarn install` |
  | install globally | `npm link` | `yarn link` |

  </details>

### Docker

For convenience, we provide [officially prebuilt images](https://hub.docker.com/r/freyrcli/freyrjs/tags?name=latest) (automated builds from this repo) so you can skip the setup and build process and get right into it.

Image Size: [![Docker Image Size](https://img.shields.io/docker/image-size/freyrcli/freyrjs/latest?color=gray&label=%20&logo=docker)](https://hub.docker.com/r/freyrcli/freyrjs/tags?name=latest)

#### Usage (docker)

```bash
docker run -it --rm -v $PWD:/data freyrcli/freyrjs [options, arguments and queries...]
```

You can also create a handy alias to skip remembering that whole line everytime

```bash
alias freyr='docker run -it --rm -v $PWD:/data freyrcli/freyrjs'
```

> The `-v $PWD:/data` part sets the working directory for freyr to the current working directory.
> For example, you can use `-v ~/Music/freyr:/data` to set the work directory and consequently, default save location to `~/Music/freyr`.
>
> Please ensure the folder on the host already exists, create it if not. Otherwise, docker autocreates the folder as root and that causes unpleasant `Permission Denied` issues when you run freyr.

[See [Docker Development](#docker-development)]

## Getting Started

### Usage

```text
Usage: freyr [options] [query...]
Usage: freyr [options] [subcommand]
```

[See [Service Support](#service-support)].

#### Show freyr help and list subcommands

`freyr --help`

#### Get CLI Help

*The `get` subcommand is implicit and default.

```text
Usage: freyr [options] get [options] [query...]
Usage: freyr [options] [query...]
```

<details>
<summary> <code>freyr get --help</code> </summary>

<!-- editorconfig-checker-disable -->
```console
    ____
   / __/_______  __  _______
  / /_/ ___/ _ \/ / / / ___/
 / __/ /  /  __/ /_/ / /
/_/ /_/   \___/\__, /_/
              /____/ v0.8.1

freyr - (c) Miraculous Owonubi <omiraculous@gmail.com>
-------------------------------------------------------------
Usage: freyr get [options] [query...]

Download music tracks from queries

Options:
  -i, --input <FILE>           use URIs found in the specified FILE as queries (file size limit: 1 MiB)
                               (each query on a new line, use '#' for comments, whitespaces ignored)
                               (example: `-i queue.txt`)
  -b, --bitrate <N>            set audio quality / bitrate for audio encoding
                               (valid: 96,128,160,192,256,320) (default: ""320k"")
  -n, --chunks <N>             number of concurrent chunk streams with which to download (default: 7)
  -r, --retries <N>            set number of retries for each chunk before giving up
                               (`infinite` for infinite) (default: 10)
  -t, --meta-retries <N>       set number of retries for collating track feeds (`infinite` for infinite) (default: 5)
  -d, --directory <DIR>        save tracks to DIR/..
  -c, --cover <NAME>           custom name for the cover art, excluding the extension (default: ""cover"")
  --cover-size <SIZE>          preferred cover art dimensions
                               (format: <width>x<height> or <size> as <size>x<size>) (default: ""640x640"")
  -C, --no-cover               skip saving a cover art
  -x, --format <FORMAT>        preferred audio output format (to export) (unimplemented)
                               (valid: mp3,m4a,flac) (default: ""m4a"")
  -D, --downloader <SERVICE>   specify a preferred download source or a `,`-separated preference order
                               (valid: youtube,yt_music) (default: ""yt_music"")
  -l, --filter <MATCH>         filter matches off patterns (repeatable and optionally `,`-separated)
                               (value omission implies `true` if applicable)
                               (format: <key=value>) (example: title=""when we all fall asleep*"",type=album)
                               See `freyr help filter` for more information
  -L, --filter-case            enable case sensitivity for glob matches on the filters
  -z, --concurrency <SPEC>     key-value concurrency pairs (repeatable and optionally `,`-separated)
                               (format: <[key=]value>) (key omission implies track concurrency)
                               (valid(key): queries,tracks,trackStage,downloader,encoder,embedder)
                               (example: `queries=2,downloader=4` processes 2 CLI queries,
                               downloads at most 4 tracks concurrently)
  --gapless                    set the gapless playback flag for all tracks
  -f, --force                  force overwrite of existing files
  -o, --config <FILE>          specify alternative configuration file
  -p, --playlist <FILENAME>    create playlist for all successfully collated tracks
  -P, --no-playlist            skip creating a playlist file for collections
  --playlist-dir <DIR>         directory to save playlist file to, if any, (default: tracks base directory)
  --playlist-noappend          do not append to the playlist file, if any exists
  --playlist-noescape          do not escape invalid characters within playlist entries
  --playlist-namespace <SPEC>  namespace to prefix on each track entry, relative to tracks base directory
                               useful for, but not limited to custom (file:// or http://) entries
                               (example, you can prefix with a HTTP domain path: `http://webpage.com/music`)
  --playlist-force-append      force append collection tracks to the playlist file
  -s, --storefront <COUNTRY>   country storefront code (example: us,uk,ru)
  -T, --no-tree                don't organise tracks in directory structure `[DIR/]<ARTIST>/<ALBUM>/<TRACK>`
  --tags                       tag configuration specification (repeatable and optionally `,`-separated) (unimplemented)
                               (format: <key=value>) (reserved keys: [exclude, account])
  --via-tor                    tunnel network traffic through the tor network (unimplemented)
  --cache-dir <DIR>            specify alternative cache directory, `<tmp>` for tempdir
  -m, --mem-cache <SIZE>       max size of bytes to be cached in-memory for each download chunk
  --no-mem-cache               disable in-memory chunk caching (restricts to sequential download)
  --timeout <N>                network inactivity timeout (ms) (default: 10000)
  --no-auth                    skip authentication procedure
  --no-browser                 disable auto-launching of user browser
  --no-net-check               disable internet connection check
  --ffmpeg <PATH>              explicit path to the ffmpeg binary
  --atomic-parsley <PATH>      explicit path to the atomic-parsley binary
  --no-stats                   don't show the stats on completion
  --pulsate-bar                show a pulsating bar
  --single-bar                 show a single bar for the download, hide chunk-view
                               (default when number of chunks/segments exceed printable space)
  -h, --help                   show this help information

Environment Variables:
  SHOW_DEBUG_STACK             show extended debug information
  FFMPEG_PATH                  custom ffmpeg path, alternatively use `--ffmpeg`
  ATOMIC_PARSLEY_PATH          custom AtomicParsley path, alternatively use `--atomic-parsley`

Info:
  When downloading playlists, the tracks are downloaded individually into
  their respective folders. However, a m3u8 playlist file is generated in
  the base directory with the name of the playlist that lists the tracks
```
<!-- editorconfig-checker-enable -->

</details>

#### Download a Spotify track

<details>
<summary> <code>freyr spotify:track:5FNS5Vj69AhRGJWjhrAd01</code> </summary>

<!-- editorconfig-checker-disable -->
```console
    ____
   / __/_______  __  _______
  / /_/ ___/ _ \/ / / / ___/
 / __/ /  /  __/ /_/ / /
/_/ /_/   \___/\__, /_/
              /____/ v0.8.1

freyr - (c) Miraculous Owonubi <omiraculous@gmail.com>
-------------------------------------------------------------
Checking directory permissions...[done]
[spotify:track:5FNS5Vj69AhRGJWjhrAd01]
 [•] Identifying service...[Spotify]
 [•] Checking authentication...[unauthenticated]
 [Spotify Login]
  [•] Logging in...[done]
 Detected [track]
 Obtaining track metadata...[done]
  ➤ Title: Slow Dance
  ➤ Album: Slow Dance
  ➤ Artist: AJ Mitchell
  ➤ Year: 2019
  ➤ Playtime: 02:58
 [•] Collating...
 • [01 Slow Dance]
    | ➤ Collating sources...
    |  ➤ [•] YouTube Music...[success, found 1 source]
    | ➤ Awaiting audiofeeds...[done]
    | [✓] Got album art
    | [✓] Got raw track file
    | [•] Post Processing...
 [•] Download Complete
 [•] Embedding Metadata...
  • [✓] 01 Slow Dance
[•] Collation Complete
============ Stats ============
 [•] Runtime: [31.7s]
 [•] Total queries: [01]
 [•] Total tracks: [01]
     » Skipped: [00]
     ✓ Passed:  [01]
     ✕ Failed:  [00]
 [•] Output directory: [.]
 [•] Cover Art: cover.png (640x640)
 [•] Total Output size: 7.30 MB
 [•] Total Network Usage: 3.12 MB
     ♫ Media: 3.02 MB
     ➤ Album Art: 106.76 KB
 [•] Output bitrate: 320k
===============================
```
<!-- editorconfig-checker-enable -->

</details>

#### Download an Apple Music album

<details>
<summary> <code> freyr https://music.apple.com/us/album/im-sorry-im-not-sorry-ep/1491795443 </code> </summary>

<!-- editorconfig-checker-disable -->
```console
    ____
   / __/_______  __  _______
  / /_/ ___/ _ \/ / / / ___/
 / __/ /  /  __/ /_/ / /
/_/ /_/   \___/\__, /_/
              /____/ v0.8.1

freyr - (c) Miraculous Owonubi <omiraculous@gmail.com>
-------------------------------------------------------------
Checking directory permissions...[done]
[https://music.apple.com/us/album/im-sorry-im-not-sorry-ep/1491795443]
 [•] Identifying service...[Apple Music]
 [•] Checking authentication...[authenticated]
 Detected [album]
 Obtaining album metadata...[done]
  ➤ Album Name: I'm Sorry, I'm Not Sorry
  ➤ Artist: Sody
  ➤ Tracks: 4
  ➤ Type: Album
  ➤ Year: 2020
  ➤ Genres: Singer/Songwriter, Music
 [•] Collating [I'm Sorry, I'm Not Sorry]...
  [•] Inquiring tracks...[done]
   • [01 What We Had]
      | ➤ Collating sources...
      |  ➤ [•] YouTube Music...[success, found 4 sources]
      | ➤ Awaiting audiofeeds...[done]
      | [✓] Got album art
      | [✓] Got raw track file
      | [•] Post Processing...
   • [02 Reason To Stay]
      | ➤ Collating sources...
      |  ➤ [•] YouTube Music...[success, found 6 sources]
      | ➤ Awaiting audiofeeds...[done]
      | [✓] Got album art
      | [✓] Got raw track file
      | [•] Post Processing...
   • [03 Nothing Ever Changes]
      | ➤ Collating sources...
      |  ➤ [•] YouTube Music...[success, found 4 sources]
      | ➤ Awaiting audiofeeds...[done]
      | [✓] Got album art
      | [✓] Got raw track file
      | [•] Post Processing...
   • [04 Love's a Waste]
      | ➤ Collating sources...
      |  ➤ [•] YouTube Music...[success, found 4 sources]
      | ➤ Awaiting audiofeeds...[done]
      | [✓] Got album art
      | [✓] Got raw track file
      | [•] Post Processing...
 [•] Download Complete
 [•] Embedding Metadata...
  • [✓] 01 What We Had
  • [✓] 02 Reason To Stay
  • [✓] 03 Nothing Ever Changes
  • [✓] 04 Love's a Waste
[•] Collation Complete
============ Stats ============
 [•] Runtime: [2m 2.3s]
 [•] Total queries: [01]
 [•] Total tracks: [04]
     » Skipped: [00]
     ✓ Passed:  [04]
     ✕ Failed:  [00]
 [•] Output directory: [.]
 [•] Cover Art: cover.png (640x640)
 [•] Total Output size: 29.79 MB
 [•] Total Network Usage: 13.35 MB
     ♫ Media: 12.73 MB
     ➤ Album Art: 619.43 KB
 [•] Output bitrate: 320k
===============================
```
<!-- editorconfig-checker-enable -->

</details>

#### Download a Deezer Artist

<details>
<summary> <code> freyr https://www.deezer.com/us/artist/14808825 </code> </summary>

<!-- editorconfig-checker-disable -->
```console
    ____
   / __/_______  __  _______
  / /_/ ___/ _ \/ / / / ___/
 / __/ /  /  __/ /_/ / /
/_/ /_/   \___/\__, /_/
              /____/ v0.8.1

freyr - (c) Miraculous Owonubi <omiraculous@gmail.com>
-------------------------------------------------------------
Checking directory permissions...[done]
[https://www.deezer.com/us/artist/14808825]
 [•] Identifying service...[Deezer]
 [•] Checking authentication...[authenticated]
 Detected [artist]
 Obtaining artist metadata...[done]
  ➤ Artist: Mazie
  ➤ Followers: 6
  > Gathering collections...[done]
 [•] Collating...
  (01) [i think i wanna be alone] (single)
   [•] Inquiring tracks...[done]
    • [01 i think i wanna be alone]
       | ➤ Collating sources...
       |  ➤ [•] YouTube Music...[success, found 2 sources]
       | ➤ Awaiting audiofeeds...[done]
       | [✓] Got album art
       | [✓] Got raw track file
       | [•] Post Processing...
  (02) [no friends] (single)
   [•] Inquiring tracks...[done]
    • [01 no friends]
       | ➤ Collating sources...
       |  ➤ [•] YouTube Music...[success, found 4 sources]
       | ➤ Awaiting audiofeeds...[done]
       | [✓] Got album art
       | [✓] Got raw track file
       | [•] Post Processing...
 [•] Download Complete
 [•] Embedding Metadata...
  • [✓] 01 i think i wanna be alone
  • [✓] 01 no friends
[•] Collation Complete
============ Stats ============
 [•] Runtime: [54.6s]
 [•] Total queries: [01]
 [•] Total tracks: [02]
     » Skipped: [00]
     ✓ Passed:  [02]
     ✕ Failed:  [00]
 [•] Output directory: [.]
 [•] Cover Art: cover.png (640x640)
 [•] Total Output size: 8.47 MB
 [•] Total Network Usage: 3.66 MB
     ♫ Media: 3.50 MB
     ➤ Album Art: 157.16 KB
 [•] Output bitrate: 320k
===============================
```
<!-- editorconfig-checker-enable -->

</details>

#### Batch downloads

##### via Arguments

Queries can be collated to be processed at once.

```bash
freyr query1 query2 ... queryN
```

##### via Batch File

Queries can be batched into a file and loaded all at once with the `-i, --input <FILE>` flag.
Queries should be on separate lines.

Lines starting with a `#` are treated as comments and ignored. comments can also be inlined with everything following the `#` character ignored.

```text
# ./queue.txt

# Hailee Steinfeld
https://open.spotify.com/track/5Gu0PDLN4YJeW75PpBSg9p # (track) Let Me Go
https://open.spotify.com/track/7GCVboEDzfL3NKp1NrAgHR # (track) Wrong Direction

# (album) Rina Sawayama
https://open.spotify.com/album/3stadz88XVpHcXnVYMHc4J
```

```bash
freyr -i ./queue.txt
```

Use the [`--help`](#get-cli-help) flag to see full usage documentation.

#### URIs

Services can be queried with short URIs containing the type and ID for the resource.

<table>
  <thead>
    <tr>
      <th> identifier </th>
      <th> </th>
      <th> type </th>
      <th> </th>
      <th> id </th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td rowspan=4>
        <a href=""#service-support""> URI Short Tags </a>
      </td>
      <td rowspan=4> : </td>
      <td> track </td>
      <td rowspan=4> : </td>
      <td rowspan=4> ~ </td>
    </tr>
    <tr>
      <td> album </td>
    </tr>
    <tr>
      <td> artist </td>
    </tr>
    <tr>
      <td> playlist </td>
    </tr>
  </tbody>
</table>

Use the `urify` subcommand to parse betweeen URIs and its equivalent URL representation, and vice-versa.
Creating freyr-compatible queue output.

<details>
<summary> <code> freyr urify https://open.spotify.com/album/2D23kwwoy2JpZVuJwzE42B --no-header --no-logo --no-tag </code> </summary>

```text
spotify:album:2D23kwwoy2JpZVuJwzE42B
[+] Urify complete
```

</details>

<details>
<summary> <code> freyr urify -i queue_of_urls.txt -o queue_of_uris.txt --no-header --no-logo </code> </summary>

```text
[+] Urify complete
Successfully written to [queue_of_uris.txt]
```

</details>

[Examples](#ssue)

### Features

- Multi-service support [See [Service Support](#service-support)]
- Playlist generation (per playlist (default) / per query (optional))
- Batch download from queue file
- Simultaneous chunked downloads (powered by [[libxget-js](https://github.com/miraclx/libxget-js)])
- Efficient concurrency
- Bitrate specification (valid: 96, 128, 160, 192, 256, 320)
- Album art embedding & export
- Proper track organisation i.e `FOLDER/<Artist Name>/<Album Name>/<Track Name>` ([example](https://miraclx.github.io/freyr-demo-library/))
- Resilient visual progressbar per track download (powered by [[xprogress](https://github.com/miraclx/xprogress)])
- Stats on runtime completion
  - runtime duration
  - number of successfully processed tracks
  - output directory
  - cover art name
  - total output size
  - total network usage
  - network usage for media
  - network usage for album art
  - output bitrate

### Configuration

<details>
<summary>User / Session specific configuration</summary>

Persistent configuration such as authentication keys and their validity period are stored within a session specific configuration file.

This configuration file resides within the user config directory per-platform. e.g `$HOME/.config/FreyrCLI/d3fault.x4p` for Linux.

</details>

<details>
<summary id='project-specific-configuration'>Project specific configuration</summary>

All configuration is to be defined within a `conf.json` file in the root of the project.
This file should be of `JSON` format and is to be structured as such.

Defaults are in the [conf.json](https://github.com/miraclx/freyr-js/blob/master/conf.json) file.

- `server`: \<object\> The server URL configuration same as on an individual services' callback option.
  - `hostname`: \<string\>
  - `port`: \<number\>
  - `useHttps`: \<boolean\>
- `concurrency`: \<object\>
  - `queries`: \<number\> The number of queries to be processed concurrently.
  - `tracks`: \<number\> The number of tracks to be actively processed in parallel.
  - `trackStage`: \<number\> The number of tracks to concurrently preprocess before being pushed to the main trackQueue.
  - `downloader`: \<number\> The number of tracks to be concurrently downloaded in parallel.
  - `encoder`: \<number\> The total number of tracks to be concurrently undergo encoding.
  - `embedder`: \<number\> The total number of tracks to be concurrently embedded in parallel.
- `opts`: \<object\>
  - `netCheck`: \<boolean\> Whether or not to check network access at program start.
  - `attemptAuth`: \<boolean\> Whether or not to process authentication.
  - `autoOpenBrowser`: \<boolean\> Whether or not to automatically open user browser.
- `filters`: \<[FilterRules](#filterrules)[]\> Filter rules each track must match to be downloaded.
- `dirs`: \<object\>
  - `output`: \<string\> Default download directory. Default: `"".""`
  - `cache`: \<string\> Default temp download directory. Default: `""<tmp>""`
- `playlist`: \<object\>
  - `always`: \<boolean\> Always create playlists for collections and non-collections alike.
  - `append`: \<boolean\> Append non-collection tracks onto the playlist file.
  - `escape`: \<boolean\> Escape `#` characters within playlist entries paths.
  - `forceAppend`: \<boolean\> Force append collection tracks.
  - `dir`: \<string\> Default playlist save directory.
  - `namespace`: \<string\> Prefix namespace to prepend to track paths.
- `image`: \<object|number|string\> An object with fields pertaining to an image's properties or a number defining its size. (\<width\>x\<height\> or \<size\> as \<size\>x\<size\>)
  - `width`: \<number|string\>
  - `height`: \<number|string\>
- `downloader`: \<object\>
  - `memCache`: \<boolean\> Whether or not to use in-memory caching for download chunks.
  - `cacheSize`: \<number\> Maximum size of bytes to be cached per download.
  - `order`: \<array\> Service download sources order.
    - Freyr would check these download sources in the order which they are defined. Failure to get a query from a source would try the next available source.
    - supported: `youtube`, `yt_music`
    - default: `[ ""yt_music"", ""youtube"" ]`
- `services`: \<[ServiceConfiguration](#service-configuration): object\>

<details>
<summary>Example JSON</summary>

```json
{
  ""server"": {
    ""hostname"": ""localhost"",
    ""port"": 36346,
    ""useHttps"": false
  },
  ""image"": {
    ""width"": 640,
    ""height"": 640
  },
  ""services"": {
    ""spotify"": {
      ""client_id"": ""CLIENT_ID"",
      ""client_secret"": ""CLIENT_SECRET"",
      ""refresh_token"": ""OPTIONAL_REFRESH_TOKEN""
    },
    ""apple_music"": {
      ""developerToken"": ""DEVELOPER_TOKEN""
    },
    ""deezer"": {
      ""retries"": 5
    }
  }
}
```

</details>

</details>

### Service Configuration

The [conf.json](https://github.com/miraclx/freyr-js/blob/master/conf.json) file already includes some API tokens for service authentication and should work right out of the box. [See [Project specific configuration](#project-specific-configuration)]

<details>
<summary>Spotify</summary>

- `spotify`: \<object\>
  - `clientId`: \<string\>
  - `clientSecret`: \<string\>
  - `refreshToken`: \<string\>

Spotify requires a `clientId` and a `clientSecret` that can be gotten from their developer dashboard.

If you wish to create and use custom keys, [See [Spotify API Authorization](#spotify-api-authorization)].

An optional `refreshToken` option can be defined which can be used to authenticate a session without necessarily requesting explicit permissions. The `refreshToken` is already bound to a pre-authenticated account.

An invalid `refreshToken`, when specified, would fallback to requesting account access which in-turn would request re-authentication of the users' account.

#### Spotify API Authorization

1. Sign in to the [Spotify Dashboard](https://developer.spotify.com/dashboard/)
2. Click `CREATE A CLIENT ID` and create an app
3. Now click `Edit Settings`
4. Add `http://localhost:36346/callback` to the Redirect URIs
5. Include the `clientId` and the `clientSecret` from the dashboard in the `spotify` object that is a property of the `services` object of the `conf.json` file. [See [Confiuration](#configuration)]
6. You are now ready to authenticate with Spotify!

</details>

<details>
<summary>Apple Music</summary>

- `apple_music`: \<object\>
  - `storefront`: \<string\>
  - `developerToken`: \<string\>

This library already includes a predefined developer token that should work at will. This developer token is the default token, extracted off the Apple Music site. While this developer token could expire over time, we'll try to update with the most recent developer token as time goes on.

To create a custom developer token, please refer to the Apple Music documentation on this topic.

The `storefront` option defines the default storefront to be used in the absence of a specification.

#### Apple Music API Authorization

[See [Apple Music API: Getting Keys and Creating Tokens
](https://developer.apple.com/documentation/applemusicapi/getting_keys_and_creating_tokens)]

After successfully acquiring the developer token, include the `developerToken` to the `apple_music` object that's a property of the `services` object in the `conf.json` file. [See [Confiuration](#configuration)]
</details>

<details>
<summary>Deezer</summary>

- `deezer`: \<object\>
  - `retries`: \<number\>

Authentication unrequired. API is freely accessible.

Because of the 50 requests / 5 seconds limit enforced on an IP-basis for Deezer's API [See [#32](https://github.com/miraclx/freyr-js/issues/6)],
occasionally a `Quota limit exceeded` error would be thrown by the API server.

To combat this, freyr employs request batching, managed delays and finally, retries when things go awry.

You can configure how many retries you want freyr to make before accepting failure.

</details>

### Return Codes

- 0: OK
- 1: Invalid query
- 2: Invalid flag value
- 3: Invalid / Inexistent configuration file
- 4: Network error
- 5: Error with working directory
- 6: Failed to initialize a freyr instance
- 7: An error occurred checking dependency paths

### FilterRules

Filter rules each to be matched against the tracks involved in any operation.

Used as values to the `-l, --filter` flag or as key-value pairs in the `filters` array of the [configuration file](#project-specific-configuration).

| key            |     syntax    |   description   | examples |
| -------------- | :-----------: | --------------- | -------- |
| `id`           |      glob     | Resource ID     | `id=1497949287`, `id=*149` |
| `uri`          |      glob     | Resource URI    | `uri=""*:+(track\|album):*""` |
| `title`        |      glob     | Track title     | `title=""all*good girls*hell""` |
| `album`        |      glob     | Track album     | `album=""when we*fall*do we go*""` |
| `artist`       |      glob     | Match an artist | `artist=""Billie*""` |   |
| `trackn`       | [Numeric Range](#ranges) | Match a track number range | `trackn=""2..5""`, `trackn=""4..=5""` |
| `type`         |     Static    | `album` \| `single` \| `compilation` | `type=single` |
| `duration`     |  [Timed Range](#timed-ranges)  | Track duration | `duration=""3s..""`, `duration=""2:30..3:00""`, `duration=""..=3m""` |
| `explicit`     |     Static    | `true` \| `false` \| `inoffensive` | `explicit=true`, `explicit=inoffensive` |
| `album_artist` |      glob     | Album artist | `album_artist=""Billie Eilish""` |
| `isrc`         |      glob     | Track ISRC   | `isrc=USUM71900766` |
| `label`        |      glob     | Record label | `label=""*Interscope*""` |
| `year`         | [Numeric Range](#ranges) | Release year | `year=2019`, `year=2018..2020` |
| `diskn`        | [Numeric Range](#ranges) | Disk number  | `diskn=1` |
| `ntracks`      | [Numeric Range](#ranges) | Number of tracks in the album | `ntracks=10..=14` |

#### Ranges

Syntax: `[a][..][[=]b]`

| Spec    | Match            | Representation |
| ------- | ---------------- | -------------- |
| `..`    | `-∞ ... ∞`       | `x`            |
| `3..7`  | `3, 4, 5, 6`     | `7 > x ≥ 3`    |
| `3..=7` | `3, 4, 5, 6, 7`  | `7 ≥ x ≥ 3`    |
| `..3`   | `-∞ ... 0, 1, 2` | `3 > x`        |
| `..=3`  | `-∞ ... 1, 2, 3` | `3 ≥ x`        |
| `5..`   | `5, 6, 7 ... ∞`  | `x ≥ 5`        |

#### Timed Ranges

Examples: `duration=60s..=3:40`

| Metric  | Values                   |
| ------- | ------------------------ |
| Seconds | `30`, `30s`, `00:30`     |
| Minutes | `120`, `120s`, `02:00`   |
| Hours   | `5400`, `5400s`, `01:30` |

#### Previewing filter representation

To preview filter rules specification, use the `filter` subcommand.

<details>
<summary> <code> freyr filter title=""all*good girls*hell"",artist=""*eilish"",trackn=""4..=5"" --no-header --no-logo </code> </summary>

```text
[
  {
    ""query"": ""*"",
    ""filters"": {
      ""title"": ""all*good girls*hell"",
      ""artist"": ""*eilish"",
      ""trackn"": ""4..=5""
    }
  }
]
```

</details>

## Service Support

| Service | Track | Album | Artist | Playlist | [URI Short Tags](#uris) |
| :-----: | :---: | :---: | :----: | :------: | :------------: |
| [Spotify](https://github.com/miraclx/freyr-js/blob/master/src/services/spotify.js) |   ✔   |   ✔   |    ✔   |     ✔    | `spotify:` |
| [Apple Music](https://github.com/miraclx/freyr-js/blob/master/src/services/apple_music.js) |   ✔   |   ✔   |    ✔   |     ✔    | `apple_music:` |
| [Deezer](https://github.com/miraclx/freyr-js/blob/master/src/services/deezer.js) |   ✔   |   ✔   |    ✔   |     ✔    | `deezer:` |
| YouTube Music (See [#6](https://github.com/miraclx/freyr-js/issues/6)) |   ✗   |   ✗   |    ✗   |     ✗    | ✗ |
| Tidal (See [#33](https://github.com/miraclx/freyr-js/issues/33)) |   ✗   |   ✗   |    ✗   |     ✗    | ✗ |

<details>
<summary id=""ssue""> <strong> Short Service URI Examples </strong> </summary>
  <table>
    <thead>
      <tr>
        <th> Service </th>
        <th> Resource Type </th>
        <th colspan=2> URIS </th>
      </tr>
    </thead>
    <tbody>
      <tr>
        <td rowspan=8> Spotify </td>
        <td rowspan=2> track </td>
          <td> URL </td>
          <td> <a href=""https://open.spotify.com/track/127QTOFJsJQp5LbJbu3A1y""> https://open.spotify.com/track/127QTOFJsJQp5LbJbu3A1y </a> </td>
        </tr>
        <tr>
          <td> URI </td>
          <td> <code> spotify:track:127QTOFJsJQp5LbJbu3A1y </code> </td>
        </tr>
        <tr>
          <td rowspan=2> album </td>
          <td> URL </td>
          <td> <a href=""https://open.spotify.com/album/623PL2MBg50Br5dLXC9E9e""> https://open.spotify.com/album/623PL2MBg50Br5dLXC9E9e </a> </td>
        </tr>
          <tr>
            <td> URI </td>
            <td> <code> spotify:album:623PL2MBg50Br5dLXC9E9e </code> </td>
          </tr>
        <tr>
          <td rowspan=2> artist </td>
          <td> URL </td>
          <td> <a href=""https://open.spotify.com/artist/6M2wZ9GZgrQXHCFfjv46we""> https://open.spotify.com/artist/6M2wZ9GZgrQXHCFfjv46we </a> </td>
        </tr>
          <tr>
            <td> URI </td>
            <td> <code> spotify:artist:6M2wZ9GZgrQXHCFfjv46we </code> </td>
          </tr>
        <tr>
          <td rowspan=2> playlist </td>
          <td> URL </td>
          <td> <a href=""https://open.spotify.com/playlist/37i9dQZF1DXcBWIGoYBM5M""> https://open.spotify.com/playlist/37i9dQZF1DXcBWIGoYBM5M </a> </td>
        </tr>
          <tr>
            <td> URI </td>
            <td> <code> spotify:playlist:37i9dQZF1DXcBWIGoYBM5M </code> </td>
          </tr>
        </tr>
      </tr>
      <tr>
        <td rowspan=8> Apple Music </td>
        <td rowspan=2> track </td>
          <td> URL </td>
          <td> <a href=""https://music.apple.com/us/album/say-so-feat-nicki-minaj/1510821672?i=1510821685""> https://music.apple.com/us/album/say-so-feat-nicki-minaj/1510821672?i=1510821685 </a> </td>
        </tr>
        <tr>
          <td> URI </td>
          <td> <code> apple_music:track:1510821685 </code> </td>
        </tr>
        <tr>
          <td rowspan=2> album </td>
          <td> URL </td>
          <td> <a href=""https://music.apple.com/us/album/birds-of-prey-the-album/1493581254""> https://music.apple.com/us/album/birds-of-prey-the-album/1493581254 </a> </td>
        </tr>
          <tr>
            <td> URI </td>
            <td> <code> apple_music:album:1493581254 </code> </td>
          </tr>
        <tr>
          <td rowspan=2> artist </td>
          <td> URL </td>
          <td> <a href=""https://music.apple.com/us/artist/412778295""> https://music.apple.com/us/artist/412778295 </a> </td>
        </tr>
          <tr>
            <td> URI </td>
            <td> <code> apple_music:artist:412778295 </code> </td>
          </tr>
        <tr>
          <td rowspan=2> playlist </td>
          <td> URL </td>
          <td> <a href=""https://music.apple.com/us/playlist/todays-hits/pl.f4d106fed2bd41149aaacabb233eb5eb""> https://music.apple.com/us/playlist/todays-hits/pl.f4d106fed2bd41149aaacabb233eb5eb </a> </td>
        </tr>
          <tr>
            <td> URI </td>
            <td> <code> apple_music:playlist:pl.f4d106fed2bd41149aaacabb233eb5eb </code> </td>
          </tr>
        </tr>
      </tr>
      <tr>
        <td rowspan=8> Deezer </td>
        <td rowspan=2> track </td>
          <td> URL </td>
          <td> <a href=""https://www.deezer.com/en/track/642674232""> https://www.deezer.com/en/track/642674232 </a> </td>
        </tr>
        <tr>
          <td> URI </td>
          <td> <code> deezer:track:642674232 </code> </td>
        </tr>
        <tr>
          <td rowspan=2> album </td>
          <td> URL </td>
          <td> <a href=""https://www.deezer.com/en/album/99687992""> https://www.deezer.com/en/album/99687992 </a> </td>
        </tr>
          <tr>
            <td> URI </td>
            <td> <code> deezer:album:99687992 </code> </td>
          </tr>
        <tr>
          <td rowspan=2> artist </td>
          <td> URL </td>
          <td> <a href=""https://www.deezer.com/en/artist/5340439""> https://www.deezer.com/en/artist/5340439 </a> </td>
        </tr>
          <tr>
            <td> URI </td>
            <td> <code> deezer:artist:5340439 </code> </td>
          </tr>
        <tr>
          <td rowspan=2> playlist </td>
          <td> URL </td>
          <td> <a href=""https://www.deezer.com/en/playlist/1963962142""> https://www.deezer.com/en/playlist/1963962142 </a> </td>
        </tr>
          <tr>
            <td> URI </td>
            <td> <code> deezer:playlist:1963962142 </code> </td>
          </tr>
        </tr>
      </tr>
    </tbody>
  </table>

</details>

## Development

### Manually Building

Feel free to clone and use in adherance to the [license](#license). Pull requests are very much welcome.

```bash
git clone https://github.com/miraclx/freyr-js.git freyr
cd freyr
```

- If using [NPM](https://github.com/npm/cli):

  ```bash
  npm install

  # to have access to the freyr command globally
  npm link
  ```

- If using [Yarn](https://github.com/yarnpkg/yarn):

  ```bash
  yarn install

  # to have access to the freyr command globally
  yarn link
  ```

### Testing

Freyr comes bundled with a lightweight test suite. See [TEST.md](https://github.com/miraclx/freyr-js/blob/master/TEST.md) for instructions on how to run it.

### Docker Development

With docker, you can drop into a sandbox that has all the dependencies you need. Without needing to mess around with your host system or install any weird dependencies.

First, you need to either build a local docker image or submit a PR and use the corresponding auto-generated image.

#### Building A Local Image

The default provided [Dockerfile](https://github.com/miraclx/freyr-js/raw/master/Dockerfile) builds minimal alpine images. Average build network usage is ~ 80 MB and disk usage is ~ 180 MB.

```bash
git clone https://github.com/miraclx/freyr-js.git freyr
cd freyr
docker build -t freyr-dev .
```

#### Working With Remote Images

An alternative to building the docker image locally is to use a remote image. By default, all PRs submitted to this repository get an equivalently tagged docker image for testing.

For example, the PR #214 has a docker image called `freyrcli/freyrjs-git:pr-214`. And it stays updated with the current state of the branch.

You can then pull the development image for use locally.

```bash
docker pull freyrcli/freyrjs-git:pr-214
```

---

Once you have a built development image locally, you're ready to go. You can drop into the container by explicitly defining the entrypoint

```bash
docker run -it --entrypoint bash freyr-dev

# Alternatively, create a handy alias
alias freyrsh='docker run -it --entrypoint bash freyr-dev'
```

*: don't forget to replace `freyr-dev` with the appropriate image name if you pulled one of the auto-generated remote images.

Optionally, you can use these interesting flags to customize the experience.

- `-h freyr-dev` sets the container hostname to `freyr-dev`
- `-m 1G` sets the container memory limit
- `-v $PWD:/data` mounts the current working directory to `/data` within the container.
- `--cpus 2` limits the container to using 2 CPU cores

The freyr source would be available in the `/freyr` directory within the container along with a globally registered command `freyr` for calling the script.

For more information and documentation about docker, please refer to its official site:

- <https://www.docker.com/>
- <https://docs.docker.com/>

## License

[Apache 2.0][license] © **Miraculous Owonubi** ([@miraclx][author-url]) \<omiraculous@gmail.com\>

[license]:  LICENSE ""Apache 2.0 License""
[author-url]: https://github.com/miraclx

<!-- [npm-url]: https://npmjs.org/package/freyr
[npm-image]: https://badgen.net/npm/node/freyr
[npm-image-url]: https://nodei.co/npm/freyr.png?stars&downloads
[downloads-url]: https://npmjs.org/package/freyr
[downloads-image]: https://badgen.net/npm/dm/freyr -->
"
345,notdedsec/SpotifyNow,Python,"# SpotifyNow
Telegram bot to share what you're listening to on Spotify.
"
346,phandd/spotless,JavaScript,"# spotless
Spotless is a Chrome extension allows you to control your Spotify player, mute annoying ads, search and play music everywhere.

 ![spotless_demo](https://user-images.githubusercontent.com/20087095/56844564-75cd6680-68dc-11e9-8cbc-e8755a6a3bab.gif)

## Installation
The extension is available on [Chrome Store](https://chrome.google.com/webstore/detail/spotless/allccgoelledmdfenijoodhcfjndddjh)
## Getting started
You can clone and build the extension yourself:

```sh
git clone https://github.com/phandd/spotless
```
navigate to project directory and install dependencies:
```
npm install
```
and build the extension:
```
npm run build
```

The built version will be placed at `/dist`. All you need to do is add the extension manually to your Chrome browser:

![load_extension](https://user-images.githubusercontent.com/20087095/56460498-e00e7480-63cd-11e9-9ed1-3b66381d8039.gif)

then you're good to go!

## Usage
 - This extension only compatible with Spotify web app and desktop app. It also requires you to login to Spotify on web app to be able to use your cookies.

 - You need at least one available device running Spotify (either web app player or desktop app player) to use the extension, which makes sense, you wouldn't be able to listen to music if you don't have any device opening Spotify, the extensions cannot play music itself, it's a controller.

- The Ads mute feature only work if you have a tab opening https://open.spotify.com on your Chrome browser. So the extension can detect whether an ads or a song is playing.

- You can still play music on your Spotify desktop client and mute the ads, as long as you open https://open.spotify.com on a tab of your browser for the extension to work.

 - Controlling mobile device is a feature for Spotify Premium users, this extensions will not work with mobile device.
 
## Tech stack
 - **ReactJs, ReduxJs, normalizr, reselect** for Web app
 - **Webpack** for build cli
 - **Babel** for ES6 syntax
 - **react-chrome-redux** for running a Reactjs app as an extension
 
 and more, please check `package.json`.

For ReactJs Web app source code only, please checkout [src](https://github.com/phandd/spotless/tree/src) branch.
"
347,MrSentex/SpotCheck,Python,"# SpotCheck v0.4-Stable

![Main_Image](https://developer.spotify.com/assets/branding-guidelines/logo@2x.png)

## Whats is SpotCheck?  
SpotCheck is an account checker for the **Spotify** stream music service written in **Python 2.7**. SpotCheck manages to evade the **Spotify** *security system* that prevents the check of accounts massively. The **Spotify** *security system* is simply a **CSRF token**, a system implemented by many pages to avoid checking accounts on theirs platform but this *security system* is not very secure. Not enough for a company like **Spotify**. **SpotCheck is a challenge between friends and with the intention of educating so it should not be used to commit any type of crime that will be committed under the responsibility of the user of the program not the creator of the same**.  

## How does its works?  
Obviously with some magic and a bit of Matrix shit. Nah just kidding.    
SpotCheck uses as a main base the module of `requests` to make requests to different parts of **Spotify**. The first thing you get is the CSRF token which is obtained at **accounts.spotify.com** for later use in the login API hosted at **accounts.spotify.com/api/login** with the username, password, etc ... Depending on the parameters of the API response the user and password will be correct or incorrect. If they are correct, a request will be created to **spotify.com/de/account/overview/** to get more information about the account.  

## Installation

Install python-pip and run this command from the SpotCheck directory
```
pip install -r requeriments.txt
```

## Help Message  
```
usage: SpotCheck.py [-h] [--output_type OUTPUT_TYPE] [--threads THREADS]
                    [--nothreads]
                    combo_list output_file_name

positional arguments:
  combo_list            The combo list is a list with users and passwords in a
                        'username:password' format.
  output_file_name      Only the name of the file. The extension will be
                        determined by the type of output selected.

optional arguments:
  -h, --help            show this help message and exit
  --output_type OUTPUT_TYPE
                        The output type can be: txt, json, xml and html
                        (Default: txt).
  --threads THREADS     Number of workers that SpotCheck uses (A very high
                        number can cause an error in the program due to the
                        limitations of your computer) (Default: 4).
  --nothreads           If this argument is specified, SpotCheck will not
                        create any thread, otherwise the main SpotCheck
                        process will perform the checks.
```

# Changelog  
### 13/09/2018 v0.1-Beta
```
 Creation of the project.
```  
### 14/09/2018 v0.2-Beta
```
Builded a new system for the CSRF acquisition.
```
### 09/10/2018 v0.3-Stable
```
Incremented the speed (Threads calculate).
Progress Bar added (Only-MultiThread).
```
### 05/12/2018 v0.4-Beta
```
Changed the main language to English.
Renewed the code of SpotCheck.py.
Progress Bar added to the --nothread argument.
Removed the threads calculate.
Added account info system (Now you can get the type of the account, country and if is the admin of a Family Premium account too).
Added different types of outputs (txt, json, xml, html).
```
### 09/12/2018 v0.4-Stable
```
Fixed SSL error.
Now if you kill the program with Ctrl+C the alredy checked accounts will going to be saved.
If you check a large account list and you are running SpotCheck with Python 32 bits you can have memory errors caused by the Python memory limit. (Just run the .exe in releases).
```
"
348,gautamajay52/mySPOTIFY,Python,"# ⚡ Spotify Lyrics 😋 [![Hits](https://hits.seeyoufarm.com/api/count/incr/badge.svg?url=https%3A%2F%2Fgithub.com%2Fgautamajay52%2FmySPOTIFY&count_bg=%2379C83D&title_bg=%23555555&icon=&icon_color=%23E7E7E7&title=hits&edge_flat=false)](https://github.com/gautamajay52/mySPOTIFY)


# ⚡ Vars: 🔥
* `CLIENT_ID`: Go [Here](https://developer.spotify.com/dashboard/applications/) to get yours.
* `CLIENT_SECRET`: Go [Here](https://developer.spotify.com/dashboard/applications/) to get yours.
* `GENIUS`: Go [Here](https://genius.com/api-clients) to get yours.
* `BOT_TOKEN`: From BotFather
* `ID`: Your ID
* `TELEGRAPH`: wip
* `REFRESH_TOKEN`: wip
* `IS_PREMIUM`: `True` If your account is premium


# ⚡ Steps: 🔥
1) Fork repo
2) Go to vercel.com
3) Select forked repo
4) Fill all the details.
5) Deploy
6) open this link
   ```
   https://api.telegram.org/bot<YOUR-TOKEN>/setWebhook?url=<YOUR-VERCEL-URL>/api/webhook/
   ```
7) Enjoy 👌

# ⚡ Credits: 🌎
* [GautamKumar(me)](https://github.com/gautamajay52) for [Nothing](https://github.com/gautamajay52/mySPOTIFY)😬😁"
349,lemonpaul/yandex2spotify,Python,"# yandex2spotify

A simple Python script that allows to import favorite tracks, playlists, albums, and artists from Yandex.Music to Spotify

## Installation

```bash
pip3 install -r requirements.txt
```

## Usage

0) [Register a dummy Spotify OAuth application](https://developer.spotify.com/dashboard) and **add `https://open.spotify.com` as a callback URI** in its settings.

1) Obtain a Yandex.Music OAuth token.[^1]

2) Run the script using Client ID and Client Secret copied from your app's Spotify dashboard:
```bash
python3 importer.py --id <spotify_client_id> --secret <spotify_client_secret> -u <spotify_username> -t <yandex_token>
```

3) If you don't want to import some items (likes, playlists, albums, artists) you can exclude them by specifying the `-i/--ignore` argument, for example:
```bash
python3 importer.py --id <spotify_client_id> --secret <spotify_client_secret> -u <spotify_username> -t <yandex_token> -i playlists albums artists
```

[^1]: Since it's impossible to register an OAuth application with Yandex.Music access scope, you have to [reuse the token from music.yandex.ru itself](https://github.com/MarshalX/yandex-music-api/discussions/513).
"
350,mikaelbr/metatune,PHP,"# Installation and Requirements
## Requirements 

 * PHP >= 5.3
 * Enabled fopen wrappers and file_get/put_contents
 * Read/Write access to server (For caching)

## How to install

 * Download latest version of MetaTune
 * Upload `/lib` and all it's contents to your web server. 
 * Edit `/lib/config.php` to fit yout need. 
 * Look at some of the examples or read the FeatureList for help using MetaTune. 


## Features
Some features includes:

 * Search for Track/Artist/Album
 * Lookup detailed/basic info about Track/Artist/Album
 * Exceptions for error handling. 
 * Caching metadata.
 * XML Import/Export for quick save/load.
 * Generate Play Buttons from searches/lookups or objects.
 * NEW: Now uses namespaces to be more pluggable.

Look at [the Wiki](https://github.com/mikaelbr/metatune/wiki/Features-of-MetaTune---Spotify-Metadata-API-PHP-Wrapper) for usage and full support. 
The usage of the regular metatune class can be read below the new Play Button implementation. 

# New: Namespaces

Metatune now uses namespaces to be more pluggable and play better with other libraries. This means that you'll need PHP version 5.3 or later
to be able to use the comming versions of MetaTune. The old version is still available in it's own branch 
([no-namespace](https://github.com/mikaelbr/metatune/tree/no-namespace)), but will no longer be updated/maintained. 

You use metatune as before, but you should update your autoload script and now use `$metatune = MetaTune\MetaTune::getInstance()` to get the 
metatune instance variable.
 

# Play Button implementation

The Metatune wrapper now supports [the new Spotify Play Button](https://developer.spotify.com/technologies/spotify-play-button/). The play buttons can be generated from the history of your searches/lookups, from an album or track object, a playlist URI or just an array of tracks. 
See the examples below the settings

## Settings

<table>
<tr><th>Variable name</th><th>Description</th></tr>
<tr><td>playButtonHeight</td><td>Height of the player (int). To be large player, the height needs to be 80px more than the width. Default: 330.</td></tr>
<tr><td>playButtonWidth</td><td>Width of the player (int). Default: 250.</td></tr>
<tr><td>playButtonTheme</td><td>Player theme. Can be `white` or `black`. Default value: `black`.</td></tr>
<tr><td>playButtonView</td><td>Player view type. Can be `coverart` or `list`. Default: `list`.</td></tr>
</table>

See [Spotify documentation](https://developer.spotify.com/technologies/spotify-play-button/) for more description of the settings.

## Play Button autogenerated from lookup

```php
<?php
    // Get the metatune instance. 
    $spotify = MetaTune\MetaTune::getInstance();
    $spotify->autoAddTracksToPlayButton = true; // Will add all searches for tracks into a list.
    $spotify->playButtonHeight = 330; // For viewing the entire playlist
    $spotify->playButtonTheme = ""white""; // Changing theme
    $spotify->playButtonView = ""list""; // Changing view
    try
    {
        $tracks = array(
            $spotify->lookup(""spotify:track:4kO7mrAPfqIrsKwUOK5BFx""),
            $spotify->lookup(""spotify:track:0n49fCjNGsbtNOE6cuWk79""),
            $spotify->lookup(""spotify:track:5kQ7CU798Sqm1BWNbYHFMa""),
            $spotify->lookup(""spotify:track:57Xjny5yNzAcsxnusKmAfA"")
        );

        echo $spotify->getPlayButtonAutoGenerated(""My favorites"");
    }
    catch (MetaTune\MetaTuneException $ex)
    {
        die(""<pre>Error\n"" . $ex . ""</pre>"");
    }
?>
```

### Result

![Autogenerated play button](https://github.com/mikaelbr/metatune/raw/master/screenshots/playbutton_auto.png)


## Play Button from album object.

```php
<?php
    // Get the metatune instance. 
    $spotify = MetaTune\MetaTune::getInstance();
    try
    {
        // Need to be detailed, to have all tracks. (second argument true)
        $album = $spotify->lookupAlbum(""spotify:album:6MBuQugGuX7VMBX0uiBnAQ"", true);
        echo $spotify->getPlayButtonFromAlbum($album);
    }
    catch (MetaTune\MetaTuneException $ex)
    {
        die(""<pre>Error\n"" . $ex . ""</pre>"");
    }
?>
```

### Result

![Album play button](https://github.com/mikaelbr/metatune/raw/master/screenshots/playbutton_album.png)

More examples in the ```examples``` directory.

---

This program is free software: you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.

This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with this program.  If not, see http://www.gnu.org/licenses/.

---

SPOTIFY Disclaimer
This product uses a SPOTIFY API but is not endorsed, certified or otherwise
approved in any way by Spotify. Spotify is the registered trade mark of the
Spotify Group.

---
# Usage
You can pretty much do anything in the Spotify Metadata API with this library, and then some. Below you'll find all the features and some short example of how to use them. 

In common for all the features, it requires a object of the MetaTune-class.
```php
<?php
$spotify = MetaTune\MetaTune::getInstance();
?>
```

## Search for Track/Artist/Album

You can search for everything in MetaTune. Not only tracks, but albums and artists aswell. In this example however, I will limit myself to just showing search for artists. The code would essentially be the same.

<table>
<tr><th>Method overview</th><th>Description</th></tr>
<tr><td>searchTrack()</td><td>Search for tracks. Will return an array of tracks</td></tr>
<tr><td>searchArtist()</td><td>Search for artists. Will return an array of artists</td></tr>
<tr><td>searchAlbum()</td><td>Search for albums. Will return an array of albums</td></tr>
</table>

```php
<?php
// We have the MetaTune-object; $spotify

// First we take a search
$trackResults = $spotify->searchTrack (""Superfamily"");

if(count($trackResults) > 0) {
    $out = count($trackResults) . "" results \n<ul>"";
    foreach($trackResults as $track) {
          // $track is now an object of the class Track. 
          $out . ""\t<li>{$track}</li>\n"";
    }
    echo $out . ""</ul>"";
} else {
    echo ""No results"";
}
?>
```

### Spotify advanced search syntax

MetaTune supports all of Spotify's advanced search queries. See more information on [Spotify Advanced Search Syntax](http://www.spotify.com/no/about/features/advanced-search-syntax/).

## Lookup detailed/basic info about Track/Artist/Album

Some times all you got is a Spotify URI, such as ```spotify:track:4CwcvWeCi2rFcLPIJCOwXw```, and want to lookup detailed/basic information about a Track/Artist/Album. 

<table>
<tr><th>Method overview</th><th>Description</th></tr>
<tr><td>lookupTrack()</td><td>Get all information about a track. Popularity, duration, artist, album, number and disc in album</td></tr>
<tr><td>lookupArtist()</td><td>Get basic information about an artist. This includes name and popularity</td></tr>
<tr><td>lookupArtistDetailed()</td><td>Get detailed information about an artist. This includes basic info + all the artist's albums</td></tr>
<tr><td>lookupAlbum()</td><td>Get basic info about an album. This includes release date, popularity, name.</td></tr>
<tr><td>lookupAlbumDetailed()</td><td>Get detailed information about an album. This includes basic info + all the album's tracks.</td></tr>
<tr><td>lookup()</td><td>Uses the Spotify URI to determine what to look up.</td></tr>
</table>

```php
<?php
// We have the MetaTune-object; $spotify

// Get all information about a track!
$track = $spotify->lookup(""spotify:track:4CwcvWeCi2rFcLPIJCOwXw"");

// Print all results
echo ""<pre>"" . print_r($track, 1) . ""</pre>"";
?>
```

## Exceptions

But what if the Spotify URI is in a wrong format or is not found? Then we have exceptions to tell us. Lets try to use exceptions in the example from lookup. 

```php
<?php
// We have the MetaTune-object; $spotify

try {
   // Get all information about a track!
   $track = $spotify->lookup(""spotify:track:WRONG_URI"");
   // all lookup-methods throws a MetaTuneException. We'll try to catch one. 

   // Print all results
   echo ""<pre>"" . print_r($track, 1) . ""</pre>"";
} catch (MetaTuneException $ex) {
   echo ""Could not retrive information: "" . $ex->getMessage();
}
?>
```

## Caching

All access to the Spotify-servers will be cached as long as certain constants are set in the MetaTune class. Caching is activated per default.

The caching works by saving files locally on your server with this format: ```path/to/dir/<YOUR_PREFIX>_<MD5(""THE_SEARCH_QUERY"")>.xml```

Search query is stripped of some non-alphanumerical signs and trimmed. 

The Spotify servers only send information on requests as long as ```If-Modified-Since``` header field doesn't kick in. If a cache exists of a search the header field would be appended to the file request, and Spotify won't send you any data.  All this happens automaticly as long as you have caching activated. 

To activate/deactivate or change cache settings in any way, you can do this at the top of MetaTune

```php
<?php
    const CACHE_DIR = 'lib/cache/'; // Cache directory (must be writable)
    const USE_CACHE = false; // Should caching be activated?
    const CACHE_PREFIX = ""METATUNE_CACHE_""; // prefix for cache-files. 
?>
```


## XML Import/Export

With XML import and/or export you can easily create XML structure of your searches. All ready to be saved to files and/or database (XML-types). 

Here's an example of usage:
 
```php
<?php
// ***Test for array of tracks***
$trackList = $spotify->searchTrack(""Superfamily"");
$tracksXML = $spotify->generateXML($trackList);
            
// This should now be the same as $trackList
$tracksImport = $spotify->parseXMLTracks($tracksXML);
// Demo print to check correct content
echo ""<pre>"" . print_r($tracksImport, 1) . ""</pre>"";
?>
```

In this case ```$tracksXML``` will contain something like:

```xml
<?xml version=""1.0"" encoding=""UTF-8""?>
<tracks>
	<track href=""spotify:track:3BbfQLpcj0BfjM5rq8Ioj9""><![CDATA[]]>
		<name><![CDATA[The Radio Has Expressed Concerns About What You Did Last Night]]></name>
		<artist href=""spotify:artist:5ObUhLdIEbhEqVCYxzVQ9l""><![CDATA[]]>
			<name><![CDATA[Superfamily]]></name>
			<albums><![CDATA[]]></albums>
			<popularity><![CDATA[0]]></popularity>
		</artist>
		<album href=""spotify:album:2PABf16wrJQau7JuDTqTzx""><![CDATA[]]>
			<name><![CDATA[The Radio Has Expressed Concerns About What You Did Last Night]]></name>
			<artist href=""spotify:artist:5ObUhLdIEbhEqVCYxzVQ9l""><![CDATA[]]>
				<name><![CDATA[Superfamily]]></name>
				<albums><![CDATA[]]></albums>
				<popularity><![CDATA[0]]></popularity>
			</artist>
			<tracks><![CDATA[]]></tracks>
			<popularity><![CDATA[0]]></popularity>
			<released><![CDATA[2007]]></released>
		</album>
		<length><![CDATA[245.013]]></length>
		<popularity><![CDATA[0.56061]]></popularity>
		<track-number><![CDATA[1]]></track-number>
		<disc-number><![CDATA[0]]></disc-number>
	</track>
	
	[. . .]

</tracks>
```

And ```$tracksImport``` will contain your original data:

```php
Array
(
    [0] => Track Object
        (
            [uri:Track:private] => spotify:track:3BbfQLpcj0BfjM5rq8Ioj9
            [title:Track:private] => The Radio Has Expressed Concerns About What You Did Last Night
            [artist:Track:private] => Artist Object
                (
                    [uri:Artist:private] => spotify:artist:5ObUhLdIEbhEqVCYxzVQ9l
                    [name:Artist:private] => Superfamily
                    [popularity:Artist:private] => 0
                    [albums:Artist:private] => Array
                        (
                        )

                    [spotifyBase] => http://open.spotify.com/
                )

            [album:Track:private] => Album Object
                (
                    [uri:Album:private] => spotify:album:2PABf16wrJQau7JuDTqTzx
                    [name:Album:private] => The Radio Has Expressed Concerns About What You Did Last Night
                    [release:Album:private] => 2007
                    [popularity:Album:private] => 0
                    [artist:Album:private] => Artist Object
                        (
                            [uri:Artist:private] => spotify:artist:5ObUhLdIEbhEqVCYxzVQ9l
                            [name:Artist:private] => Superfamily
                            [popularity:Artist:private] => 0
                            [albums:Artist:private] => Array
                                (
                                )

                            [spotifyBase] => http://open.spotify.com/
                        )

                    [tracks:Album:private] => Array
                        (
                        )

                    [spotifyBase] => http://open.spotify.com/
                )

            [length:Track:private] => 245.013
            [popularity:Track:private] => 0.56061
            [trackNr:Track:private] => 1
            [discNr:Track:private] => 0
            [spotifyBase] => http://open.spotify.com/
        )
	
	[. . . ]

)
```

See more examples of XML import/export in xmltest.php"
351,MeoBeoI/Catify,JavaScript,"[![Awesome](https://cdn.rawgit.com/sindresorhus/awesome/d7305f38d29fed78fa85652e3a63e154dd8e8829/media/badge.svg)](https://github.com/sindresorhus/awesome-electron)
![Travis](https://travis-ci.org/MeoBeoI/Catify.svg?branch=master)
[![StackShare](http://img.shields.io/badge/tech-stack-0690fa.svg?style=flat)](http://stackshare.io/MeoBeoI/catify)
# Catify
Utility for **Spotify**, even your 😼 can use **Spotify** now !

- Show Catify: <kbd>Ctrl</kbd> <kbd>P</kbd> <kbd>/</kbd>
- Play track on search results: <kbd>Ctrl</kbd> <kbd>Number</kbd>
- Save to library  : <kbd>Ctrl</kbd> <kbd>P</kbd> <kbd>]</kbd>
- Remove from library  : <kbd>Ctrl</kbd> <kbd>P</kbd> <kbd>[</kbd>
- Save to Playlist : <kbd>Ctrl</kbd> <kbd>P</kbd> <kbd>=</kbd>
- Remove from Playlist : <kbd>Ctrl</kbd> <kbd>P</kbd> <kbd>-</kbd>

## Screenshot

![Catify](http://i.imgur.com/tki53Ll.gif)

## Install

To install it download the latest release for your platform (OS X).

If you're a developer 💻
Clone the repo via git:

```bash
git clone https://github.com/MeoBeoI/Catify.git
```

And then install dependencies.

```bash
$ cd Catify && npm install
```


## Run

Run this two commands __simultaneously__ in different console tabs.

```bash
$ npm run hot-server
$ npm run start-hot
```

or run two servers with one command

```bash
$ npm run dev
```

*Note: requires a node version >= 6 and an npm version >= 3

## Package

```bash
$ npm run package
```

## Maintainers

- [MeoBeoI](https://github.com/meobeoi)

## Related Resources
- [electron-react-boilerplate](https://github.com/chentsulin/electron-react-boilerplate)
- [Menubar](https://github.com/maxogden/menubar)
- [material-ui](http://www.material-ui.com)

"
352,WalshyDev/Discord-Spotify-RPC,JavaScript,"# Dependencies
This requires NodeJS 8.0.0 or higher which can be downloaded from [here](https://nodejs.org/en/download/) and Git which can be downloaded from [here](https://git-scm.com/).

For Linux users, follow these steps to install the dependencies for your distro [here](https://git-scm.com/download/linux) and [here](https://nodejs.org/en/download/package-manager/)

In CMD / Terminal or whatever the equivelant is of CMD for your operating system, run: `git clone https://github.com/WalshyDev/Discord-Spotify-RPC` then, move into the newly created directory by executing `cd Discord-Spotify-RPC` and then install all packages required by Discord-Spotify-RPC: `npm install` and let NPM install the packages.

# How to run
Run `npm start` in console after the setup steps and boom! Rich Presence with your Spotify!

# Configuration

## Time setting (elapsed time)
By default the time option is `song-time` which will display the elapsed time as the current song time.

Available options  

| Option | Description |
| --- | --- |
| `overall` | This will set the elapsed time to the amount of time Spotify/this script has been running. |
| `song-time` | This will set the elapsed time to the current track position. Thanks to @mcao for PRing this. |
| `none` | Remove the elapsed time and just show the ""Playing {track}\nBy {artist}"" |

Just go to the config.json and change the ""time"" to any of these.
Example:
```json
{
    ""time"": ""none""
}
```
Result:  
![none](https://bots.are-pretty.sexy/4eae08.png)

## Client ID
It's relatively simple to make your own application to use for RPC. First of all, head to https://discordapp.com/developers/applications/me and click on the ""New App"" button.
![none](https://mikecao.me/i/2026c7.png)

Next, you'll want to give your application a title and upload a picture for it if you want. Please note that you cannot name it ""Spotify"" if you want it to show publically, as Discord has a blacklist on the names of popular applications for Rich Presence.
![none](https://mikecao.me/i/68bdd6.png)

Great job! You've made the application. Take note of the Client ID, you'll need it for the config file later.
![none](https://mikecao.me/i/c5a5b9.png)

Next, you'll want to click the button at the bottom that says ""Enable Rich Presence"".
![none](https://mikecao.me/i/68d3a8.png)

Great! Rich presence is enabled. Now, go to the assets section and upload an image as a ""large"" image. This will be the image that show up in the client when you use it for Rich Presence. Take note of the keys for the images! 
*Note: Discord-Spotify-RPC only supports large images right now!*
![none](https://mikecao.me/i/1a8448.png)

You can see your uploaded assets here, in case you need to edit them sometime in the future. You can have up to 150 of them!
![none](https://mikecao.me/i/731626.png)

Next, go to the config file and use the values from the application to fill it in.
```json
{
	""clientId"": ""Client ID goes here"",
	""largeImageKey"": ""Large image key goes here""
}
```

You're good to go! Start the program, and enjoy your new Spotify Rich Presence!

## Image and image text
If you want to have some text above the Spotify icon when you hover over it you can do this with a simple config option! You can also change the image easily now without having to edit the JS if you have made your own application.

You can now use the `largeImageKey` and `largeImageText` to change these values. **Note** If you have not made your own applicaiton do **not** change the `largeImageKey` this will result in just a black image.

Example of the new values:
```json
{
	""largeImageText"": ""Walshy is cool""
}
```
Result:  
![none](https://bots.are-pretty.sexy/be34ec.png)
"
353,minton/Spot,Ruby,"#Spot

Simple Spotify-powered tunes for your office.

![](https://github.com/minton/Spot/raw/master/resources/diagram.png)

##Origins

This project is heavily inspired by [Play](https://github.com/play/play). Which is an awesome iTunes-based solution.

##Requirements

*   OS X
*   Spotify = 0.8 <--_See Setup below_
*   (Slack, Campfire, or HipChat) with Hubot (optional but recommended)

##Setup

You'll need an AppleScript'able version of Spotify. See [this gist](https://gist.github.com/minton/39b21dfab426ba1745b1).

Clone the repo:

    git clone https://github.com/minton/Spot.git && cd Spot

Install gems:

    bundle install

Set Up Environment Variables:

**Optional:** To provide a link to your audio stream in the web interface, define an environment variable `SPOT_FEED_URL`

    ```
    export SPOT_FEED_URL=""//your/audio/feed/listen.m3u""
    ```

Start Spot:

    rake start

The server will start up here: [localhost:5051](http://localhost:5051).

Spotify will open and `Repeat` and `Shuffle` will be turned on.

You should now open your favorite playlist or radio station.

##Airplay Support

You'll need to `Enable access for assistive devices` in System Preferences for this to work.

![Accessibility](http://i.imgur.com/N8rwAee.png)

##Usage

Spot can technically be used by any client capable of GET/PUT/POST requests as described below but it was really designed to be controlled via [Hubot](http://hubot.github.com/) in [Campfire](http://campfirenow.com/). You can find the latest Spot Hubot script here: [Spot.coffee](https://raw.github.com/github/hubot-scripts/master/src/scripts/spot.coffee).

###Hubot

    hubot play! - Plays current playlist or song.
    hubot pause - Pause the music.
    hubot next - Plays the next song.
    hubot back - Plays the previous song.
    hubot playing? - Returns the currently-played song.
    hubot play <song> - Play a particular song. This plays the first most popular result.
    hubot volume? - Returns the current volume level.
    hubot volume [0-100] - Sets the volume.
    hubot volume+ - Bumps the volume.
    hubot volume- - Bumps the volume down.
    hubot mute - Sets the volume to 0.
    hubot [name here] says turn it down - Sets the volume to 15 and blames [name here].
    hubot say <message> - Tells hubot to read a message aloud.
    hubot find <song> - See if Spotify knows about a song without attempting to play it.
    hubot airplay <Apple TV> - Tell Spot to broadcast to the specified Apple TV.
    hubot spot - Restart Spot
    hubot respot - Restart Spotify

###Clients

[Window Spot](https://github.com/minton/windowspot) for Windows

![Ugly ScreenShot](https://raw.github.com/minton/windowspot/master/UglyScreenShot.PNG)

[iSpot](http://github.com/otternq/iSpot) for iOS

![iSpot ScreenShot](https://s3.amazonaws.com/ispot/iOS+Simulator+Screen+shot+Jan+25%2C+2014%2C+10.53.21+AM.png)

###API

What song is playing:

    ~$ curl -i -H ""Accept: application/json"" -X GET http://localhost:5051/playing

    HTTP/1.1 200 OK
    Content-Length: 50
    Now playing “Raise Your Weapon” by Deadmau5...

Album art for current song:

    ~$ wget http://localhost:5051/playing.png

    100%[======================================>] 87,510      --.-K/s   in 0s
    2012-12-21 21:20:38 (518 MB/s) - ‘playing.png’ saved [87510/87510]

Play a specific song:

    ~$ curl -i -H ""Accept: application/json"" -X POST -d ""q=Raise your weapon"" http://localhost:5051/find

    HTTP/1.1 200 OK
    Content-Length: 50
    Now playing “Raise Your Weapon” by Deadmau5...

Play the music:

    ~$ curl -i -H ""Accept: application/json"" -X PUT http://localhost:5051/play

    HTTP/1.1 200 OK
    Content-Length: 50
    Now playing “Raise Your Weapon” by Deadmau5...

Pause the music:

    ~$ curl -i -H ""Accept: application/json"" -X PUT http://localhost:5051/pause

    HTTP/1.1 200 OK
    Content-Length: 21
    Everything is paused.

Mute the music:

    ~$ curl -i -H ""Accept: application/json"" -X PUT http://localhost:5051/mute

    HTTP/1.1 200 OK
    Content-Length: 7
    Shhh...

What's the volume set at:

    ~$ curl -i -H ""Accept: application/json"" -X  GET http://localhost:5051/volume

    HTTP/1.1 200 OK
    Content-Length: 2
    42

Set the volume:

    ~$ curl -i -H ""Accept: application/json"" -X PUT -d ""volume=42"" http://localhost:5051/volume

    HTTP/1.1 200 OK
    Content-Length: 2
    41 <--Close enough :)

Skip to the next track:

    ~$ curl -i -H ""Accept: application/json"" -X PUT http://localhost:5051/next

    HTTP/1.1 200 OK
    Content-Length: 56
    Onwards! Now playing “Ghosts N Stuff” by Deadmau5...

Play the previous track:

    ~$ curl -i -H ""Accept: application/json"" -X PUT http://localhost:5051/back

    HTTP/1.1 200 OK
    Content-Length: 71
    Let's hear it again! Now playing “Raise Your Weapon” by Deadmau5...

#Author

Spot was lovingly crafted by [@minton](https://twitter.com/mcminton). You should [follow me](https://twitter.com/intent/follow?screen_name=minton) for good karma!

#Art

Hubot image from [Cameron McEfee](https://github.com/cameronmcefee) found here: http://octodex.github.com/hubot/

Campfire image from [37signals](http://37signals.com/).

Spotify image from [Spotify](http://spotify.com/).
"
354,georgezzzh/SpotifyLyricQt,C++,"# SpotifyLyricQt

<img src=""https://raw.githubusercontent.com/georgezzzh/SpotifyLyricQt/master/Readme/icon.png"" alt=""icon""  />

[English README](https://github.com/georgezzzh/SpotifyLyricQt/blob/master/README_EN.md)  
Windows与Linux皆可运行的Spotify歌词同步软件，下图为Ubuntu20.04实测图。

![ubuntu20.04](https://github.com/georgezzzh/SpotifyLyricQt/raw/master/Readme/spotifyLyricQt.png)

![深色模式](https://github.com/georgezzzh/SpotifyLyricQt/raw/master/Readme/spotifyLyricDark.png)

## 歌词源

* QQ音乐
* 网易云音乐
## 安装
* Windows

支持Win10和Win11
在Release页面下载安装即可，windows安装之后桌面会显示SpotifyLyric图标，在电脑重启之后，会在菜单栏->Spotify Lyric找到本软件。Windows版本如果发现歌词无法同步，可以关闭网络代理或者重启系统。
* ubuntu下卸载本软件

ubuntu仅实测ubuntu20.04，其他版本受限于我系统的开发环境，暂无编译好的deb包。
`sudo dpkg -r spotifylyricQt`
"
355,hojinYang/spotify_recSys_challenge_2018,Python,"
## 2018 ACM RecSys Challenge 2'nd Place Solution 

[[paper]](https://hojinYang.github.io/papers/MMCF18.pdf) [[slides]](https://www.slideshare.net/HojinYang3/mmcf-multimodal-collaborative-filtering-for-automatic-playlist-conitnuation) [[challenge]](http://www.recsyschallenge.com/2018/)

Contact: hojin.yang7@gmail.com

## Intoduction
This repository contains the tensorflow v1 implementation of our entry for main track. 
We propose MMCF, which is consists of two components: (1) Context-aware autoencoders using 
both the playlist and its categorical contents and (2) Character-level convolutional neural networks 
that learn the latent relationship between playlists and their titles.


## Citation
If you are interested in building up your research on this work, please cite:

```
@inproceedings{mmcf18,
author = {Yang, Hojin and Jeong, Yoonki and Choi, Minjin and Lee, Jongwuk},
year = {2018},
month = {10},
pages = {1-6},
title = {MMCF: Multimodal Collaborative Filtering for Automatic Playlist Continuation},
isbn = {978-1-4503-6586-4},
journal = {RecSys Challenge '18: Proceedings of the ACM Recommender Systems Challenge 2018},
doi = {10.1145/3267471.3267482}
}
```

## Development Environment
* Python Anaconda v4.4.10  
* Tensorflow v1.5.0  
* CUDA Toolkit v9.0 and cuDNN v7.0  
* GPU: 4 Nvidia GTX 1080Ti  

## Library
* Tensorflow v1

## Dataset
Spotify has produced the MPD(Million Playlist Dataset) which contains a million user-curated playlists. 
Each playlist in the MPD contains a playlist title, a list of tracks(with metadata), and other miscellaneous information. 

## Preprocess The Data
Proceed with these steps to convert the MPD’s data format into our system's.
1. Download Spotify's MPD tar file which contains a thousand MPD-slice json files(each contains a thounsand playlists).
2. Divide json files into two groups: training folder and test folder. And place each data folders into the root folder of the project.
3. You can get resturctured data by running **data_generator.py**.  
*Arguments of data_generator.py*   
`--datadir`		: Directory where converted dataset(training, test, challenge) will be stored. *default: ./data*  
`--mpd_tr`		: Directory which contains MPD-slice json files used for training the model. *default: ./mpd_train*  
`--mpd_te`		: Directory which contains MPD-slice json files used for testing the model. *default: ./mpd_test*     
`--mpd_ch`		: Directory which contains the challenge set json file. *default: ./challenge*   
`--mincount_trk`	: The minimum number of occurences of tracks in the train data *default: 5*  
`--mincount_art`	: The minimum number of occurences of artists in the train data *default: 3*  
`--divide_ch`		: A list where each elements is a range of challenge seed numbers *default: 0-1,5,10-25,10-25r* 	    
For example, you can set the dicrectories as the following command : 
```console  
python data_generator.py --datadir ./data --mpd_tr ./mpd_train --mpd_te ./mpd_test --mpd_ch ./challenge
```
You can set the minimum number of occurences of tracks and artists on training set manually. 
When you run the following command, tracks with less than three occurrences are removed:
```console
python data_generator.py --mincount_trk 3 
```
4. Scripts above populate the ‘./data’ with one training json file, multiple types of test json, and challenge json.  

    
Each test files contains same seed pattern as Spotify RecSys Challenge: seed 0, 1, 5, 10, 25, 100, 25r, 100r.  
We also divide challenge set into four categories based on seed pattern by default: (0,1) , (5) , (10,25,100) , (25r,100r)  
 
For submission, we train our models with four different denoising schemes.
Each schemes performs better on one of four different challenge categories.  


## Implementation Detail
Our model is composed of two parts: Denoising Autoencoders and Character-level CNN; 
train the parameters of the DAE first, then integrate with char-level CNN.
1. Create a folder into the root folder of the project. *config.ini* file, which contains information required to run the model, 
must be placed into the created folder(Check the structure of *conf.ini* below).  
2. You can train models by running **main.py**.  
*Arguments of main.py*   
`--dir`			: Directory name which contains config file.  
`--pretrain`	: Pretrain dae parameters if specified.  
`--dae`			: Train dae parameters if specified.  
`--title`		: Train paramters of title module if specified.  
`--challenge`	: Generate challenge submission candidates if specified.  
`--testmode`	: Get the results without training the model if specified.   
Suppose the folder you create at the step above is './sample'.   
we recommand you to **pretrain the DAE with tied condition**; constrain decoder’s weights to be equal to transposed encoder’s.
Using those weights as initial values of DAE brings much better results than not pretraining the weights.   
First, run main in pretrain mode(tied DAE):  
```console
python main.py --dir sample --pretrain
```
Run main in DAE mode after the loss is converged in pretrain mode.
If you set pretrain file name in config.ini file, following command will use pretrained paramters saved in the fold you created(./sample). 
You can also train DAE without initital value depending on the *config.ini* setting:  
```console
python main.py --dir sample --dae
```
After you run DAE, its parameters are saved as pickle format in ./sample.   

3. You can train char-CNN if DAE’s parameters is save in the folder you created. After you run the command below, the final tensor graph will be generated:
```console
python main.py --dir sample --title
```
4. Finally you can generate challenge submission candidates by using graph and DAE paramters you get at the steps above:  
```console
python main.py --dir sample --challenge
```
**[note]**  
For all models, paramters are updated if the avearge of *update_seeds* r-precision score(s) increases. Our system calculates r-precision score every epoch.  
You must specify only one mode(dae, title, challenge) when you set arguments of *main.py*.  
You can easily replace parameter pickle files(for DAE) and/or ckpt graph file(for title) with other directories, 
if both have same number of tracks & artists and same CNN filter shapes.     
If you want to just check metrices scores after replacing paramters with directory's, using *--testmode* is efficient:
```console
# after replacing DAE pickle file from another folder #
python main.py --dir sample --dae --testmode
```

## Submission Configuration
We already set the initial setting: create 4 different directories(0to1_inorder,5_inorder,10to100_inorder, 25to100_random), 
and set config files of each directories.  
1. Divide 1,000 *mpd.slice.#.json files* into two directories(mpd_train, mpd_test). We use 997 slices for training 
except *'mpd.slice.250000-250999', 'mpd.slice.500000-500999', 'mpd.slice.750000-750999'* which are used for testing the model.  
The directory containing *challenge_set.json* is also needed for generating challenge data following our format.  
2. Run **data_generator.py** with default arguments(or change if you want). 
Then './data' is created which contains training data and test data with multiple categories as json format. 
Challenge data with four different categories are also created as we set `--divide_ch` of **data_generator.py** as *0-1,5,10-25,10-25r(andom)*.  
Dividing challenge data into four categories means we use four different denoising schemes to train our model 
and merge the results at the last moment.  
3. We already set four different directories which contain *config.ini* optimized for each challenge categories. 
The approximante information is shown in the table below.  
4. Run in pretrain mode for each directories. Then run in dae mode except 0to1_inorder.  
5. For title mode, it is more efficient to run in just one directory(0to1_inorder) 
and copy the tensor graph outputs(generated after running on title mode) to others. 
You don't have to train in title mode for all directories, as outputs are same.  
6. Run challenge mode for each directories.  
7. Run **merge_results.py** to merge results from different directories and to generate results.csv files.  

| directory | challenge category | firstN_range | input denoising | pretrain only	|
|--------|--------|--------|--------|--------|
| 0to1_inorder | challenge_inorder_0to1 | 0, 0.3 | 0.75 | True |
| 5_inorder | challenge_inorder_5 | 1, 50 | 0.75 | False |
| 10to100_inorder | challenge_inorder_10to100 | 0.3, 0.6 | 0.75 | False |
| 25to100_random | challenge_random_25to100 | -1 | 0.5, 0.8 | False |  

In summary, run the following commands one line at a time:  
```console
# 997 mpd.slice on ./mpd_train, 3 mpd.slice on ./mpd_test, challenge set on ./challenge #  
python data_generator.py  
python main.py --dir 0to1_inorder --pretrain  
python main.py --dir 0to1_inorder --title  
python main.py --dir 0to1_inorder --challenge  
# copy 0to1_inorder/graph to 5_inorder #
python main.py --dir 5_inorder --pretrain  
python main.py --dir 5_inorder --dae  
python main.py --dir 5_inorder --challenge  
# copy 0to1_inorder/graph to 10to100_inorder #
python main.py --dir 10to100_inorder --pretrain  
python main.py --dir 10to100_inorder --dae  
python main.py --dir 10to100_inorder --challenge  
# copy 0to1_inorder/graph to 25to100_inorder #
python main.py --dir 25to100_random --pretrain  
python main.py --dir 25to100_random --dae  
python main.py --dir 25to100_random --challenge  

python merge_results.py
```
**[Note]**  
* It takes about 3\~4 days to train using the whole MPD under our environment.  
* We set every epochs as 20. If the r-precision of *update_seed* continuously decreases and no parameters update occur, 
it is recommended to stop the operation manually and proceed to the next steps. 
Also, more epochs might be needed if you train using small data set.  
* You should modify some lines of code in *models/DAEs.py* if your system has fewer than three GPUs.  

## Sturcture of config.ini
***[BASE]***  
**verbose** - *boolean.* print log on console if True.  
**data_dir** - *string.* Directory of data that system will read. 
The directory contains one training json file and multiple types of test json files.  
**challenge_dir** - *string.* Directory where final results are saved.   
**testsize** - *int.* The number of maximum test playlist in each test case.

***[DAE]***  
**epochs** - *int.* Number of training epoch.  
**batch** - *int.* batch size.  
**lr** - *float.* learning rate.  
**reg_lamdba** - *float.* regularization constant.  
**hidden** - *int.* DAE hidden layer size.  
**test_seed** - *comma seperated int(or int+’r’) list.* Seed numbers that you run the test after each epoch.   
*test_seed =  1,5,10* means the system runs test after each epoch by reading test-1, test-5, test-10 json file in the directory set in fold_dir.  
**update_seed** -  *comma seperated int(or int+’r’) list.* Seed numbers that is considered when updating parameters. Update_seed must be inner set of test_seed.  
*test_seed = 25r,100r , update_seed = 100r* means  the system runs test after each epoch by reading test-25r, test-100r json file, creates log, 
and update parameters if the test-100r’s r-precision  value increases.  
**keep_prob** - *float(0.0<x<=1.0).* Drop out keep probability in hidden layer.  
*keep_prob = 0.75* means drop out 25% of input for every batch.  
**input_kp** - *comma seperated floats list(0.0<x<=1.0).* Denoising keep probability range in input layer.  
*input_kp = 0.5, 0.8* means denoise randomly selected probability between 50%~20%.  
**firstN_range** - *comma seperated floats or int list.* The range to draw a random number n,. 
when you set the tracks from 0th track to n\-th track of a playlist as input value. 
You can set it up in three different ways.  
*firstN_range = -1* means to consider all the songs in the playlist as an input value.  
*firstN_range = float a , float b* means set input track range from 0\-th to random(a\*N, b\*N). (N is the length of the playlist)
*firstN_range = int a , int b* means set input track range from 0\-th to random(a, b).   
ex)  
firstN_range - -1 : 0\~N  
firstN_range - 0,50 : 0\~random(0,50)  
firstN_range - 0.3,0.6 : 0\~random(N\*0.3, N\*0.6)  
**initval** - *string.* Name of pickle file which contains pretrained parameters. Set NULL if no initial value.     
**save** - *string.* Name of pickle file to store the updated parameters.

***[PRETRAIN]***  
**epochs** - *int.* Number of training epoch.  
**batch** - *int.* batch size.  
**lr** - *float.* learning rate.  
**reg_lamdba** - *float.* regularization constant.  
**save** - *string.* Name of pickle file to store the updated parameters.


***[TITLE]***  
**epochs** - *int.* Number of training epoch.  
**batch** - *int.* batch size.  
**lr** - *float.* learning rate.  
**keep_prob** - *float(0.0<x<=1.0).* Drop out keep probability in DAE hidden layer.  
**input_kp** - *comma seperated floats(0.0<x<=1.0).* Denoising keep probability range in  input layer.  
**title_kp** - *float(0.0<x<=1.0).* Drop out keep probability in title model hidden layer.    
**test_seed** - *comma seperated int(or int+’r’) list.* Seed numbers that you run the test after each epoch.   
**update_seed** -  *comma seperated int(or int+’r’) list.* Seed numbers that is considered when updating parameters.   
**char_model** - *Char_CNN or Char_RNN*  
**rnn_hidden** - *int.* Set this one if char_model is Char_RNN. RNN hidden size.  
**filter_num** - *int.* Set this one if char_model is Char_CNN. Number of CNN filters.  
**filter_size** - *comma seperated int list.* Set this one if char_model is Char_CNN. Size of CNN filters.  
**char_emb** - *int.* Character embedding size. One-hot if the value is 0.  
**DAEval** - *string.* Name of pickle file where the parameters of DAE is saved.  
**save** - *string.* Name of checkpoint file which saves updated tensor graph.



***[CHALLENGE]***  
**batch** - *int.* batch size.  
**challenge_data** - *string.* Name of challenge file whose format is modified to fit our system in *data-dir*.  
**result** - *string.* Name of pifckle file to save the result.  
  
"
356,codetheweb/muse,TypeScript,"<p align=""center"">
  <img width=""250"" height=""250"" src=""https://raw.githubusercontent.com/codetheweb/muse/master/.github/logo.png"">
</p>

🚨: v1.0.0 was a breaking change. Please take a look at the [release notes](https://github.com/codetheweb/muse/releases/tag/v1.0.0) for upgrade instructions

------

Muse is a **highly-opinionated midwestern self-hosted** Discord music bot **that doesn't suck**. It's made for small to medium-sized Discord servers/guilds (think about a group the size of you, your friends, and your friend's friends).

![Hero graphic](.github/hero.png)

## Features

- 🎥 Livestreams
- ⏩ Seeking within a song/video
- 💾 Local caching for better performance
- 📋 No vote-to-skip - this is anarchy, not a democracy
- ↔️ Autoconverts playlists / artists / albums / songs from Spotify
- ↗️ Users can add custom shortcuts (aliases)
- 1️⃣ Muse instance supports multiple guilds
- ✍️ Written in TypeScript, easily extendable
- ❤️ Loyal Packers fan

## Running

Muse is written in TypeScript. You can either run Muse with Docker (recommended) or directly with Node.js. Both methods require API keys passed in as environment variables:

- `DISCORD_TOKEN` can be acquired [here](https://discordapp.com/developers/applications) by creating a 'New Application', then going to 'Bot'.
- `SPOTIFY_CLIENT_ID` and `SPOTIFY_CLIENT_SECRET` can be acquired [here](https://developer.spotify.com/dashboard/applications) with 'Create a Client ID'.
- `YOUTUBE_API_KEY` can be acquired by [creating a new project](https://console.developers.google.com) in Google's Developer Console, enabling the YouTube API, and creating an API key under credentials.

Muse will log a URL when run. Open this URL in a browser to invite Muse to your server. Muse will DM the server owner after it's added with setup instructions.

A 64-bit OS is required to run Muse.

### Versioning

The `master` branch acts as the developing / bleeding edge branch and is not guaranteed to be stable.

When running a production instance, I recommend that you use the [latest release](https://github.com/codetheweb/muse/releases/).


### 🐳 Docker

There are a variety of image tags available:
- `:2`: versions >= 2.0.0
- `:2.1`: versions >= 2.1.0 and < 2.2.0
- `:2.1.1`: an exact version specifier
- `:latest`: whatever the latest version is

(Replace empty config strings with correct values.)

```bash
docker run -it -v ""$(pwd)/data"":/data -e DISCORD_TOKEN='' -e SPOTIFY_CLIENT_ID='' -e SPOTIFY_CLIENT_SECRET='' -e YOUTUBE_API_KEY='' codetheweb/muse:latest
```

This starts Muse and creates a data directory in your current directory.

**Docker Compose**:

```yaml
version: '3.4'

services:
  muse:
    image: codetheweb/muse:latest
    restart: always
    volumes:
      - ./muse:/data
    environment:
      - DISCORD_TOKEN=
      - YOUTUBE_API_KEY=
      - SPOTIFY_CLIENT_ID=
      - SPOTIFY_CLIENT_SECRET=
```

### Node.js

**Prerequisites**:
* Node.js (16.x is recommended because it's the current LTS version)
* ffmpeg (4.1 or later)

1. `git clone https://github.com/codetheweb/muse.git && cd muse`
2. Copy `.env.example` to `.env` and populate with values
3. I recommend checking out a tagged release with `git checkout v[latest release]`
4. `yarn install` (or `npm i`)
5. `yarn start` (or `npm run start`)

**Note**: if you're on Windows, you may need to manually set the ffmpeg path. See [#345](https://github.com/codetheweb/muse/issues/345) for details.

## ⚙️ Additional configuration (advanced)

### Cache

By default, Muse limits the total cache size to around 2 GB. If you want to change this, set the environment variable `CACHE_LIMIT`. For example, `CACHE_LIMIT=512MB` or `CACHE_LIMIT=10GB`.

### Custom Bot Status

In the default state, Muse has the status ""Online"" and the text ""Listening to Music"". You can change the status through environment variables:

- `BOT_STATUS`:
  - `online` (Online)
  - `idle` (Away)
  - `dnd` (Do not Disturb)

- `BOT_ACTIVITY_TYPE`:
  - `PLAYING` (Playing XYZ)
  - `LISTENING` (Listening to XYZ)
  - `WATCHING` (Watching XYZ)
  - `STREAMING` (Streaming XYZ)

- `BOT_ACTIVITY`: the text that follows the activity type

- `BOT_ACTIVITY_URL` If you use `STREAMING` you MUST set this variable, otherwise it will not work! Here you write a regular YouTube or Twitch Stream URL.

#### Examples

**Muse is watching a movie and is DND**:
- `BOT_STATUS=dnd`
- `BOT_ACTIVITY_TYPE=WATCHING`
- `BOT_ACTIVITY=a movie`

**Muse is streaming Monstercat**:
- `BOT_STATUS=online`
- `BOT_ACTIVITY_TYPE=STREAMING`
- `BOT_ACTIVITY_URL=https://www.twitch.tv/monstercat`
- `BOT_ACTIVITY=Monstercat`

### Bot-wide commands

If you have Muse running in a lot of guilds (10+) you may want to switch to registering commands bot-wide rather than for each guild. (The downside to this is that command updates can take up to an hour to propagate.) To do this, set the environment variable `REGISTER_COMMANDS_ON_BOT` to `true`.
"
357,enyu0226/Spotify-Clone,PHP,"# Spotify-Clone
Working Version of Full Stack Spotify Clone build using HTML5, CSS, jQuery/Ajax and PHP.

Download XAMPP for the respective version of OS from
https://www.apachefriends.org/index.html.

Once XAMPP is installed and lauched:

Under the General tab, click Start.

Under the Service tab, click Start on both Apache and MySQL services.

Under the Network tab, click Enable.

(This would start the local server at port 8080 on your machine)

Under the volume tab, click Mount

On the XAMPP virtual machine, click on lampp folder and then htdocs folder. Place the Spotify_Clone folder into the htdocs folder.

Go to http://localhost:8080/phpmyadmin to go into the admin page and click the ""New"" button on the left side of the screen to create new database. On the right side of the screen under the input for Create database, type in Spotify and then click the ""Create"" button.

Click on the newly created database ""Spotify"" on the left side of the screen and go to ""Import"" on the right side of the screen, locate the file in the git repository called spotifyCreateWholeDatabaseSoFar copy.sql and then click ""Go"" to import all the SQL instructions for creating the tables and entries for each table in the database.

Now go to http://localhost:8080/Spotify_Clone/register.php to access the registration page, Make sure to register for your own user profile and then log in to the system.

<img width=""1680"" alt=""artist"" src=""https://user-images.githubusercontent.com/32314110/34497769-e7b7bf1e-efcc-11e7-9267-bf59bf6bf282.png"">
"
358,Spotifyd/spotifyd-http,Rust,"# DEPRECATED

I have stopped working on this API as Spotify have released an official API with a similar use case:
https://developer.spotify.com/web-api/web-api-connect-endpoint-reference/

# Spotifyd-http

This web server remote controls Spotify Connect devices via HTTP requests.

## Methods

These are the currently supported methods:

### GET /devices
Returns a list of device ID/Name pairs.

### PUT /device_id/{play, pause, next, prev}
Plays, pauses, skips, and returns to previous song.

### {GET, PUT, POST} /device_id/tracks
Gets, replaces, or appends tracks to the playlist. The `PUT` and `POST` take
one or more `id` parameters. Example:
```bash
TRACKS=""id=2BhU0Hl5OatWiCW93pE2b8&id=731OW49heGHCMrMOREHYlY&id=6zAPaRDoT99ThFtIXUJwhO""
curl -X POST -d ""$TRACKS"" 127.0.0.1:6767/device_id/tracks
```
"
359,daviddt/angular2-spotify-sample-app,JavaScript,
360,tomasmcm/SpotiWeb,JavaScript,"# SpotiWeb &nbsp; [![Github Releases](https://img.shields.io/github/downloads/tomasmcm/SpotiWeb/total.svg?maxAge=2592000?style=flat-square)](https://github.com/tomasmcm/SpotiWeb/releases)

**Electron wrapper of play.spotify.com**

Why would you want to use this instead of the Spotify Desktop App? Because Ads...

Why would you use this app instead of [these](https://github.com/search?utf8=✓&q=spotify+electron&type=Repositories&ref=searchresults)? Because:
* Works with Mac, Windows and Linux
* Control your music with Media Keys (Play/Pause, Next, Previous)
* Notification of current music with Author, Title & Album Cover

<br>

### Download

Check [releases](https://github.com/tomasmcm/SpotiWeb/releases) for the latest version.

View <a href=""http://codepen.io/tomasmcm/embed/EKBLxL/?height=600"" target=""_blank"">Downloads Count</a>.

<br>

### Future Improvements
- [x] Custom menu
- [x] Fix http errors when loading images
- [x] Allow fullscreen mode
- [x] Update Checker
- [x] Lyrics Search
- [ ] Custom Keyboard Shortcuts
- [ ] Chromecast Support
- [ ] ...

<br>

### _I'm old school and I want to compile it myself_

From your command line:

```bash
# Install dependencies
$ npm install
# Run the app
$ npm start

# To compile Win app on Mac
$ brew install wine makensis
# REBOOT BEFORE CONTINUING


# To create App binaries
$ npm run package

# Export Mac app only
$ npm run package:mac

# Export Win apps only
$ npm run package:win

# Export Linux apps only
$ npm run package:linux


# PS: if when running build commands you get permission errors run this:
$ chmod u+x mac.sh
$ chmod u+x win.sh
$ chmod u+x linux.sh

# To create App zip's
$ npm run zip
# OR Mac only
$ npm run zip:mac
# OR Win only
$ npm run zip:win
# OR Linux only
$ npm run zip:linux

# To create App binaries and zip's
$ npm run build
# OR Mac only
$ npm run build:mac
# OR Win only
$ npm run build:win
# OR Linux only
$ npm run build:linux

```

<br>

### Related Work
* [Electron](http://electron.atom.io)
* [beaufortfrancois - Spotify Hotkeys](https://github.com/beaufortfrancois/spotify-hotkeys-chrome-extension)
* [hokein - Electron Notifications](https://github.com/hokein/electron-sample-apps/tree/master/notifications)
* [jenslind - Electron-gh-releases](https://github.com/jenslind/electron-gh-releases)

<br>

### Third Party
* Pepper Flash Plugin, All Rights Reserved © Adobe & Google
* Spotify, All Rights Reserved © Spotify AB
"
361,hidimpu/Spotify-Downloader,Python,"# Spotify-Downloader

#####    A Simple Python Script that enables you to extract mp3 using Spotify Links

### ######## 
<p align=""center"">
  <br>
  <img src=""./spdl.png"" height=""100px""/>
  <br><br><br>
  <b>Download audio files using Spotify links</b>
  <br>
</p>


 #####  Make sure you have FFmpeg  on the same folder as the script file if you are on Linux or Mac
  - Get it from FFmpeg's official site (www.ffmpeg.org) 

### Usage

##### Open the your preferred Terminal and execute following command : 


```sh
pip install -r requirements.txt
```

##### Once all the requirements are installed, run the following command :
```sh
python dl.py
```
- Now Insert a valid Spotify URL and the process will start.
- The default path for downloads will be your ""Downloads"" folder (both Windows and Linux)

** Make sure to be connected with Internet else you will see a Load of errors ** 

"
362,spicetify/spicetify-marketplace,TypeScript,"# Spicetify Marketplace

<p>
  <a href=""https://github.com/spicetify/spicetify-marketplace/releases/latest"">
    <img src=""https://img.shields.io/github/v/release/spicetify/spicetify-marketplace?include_prereleases"">
  </a>
  <a href=""https://github.com/spicetify/spicetify-marketplace/issues?q=is%3Aissue+is%3Aclosed"">
    <img src=""https://img.shields.io/github/issues-closed/spicetify/spicetify-marketplace"">
  </a>
  <a href=""https://github.com/spicetify/spicetify-marketplace/commits/main"">
    <img src=""https://img.shields.io/github/commit-activity/m/spicetify/spicetify-marketplace"">
  </a>
</p>

Customize your Spotify client directly from within [Spicetify](https://github.com/spicetify/spicetify-cli)!

Marketplace allows you to **browse, download, and install** extensions, themes, and CSS snippets with ease. You can also browse custom apps, but will need to do some manual installation to get them working.

Made with [Spicetify Creator](https://github.com/spicetify/spicetify-creator)

Head to the [wiki](https://github.com/spicetify/spicetify-marketplace/wiki) to get started!

---

## Links
- [Overview](https://github.com/spicetify/spicetify-marketplace/wiki)
- [Installation](https://github.com/spicetify/spicetify-marketplace/wiki/Installation)
- [Adding your creation to Marketplace](https://github.com/spicetify/spicetify-marketplace/wiki/Adding-your-own-creation-to-Marketplace)
- [Contributions](https://github.com/spicetify/spicetify-marketplace/wiki/Contributions)
- [Development](https://github.com/spicetify/spicetify-marketplace/wiki/Development)

"
363,mheine/gnome-shell-spotify-label,JavaScript,"# Spotify Label

This is a quick and dirty GNOME shell extension to show the currently playing song on Spotify in the top bar. 

## Example
![alt text](https://github.com/mheine/gnome-shell-spotify-label/raw/master/msl-screenshot.png ""A screenshot  of the label in action"")

## Installation
This extension is available for download/installation on the [GNOME Extensions Webpage](https://extensions.gnome.org/extension/2603/spotify-label/)

It is also possible to download it ""manually"" by cloning the repository to `~/.local/share/gnome-shell/extensions`, restarting GNOME and enabling the extension using `gnome-shell-extension-tool -e gnomespotifylabel@mheine.github.com`. This approach is not recommended, and assumes you know your way around the GNOME Extensions ecosystem.

If you still have issues, talk to me! Create an [issue](https://github.com/mheine/gnome-shell-spotify-label/issues/new?title=Installation!&body=Hey!%20I'd%20like%20to%20get%20this%20installed%20on%20my%20system) or send me an [email](mailto:mail@mheine.se); this is my very first GNOME extension, but I'd be happy to help you set it up on your workstation.

## Disclaimer
The extension is is currently very tailored to my setup, but if you have questions or comments I'd be more than happy to answer them. There are a few configuration options available in the beginning of `extension.js`, but for more advanced tweaking your best bet is to manually code it.

Have fun!
"
364,jaicab/Paraxify.js,CoffeeScript,"# [Paraxify.js](http://jaicab.github.io/Paraxify.js)

Simple lightweight parallax plugin (around **2kb gzipped**) built with Vanilla JS and CSS3 inspired by Spotify's website parallax effect. 

It's been thought as a **progressive enhancing** plugin, so don't expect it to work exactly the same on all browsers, but it does work in all of them, in one way or another.

I built this plugin because I couldn't find any other non-jquery plugins that fit my needs. 


## How does it work?

- Start with a centered background image **bigger** than the element it's been set on.
- Add the paraxify class to the elements that you want to paraxify.

```css
.paraxify{
  background-attachment: fixed;
  background-position: center center;
  background-size: cover;
}
```

- Now just start the JavaScript part:

```javascript
myParaxify = paraxify('.paraxify');
```

- Ready to go! You should see the background images parallaxing.

IMPORTANT: Parallax and touch devices usually don't get along. So I highly suggest you to use [modernizr's](http://modernizr.com/download/) touch events. For example:

```javascript
if(!Modernizr.touch){
	myParaxify = paraxify('.paraxify');
}
```

As long as the background is `fixed`, the images will scroll all the hidden part accordingly to the scroll position. This way **you can control** when it's active or not just switching the `background-attachment` property on CSS to `scroll`.

I wanted the background to be fixed so it creates a nice pure CSS parallax effect in case the JavaScript is not supported or disabled in the browser. I had performance in mind when I built this plugin, so **only the visibe photos are scrolled**.

## Advanced use
You can set any other selector actually. The `paraxify` function has two parameters:
	
	var myParaxify = paraxify('selector', {
		speed: 1,
		boost: 0
	});

On `selector` you can set any selector, but a class is more retro-compatible. Also, you can set a speed from 0 to 1. The lower the speed, the less distance the background is gonna move. This speed is always proportional to the difference between the image's height and the element's.

The speed is determined by the difference between the element's height and the image's. However, you can slow it down or boost it up using the options' array avalible:

- `speed` (float, 0 to 1, 1 by default): It's proportional to the hidden part of the image.
	- 0: It would be completely stopped.
	- 1: It would scroll all the hidden part of the background image.
- `boost` (float, 0 to 1, 0 by default): Boost uses the visible part of the image to speed the scroll speed a bit.
	- 0: There wouldn't be a boost.
	- 1: It would scroll all the visible part of the background image.

So **by default** it scrolls all the hidden part but none of the visible.

At last but not least, you can access all the background info that paraxify calculates on real time. Type this in your console and you'll see:

	myParaxify.photos


## TODO

- [I'M ON IT] Option to scroll horizontally as well as vertically.
- [HOLD] Fix buggy behaviour on +IE9: The scrolling is not smooth.
- [HOLD] Try debouncing scroll event so it doesn't launch a bizillion times per second.

## Contributing

Please, feel free to fork the project and modify it as you wish. Just try to keep it __light and working__. Send me a pull request and I'll review it as soon as possible. Any new feature is welcome aboard.

If you feel like discussing a new feature or you've found a bug, open an issue or contact me on twitter ([@jaicab_](http://twitter.com/jaicab_)) so we can talk about it.


## MIT License
Paraxify has been coded from scratch by [Jaime Caballero](http://jaicab.com) and it's licensed under **MIT License**."
365,avatar282/Spotify-APKV7.3.2,Go,"# Spotify-APKV7.3.2
A Spotify Hack to give users free premium without having to purchase it. Only for android


         _______  _______          _________ _        _______          
        (  ____ \(  ___  )|\     /|\__   __/( (    /|(  ___  )|\     /|
        | (    \/| (   ) || )   ( |   ) (   |  \  ( || (   ) |( \   / )
        | (__    | |   | || |   | |   | |   |   \ | || |   | | \ (_) / 
        |  __)   | |   | || |   | |   | |   | (\ \) || |   | |  ) _ (  
        | (      | | /\| || |   | |   | |   | | \   || |   | | / ( ) \ 
        | (____/\| (_\ \ || (___) |___) (___| )  \  || (___) |( /   \ )
        (_______/(____\/_)(_______)\_______/|/    )_)(_______)|/     \|
        
        Technology for the future!
        
Contributers: Chemicxlkid, Break, B4nk, Elemental, Cha0s, Biohunter, and Aquarimenti

Permissions|
\\* Below are the users who will have permissions to this application once complete!

Users:
Fabian Rosales|API|:A3FD-AS8A-UFDI-ISJA
GIo|API| :1423-GU13-GSAA-GUIG
"
366,wernight/docker-mopidy,Dockerfile,"[![](https://images.microbadger.com/badges/image/wernight/mopidy.svg)](http://microbadger.com/images/wernight/mopidy ""Get your own image badge on microbadger.com"")

What is Mopidy?
===============

[**Mopidy**](https://www.mopidy.com/) is a music server with support for [MPD clients](https://docs.mopidy.com/en/latest/clients/mpd/) and [HTTP clients](https://docs.mopidy.com/en/latest/ext/web/#ext-web).

Features of this image
----------------------

  * Follows [official installation](https://docs.mopidy.com/en/latest/installation/debian/) on top of [Debian](https://registry.hub.docker.com/_/debian/).
  * With backend extensions for:
      * [Mopidy-Spotify](https://docs.mopidy.com/en/latest/ext/backends/#mopidy-spotify) for **[Spotify](https://www.spotify.com/us/)** (Premium)
      * [Mopidy-GMusic](https://docs.mopidy.com/en/latest/ext/backends/#mopidy-gmusic) for **[Google Play Music](https://play.google.com/music/listen)**
      * [Mopidy-SoundClound](https://docs.mopidy.com/en/latest/ext/backends/#mopidy-soundcloud) for **[SoundCloud](https://soundcloud.com/stream)**
      * [Mopidy-Pandora](https://github.com/rectalogic/mopidy-pandora) for **[Pandora](https://www.pandora.com/)**
      * [Mopidy-YouTube](https://docs.mopidy.com/en/latest/ext/backends/#mopidy-youtube) for **[YouTube](https://www.youtube.com)**
  * With [Mopidy-Moped](https://docs.mopidy.com/en/latest/ext/web/#mopidy-moped) web extension.
  * Can run as any user and runs as UID/GID `84044` user inside the container by default (for security reasons).

You may install additional [backend extensions](https://docs.mopidy.com/en/latest/ext/backends/).


Usage
-----

### Playing sound from the container

There are various ways to have the audio from Mopidy running in your container
to play on your system's audio output. Here are various ways, try them and find
which one works for you.

#### /dev/snd

Simplest is by adding docker argument: `--device /dev/snd`. Try via:

    $ docker run --rm \
        --user root --device /dev/snd \
        wernight/mopidy \
        gst-launch-1.0 audiotestsrc ! audioresample ! autoaudiosink

#### PulseAudio native

Mount the current user's pulse directory to the pulseuadio user (UID `105`).
Based on https://github.com/TheBiggerGuy/docker-pulseaudio-example.

    $ docker run --rm \
        --user $UID:$GID -v /run/user/$UID/pulse:/run/user/105/pulse \
        wernight/mopidy \
        gst-launch-1.0 audiotestsrc ! audioresample ! autoaudiosink

#### PulseAudio over network

First to make [audio work from within a Docker container](http://stackoverflow.com/q/28985714/167897),
you should enable [PulseAudio over network](https://wiki.freedesktop.org/www/Software/PulseAudio/Documentation/User/Network/);
so if you have X11 you may for example do:

 1. Install [PulseAudio Preferences](http://freedesktop.org/software/pulseaudio/paprefs/). Debian/Ubuntu users can do this:

        $ sudo apt-get install paprefs

 2. Launch `paprefs` (PulseAudio Preferences) > ""*Network Server*"" tab > Check ""*Enable network access to local sound devices*"" (you may check ""*Don't require authentication*"" to avoid mounting cookie file described below).

 3. Restart PulseAudio:

        $ sudo service pulseaudio restart

    or

        $ pulseaudio -k
        $ pulseaudio --start

Note: On some distributions, it may be necessary to completely restart your computer. You can confirm that the settings have successfully been applied running `pax11publish | grep -Eo 'tcp:[^ ]*'`. You should see something like `tcp:myhostname:4713`.

Now set the environment variables:

  * `PULSE_SERVER` - PulseAudio server socket.
  * `PULSE_COOKIE_DATA` - Hexadecimal encoded PulseAudio cookie commonly at `~/.config/pulse/cookie`.

Example to check it works:

    $ docker run --rm \
        -e ""PULSE_SERVER=tcp:$(hostname -i):4713"" \
        -e ""PULSE_COOKIE_DATA=$(pax11publish -d | grep --color=never -Po '(?<=^Cookie: ).*')"" \
        wernight/mopidy \
        gst-launch-1.0 audiotestsrc ! audioresample ! autoaudiosink

### General usage

    $ docker run -d \
        $PUT_HERE_EXRA_DOCKER_ARGUMENTS_FOR_AUDIO_TO_WORK \
        -v ""$PWD/media:/var/lib/mopidy/media:ro"" \
        -v ""$PWD/local:/var/lib/mopidy/local"" \
        -p 6600:6600 -p 6680:6680 \
        --user $UID:$GID \
        wernight/mopidy \
        mopidy \
        -o spotify/username=USERNAME -o spotify/password=PASSWORD \
        -o gmusic/username=USERNAME -o gmusic/password=PASSWORD \
        -o soundcloud/auth_token=TOKEN

Most arguments are optional (see some examples below):

  * Docker arguments:
      * `$PUT_HERE_EXRA_DOCKER_ARGUMENTS_FOR_AUDIO_TO_WORK` should be replaced
        with some arguments that work to play audio from within the docker
        container as tested above.
      * `-v ...:/var/lib/mopidy/media:ro` - (optional) Path to directory with local media files.
      * `-v ...:/var/lib/mopidy/local` - (optional) Path to directory to store local metadata such as libraries and playlists in.
      * `-p 6600:6600` - (optional) Exposes MPD server (if you use for example ncmpcpp client).
      * `-p 6680:6680` - (optional) Exposes HTTP server (if you use your browser as client).
      * `-p 5555:5555/udp` - (optional) Exposes [UDP streaming for FIFE sink](https://github.com/mopidy/mopidy/issues/775) (e.g. for visualizers).
      * `--user $UID:$GID` - (optional) You may run as any UID/GID, and by default it'll run as UID/GID `84044` (`mopidy:audio` from within the container).
        The main restriction is if you want to read local media files: That the user (UID) you run as should have read access to these files.
        Similar for other mounts. If you have issues, try first as `--user root`.
  * Mopidy arguments (see [mopidy's command](https://docs.mopidy.com/en/latest/command/) for possible additional options),
    replace `USERNAME`, `PASSWORD`, `TOKEN` accordingly if needed, or disable services (e.g., `-o spotify/enabled=false`):
      * For *Spotify* you'll need a *Premium* account.
      * For *Google Music* use your Google account (if you have *2-Step Authentication*, generate an [app specific password](https://security.google.com/settings/security/apppasswords)).
      * For *SoundCloud*, just [get a token](https://www.mopidy.com/authenticate/) after registering.

NOTE: Any user on your system may run `ps aux` and see the command-line you're running, so your passwords may be exposed.
A safer option if it's a concern, is using putting these passwords in a Mopidy configuration file based on [mopidy.conf](mopidy.conf):

    [core]
    data_dir = /var/lib/mopidy

    [local]
    media_dir = /var/lib/mopidy/media

    [audio]
    output = tee name=t ! queue ! autoaudiosink t. ! queue ! udpsink host=0.0.0.0 port=5555

    [m3u]
    playlists_dir = /var/lib/mopidy/playlists

    [http]
    hostname = 0.0.0.0

    [mpd]
    hostname = 0.0.0.0

    [spotify]
    username=USERNAME
    password=PASSWORD

    [gmusic]
    username=USERNAME
    password=PASSWORD

    [soundcloud]
    auth_token=TOKEN

Then run it:

    $ docker run -d \
        $PUT_HERE_EXRA_DOCKER_ARGUMENTS_FOR_AUDIO_TO_WORK \
        -v ""$PWD/media:/var/lib/mopidy/media:ro"" \
        -v ""$PWD/local:/var/lib/mopidy/local"" \
        -v ""$PWD/mopidy.conf:/config/mopidy.conf"" \
        -p 6600:6600 -p 6680:6680 \
        --user $UID:$GID \
        wernight/mopidy


##### Example using HTTP client to stream local files

 1. Give read access to your audio files to user **84044**, group **84044**, or all users (e.g., `$ chgrp -R 84044 $PWD/media && chmod -R g+rX $PWD/media`).
 2. Index local files:

        $ docker run --rm \
            --device /dev/snd \
            -v ""$PWD/media:/var/lib/mopidy/media:ro"" \
            -v ""$PWD/local:/var/lib/mopidy/local"" \
            -p 6680:6680 \
            wernight/mopidy mopidy local scan

 3. Start the server:

        $ docker run -d \
            -e ""PULSE_SERVER=tcp:$(hostname -i):4713"" \
            -e ""PULSE_COOKIE_DATA=$(pax11publish -d | grep --color=never -Po '(?<=^Cookie: ).*')"" \
            -v ""$PWD/media:/var/lib/mopidy/media:ro"" \
            -v ""$PWD/local:/var/lib/mopidy/local"" \
            -p 6680:6680 \
            wernight/mopidy

 4. Browse to http://localhost:6680/

#### Example using [ncmpcpp](https://docs.mopidy.com/en/latest/clients/mpd/#ncmpcpp) MPD console client

    $ docker run --name mopidy -d \
        -v /run/user/$UID/pulse:/run/user/105/pulse \
        wernight/mopidy
    $ docker run --rm -it --net container:mopidy wernight/ncmpcpp ncmpcpp

Alternatively if you don't need visualizers you can do:

    $ docker run --rm -it --link mopidy:mopidy wernight/ncmpcpp ncmpcpp --host mopidy


### Feedbacks

Having more issues? [Report a bug on GitHub](https://github.com/wernight/docker-mopidy/issues). Also if you need some additional extensions/plugins that aren't already installed (please explain why).


### Alsa Audio

For non debian distros. The gid for audio group in /etc/group must be 29 to match debians default as `audio:x:29:<your user outside of docker>` this is to match the user id inside the docker container. You'll also need to add the `output = alsasink` config line under the audio section in your `mopidy.conf`.

```
$ docker run -d -rm \
  --device /dev/snd \
  --name mopidy \
  --ipc=host \
  --privileged \
  -v $HOME/.config/mopidy:/var/lib/mopidy/.config/mopidy/ \
  -p 6600:6600/tcp -p 6680:6680/tcp -p 5555:5555/udp \
  mopidy
```

"
367,iand/spotify,Go,"# spotify

Go package for using the Spotify API


## Installation

Simply run

	go get github.com/iand/spotify

Documentation is at [http://godoc.org/github.com/iand/spotify](http://godoc.org/github.com/iand/spotify)

## Authors

* [Ian Davis](http://github.com/iand) - <http://iandavis.com/>


## Contributors


## Contributing

* Do submit your changes as a pull request
* Do your best to adhere to the existing coding conventions and idioms.
* Do run `go fmt` on the code before committing 
* Do feel free to add yourself to the [`CREDITS`](CREDITS) file and the
  corresponding Contributors list in the the [`README.md`](README.md). 
  Alphabetical order applies.
* Don't touch the [`AUTHORS`](AUTHORS) file. An existing author will add you if 
  your contributions are significant enough.
* Do note that in order for any non-trivial changes to be merged (as a rule
  of thumb, additions larger than about 15 lines of code), an explicit
  Public Domain Dedication needs to be on record from you. Please include
  a copy of the statement found in the [`WAIVER`](WAIVER) file with your pull request

## License

This is free and unencumbered software released into the public domain. For more
information, see <http://unlicense.org/> or the accompanying [`UNLICENSE`](UNLICENSE) file."
368,LPardue/SpotifyStatusApplet,C#,"SpotifyStatusApplet
===================

An LCD Applet for the Logitech Gaming keyboard family (G510, G13, G15 etc) that displays current track information and Spotify playback status.

Spotify provides out-of-the box integration with the keyboard media keys, so SpotifyStatusApplet provides a mechanism to interact with Spotify without needing to open the application window.


![alt text](Example.jpg ""Example display of SpotifyStatusApplet"")

Binaries & Installation
--------------------------------------
Binaries are available at http://lucaspardue.com/spotifystatusapplet

The applet is provided as a zip file that can be extracted to any location.

Running
--------------------------------------

SpotifyStatusApplet runs as a tray icon. Once launched, the icon can be right-clicked to bring up a context menu that allows the application to be exited.

is dependent on:

- An instance of Spotify running (of course!). The applet utilises the Spotify service SpotifyWebHelper.exe to access information, further details are available at [Spotify Local API](https://code.google.com/p/spotify-local-api/)
- A compatible [Logitech Gaming Keyboard](http://gaming.logitech.com/en-gb/gaming-keyboards) with LCD and official Logitech drivers / software installed. The software has only been tested on a G510 to date but support for all LCD equipped devices is expected.
- Windows and .Net. Tested on Windows 7 64-bit and .Net Framework 4.

Environment and Building
--------------------------------------

SpotifyStatusApplet is written in C# and has been developed using Visual Studio Express 2012 for Windows Desktop. A solution file is provided to gather all dependencies, it is anticipated this could be backported to support earlier versions of Visual Studio.

* Target .NET framework 4.5 and above.
* Install both the SpotifyAPI-NET and Newtonsoft.json Nuget packages.
* Enjoy!

Dependencies
--------------------------------------

SpotifyStatusApplet builds upon the great efforts of other developers/projects! The following software components are incorporated into the source tree to aid distribution

- [SpotifyAPI-NET](https://github.com/JohnnyCrazy/SpotifyAPI-NET) - A very simple and small library that allows .NET developers to get track information, (un)pause spotify, play tracks, get cover art and more! 
- [GammaJul LgLcd](http://gjlglcd.codeplex.com/) - A .NET wrapper around the Logitech SDK for G15/G19 keyboard screens. Supports raw byte sending, GDI+ drawing and rendering WPF elements onto the screen.
- [Newtonsoft.json](https://github.com/JamesNK/Newtonsoft.Json) - Newtonsoft.json is a popular high-performance JSON framework for .NET.

Thanks
--------------------------------------

The following contributors helped make this software:
JeffreyO"
369,feelfreelinux/cspot,C++,"![C/C++ CI](https://github.com/feelfreelinux/cspot/workflows/C/C++%20CI/badge.svg)
![ESP IDF](https://github.com/feelfreelinux/cspot/workflows/ESP%20IDF/badge.svg)
[![Certification](https://badgen.net/badge/Stary%20Filipa/certified?color=purple)](https://github.com/feelfreelinux/cspot)
[![Certification](https://badgen.net/badge/Sasin/stole%2070%20mln%20PLN)](https://github.com/feelfreelinux/cspot)

<p align=""center"">
<img src="".github/trombka.png"" width=""32%"" />
</p>

# :trumpet: cspot

A Spotify Connect player written in CPP targeting, but not limited to embedded devices (ESP32).

Currently in state of rapid development.

*Only to be used with premium spotify accounts*

## Building

### Prerequisites

Summary:

- cmake (version 3.0 or higher)
- gcc / clang for the CLI target
- [esp-idf](https://github.com/espressif/esp-idf) for building for the esp32
- portaudio for playback on MacOS
- downloaded submodules
- golang (1.16)
- protoc
- on Linux you will additionally need:
    - `libasound` and `libavahi-compat-libdnssd`


This project utilizes submodules, please make sure you are cloning with the `--recursive` flag or use `git submodule update --init --recursive`.

This library uses nanopb to generate c files from protobuf definitions. Nanopb itself is included via submodules, but it requires a few external python libraries to run the generators.

To install them you can use pip:

```shell
$ sudo pip3 install protobuf grpcio-tools
```

(You probably should use venv, but I am no python developer)

To install avahi and asound dependencies on Linux you can use:

```shell
$ sudo apt-get install libavahi-compat-libdnssd-dev libasound2-dev
```


### Building for macOS/Linux

The cli target is used mainly for testing and development purposes, as of now it has the same features as the esp32 target.

```shell
# navigate to the targets/cli directory
$ cd targets/cli

# create a build directory and navigate to it
$ mkdir -p build && cd build

# use cmake to generate build files, and select an audio sink
$ cmake .. -DUSE_PORTAUDIO=ON

# compile
$ make 
```
See running the CLI for information on how to run cspot on a desktop computer.

### Building for ESP32

The ESP32 target is built using the [esp-idf](https://docs.espressif.com/projects/esp-idf/en/latest/esp32/get-started/index.html) toolchain

```shell
# update submodules after each code pull to avoid build errors
$ git submodule update
# navigate to the targets/esp32 directory
$ cd targets/esp32
# run once after pulling the repo
$ idf.py set-target esp32
```

Configure CSPOT according to your hardware

```shell
# run visual config editor, when done press Q to save and exit
$ idf.py menuconfig
```

Navigate to `Example Connection Configuration` and provide wifi connection details

![idf-menuconfig](/targets/esp32/doc/img/idf-menuconfig-2.png)

Navigate to `CSPOT Configuration`, you may configure device name, output device and audio quality.

![idf-menuconfig](/targets/esp32/doc/img/idf-menuconfig-1.png)

#### Status LED

By default LED indication is disabled, but you can use either standard GPIO or addressable LED to indicate cspot current status. It will use different blinking patterns (and colors in case of addressable LEDs) to indicate Wifi connectivity and presense of connected Spotify client.

#### Building and flashing

Build and upload the firmware

```shell
# compile
$ idf.py build

# upload
$ idf.py flash
```
The ESP32 will restart and begin running cspot. You can monitor it using a serial console.

Optionally run as single command

```shell
# compile, flash and attach monitor
$ idf.py build flash monitor
```

## Running

## The CLI version

After building the app, the only thing you need to do is to run it through CLI.

```shell
$ ./cspotcli

```

Now open a real Spotify app and you should see a cspot device on your local network. Use it to play audio.


# Architecture

## External interface

`cspot` is meant to be used as a lightweight C++ library for playing back Spotify music and receive control notifications from Spotify connect. 
It exposes an interface for starting the communication with Spotify servers and expects the embedding program to provide an interface for playing back raw audio samples ([`AudioSink`](include/AudioSink.h)).

You can view the [`cspot-cli`]([targets/cli/main.cpp) program for a reference on how to include cspot in your program. It provides a few audio sinks for various platforms and uses:

- [`ALSAAudioSink`](cspot/bell/src/sinks/unix/ALSAAudioSink.cpp) - Linux, requires `libasound`
- [`PortAudioSink`](cspot/bell/src/sinks/unix/PortAudioSink.cpp) - MacOS (PortAudio also supports more platforms, but we currently use it only on MacOS), requires the PortAudio library
- [`NamedPipeAudioSink`](cspot/bell/src/sinks/unix/NamedPipeAudioSink.cpp) - all platforms, writes to a file/FIFO pipe called `outputFifo` which can later be played back by FFmpeg. Used mainly for testing and development.

Additionaly the following audio sinks are implemented for the esp32 target:
- [`ES9018AudioSink`](cspot/bell/src/sinks/esp/ES9018AudioSink.cpp) - provides playback via a ES9018 DAC connected to the ESP32
- [`AC101AudioSink`](cspot/bell/src/sinks/esp/AC101AudioSink.cpp) - provides playback via the AC101 DAC used in cheap ESP32 A1S audiokit boards, commonly found on aliexpress.
- [`PCM5102AudioSink`](cspot/bell/src/sinks/esp/PCM5102AudioSink.cpp) - provides playback via a PCM5102 DAC connected to the ESP32, commonly found in the shape of small purple modules at various online retailers. Wiring can be configured in the sink and defaults to:
  - SCK to Ground
  - BCK to PGIO27
  - DIN to GPIO25
  - LCK to GPIO32
  - GND to Ground
  - VIN to 3.3V (but supposedly 5V tolerant)
- TODO: internal esp32 DAC for crappy quality testing.

You can also easily add support for your own DAC of choice by implementing your own audio sink. Each new audio sink must implement the `void feedPCMFrames(std::vector<uint8_t> &data)` method which should accept stereo PCM audio data at 44100 Hz and 16 bits per sample. Please note that the sink should somehow buffer the data, because playing it back may result in choppy audio.

An audio sink can optionally implement the `void volumeChanged(uint16_t volume)` method which is called everytime the user changes the volume (for example via Spotify Connect). If an audio sink implements it it should set `softwareVolumeControl` to `false` in its consructor to let cspot know to disable the software volume adjustment. Properly implementing external volume control (for example via dedicated hardware) will result in a better playback quality since all the dynamic range is used to encode the samples.

The embedding program should also handle caching the authentication data, so that the user does not have to authenticate via the local network (Zeroconf) each time cspot is started. For reference on how to do it please refer to the `cspot-cli` target (It stores the data in `authBlob.json`). 

## Internal details

The connection with Spotify servers to play music and recieve control information is pretty complex. First of all an access point address must be fetched from Spotify ([`ApResolve`](cspot/src/ApResolve.cpp) fetches the list from http://apresolve.spotify.com/). Then a [`PlainConnection`](cspot/include/PlainConnection.h) with the selected Spotify access point must be established. It is then upgraded to an encrypted [`ShannonConnection`](cspot/include/ShannonConnection.h).
"
370,zeldriss/SpotifyAuto,PHP,"# SpotifyAuto
Spotify Auto Create Account + Auto BIN Generate CC + Checker CC<br><br>
Noted : isi email tanpa @ ya soalnya udh auto ke @gmail.com<br><br>
(Ini bukan Auto Pay jadi hrs manual)<br>
Windows use XAMPP<br>
Android use TERMUX<br>

# Install
  
  $ pkg install git<br>
  $ pkg install php<br>
  $ git clone https://github.com/zeldriss/SpotifyAuto/git<br>
  $ cd SpotifyAuto<br>

# Run

  $ php spotifyauto.php


"
371,spotify/web-playback-sdk,,We've moved! Visit the [Spotify for Developers community forum](https://community.spotify.com/t5/Spotify-for-Developers/bd-p/Spotify_Developer) to find help with the Web Playback SDK.
372,NathanWalker/nativescript-spotify,Objective-C,"![alt text](resources/spotify.jpg ""Spotify"")

A NativeScript plugin for the Spotify iOS and Android SDKs.

* [Install](#install)
* [Prerequisites](#prerequisites)
* [Usage](#usage)
* [Screenshots](#screenshots)
* [Documentation](#documentation)
* [Why the `TNS` prefixed name?](#why-the-tns-prefixed-name)
* [Try it/Contributing](https://github.com/NathanWalker/nativescript-spotify/blob/master/docs/CONTRIBUTING.md)

## Install

```
npm install nativescript-spotify --save
```

## Prerequisites

* Spotify streaming requires a **Premium** account.
* Create a Spotify Developer account here: https://developer.spotify.com/
* Create an app in your developer account and follow these instructions to get setup: https://developer.spotify.com/technologies/spotify-ios-sdk/tutorial/#creating-your-client-id-secret-and-callback-uri

### Background

* Based on the [Spotify iOS SDK Beta 13](https://github.com/spotify/ios-sdk/releases)
* Android based on [Spotify Android SDK 1.0.0-beta13](https://github.com/spotify/android-sdk/releases)

## Usage

### Platform Prerequisites

#### iOS

### Setup

* app.ts

Configure application launch phases to setup your Spotify App CLIENT_ID and REDIRECT_URL (the ones you created above in the developer account):

```
import * as application from 'application';
import {NSSpotifyConstants, NSSpotifyAuth} from 'nativescript-spotify';

class MyDelegate extends UIResponder {
  public static ObjCProtocols = [UIApplicationDelegate];
  
  public applicationDidFinishLaunchingWithOptions(application: UIApplication, launchOptions: NSDictionary): boolean {
    
    NSSpotifyConstants.CLIENT_ID = 'your spotify premium account api key';
    TNSSpotifyAuth.REDIRECT_URL = 'your-app-custom-url-scheme://spotifylogin';
    return true;
  }
}
application.ios.delegate = MyDelegate;
application.mainModule = ""main-page"";
application.cssFile = ""./app.css"";
application.start();
```

* main-page.ts

```
import {SpotifyDemo} from ""./main-view-model"";

function pageLoaded(args) {
  var page = args.object;
  page.bindingContext = new SpotifyDemo();
}
exports.pageLoaded = pageLoaded;
```

* main-view-model.ts

```
import {Observable, EventData} from 'data/observable';
import {Page} from 'ui/page';
import {topmost} from 'ui/frame';
import {AnimationCurve} from 'ui/enums';
import * as loader from 'nativescript-loading-indicator';
import {TNSSpotifyConstants, TNSSpotifyAuth, TNSSpotifyPlayer, TNSSpotifyPlaylist, TNSSpotifyRequest, Utils} from 'nativescript-spotify';

export class SpotifyDemo extends Observable {
  private _spotify: TNSSpotifyPlayer;

  constructor() {
    super();
    
    this._spotify = new TNSSpotifyPlayer();
    
    // when using iOS delegates that extend NSObject, TypeScript constructors are not used, therefore a separate `initPlayer()` exists
    this._spotify.initPlayer(true); // passing `true` lets player know you want it to emit events (sometimes it's not desired)
    
    // small sample of events (see Documentation below for full list)
    this._spotify.audioEvents.on('albumArtChange', (eventData) => {
      this.updateAlbumArt(eventData.data.url);
    });
    this._spotify.audioEvents.on('authLoginSuccess', (eventData) => {
      this.loginSuccess();
    });
  }
  
  public login() {
    TNSSpotifyAuth.LOGIN();
  }
  
  public play(args?: EventData) {
    this._spotify.togglePlay('spotify:track:58s6EuEYJdlb0kO7awm3Vp').then((isPlaying: boolean) => {
      console.log(isPlaying ? 'Playing!' : 'Paused!');
    }, (error) => {
      console.log(`Playback error: ${error}`);
    });
  }
  
  private updateAlbumArt(url: string) {
    this.set(`currentAlbumUrl`, url);
  }
  
  private loginSuccess() {
    console.log(`loginSuccess!`);
  } 
}
```

## Screenshots

Sample 1 |  Sample 2
-------- | ---------
![Sample1](screenshots/1.png) | ![Sample2](screenshots/2.png)

Sample 3 | Sample 4
-------- | -------
![Sample3](screenshots/3.png) | ![Sample4](screenshots/4.png)

#### Android

### Setup

* Docs coming soon for Android...

## Documentation

### TNSSpotifyPlayer

TNSSpotifyPlayer implements [SPTAudioStreamingPlaybackDelegate](https://developer.spotify.com/ios-sdk-docs/Documents/Protocols/SPTAudioStreamingPlaybackDelegate.html).

Creating:
```
// Option 1: simple
this.spotify = new TNSSpotifyPlayer();
this.spotify.initPlayer();

// Option 2: advanced
this.spotify = new TNSSpotifyPlayer();
// passing `true` will let the player know it should emit events
this.spotify.initPlayer(true);

// it allows you to listen to events like so:
this.spotify.audioEvents.on('startedPlayingTrack', (event) => {
  console.log(event.data.url); // spotify track url
});

// play/pause a track
this.spotify.togglePlay('spotify:track:58s6EuEYJdlb0kO7awm3Vp').then((isPlaying: boolean) => {
  console.log(isPlaying ? 'Playing!' : 'Paused!');
}, (error) => {
  console.log(`Playback error: ${error}`);
});
```

#### Methods

Method |  Description
-------- | ---------
`togglePlay(track?: string)`: `Promise<any>` | Allows toggle play/pause on a track, or changing a track. `track` must be a valid spotify track uri. [Learn more here](https://developer.spotify.com/web-api/user-guide/#spotify-uris-and-ids) 
`isPlaying()`: `boolean` | Determine if player is currently playing
`isLoggedIn()`: `boolean` | Determine if player is authenticated
`setVolume(value: number)`: `Promise<any>` | Set the player volume
`loadedTrack()`: `string` | Determine current loaded track (spotify track uri)
`currentTrackMetadata()`: `ISpotifyTrackMetadata` | Get the current track's metadata. [Learn more here](https://developer.spotify.com/ios-sdk-docs/Documents/Classes/SPTAudioStreamingController.html#//api/name/currentTrackMetadata)

#### Events

Event |  Description
-------- | ---------
`authLoginChange` | Sends along `data` = `status: boolean` When auth state changes.
`authLoginCheck` | When auth callback has returned and is verifying authentication
`authLoginSuccess` | When auth succeeded
`albumArtChange` | Sends along `data` = `url: string` When track triggers a play start, this will also trigger to send along the correct album art of the track.
`playerReady` | When the session has been validated and the player is ready to play.
`changedPlaybackStatus` | Sends along `data` = `playing: boolean` When playback state changes.
`seekedToOffset` | Sends along `data` = `offset: number` When player has seeked to a given offset.
`changedVolume` | Sends along `data` = `volume: number` When the player volume was changed.
`changedShuffleStatus` | Sends along `data` = `shuffle: number` When shuffle setting was changed.
`changedRepeatStatus` | Sends along `data` = `repeat: number` When repeat setting was changed.
`changedToTrack` | Sends along `data` = `metadata: any` When track change occurs.
`failedToPlayTrack` | Sends along `data` = `url: string` When track play fails. Provides the url of the track that failed.
`startedPlayingTrack` | Sends along `data` = `url: string` When track play starts. Provides the url of the track that started.
`stoppedPlayingTrack` | Sends along `data` = `url: string` When track play stops. Provides the url of the track that stopped.
`skippedToNextTrack` | When player skipped to next track.
`skippedToPreviousTrack` | When player skipped to previous track.
`activePlaybackDevice` | When the audio streaming object becomes the active playback device on the user’s account.
`inactivePlaybackDevice` | When the audio streaming object becomes an inactive playback device on the user’s account.
`poppedQueue` | When the audio streaming object becomes an inactive playback device on the user’s account.
`temporaryConnectionError` | A temporary connection error occurred.
`streamError` | Sends along `data` = `error: any` when a streaming error occurred.
`receivedMessage` | Sends along `data` = `message: string` when a message is received from the Spotify service.
`streamDisconnected` | When the stream becomes disconnected.

### TNSSpotifyAuth

TNSSpotifyAuth

Provides `static` properties and methods to help with authentication handling and user management.

#### Properties

Property |  Description
-------- | ---------
`REDIRECT_URL`: `string` | Used to set your spotify application redirect url, required for device auth redirect, ie: `'your-app-custom-url-scheme://spotifylogin'`
`SESSION`: `SPTSession` | Represents the current auth session.
`CLEAR_COOKIES`: `boolean` | Clear cookies in auth window to not remember last logged in user. Defaults `false`.
`PREMIUM_MSG`: `string` | The message which alerts when a non-premium user attempts to play a track.

#### Methods

Method |  Description
-------- | ---------
`LOGIN()`: `void` | Initiates login sequence.
`LOGIN_WITH_SESSION(session)`: `void` | Logs user in with session returned from the in-app browser auth window.
`LOGOUT()`: `void` | Clear's persisted user session and notifies of login change.
`HANDLE_AUTH_CALLBACK(url)`: `boolean` | When using standard browser redirect auth, this can be used in application launch phase to handle the auth redirect back into the app. On older versions, this may be needed.
`VERIFY_SESSION(session?: any)`: `Promise<any>` | Mainly used internally, but used to restore a session from local persistence and/or renew.
`SAVE_SESSION(session)`: `void` | Mainly used internally, but can be used to persist a valid Spotify session.
`GET_STORED_SESSION()`: `any` | Get the current user's session. [Learn more here](https://developer.spotify.com/ios-sdk-docs/Documents/Classes/SPTSession.html)
`RENEW_SESSION(session)`: `Promise<any>` | Can be used to pass an expired session to renew it.
`CURRENT_USER()`: `Promise<any>` | Get the current user object. [Learn more here](https://developer.spotify.com/ios-sdk-docs/Documents/Classes/SPTUser.html)

### TNSSpotifySearch

TNSSpotifyAuth

Provides 1 `static` method to search Spotify.

#### Methods

Method |  Description
-------- | ---------
`QUERY(query: string, queryType: string, offset: number = 0)`: `Promise<any>` | Search and paginate through query results of Spotify search results. Resolves an Object structure: `{page: number (offset), hasNextPage: boolean, totalListLength: number, tracks: Array}`. Right now using `queryType` = `'track'` is supported. More query types coming soon.

## Why the TNS prefixed name?

`TNS` stands for **T**elerik **N**ative**S**cript

iOS uses classes prefixed with `NS` (stemming from the [NeXTSTEP](https://en.wikipedia.org/wiki/NeXTSTEP) days of old):
https://developer.apple.com/library/mac/documentation/Cocoa/Reference/Foundation/Classes/NSString_Class/

To avoid confusion with iOS native classes, `TNS` is used instead.

## License

MIT
"
373,juandes/spotify-audio-features-data-experiment,R,"# Is my Spotify music boring? A data analysis involving music, data, and machine learning

## Overview
This repo contains the scripts used in my latest experiment titled __Is my Spotify music boring? A data analysis involving music, data, and machine learning__. In this experiment, which used Spotify's audio features API, I'll found out is my saved music are **instrumental**, **varied**, and **boring**. Besides this, a logistic regression machine learning model was train to determine is a given found belongs to my playlist or a friend's.

## Tools used
* Python
* R
* Spotify API
* [Spotipy Python library](https://github.com/plamere/spotipy)
* [Scikit-learn](http://scikit-learn.org/stable/)

## Report
The full explanation and results of the experiment are found at [Is my Spotify music boring? A data analysis involving music, data, and machine learning](https://medium.com/towards-data-science/is-my-spotify-music-boring-an-analysis-involving-music-data-and-machine-learning-47550ae931de)


"
374,ruvelro/Spotihosts,Shell,"# Spotihosts

Scripts for add to your hosts-file the neccesary lines to block Spotify ads (web and desktop app).

The scripts must be opened ad admin/root to be able to edit hosts files (Windows and Linux)
"
375,nadavbar/node-spotify-webhelper,JavaScript,"node-spotify-webhelper
======================

Node.js interface for the Spotify WebHelper API, based on this great article: http://cgbystrom.com/articles/deconstructing-spotifys-builtin-http-server/

The API interacts with the SpotifyWebHelper process via HTTP. For windows, the module checks whether SpotifyWebHelper.exe is running, and try to run it if not.

API:

This module exposes the SpotifyWebHelper object, which exposes  the following methods:

 - **getStatus (cb : function(err, res))** -  get current status information (name of song/artist which is currently playing, etc..)
 - **pause (cb : function(err, res))** - pause currently playing song
 - **unpause (cb : function(err, res))** - unpause currently playing song
 - **play (spotifyurl : string, cb : function(err, res))** - play the given spotify url
 - **Constructor ({port : number (optional), protocol : string (optional)})** - Creates a new SpotifyWebHelper object, 
    The default port is set to 4381 as well as a default protocol of http, in some cases, you might want to use 4370 and https instead.

Example:
```javascript
var nodeSpotifyWebHelper = require('node-spotify-webhelper');
var spotify = new nodeSpotifyWebHelper.SpotifyWebHelper();

// get the name of the song which is currently playing
spotify.getStatus(function (err, res) {
  if (err) {
    return console.error(err);
  }

  console.info('currently playing:', 
    res.track.artist_resource.name, '-',  
    res.track.track_resource.name);
});
```"
376,AlanBinu007/spotify-clone,JavaScript,"

# Spotify - Music Playing App

**Project Link** - ***https://alanbinu-spotify.web.app/***

## Tech We Used

- ReactJs
- Firebase Hosting
- Spotify API


## Features

- Login and Logout using Spotify
- Play Music
- Neat and clean UI

## Steps to run in your machine

Go to https://developer.spotify.com/ and create your app and copy that secret Id to your app

#### Run the following commands
```
npm i
npm run start
```




#### Hope you liked this project, dont forget to ⭐ the repo.
"
377,owenthereal/spotctl,Go,"# Spotctl

`spotctl` is command-line interface to control Spotify from your favorite terminal.

## Demo

One of the highlights is that `spotctl player` shows a real-time Spotify player that allows you to control it, right in your terminal!

[![asciicast](https://asciinema.org/a/154262.png)](https://asciinema.org/a/154262)

## Installation

## Homebrew

If you're on a Mac, you can install with [Homebrew](https://brew.sh/):

```
brew install https://raw.githubusercontent.com/jingweno/spotctl/master/Formula/spotctl.rb
```

## Download

You can download the latest release for your operating system [here](https://github.com/jingweno/spotctl/releases).

## Manual Installation

`spotctl` needs to connect to Spotify's API in order to control it.
To manually build it, you first need to sign up (or into) Spotify's developer site and [create an Application](https://developer.spotify.com/my-applications/#!/applications/create).
Once you've done so, you can find its Client ID and Client Secret values and run the following command:

```
SPOTIFY_CLIENT_ID=XXX SPOTIFY_CLIENT_SECRET=YYY ./bin/build
```

## Running

**Please make sure the Spotify app is opened before running any `spotctl` commands**, since it talks to the Spotify API which in turns talks to the Spotify app in your local box.
Here is a list of available commands:

```
$ spotctl -h
A command-line interface to Spotify.

Usage:
  spotctl [command]

Available Commands:
  help        Help about any command
  login       Login with your Spotify credentials
  logout      Clear your local Spotify credentials
  next        Skip to the next track
  pause       Pause Spotify playback
  play        Resume playback or play a track, album, artist or playlist by name
  player      Show the live player panel
  prev        Return to the previous track
  repeat      Toggle repeat playback mode
  shuffle     Toggle shuffle playback mode
  status      Show the current player status
  version     Show version.
  vol         Set or return volume percentage

Flags:
  -h, --help   help for spotctl

Use ""spotctl [command] --help"" for more information about a command.
```

## License

[MIT](https://github.com/jingweno/spotctl/blob/master/LICENSE)
"
378,bradtraversy/ngspotify,JavaScript,"# ngSpotify Angular 2 Application

This is an Angular 2 app that uses the Spotify API to search and list musical artists and albums. It is part of a 12 project course at [Eduonix.xom](https://www.eduonix.com/affiliates/id/16-10413). 

### Version

This is version 1.1 which uses Angular 2 RC6. The ""rc4_old"" folder contains the original RC4 version from the Youtube course at https://www.youtube.com/watch?v=f6SrTZwZi70

### Installation

Install the dependencies and devDependencies and start the server.

```sh
$ npm install
```

```sh
$ npm start
```"
379,Sanchit-Jain07/Spotify-Stats,HTML,"# Spotify Stats :bar_chart:

Spotify Stats is a website where one can analyze their spotify account stats by getting their Top Songs, Favourite Artists, Top Genres, Recommendations, and visual representation of the above.
Visit - [Spotify Stats](https://statsspotify.herokuapp.com/) :rocket:

## Features
* **Favourite Songs**  - See the songs you love to listen! Your favorite songs of all time!

* **Favourite Artists** - See the artists you've been jamming to everyday to make your day better! Your favorite artists of all time!

* **Top Genres** - Rock? EDM? Pop? See your favorite genres of all time!

* **Recommendations** - See and discover similar artists to the ones you like and discover new songs on the basis of your taste!

* **Visual Representaion** - Visualize your music taste with cool graphs!

* **Share your stats** - Get your top 4 songs and artists as an image and share your stats with your friends!!


## Contributors
* [Sanchit-Jain07](https://github.com/Sanchit-Jain07)
* [Arnav17Sharma](https://github.com/Arnav17Sharma)

## Share Stats Sample Image

![Sample Stats Img](https://github.com/Sanchit-Jain07/Spotify-Stats/blob/master/static/Frame_6.png)
"
380,fuwwy/spotify-adblocker,JavaScript,"Spotify Adblock Windows
=========

Spotify adblock windows is a spotify adblocker inspired by [spotify-adblock-linux](https://github.com/abba23/spotify-adblock-linux) which uses a MITM proxy to block all blacklisted URLs as well as all domains that aren't whitelisted.

## Getting started

### Prerequisites
 - NodeJS and NPM (or yarn)

### Installing
 1. Clone the repository with `git clone https://github.com/fuwwy/spotify-adblock-windows.git` or download the latest version from the [releases page](https://github.com/fuwwy/spotify-adblock-windows/releases)
 2. Run `npm install` to download all the required dependencies
 3. Open Spotify `Settings` page, scroll all the way down and click `Show Advanced Settings`, set the proxy type to HTTP, the host to `127.0.0.1` and the port to `8081`, finally, click `Update Proxy`
 4. Execute `start.bat` (or run `npm start`) to initiate the application
 5. Install the CA certificate under `certs/certs/ca.crt` on ""Trusted Root Certification Authorities"" (more information [here](https://github.com/fuwwy/spotify-adblock-windows/wiki/Installing-the-root-CA))
 6. Enjoy listening without distractions.
"
381,svanscho/rpi-spotify,,"This container runs a headless [Spotify](https://www.spotify.com/us/) player that can be remote-controlled by any Spotify app. Audio is output to /dev/snd, so you need to make sure the docker container has access to it (see examples). This allows the host system to play back the audio using [alsa](http://www.alsa-project.org/), [pulseaudio](http://pulseaudio.org), [forked-daapd](https://ejurgensen.github.io/forked-daapd/) (to Airplay), [snapserver](https://github.com/badaix/snapcast), etc.

This requires a Spotify premium account, but does not require a Spotify developer key or libspotify binary.

The process run is [librespot](https://github.com/plietar/librespot), an open source client library for Spotify.
This docker container image leverages the work from [David Cooper](https://dtcooper.github.io/raspotify).

[Dockerhub](https://hub.docker.com/r/svanscho/rpi-spotify/): [![](https://images.microbadger.com/badges/version/svanscho/rpi-spotify.svg)](https://microbadger.com/images/svanscho/rpi-spotify ""Get your own version badge on microbadger.com"") [![](https://images.microbadger.com/badges/image/svanscho/rpi-spotify.svg)](https://microbadger.com/images/svanscho/rpi-spotify ""Get your own image badge on microbadger.com"") 

### Screenshots
<img src=""screenshot.png"" width=""200"">

### Prerequisites
- a raspberry pi (tested on RPi2)
- docker (install with `curl -sSL https://get.docker.com | sh`)
### Examples
- `docker run -d --device=/dev/snd:/dev/snd --net=host svanscho/rpi-spotify`
- `docker run -d --device=/dev/snd:/dev/snd --net=host -e SPOTIFY_NAME=docker-spotify svanscho/rpi-spotify`(you can set the name with **--SPOTIFY_NAME**)

If you want the container to always run (even when the RPi rebooted):
- `docker run -d --restart=always --name=rpi-spotify --device=/dev/snd:/dev/snd --net=host svanscho/rpi-spotify` (mind the **--restart=always**)



"
382,timrae/spotify_to_tidal,Python,"A command line tool for importing your Spotify playlists into Tidal

Installation
-----------
Clone this git repository and then run:

```bash
python3 -m pip install -r requirements.txt
```

Setup
-----
0. Rename the file example_config.yml to config.yml
0. Go [here](https://developer.spotify.com/documentation/general/guides/authorization/app-settings/) and register a new app on developer.spotify.com.
0. Copy and paste your client ID and client secret to the Spotify part of the config file
0. Copy and paste the value in 'redirect_uri' of the config file to Redirect URIs at developer.spotify.com and press ADD
0. Enter your Spotify username to the config file

Usage
----
To synchronize all of your Spotify playlists with your Tidal account run the following

```bash
python3 sync.py
```

This will take a long time because the Tidal API is really slow.

You can also just synchronize a specific playlist by doing the following:

```bash
python3 sync.py --uri 1ABCDEqsABCD6EaABCDa0a
```

See example_config.yml for more configuration options, and `sync.py --help` for more options.
"
383,wandersoncferreira/helm-spotify-plus,Emacs Lisp,"[![MELPA](https://melpa.org/packages/helm-spotify-plus-badge.svg)](https://melpa.org/#/helm-spotify-plus)


# Helm Spotify Plus
A search & play interface for Spotify

There are several changes to the prior helm-spotify package.

Helm is used here to narrow the candidates received from Spotify API requests.


# How to install
You can install this package from [MELPA](https://melpa.org).

``` emacs-lisp
M-x package-refresh-contents
M-x package-install RET helm-spotify-plus
```

If you prefer a manual installation you can clone the repo as follows:

```emacs-lisp
cd ~/.emacs.d/site-packages
git clone submodule add https://github.com/wandersoncferreira/helm-spotify-plus
```
``` emacs-lisp
(add-to-list 'load-path ""~/emacs.d/site-packages/helm-spotify-plus"")
(require 'helm-spotify-plus)
```
### Dependencies:
It's important to have all the dependencies installed. If you choose to use the `use-package`, there's no need to worry with the dependencies.

    + [Helm](https://github.com/emacs-helm/helm)
    + [Multi](https://github.com/kurisuwhyte/emacs-multi)


# Spotify Web API request client ID

Since the change in Spotify API there were some bugs with this package (https://developer.spotify.com/news-stories/2017/01/27/removing-unauthenticated-calls-to-the-web-api/).

However, I fixed the problem by exposing the client ID and secret from this web app inside Spotify environment, which I don't see as a major problem due to the nature of our requests. I don't need to use any private data from Spotify, so I don't see why I should bother **you** to go there and make your own **client ID** and **secrets**.

The current state of this package is **fully functional** and has zero impact on the previous user experience. Everything should be working as expected. If you have any point to discuss about this topic, plase I would love to hear from you.

# How to use it

There is one basic command *helm-spotify-plus* that will ask you for an input string:

```shell
Enter the (partial/full) name of a track:
```

A list of 250 candidates will popup using a Helm interface.


We also have the concept of **keywords** which are tokens to explicitly organize your query and increase the hit/miss
performance of the requests.


Example of query strings using **keywords**:

| Input                  | Action                                                              |
|:----------------------:|:-------------------------------------------------------------------:|
| master of              | If no identifier is given, the request will use a free Track search |
| a: metallica           | Only pass the author                                                |
| t: master of puppets   | Only the track                                                      |
| a: metallica t: master | Explicitly write the Artist and the Track (partially is allowed)    |
| a: john m: US          | **m** informs the *market region* (it can be used in any search)    |

Press TAB in Helm to see Actions over it as well.

# More features

As there are no downsides for adding quick DBUS control over Spotify from Emacs, we added some small commands such as
*helm-spotify-plus-pause, helm-spotify-plus-play, helm-spotify-plus-next* available from M-x.

# Some already fixed bugs

+ Helm-spotify works when your buffer is visiting a remote machine.
+ Encoding.
+ Difficulty to interact with Spotify API directly through Helm interface.
+ Album play was only playing the first song of the album. Now its fixed.
+ Artist **a:** keyword indeed filters the result to match artist field.

# Recommended keybindings
```emacs-lisp
(global-set-key (kbd ""C-c s s"") 'helm-spotify-plus)  ;; s for SEARCH
(global-set-key (kbd ""C-c s f"") 'helm-spotify-plus-next)
(global-set-key (kbd ""C-c s b"") 'helm-spotify-plus-previous)
(global-set-key (kbd ""C-c s p"") 'helm-spotify-plus-play) 
(global-set-key (kbd ""C-c s g"") 'helm-spotify-plus-pause) ;; g cause you know.. C-g stop things :)
```

# Credits

The original script was created by Kris Jenkis in 2013.


# Contributions

Any contribution is very welcome! Request of features, bug reports and documentation. Just drop us a line using the
Github issues feature.


"
384,theflutterdev/Spotify-Clone-using-Flutter,Dart,"# spotify_clone

A new Flutter project.

## Getting Started

This project is a starting point for a Flutter application.

A few resources to get you started if this is your first Flutter project:

- [Lab: Write your first Flutter app](https://flutter.dev/docs/get-started/codelab)
- [Cookbook: Useful Flutter samples](https://flutter.dev/docs/cookbook)

For help getting started with Flutter, view our
[online documentation](https://flutter.dev/docs), which offers tutorials,
samples, guidance on mobile development, and a full API reference.
"
385,Lautaro-Garcia/counsel-spotify,Emacs Lisp,"# Counsel Spotify

Little Emacs package to control Spotify app through an Ivy interface.

> If I have seen further it is by standing on the shoulders of giants.
> Isaac Newton

This package is basically a port of [helm-spotify](https://github.com/krisajenkins/helm-spotify) and [helm-spotify-plus](https://github.com/wandersoncferreira/helm-spotify-plus)
with an Ivy interface. Many thanks to the authors of those for their amazing work!

## Dependencies

[Ivy](https://github.com/abo-abo/swiper)

## Notes on Spotify Web API authentication

You'll need to [register an application](https://developer.spotify.com/my-applications) in Spotify in order to obtain a client id and a client secret. Then, you'll have to set the variables
`counsel-spotify-client-id` and `counsel-spotify-client-secret` variables with your credentials to start using the search feature

## How to use it

This package exposes these search functions:
* `counsel-spotify-search-track`
* `counsel-spotify-search-album`
* `counsel-spotify-search-artist`
* `counsel-spotify-search-playlist`
* `counsel-spotify-search-tracks-by-album`
* `counsel-spotify-search-tracks-by-artist`

The options are fetched from Spotify REST API. Hitting `RET` while selecting an option will start playing that track or album (depending on what the search were). Also, hitting `M-o` will prompt a tiny menu with some more actions to choose from (for example, choosing to play the entire album a song belongs to)

### Controllers

There are defined some basic controllers for the Spotify App

| Action            | Function                            |
|:----------------- |:----------------------------------- |
| Play              | `counsel-spotify-play`              |
| Toggle play/pause | `counsel-spotify-toggle-play-pause` |
| Next song         | `counsel-spotify-next`              |
| Previous song     | `counsel-spotify-previous`          |


### What if I want to use another Spotify client (like Mopidy or Spotifyd)?
Well, in that case I think you would be interested in two variables:
* `counsel-spotify-service-name` is the name of the DBUS service counsel-spotify calls to handle the reproduction of a song
* `counsel-spotify-use-system-bus-p` for some clients that use the system bus instead of the session
"
386,valeriangalliat/spotify-buddylist,JavaScript,"# spotify-buddylist [![npm version](http://img.shields.io/npm/v/spotify-buddylist.svg?style=flat-square)](https://www.npmjs.org/package/spotify-buddylist)

> Fetch the friend activity Spotify feed.

**Note:** don't know how to code? Check the [extra info](#dont-know-how-to-code)
at the bottom!

## Overview

The [Spotify API](https://developer.spotify.com/documentation/web-api/)
doesn't include a way to fetch the friend activity feed that's
available on the right of the desktop app.

There's an [issue on the spotify/web-api repository](https://github.com/spotify/web-api/issues/83)
about that, where a number of people request access to this endpoint
since 2015, but it was closed this summer 2020 without any plan to give
access to this feature through the official API.

Because I want to fetch this data and I don't like being told no, this
repo is a wrapper around the unofficial API that the app calls to fetch
the friend activity feed.

Since the calls are pretty trivial, it's mostly there for public
documentation purpose rather than to really be used as a library, but I
still made it available on npm in case you quickly want to put together
something with this.

The only dependency is [node-fetch](https://github.com/node-fetch/node-fetch)
to make HTTP requests.

## Usage

To use this API, you need to get a web player access token, not a
regular API access token, so you can't use the official API way of
logging in, getting and refreshing tokens.

The good news is that if you don't mind logging in on the web player and
refreshing a value in your code once a year, it's actually quite easier
than the official OAuth way. More on that [below](#sp_dc-cookie).

```js
const buddyList = require('spotify-buddylist')

async function main () {
  const spDcCookie = 'put your cookie here'

  const { accessToken } = await buddyList.getWebAccessToken(spDcCookie)
  const friendActivity = await buddyList.getFriendActivity(accessToken)

  console.log(friendActivity)
}

main()
```

The output looks like:

```json
{
  ""friends"": [
    {
      ""timestamp"": 1600773735000,
      ""user"": {
        ""uri"": ""spotify:user:shaktirockgym"",
        ""name"": ""shaktirockgym""
      },
      ""track"": {
        ""uri"": ""spotify:track:51xHvAUYQfhY29GcGlBM0n"",
        ""name"": ""Piano Sonata No. 16 in C Major, K. 545 \""Sonata facile\"": 1. Allegro"",
        ""imageUrl"": ""http://i.scdn.co/image/ab67616d0000b273bf4b533ee6e9634a6fcd8882"",
        ""album"": {
          ""uri"": ""spotify:album:1XORY4rQNhqkZxTze6Px90"",
          ""name"": ""Piano Book (Deluxe Edition)""
        },
        ""artist"": {
          ""uri"": ""spotify:artist:4NJhFmfw43RLBLjQvxDuRS"",
          ""name"": ""Wolfgang Amadeus Mozart""
        },
        ""context"": {
          ""uri"": ""spotify:user:spotify:playlist:37i9dQZF1E4riV8HyBkA7r"",
          ""name"": ""Wolfgang Amadeus Mozart Radio"",
          ""index"": 0
        }
      }
    }
  ]
}
```

## `sp_dc` cookie

This is the only value that you need for this to work. After you login
on the [web player] (which I don't automate because reCAPTCHA), you get
a bunch of cookies, including one named `sp_dc`.

[web player]: https://open.spotify.com/

Seems like it's valid for one year, and with just that value you can
call anytime an endpoint that gives you a refreshed, elevated API access
token, that, unlike the official API ones, will let you query the
undocumented endpoint that retrieves the friend activity.

## Usage with spotify-web-api-node

You might already be using the [spotify-web-api-node](https://github.com/thelinmichael/spotify-web-api-node)
package to use the official API. For convenience, I included a method to
wrap it to include the `getWebAccessToken` and `getFriendActivity`
methods on it.

Using it that way, you can leverage the same elevated token for all the
official API requests as well.

```js
const SpotifyWebApi = require('spotify-web-api-node')
const buddyList = require('spotify-buddylist')

const api = buddyList.wrapWebApi(new SpotifyWebApi({ spDcCookie }))

const tokenResponse = await api.getWebAccessToken()
api.setAccessToken(tokenResponse.body.accessToken)

const friendActivityResponse = await api.getFriendActivity()
const friendActivity = friendActivityResponse.body
```

Should your script run more than the token response's
`accessTokenExpirationTimestampMs` (currently an hour), I would suggest
implementing token refresh logic which is just calling
`getWebAccessToken` and `setAccessToken` again like above.

## Don't know how to code?

If the documentation above doesn't make much sense to you, here's a
couple extra information you might find useful. 🙏

Because spotify-buddylist is a library, it's meant to be used by *other
programs*, and it doesn't makes any assumption on how it's going to be
used. You're free to *code* a program that automatically populates
another playlist, sends you a notification when a specific friend plays
a specific song, feeds an online spreadsheet, or just appends to a local
file.

But don't worry, if you don't know how to code, you can still use the
[example](example.js) that just displays the data when you run it. The
following steps will show you how to do that.

### Installing

Because this library is built with [Node.js](https://nodejs.org/),
you'll need to install it first.

Then, [download the archive for this repository](https://github.com/valeriangalliat/spotify-buddylist/archive/refs/heads/master.zip)
and extract it.

Open a terminal, go in the spotify-buddylist directory that you just
extracted, and run:

```sh
npm install
```

This will install the extra dependencies needed for the program to run.

### Fetching the cookie

Then you'll need to grab your `sp_dc` cookie from Spotify. This is a
requirement because Spotify doesn't allow third-party apps to get the
friend activity feed, so this cookie allows us to pretend that we're the
Spotify app itself to get access to that data.

For that, login on the [web player] and open your browser's web
developer tools. It's usually in ""settings"", ""more tools"", ""developer
tools"". In that pane, go in ""application"", ""storage"", ""cookies"",
`https://open.spotify.com` (or something close to that depending on your
browser).

You'll find a cookie named `sp_dc`. Copy its value.

### Running the example

In the spotify-buddylist directory, open `example.js` with any text
editor, and paste the cookie value in place of the text ""put your cookie
here"".

Now, you can run the following command to execute the script:

```sh
node example.js
```

This will display the JSON response from Spotify (once).

If you want to run it periodically, you can uncomment the last line of
the file (remove the `//` from the beginning of the line and save the
file) and run the above command again. Now the script will run
indefinitely, fetching new data every minute and appending it to the
terminal output.

That should be enough to get you started! 🎉

If you want to do more things with that, you might want to learn a
little bit of JavaScript. Programming is powerful, and will allow you to
do the things that *you* want to do with your computer, instead of being
limited to the things that someone else decided that you should be able
to do. Enjoy!
"
387,DrBoolean/spotify-fp-example,JavaScript,"# spotify-fp-example
Egghead.io lesson
"
388,altdesktop/playerctl,C,"# Playerctl

For true players only: vlc, mpv, RhythmBox, web browsers, cmus, mpd, spotify and others.

[Chat](https://discord.gg/UdbXHVX)

## About

Playerctl is a command-line utility and library for controlling media players that implement the [MPRIS](http://specifications.freedesktop.org/mpris-spec/latest/) D-Bus Interface Specification. Playerctl makes it easy to bind player actions, such as play and pause, to media keys. You can also get metadata about the playing track such as the artist and title for integration into statusline generators or other command-line tools.

Playerctl also comes with a daemon that allows it to act on the currently active media player called `playerctld`.

## Using the CLI

```
playerctl [--version] [--list-all] [--all-players] [--player=NAME] [--ignore-player=IGNORE] [--format=FORMAT] [--no-messages] COMMAND
```

Here is a list of available commands:

| Command                      | Description                                                                                            |
|:----------------------------:| ------------------------------------------------------------------------------------------------------ |
| **`play`**                   | Command the player to play.                                                                            |
| **`pause`**                  | Command the player to pause                                                                            |
| **`play-pause`**             | Command the player to toggle between play/pause.                                                       |
| **`stop`**                   | Command the player to stop.                                                                            |
| **`next`**                   | Command the player to skip to the next track.                                                          |
| **`previous`**               | Command the player to skip to the previous track.                                                      |
| **`position [OFFSET][+/-]`** | Command the player to go to the position or seek forward or backward OFFSET in seconds.                |
| **`volume [LEVEL][+/-]`**    | Print or set the volume to LEVEL from 0.0 to 1.0.                                                      |
| **`status`**                 | Get the play status of the player. Either ""Playing"", ""Paused"", or ""Stopped"".                           |
| **`metadata [KEY...]`**      | Print the metadata for the current track. If KEY is passed, print only those values from the metadata. |
| **`open [URI]`**             | Command for the player to open a given URI. Can be either a file path or a remote URL.                 |
| **`loop [STATUS]`**          | Print or set the loop status. Either ""None"", ""Track"", or ""Playlist"".                                   |
| **`shuffle [STATUS]`**       | Print or set the shuffle status. Either ""On"", ""Off"".                                                   |

### Selecting Players to Control

Without specifying any players to control, Playerctl will act on the first player it can find.

Playerctl comes with a service called `playerctld` that monitors the activity of media players in the background. If `playerctld` is running, Playerctl will act on players in order of their last activity. To start `playerctld`, add the following command to your system startup script:

```
playerctld daemon
```

You can list the names of players that are available to control that are running on the system with `playerctl --list-all`.

If you'd only like to control certain players, you can pass the names of those players separated by commas with the `--player` flag. Playerctl will select the first instance of a player in that list that supports the command. To control all players in the list, you can use the `--all-players` flag.

Similarly, you can ignore players by passing their names with the `--ignore-player` flag.

The special player name `%any` can be used in the list of selected players once to match any player not in the list. This can be used to prioritize or deprioritize players.

Examples:

```bash
# Command the first instance of VLC to play
playerctl --player=vlc play

# Command all players to stop
playerctl --all-players stop

# Command VLC to go to the next track if it's running. If it's not, send the
# command to Spotify.
playerctl --player=vlc,spotify next

# Get the status of the first player that is not Gwenview.
playerctl --ignore-player=Gwenview status

# Command any player to play, but select Chromium last
playerctl --player=%any,chromium play

# Command any player to play, but select VLC first
playerctl --player=vlc,%any play
```

### Printing Properties and Metadata

You can pass a format string with the `--format` argument to print properties in a specific format. Pass the variable you want to print in the format string between double braces like `{{ VARIABLE }}`. The variables available are either the name of the query command, or anything in the metadata map which can be viewed with `playerctl metadata`. You can use this to integrate playerctl into a statusline generator.

For a simple ""now playing"" banner:

```bash
playerctl metadata --format ""Now playing: {{ artist }} - {{ album }} - {{ title }}""
# prints 'Now playing: Lana Del Rey - Born To Die - Video Games'
```

Included in the template language are some built-in variables and helper functions for common formatting that you can call on template variables. It can also do basic math operations on numbers.

```bash
# Prints 'Total length: 3:23'
playerctl metadata --format ""Total length: {{ duration(mpris:length) }}""

# Prints 'At position: 1:16'
playerctl position --format ""At position: {{ duration(position) }}""

# Prints 'Artist in lowercase: lana del rey'
playerctl metadata --format ""Artist in lowercase: {{ lc(artist) }}""

# Prints 'STATUS: PLAYING'
playerctl status --format ""STATUS: {{ uc(status) }}""

# Prints the time remaining in the track (e.g, 'Time remaining: 2:07')
playerctl metadata --format ""Time remaining: {{ duration(mpris:length - position) }}""

# Prints volume from 0 - 100
playerctl metadata --format ""Volume: {{ volume * 100 }}""
```

| Function        | Argument         | Description                                                        |
| --------------- | ---------------  | ------------------------------------------------------------------ |
| `lc`            | string           | Convert the string to lowercase.                                   |
| `uc`            | string           | Convert the string to uppercase.                                   |
| `duration`      | int              | Convert the duration to hh:mm:ss format.                           |
| `markup_escape` | string           | Escape XML markup characters in the string.                        |
| `default`       | any, any         | Print the first value if it is present, or else print the second.  |
| `emoji`         | status or volume | Try to convert the variable to an emoji representation.            |
| `trunc`         | string, int      | Truncate string to a maximum length.                               |

| Variable     | Description                                       |
| ------------ | ------------------------------------------------- |
| `playerName` | The name of the current player.                   |
| `position`   | The position of the current track in microseconds |
| `status`     | The playback status of the current player         |
| `volume`     | The volume from 0.0 to 1.0                        |
| `album`      | The album of the current track.                   |
| `artist`     | The artist of the current track.                  |
| `title`      | The title of the current track.                   |

### Following changes

You can pass the `--follow` flag to query commands to block, wait for players to connect, and print the query whenever it changes. If players are passed with `--player`, players earlier in the list will be preferred in the order they appear unless `--all-players` is passed. When no player can support the query, such as when all the players exit, a newline will be printed. For example, to be notified of information about the latest currently playing track for your media players, use:

```bash
playerctl metadata --format '{{ playerName }}: {{ artist }} - {{ title }} {{ duration(position) }}|{{ duration(mpris:length) }}' --follow
```

### Changing the position of the track

You can seek to a position in the track or skip forward and back.

```bash
# Go back 30 seconds
playerctl position 30-

# Go forward 30 seconds
playerctl position 30+

# Seek to the position at 30 seconds
playerctl position 30
```

## Troubleshooting

### Debug Logging

To enable debug logging, set the environment variable `G_MESSAGES_DEBUG=playerctl`. It's helpful to include a debug log when you report issues.

### No Players Found

Some players like Spotify require certain DBus environment variables to be set which are normally set within the session manager. If you're not using a session manager or it does not set these variables automatically (like `xinit`), launch your desktop environment wrapped in a `dbus-launch` command. For example, in your `.xinitrc` file, use this to start your WM:

```
exec dbus-launch --autolaunch=$(cat /var/lib/dbus/machine-id) i3
```

Some players may require installation of a plugin or other configuration.

In Quod Libet open the window File -> Plugins and select the plugin called *MPRIS D-Bus Support*.

### Playerctld Autostart Issues

If `playerctld` does not autostart and you use `xinit` and systemd, you might need this fix to enable DBus activation to work correctly:

```
systemctl --user import-environment DISPLAY XAUTHORITY

if which dbus-update-activation-environment >/dev/null 2>&1; then
        dbus-update-activation-environment DISPLAY XAUTHORITY
fi
```

## Installing

First, check and see if Playerctl is available from your package manager (if it is not, get someone to host a package for you) and also check the [releases](https://github.com/altdesktop/playerctl/releases) page on github.

### Fedora

`playerctl` is available for Fedora 28 or later:

```
sudo dnf install playerctl
```

### Mageia, openSUSE

`playerctl` is available for Mageia and openSUSE via [this COPR repository](https://copr.fedorainfracloud.org/coprs/jflory7/playerctl/). First, install the repository file for your distribution from COPR. Then, install `playerctl` with your package manager of choice.

### Guix

`playerctl` is available as a [Guix](https://guix.gnu.org) package which can be installed on any Linux distribution after [installing Guix](https://guix.gnu.org/manual/en/html_node/Installation.html):

```
guix install playerctl
```

### Compile from source

Using the cli and library requires [GLib](https://developer.gnome.org/glib/) (which is a dependency of almost all of these players as well, so you probably already have it). You can use the library in almost any programming language with the associated [introspection binding library](https://wiki.gnome.org/Projects/GObjectIntrospection/Users).

Additionally, you also need the following build dependencies:

[gobject-introspection](https://wiki.gnome.org/action/show/Projects/GObjectIntrospection) for building introspection data (configurable with the `introspection` meson option)

[gtk-doc](http://www.gtk.org/gtk-doc/) for building documentation (configurable with the `gtk-doc` meson option)

Fedora users also need to install `redhat-rpm-config`

To generate and build the project to contribute to development and install playerctl to `/`:

```
meson mesonbuild
sudo ninja -C mesonbuild install
```

Note that you need `meson` installed. In case your distro only has an older version of meson in its repository you can install the newest version via pip:

```
pip3 install meson
```

Also keep in mind that gtk-doc and gobject-introspection are enabled by default, you can disable them with `-Dintrospection=false` and `-Dgtk-doc=false`.

If you don't want to install playerctl to `/` you can install it elsewhere by exporting `DESTDIR` before invoking ninja, e.g.:

```
export PREFIX=""/usr/local""
meson --prefix=""${PREFIX}"" --libdir=""${PREFIX}/lib"" mesonbuild
export DESTDIR=""$(pwd)/install""
ninja -C mesonbuild install
```

You can use it later on by exporting the following variables:

```
export LD_LIBRARY_PATH=""$DESTDIR/${PREFIX}/lib/:$LD_LIBRARY_PATH""
export GI_TYPELIB_PATH=""$DESTDIR/${PREFIX}/lib/:$GI_TYPELIB_PATH""
export PATH=""$DESTDIR/${PREFIX}/bin:$PATH""
```

## Using the Library

To use a scripting library, find your favorite language from [this list](https://wiki.gnome.org/Projects/GObjectIntrospection/Users) and install the bindings library. Documentation for the library is hosted [here](https://dubstepdish.com/playerctl). For examples on how to use the library, see the [examples](https://github.com/acrisci/playerctl/blob/master/examples) folder.

### Example Python Script

For more advanced users, Playerctl provides an [introspectable](https://wiki.gnome.org/action/show/Projects/GObjectIntrospection) library available in your favorite scripting language that allows more detailed control like the ability to subscribe to media player events or get metadata such as artist and title for the playing track. This example uses the [Python bindings](https://wiki.gnome.org/action/show/Projects/PyGObject).

```python
#!/usr/bin/env python3

from gi.repository import Playerctl, GLib

player = Playerctl.Player('vlc')


def on_metadata(player, metadata):
    if 'xesam:artist' in metadata.keys() and 'xesam:title' in metadata.keys():
        print('Now playing:')
        print('{artist} - {title}'.format(
            artist=metadata['xesam:artist'][0], title=metadata['xesam:title']))


def on_play(player, status):
    print('Playing at volume {}'.format(player.props.volume))


def on_pause(player, status):
    print('Paused the song: {}'.format(player.get_title()))


player.connect('playback-status::playing', on_play)
player.connect('playback-status::paused', on_pause)
player.connect('metadata', on_metadata)

# start playing some music
player.play()

if player.get_artist() == 'Lana Del Rey':
    # I meant some good music!
    player.next()

# wait for events
main = GLib.MainLoop()
main.run()
```

For a more complete example which is capable of listening to when players start and exit, see [player-manager.py](https://github.com/acrisci/playerctl/blob/master/examples/player-manager.py) from the official examples.

## Resources

Check out the following articles about Playerctl:

* [2 new apps for music tweakers on Fedora Workstation - Fedora Magazine](https://fedoramagazine.org/2-new-apps-for-music-tweakers-on-fedora-workstation/ ""2 new apps for music tweakers on Fedora Workstation"")
* [Playerctl at Version 2.0](https://dubstepdish.com/index.php/2018/10/21/playerctl-at-version-2-0/)

Related projects from the maker of Playerctl:

* [altdesktop/python-dbus-next](https://github.com/altdesktop/python-dbus-next) - The DBus library used in the Playerctl test suite.
* [altdesktop/playerbm](https://github.com/altdesktop/playerbm) - A CLI bookmark utility for audiobooks and podcasts.
* [dbusjs/mpris-service](https://github.com/dbusjs/mpris-service) - MPRIS implementation for JavaScript targeting Electron apps.

## License

This work is available under the GNU Lesser General Public License (See COPYING).

Copyright © 2014, Tony Crisci
"
389,balenalabs/balena-sound,TypeScript,"![logo](https://raw.githubusercontent.com/balena-io-projects/balena-sound/master/docs/images/balenaSound-logo.png)

**Starter project enabling you to add multi-room audio streaming via Bluetooth, Airplay, Spotify Connect and others to any old speakers or Hi-Fi using just a Raspberry Pi.**

## Highlights

- **Audio source plugins**: Stream audio from your favourite music services: Bluetooth, Airplay, Spotify Connect, UPnP and more!
- **Multi-room synchronous playing**: Play perfectly synchronized audio on multiple devices all over your place.
- **Extended DAC support**: Upgrade your audio quality with one of our supported DACs

## Setup and configuration

Running this project is as simple as deploying it to a balenaCloud application. You can do it in just one click by using the button below:

[![deploy button](https://balena.io/deploy.svg)](https://dashboard.balena-cloud.com/deploy?repoUrl=https://github.com/balenalabs/balena-sound&defaultDeviceType=raspberry-pi)

## Documentation

Head over to our [docs](https://sound.balenalabs.io/docs/) for detailed installation and usage instructions, customization options and more!

## Motivation

![concept](https://raw.githubusercontent.com/balenalabs/balena-sound/master/docs/images/sound.png)

There are many commercial solutions out there that provide functionality similar to balenaSound. Most of them though come with a premium price tag and are riddled with privacy concerns.

balenaSound is an open source project that allows you to build your own DIY audio streaming platform without compromises. Why spend big money on hardware that might be deemed obsolete by the vendor as they see fit? With balenaSound you are in control, bring your old speakers back to life!

This project is in active development so if you have any feature requests or issues please submit them here on GitHub. PRs are welcome, too.

## Getting Help

If you're having any problem, please [raise an issue](https://github.com/balenalabs/balena-sound/issues/new) on GitHub and we will be happy to help.

## Contributing

Do you want to help make balenaSound better? Take a look at our [Contributing Guide](https://sound.balenalabs.io/contributing). Hope to see you around!

## License

balenaSound is free software, and may be redistributed under the terms specified in the [license](https://github.com/balenalabs/balena-sound/blob/master/LICENSE).
"
390,eltoncezar/Spofy,C#,"# UPDATE
~Currently I'm working on a complete rewrite of Spofy, using dotnet core and Avalonia as UI, so I hope we can get multi plataform.
But since this is a side project, don't expect anything soon. Also, any help will be appreciated.~

I will not update this repository anymore, mostly because I don't have the time, but also because I recently come across this amazing projecto: [Audio Band](https://github.com/dsafa/audio-band).
It's EXACTLY what I wanted to do with Spofy, but couldn't. So if you liked Spofy I strong suggest you to try this. I will also try and contribute to the project, when I can.
Thanks guys, this was an amazing experience.

# Spofy
Spofy is a WPF-Based Spotify mini player and notifier for Windows.

Just download the executable from here: [https://github.com/eltoncezar/Spofy/releases/latest](https://github.com/eltoncezar/Spofy/releases/latest)

![Example](https://raw.githubusercontent.com/eltoncezar/Spofy/master/Spofy/Images/screenshot.png)

Since [Winfy](https://github.com/maximilian-krauss/Winfy) is not working anymore, I decided to create something similar, but new.

This application uses [SpotifyAPI-NET](https://github.com/JohnnyCrazy/SpotifyAPI-NET) for all Spotify related operations.

## Features
* View the current playing track in a comfy way
* Play, pause and skip tracks without opening Spotify
* 3 differents sizes (at this moment)
* Always on top (customizable)
* Growl notifications (if available)

## Requirements
* Windows (XP, Vista, 7, 8)
* .NET Framework 4.5 (or higher)
* Internet connection
* Spotify

## Notice
Spofy is **not** a Spotify **replacement**. You need both running at the same time.

## Todo
Check the [issue list](https://github.com/eltoncezar/Spofy/issues).

## Donations
Donations would be more than welcome :)

[![Donate](https://www.paypalobjects.com/en_US/i/btn/btn_donate_LG.gif)](https://www.paypal.com/cgi-bin/webscr?cmd=_s-xclick&hosted_button_id=LG5F83RGQC256)

## Related projects
Also take a look at these awesome projects:
* [Smallify by Hypzeh](https://github.com/Hypzeh/Smallify)
* [Spofy-XL by LightSnowDev](https://github.com/LightSnowDev/Spofy-XL) (Spofy on the big screen!)


## Copyright and License
This piece of software is licensed under the GNU GPL v2.0. The complete license could be found at [http://www.gnu.org/licenses/gpl-2.0.txt](http://www.gnu.org/licenses/gpl-2.0.txt) or in the LICENSE.txt file in this repository.
"
391,MarcDonald/twitch-spotify-request-bot,TypeScript,"# Twitch Spotify Request Bot

## What is this?

This is a bot that listens to the chat of a given Twitch stream for messages with a Spotify song link in them and then
adds that song to a playlist and/or your queue. The Spotify link must be at the start of the message in order to be
picked up.

✔️ Message that WOULD be picked up:

```
!prefix https://open.spotify.com/track/4uLU6hMCjMI75M1A2tKUQC?si=x-_FFgqBRB20mzW_lM7kDQ pls play this, it's a bop
```

❌ Message that WOULD NOT be picked up:

```
!prefix this is a bop can you please play this https://open.spotify.com/track/4uLU6hMCjMI75M1A2tKUQC?si=x-_FFgqBRB20mzW_lM7kDQ
```

## Deploy

**NB:** [Open issue related to Heroku deployments](https://github.com/MarcDonald/twitch-spotify-request-bot/issues/18)

Click here to deploy your bot to heroku

[![Deploy](https://www.herokucdn.com/deploy/button.svg)](https://heroku.com/deploy?template=https://github.com/MarcDonald/twitch-spotify-request-bot)

1. Go to the [Spotify developer dashboard](https://developer.spotify.com/dashboard/)
   and create a new application. The app can have whatever name and description you want
2. You just need to fill the required information in the Heroku page
3. Once the app is created in Heroku, go back to Spotify developer dashboard, select your app and then click on Edit
   Settings and add a redirect URL of
   `https://app-name.herokuapp.com/spotifyAuth` (NB: Same URL that you declared in HOST from the step 2. Just add
   the `/spotifyAuth` at the end)
4. Wait the build process and then click on 'View' or 'Open app' in Heroku page

- The playlist ID can be found by right-clicking on the playlist ->
  clicking Share -> Copy Spotify URI and then copying the ID after `spotify:playlist:`
  eg. `spotify:playlist:{THIS_STRING_IS_THE_ID}`)
- The Spotify client ID and secret are obtained from the application you created in the Spotify developer dashboard
- If you wish to have chat feedback, set `CHAT_FEEDBACK` to true then generate a
  [Twitch Chat OAuth Token](https://twitchapps.com/tmi/) and set it as the `TWITCH_TOKEN` field in the `.env` file. Also
  set the `BOT_USERNAME` field to the name of the account you wish to use (must be the same account you generate the
  OAuth token for)

## Prerequisites for running locally

- Some basic programming knowledge (running terminal commands and editing `.env`
  files)
- [Node](https://nodejs.org/en/) (developed and tested on 14.6.0 - your mileage may vary on other versions)
- A Spotify account

## Setup

### Development

1. Run `yarn`
2. Run `yarn run husky:prepare`

### Running

1. Go to the [Spotify developer dashboard](https://developer.spotify.com/dashboard/)
   and create a new application. The app can have whatever name and description you want
2. Once the app is created, click on Edit Settings and add a redirect URL of
   `http://localhost:8000/spotifyAuth` (NB: the port will be whatever you have set as the `AUTH_SERVER_PORT` in
   the `./.env` file, by default it is 8000)
3. Create a `./.env` file based on `./.env.template` file and fill in the fields

- The playlist ID can be found by right-clicking on the playlist ->
  clicking Share -> Copy Spotify URI and then copying the ID after `spotify:playlist:`
  e.g. `spotify:playlist:{THIS_STRING_IS_THE_ID}`)
- The Spotify client ID and secret are obtained from the application you created in the Spotify developer dashboard
- If you wish to have chat feedback, set `CHAT_FEEDBACK` to true then generate a
  [Twitch Chat OAuth Token](https://twitchapps.com/tmi/) and set it as the `TWITCH_TOKEN` field in the `.env` file. Also
  set the `BOT_USERNAME` field to the name of the account you wish to use (must be the same account you generate the
  OAuth token for)

4. Run `bash ./build.sh`. This will automatically compile from source using `yarn` and then build OS-native binaries
   using `pkg`
5. Run the freshly compiled binary for your OS in `./dist`.
6. Open the authorization link and give the app the required permissions
7. If you have `ADD_TO_QUEUE` toggled on, ensure you have the Spotify client open and that it is active (i.e. is playing
   a song)
8. Type a Spotify link in the chat (ensuring the link is the first piece of text in the message)
   and make sure it shows up in your desired playlist (Spotify links should start
   with `https://open.spotify.com/track/`)
9. If there's a problem with Spotify authorization at any point, try deleting the
   `spotify-auth-store.json` file and starting the app again

#### Note

##### Running without generating a binary file

If you would prefer to launch the bot without generating a binary file you can replace steps 4 and 5 the following

- Run `yarn`
- Run `yarn build && yarn start`

## Open Source Libraries Used

### [Spotify Web API Node](https://github.com/thelinmichael/spotify-web-api-node)

Used for connecting to and performing actions using Spotify

MIT License

### [tmi.js](https://github.com/tmijs/tmi.js)

Used for connecting to Twitch chat

MIT License

### [Express](https://github.com/expressjs/express)

Used for creating a temporary local web server to retrieve the callback from the Spotify authorization

MIT License

### [Nodemon](https://github.com/remy/nodemon)

Used to speed up development with hot reload

MIT License

### [Prettier](https://github.com/prettier/prettier)

Used to make code pretty

MIT License

### [ts-node](https://github.com/TypeStrong/ts-node)

Used to run TypeScript

MIT License

### [TypeScript](https://www.typescriptlang.org/)

Used for strong typings

Apache 2.0 License

### [dotenv](https://github.com/motdotla/dotenv)

Used to load environment variables

BSD 2-Clause ""Simplified"" License

### [env-smart](https://github.com/jessety/env-smart)

Used to set types for environment variables

MIT License

### [pkg](https://github.com/vercel/pkg)

Used to create platform binaries

MIT License

## Contributors

Checkout the [Contributors file](./CONTRIBUTORS.md) to see everyone who has helped out with the bot

### [Material Design Icons](https://github.com/google/material-design-icons)

Used for the icon

Apache 2 License
"
392,maximilian-krauss/Winfy,C#,"Winfy
=====

:warning: **Due to the switch to Mac OSX Winfy development is currently on hold. Sorry folks** :warning:

Winfy is a WPF-Based mini player for Spotify on Windows.

![Winfy](http://f.cl.ly/items/1f0N2K2z1K2Y3L042C3G/Winfy.png)

Looking for something compiled? [This way please](http://krausshq.com/projects/Winfy)

## Requirements
* Windows (XP, Vista, 7, 8)
* .NET Framework 4.0 (or higher)
* Internet connection
* Spotify

## Copyright and License
Copyright (c) 2013 [Maximilian Krauss](http://krausshq.com)

This application is licened under The Code Project Open License (CPOL) 1.02 which can be found online at <http://www.codeproject.com/info/cpol10.aspx> or inside this repository in the LICENSE.md file.

## Notice
Winfy is **not** a Spotify **replacement**. You need both running at the same time.

## Todo
Interested in what's comming next? Check the [open issue list](https://github.com/maximilian-krauss/Winfy/issues?state=open).
"
393,andyruwruw/andyruwruw,TypeScript,"hello! here's a little about me:

<h1>
  i really like music :headphones:
</h1>

<!-- Nothing weird to see here -->
<p align=""center"">
  <a href=""https://readme.andyruwruw.com/api/now-playing?open"">
    <!-- Music bars move to the beat and are colored based on the track's happiness, danceability and energy! -->
    <img src=""https://readme.andyruwruw.com/api/now-playing"">
  </a>
</p>

<p align=""center"">
  <img src=""https://readme.andyruwruw.com/api/top-played"">
</p>
 
<p align=""center"">
  <!-- He came up with the idea of HOW to show React components as an img on a README.md and the now playing component! -->
  <i>inspired by <a href=""https://github.com/natemoo-re"">natemoo-re</a></i>
</p>

<p></p>

<h1>
  i was a frontend intern at chess.com ♟️
</h1>

<p align=""center"">
  <a href=""https://www.chess.com/member/andyruwruw"">
    <img src=""https://readme.andyruwruw.com/api/chess-games"">
  </a>
</p>

<p align=""center"">
  <i>luckily being good at chess wasn't a pre-req to the job</i>
</p>

<p></p>

<h1>
  i'm a vue.js fanboy, but i do some other stuff too :hammer:
</h1>

<p align=""center"">
  <img src=""https://readme.andyruwruw.com/api/skills"">
</p>
"
394,neat-run/wrapped,TypeScript,"# GitHub Wrapped

<img width=""1501"" alt=""Screen Shot 2021-12-13 at 6 01 21 PM"" src=""https://user-images.githubusercontent.com/36117635/145904521-cd99dd9d-8a67-4d93-908d-3bc38b00777e.png"">

Welcome!

### Getting started

- Ensure you have [yarn](https://classic.yarnpkg.com/lang/en/docs/install/#mac-stable) installed
- Clone or fork the repo
- Add a **.env** file, make a [Supabase account](https://supabase.com/), add a database, and add its key following **.sample-env**.
- `yarn install` to install dependencies
- `yarn dev` to run the app at **localhost:3000/**
- Sign in from the browser at `localhost:3000`

That's it. Changes to components should hot-reload in the browser.

Feel free to open an issue if you have any questions, or open a pull request if you would like to contribute. 

[![ko-fi](https://ko-fi.com/img/githubbutton_sm.svg)](https://ko-fi.com/J3J278ML9)
"
395,negativo17/spotify-client,Python,"Spotify Connect configuration
=============================

The package includes the required service definitions for FirewallD. If you have
installed a default desktop, FirewallD should be your firewall solution. To make
sure that Spotify can listen on the required ports through your firewall
software, execute the following commands as root.

Spotify Connect uses TCP and UDP port 57621. TCP port 57622 is to sync local
files that are part of a playlist with devices that are on the same Wi-Fi
network.

After installation you should be able to see the word “spotify” by running:

 # firewall-cmd --get-services | grep spotify

Then get the firewall zone you are in, and enable the service for it. For
example, on my system, to get the firewall zone I’m using:

 # firewall-cmd --get-active-zones 
 public
   interfaces: em1

Then enable it permanently (i.e. at reboot) and immediately with these commands:

 # firewall-cmd --zone=public --add-service=spotify --permanent
 # firewall-cmd --zone=public --add-service=spotify

Now start up Spotify and you should see all the available devices in your
network.

If you don’t have SSDP (Simple Service Discovery Protocol) already enabled on
your system, you also need to enable it.
Run the following commands, with the same zone you have used above:

 # firewall-cmd --reload --quiet
 # firewall-cmd --zone=public --add-service=ssdp --permanent
 # firewall-cmd --zone=public --add-service=ssdp

HiDPI displays
==============

If the fonts displayed in the main GUI are too small for your high resolution
display, you can try the following command to scale out the fonts to your
desired size.

Note that this is a parameter for the Chromium Embedded Framework onto which
the Spotify client is built upon, and not a Spotify parameter per se.

 $ spotify --force-device-scale-factor=1.25

Try with different scaling factors until you find the right settings.
"
396,yishn/spotify-lyrics,JavaScript,"> **Warning:** Since 2018, Spotify has changed its method how it communicates with Spotify Webhelper. Since then, no one has figured out how the new communication works, which is why this project no longer works.

# spotify-lyrics

<img src=""logo.png"" width=""156"" height=""156"">

Shows lyrics from the song you're currently playing in Spotify. [Download the latest release.](https://github.com/yishn/spotify-lyrics/releases)

![Screenshot](screenshot.png)

## Features

- Lyrics autoscroll
- Automatically get lyrics from musixmatch
- Always on top window if needed
- Typography prettifier

## Building

Building spotify-lyrics requires [Node.js 6 or later](https://nodejs.org/en/download/) and npm. First, clone this repository:

~~~
$ git clone https://github.com/yishn/spotify-lyrics
$ cd spotify-lyrics
~~~

Install the dependencies using npm:

~~~
$ npm install
~~~

You can build using:

~~~
$ npm run build
~~~

The binaries will be created in `spotify-lyrics/dist/`. This app is optimized for Windows, but it should work on other platforms as well.
"
397,cosenary/Spotify-PHP-API,PHP,"# Spotify PHP API #

## About ##

A simple static PHP wrapper for Spotify's Metadata API.  
Your feedback is always welcome.

## Requirements ##

- PHP 5.2.x or higher
- cURL

## Get started ##

### Setup class and search for an Artist ###

```php
<?php
    require_once 'spotify.class.php';
        
    // Search for an artist by its name
    $artist = Spotify::searchArtist('Maroon 5');
        
    // Take a look at the response
    echo '<pre>';
    print_r($artist);
    echo '<pre>';
?>
```

### URI Lookup ###

```php
<?php
    // Look up for an artist by its Spotify URI
    Spotify::lookup('spotify:artist:58lV9VcRSjABbAbfWS6skp', 'album');
?>
```

### Generate Spotify URI ###

```php
<?php
    // Search for a track
    $track = Spotify::searchTrack('Narcotic');
        
    // Receive the Spotify URI for the first track
    $uri = Spotify::getUri($track); // spotify:track:6MSPmHR15vgpa0A5L205Xv
        
    // Display Spotify link (opens Spotify player)
    echo ""<a href=""/{$uri}""/>Play Song with Spotify</a>"";
?>
```

**All methods return the API data `json_decode()` - so you can directly access the data.**

## Available methods ##

### Search methods ###

- `searchArtist($name, <$page>)`
- `searchAlbum($title, <$page>)`
- `searchTrack($title, <$page>)`

All `<$page>` parameters are optional. If the page number is undefined, the first one will be returned *(default)*.

> [Sample responses of the Search Endpoints.](https://github.com/cosenary/Spotify-PHP-API/wiki/Search-endpoints)

### Lookup method ###

- `lookup($uri, <$detail>)`
  - `$uri` is a valid Spotify URI like: `spotify:artist:58lV9VcRSjABbAbfWS6skp`, `spotify:track:4I4BS0OeI7VZdo5WeEQHFP`
     - the URI type will be automatically detected
  - `$detail` defines the detail level in the response. Possible options are:
     - Artist: `album`, `albumdetail`
     - Album: `track`, `trackdetail`
     - Track: `no detail level available`
- `getUri($obj, <$count>)`
  - `$obj` is a JSON object returned by one of the search methods
  - `$count` *[optional]* number of result (first result = 0 *[default]*)

> [Sample responses of the Lookup Endpoints.](https://github.com/cosenary/Spotify-PHP-API/wiki/Lookup-endpoints)

If you need additional informations, take a look at [Spotify's API docs](https://developer.spotify.com/technologies/web-api/).

## History ##

**Spotify 1.2 - 04/01/2013**

- `bug` Fixed undeclared static property error
- `update` Updated Spotify API doc URLs

**Spotify 1.1 - 12/12/2011**

- `feature` Changed class to static methods
- `update` Adjusted documentation
- `change` Removed default constructor

**Spotify 1.0 - 27/11/2011**

- `release` First official released version
- `feature` Added `getUri()` method
- `update` Detailed documentation

**Spotify 0.5 - 26/11/2011**

- `release` Beta version
- `update` Small documentation

## Credits ##

Copyright (c) 2011 - Programmed by Christian Metz  
Released under the [BSD License](http://www.opensource.org/licenses/bsd-license.php)."
398,Festify/cordova-spotify-oauth,TypeScript,"# Cordova Spotify OAuth Plugin

[![Greenkeeper badge](https://badges.greenkeeper.io/Festify/cordova-spotify-oauth.svg)](https://greenkeeper.io/) [![Travis](https://img.shields.io/travis/Festify/cordova-spotify-oauth.svg)](https://travis-ci.org/Festify/cordova-spotify-oauth)

Easy Spotify authentication for [Apache Cordova][cordova] / PhoneGap apps

[API Documentation][api-docs]

## Features

This plugin provides a simple way of authenticating a user with the Spotify API using the authorization code flow.

The plugin uses `SFSafariViewController` and Chrome Custom Tabs, if available. This also means it will only work on iOS 9 and above (but this shouldn't be a problem anymore).

## Examples

The plugin consists of two functions clobbered onto `cordova.plugins.spotifyAuth`.

### Log in
```js
const config = {
  clientId: ""<SPOTIFY CLIENT ID>"",
  redirectUrl: ""<REDIRECT URL, MUST MATCH WITH AUTH ENDPOINT AND SPOTIFY DEV CONSOLE>"",
  scopes: [""streaming""], // see Spotify Dev console for all scopes
  tokenExchangeUrl: ""<URL OF TOKEN EXCHANGE HTTP ENDPOINT>"",
  tokenRefreshUrl: ""<URL OF TOKEN REFRESH HTTP ENDPOINT>"",
};

cordova.plugins.spotifyAuth.authorize(config)
  .then(({ accessToken, expiresAt }) => {
    console.log(`Got an access token, its ${accessToken}!`);
    console.log(`Its going to expire in ${expiresAt - Date.now()}ms.`);
  });
```

### Log out
```js
cordova.plugins.spotifyAuth.forget();
```

## Installation

```bash
cordova plugin add cordova-spotify-oauth
```

## Usage

The plugin implements the [OAuth Authorization Code][auth-code-flow] flow for the Spotify API. This allows you to obtain access and refresh tokens for user related-actions (such as viewing and modifying their library, streaming tracks via the SDKs, etc.). Therefore, additional preparation in addition to installing the plugin is required.

### Protocol registration

The plugin uses custom URL schemes (universal links support will follow) to redirect back from the browser into the app.

You need to register the callback protocol inside the `App Info.plist` so that iOS knows which app to start when it is redirected when the authentication is done. If you want to use Chrome Custom Tabs (optional, but 110% nice), you must also register the URL scheme and path you will be redirected to within the `AndroidManifest.xml` file.

Take a look at [this repository][cordova-scheme-helper] to see how it's done for both cases.

### Spotify Developer Registration

You need to register your custom redirect URL within the Spotify Developer console. Make sure you register the _exact_ value you use within your code (including trailing slashes, etc.).

### Token Exchange Service

The authorization code flow requires server code for security. These come in the form of two HTTP endpoints, one for the auth code exchange, and the other one for access token refresh. The SDK will POST `application/x-www-form-urlencoded` data and expects JSON back. Ensure you have proper CORS config set up.

To easily implement them, we built a [Serverless][serverless] service for [AWS Lambda][aws-lambda] over in the [`oauth-token-api`][token-api-example] folder. Make sure you [install the Serverless Framework properly][serverless-installation]!
To resolve the project dependencies, please use [yarn][yarn-install] as shown below before deploying the service.

For the execution of the functions to work you need to set some environmental configuration in the file `oauth-token-api/.env`

```bash
CLIENT_ID=""<Your Spotify Client ID>""
CLIENT_SECRET=""<Your Spotify Client Secret>""
CLIENT_CALLBACK_URL=""<The callback url of your app>"" # e.g. ""festify-spotify://callback""
ENCRYPTION_SECRET=""<Secret used to encrypt the refresh token - please generate>""
```

You can then deploy the functions like this:

```bash
cd oauth-token-api
yarn install
serverless deploy
```

The `serverless` CLI will then print the URL where the functions can be reached. These are the values needed for [`tokenExchangeUrl`][token-exchange-url] and [`tokenRefreshUrl`][token-refresh-url].

### JavaScript usage

Head over to the [API Documentation][api-docs].

## Contributing
Pull requests are very welcome! Please use the [gitmoji][gitmoji] style for commit messages.


[api-docs]: https://festify.github.io/cordova-spotify-oauth/ ""API Documentation""
[auth-code-flow]: https://developer.spotify.com/web-api/authorization-guide/#authorization-code-flow
[aws-lambda]: https://aws.amazon.com/lambda/ ""AWS Lambda""
[cordova]: https://cordova.apache.org/ ""Apache Cordova""
[cordova-scheme-helper]: https://github.com/Festify/festify-cordova-scheme-helper ""Festify Cordova Scheme Helper""
[gitmoji]: https://gitmoji.carloscuesta.me/ ""Gitmoji""
[serverless]: https://serverless.com ""Serverless Framework""
[serverless-installation]: https://serverless.com/framework/docs/providers/aws/guide/installation/ ""Serverless Framework Installation""
[token-api-example]: https://github.com/Festify/cordova-spotify-oauth/tree/develop/oauth-token-api ""OAuth Token Service example""
[token-exchange-url]: https://festify.github.io/cordova-spotify-oauth/interfaces/config.html#tokenexchangeurl ""OAuth Auth Code Exchange URL""
[token-refresh-url]: https://festify.github.io/cordova-spotify-oauth/interfaces/config.html#tokenrefreshurl ""OAuth Access Token Refresh URL""
[yarn-install]: https://yarnpkg.com/en/docs/install ""Yarn Install""
"
399,lets-learn/spotify-playlist-generator,CSS,
400,liamhartley/spotify_analysis,Python,"# Spotify Analysis

## Contents
0. [Introduction](#introduction)
1. [Installation](#installation) 
2. [Usage](#usage)
3. [Project Architecture](#projectarchitecture)
4. [Future Improvements](#futureimprovements)
    1. [Calculation Improvements](#calculationimprovements)
    2. [Platform Imrpovements](#platformimprovements)
    3. [Code Quality Improvements](#codequalityimprovements)
5. [How to Contribute](#howtocontribute)

<a name=""introduction""></a>
## Introduction 

Welcome to Spotify Analysis. 
Enjoy learning more about the music you listen to and your personal listening habits.


<a name=""installation""></a>
## Installation 

#### Pre-Requisites
[Python](https://www.python.org/downloads/), [Terraform](https://www.terraform.io/downloads.html) and [Spotipy](https://spotipy.readthedocs.io/en/2.13.0/).


<a name=""usage""></a>
## Usage 
Run the scripts with a dictionary of your faovurite artists or playlists to gather data about them and save it locally or in S3.

<a name=""projectarchitecture""></a>
## Project Architecture 
The Terraform scripts build:
- A lambda function with the analysis code
- A cloudwatch alarm to run that function weekly
- All relevant IAM policies / roles

This will generate a datalake of Spotify data locally or in S3.

<a name=""futureimprovements""></a>
## Future Improvements

Any 'TODO' tags in the project.

<a name=""calculationimprovements""></a>
##### Calculation Improvements

<a name=""platformimprovements""></a>
##### Platform Improvements
- Improve UX
- Upload as a package

<a name=""codequalityimprovements""></a>
##### Code Quality Imrpovements

<a name=""howtocontribute""></a>
## How to Contribute 
Make a branch and raise a PR
"
401,RegsonDR/spotify-save-discover-weekly,Python,"# spotify-save-discover-weekly [![Save songs](https://github.com/RegsonDR/spotify-save-discover-weekly/actions/workflows/save.yaml/badge.svg)](https://github.com/RegsonDR/spotify-save-discover-weekly/actions/workflows/save.yaml)

This script automatically saves your ""Discover Weekly"" playlist which is generated by Spotify and refreshed every Monday. The songs from your temporary playlist are saved into a permanent playlist, using the Spotify API ([Authorization Code Flow](https://developer.spotify.com/documentation/general/guides/authorization-guide/#authorization-code-flow)). The automation is powered by [Github Actions](https://docs.github.com/en/actions) and executes automatically on Mondays as defined in the [save.yaml](/.github/workflows/save.yaml).

## Initial Set Up (approx: 10 minutes)
You should not need to make any commits back to the repo. The files in [/setup](/setup) will help obtain the authorization information for setting up the environment variables in github secrets in order to allow `main.py` to execute properly. You need to fork this repo in order to have your own instance of github actions.

### (1) Create a Fork
Start off with simple fork by clicking on the ""Fork"" button. Once you've done that, you can use your favorite git client to clone your repo or use the command line:
```bash
# Clone your fork to your local machine
$ git clone https://github.com/<your-username>/spotify-save-discover-weekly.git
```

### (2) Librairies
Use the package manager [pip](https://pip.pypa.io/en/stable/) to install all of the required librairies. You could use this with a [virtual environment](https://docs.python.org/3/library/venv.html) if required. 
```bash
$ pip install -r requirements.txt
```

### (3) Spotify API Credentials
1. Open the `.sample.env` file from the [/setup](/setup) folder on your local machine. 
2. Sign into your [Spotify API Dashboard](https://developer.spotify.com/dashboard/applications) and create a new application. You can use any uri for the redirect uri, this is the base uri you will be redirected to after authorizing the app to access your account. If you see a ""INVALID_CLIENT: Invalid redirect URI"", then edit settings of your app from the spotify dashboard and add your uri as a redirect uri.
3. Fill out the env file with the same Client ID, Secret and Redirect URI details used in step 2 and save this file as `.env`. **Do not post these details anywhere publically.**

Example:
```
CLIENT_ID=thisisanid
CLIENT_SECRET=thisisasecret
REDIRECT_URI=https://your.url/here
```
5. Execute [authorization.py](/setup/authorization.py) and open the URL generated. 
6. Authorize your app to access your Spotify account, this will then redirect you to your Redirect URI with a `?code=` parameter in the url.
7. Copy the whole url you were redirected to into the console and hit enter, this will then give you your refresh token. **Do not post this refresh token anywhere publically.**

Example:
 ```
$python authorization.py
Open this link in your browser: https://accounts.spotify.com/authorize?client_id=thisisanid&response_type=code&redirect_uri=https%3A%2F%2Fgithub.com%2FRegsonDR&scope=user-library-read+playlist-modify-public+playlist-modify-private+playlist-read-private+playlist-read-collaborative

Enter URL you was redirected to (after accepting authorization):
> https://your.url/here?code=somecodehere

Your refresh token is: somerefreshtokenhere
```

### (4) Github Actions
1. Go to the settings of your forked repo and click on secrets. 
2. You will need to create the following secrets:
  *  **CLIENT_ID** - Use the same Client ID from your `.env`.
  *  **CLIENT_SECRET** - Use the same Client Secret from your `.env`
  *  **REFRESH_TOKEN** - Use the refresh token generated in the [(3) Spotify API Credentials](#3-spotify-api-credentials) instructions above.
  *  **DISCOVER_WEEKLY_ID** - This is the ID of your Discover Weekly playlist, which can obtained using the [method](#obtaining-spotify-playlist-ids) described below.
  *  **SAVE_TO_ID** - This is the ID of your permanent playlist, which can be obtained using the [method](#obtaining-spotify-playlist-ids) described below. You will need to create a new playlist or use an existing playlist if there is somewhere you would like to already save the songs into.

![image](https://user-images.githubusercontent.com/32569720/113211160-0a7d3380-926d-11eb-97bc-0e17ef911336.png)

---

#### Obtaining Spotify Playlist IDs
1. Right click on a playlist > ""Share"" > Copy the Spotify URI (`spotify:playlist:c11M5VLWLMh66yW4gsl51S`). 
2. The ID is of this playlist is `c11M5VLWLMh66yW4gsl51S`, use this for the environment variable.

---

## Manual Execution via Github Actions
1. Go to Actions in your forked repo.
2. Click on ""Save songs""
3. Click on ""Run workflow"" which will bring up a drop down menu.
4. Click on ""Run Workflow"" again, this will initiate the script. Within the next few minutes, the script should execute and your songs should be in your new playlist in spotify.

Any execution errors can be found from within the actions tab of your forked repo.

![image](https://user-images.githubusercontent.com/32569720/113211386-4fa16580-926d-11eb-94c9-ddb513a122a7.png)

## Local Execution 
Alternatively, you can store the **REFRESH_TOKEN**, **DISCOVER_WEEKLY_ID** & **SAVE_TO_ID** back into your `.env` file and execute `main.py` on your machine when required, maybe manually or using a task schedular. Make sure to have the `.env` and `main.py` files in the same directory for this.

 ```
$python main.py
```
---

## Contributing
Pull requests are welcome. For major changes, please open an issue first to discuss what you would like to change.

## License
[MIT](https://choosealicense.com/licenses/mit/)
"
402,smashingboxes/maestro,Shell,"# Maestro

<img src=""./roboto.png"" width=270/>

A Slack-Powered music bot for Spotify, using [Sinatra](http://sinatrarb.com/) and [shpotify](https://github.com/hnarayanan/shpotify).

## Getting Started

The first thing you'll need to run Maestro is a computer to run it from. It'll need to be running
**OSX, with [homebrew](https://brew.sh/) installed**. It'll also need **Ruby**, which comes
pre-installed with OSX, so you should be good there. Lastly, but most importantly, this computer
is the one that will be playing the music, so it'll either need
**good speakers, or a headphone jack** to plug a sound system into.

Once you've got a computer to run it on, you can install Maestro by running the following commands
in a terminal:

```sh
brew install shpotify

git clone https://github.com/smashingboxes/maestro.git
cd maestro
bundle install
```

### Connecting to Spotify's api

shpotify needs to connect to Spotify’s API in order to find music by
name. It is very likely you want this feature!

To get this to work, you first need to sign up (or into) Spotify’s
developer site and [create an *Application*][spotify-dev]. Once you’ve
done so, you can find its `Client ID` and `Client Secret` values and
enter them into your shpotify config file at `${HOME}/.shpotify.cfg`.

Be sure to quote your values and don’t add any extra spaces. When
done, it should look like the following (but with your own values):

```sh
CLIENT_ID=""abc01de2fghijk345lmnop""
CLIENT_SECRET=""qr6stu789vwxyz""
```

## Usage

```sh
ruby app.rb
```

This will start up Maestro on port 4567. To use it with Slack, you'll want to configure an external
URL (see ""Obtaining an external URL"" below), and set up a slash command (see ""Creating a slash
command"" below).

Once that's done, you can interact with it via any command
[shpotify](https://github.com/hnarayanan/shpotify) supports. Here are the most common commands:

```
/maestro play <song name>
/maestro next
/maestro vol up
/maestro vol down
/maestro status
```

## Configuring Slack

### Obtaining an external URL

There are many ways to get an external URL or static IP. The easiest is to use [ngrok]():

```sh
brew cask install ngrok
ngrok http 4567
```

In the output, ngrok will provide you with an external url such as `http://71ca42f4.ngrok.io`,
you'll need that for the next section.

**NOTE: If ngrok gets restarted (during a computer restart, for example), a new URL will be
generated. You'll need to update your slash command (created in the next section) with the
new one.**

### Creating a slash command

To create a slash command in Slack, go to https://slack.com/apps/A0F82E8CA-slash-commands, click ""Add Configuration"", and fill in the following settings:

- Command: ""/maestro""
- URL: Your external URL (from previous section), followed by `/maestro`. So, for example, if your ngrok url is `http://71ca42f4.ngrok.io`, you'd enter `http://71ca42f4.ngrok.io/maestro`
- Method: POST
- Customize Name: Maestro
- Customize Icon: Any icon you'd like. Feel free to use [ours](./maestro.png)
- Autocomplete help text:
  - Check ""Show this command in the autocomplete list""
  - Description: https://github.com/hnarayanan/shpotify
  - Usage hint: [shpotify command]
"
403,neonichu/CoolSpot,Swift,"# CoolSpot

![Screenshot of playback on the watch](Screenshots/watch-playback.png)
![Screenshot of menu on the watch](Screenshots/watch-stop.png)

My little playground [Spotify][1] app, using the [new SDK](https://github.com/spotify/ios-sdk) and Swift. 

It comes with a ᴡᴀᴛᴄʜ app which simply starts playing your saved
songs randomly on the iPhone when opened. You can tap to skip and force touch to start/stop playback. Dont't forget to launch it once on your phone to sign into your
[Spotify][1] account.

## Building

Do a 

    $ make pod

and then open the workspace and you should be good to go.

Doing so the first time will install [CocoaPods][4] for you automatically and will
ask you for a [Spotify][1] client ID. You can obtain one in the [developer center][2] by creating an application under *My Apps* - make sure to set `coolspot://callback` as the *Redirect URI*. The ID is stored in your keychain via [cocoapods-keys][3]. 

You will also need to setup a *Token Refresh Service*, see [#3](../../issues/3) for more information. Without this you'd need to login again about once every hour. ¯\\\_(ツ)\_/¯ 

## Help needed

Follow [@NeoNacho](https://twitter.com/NeoNacho) to help me beat [@orta](https://twitter.com/orta) in followers count.

[1]: https://www.spotify.com/
[2]: https://developer.spotify.com
[3]: https://github.com/orta/cocoapods-keys
[4]: http://cocoapods.org
"
404,megamaced/spotify-easyrpm,Shell,"# spotify-easyrpm

![img](https://i.imgur.com/y0tDlYD.png)

Spotify-EasyRPM is a script which automates the installing and updating of Spotify on openSUSE / SLE

## Features

* Auto download the latest version of Spotify from snapcraft.io
* Convert the snap package to RPM format
* Install the Spotify RPM
* Automated Spotify update check
* Update Spofity alongside your regular system updates
* Create a local filesystem repo
* Fully unattended quiet mode

## Howto

Regular prompt based mode to create an RPM and optionally install and create an update schedule:

```bash
$> spotify-easyrpm
```

Automate everything for me and don't ask questions:

```bash
$> spotify-easyrpm --quiet
```

Set either ""edge"" or ""stable"" version of Spotify client:

```bash
$> spotify-easyrpm --set-channel edge
```

Create a new update check schedule:

```bash
$> spotify-easyrpm --create-schedule
```

Remove the schedule and local repo if present:

```bash
$> spotify-easyrpm --remove-schedule
```

Clean up the local filesystem repo:

```bash
$> spotify-easyrpm --clean-repo
```

## Requirements

* openSUSE Leap / SLE, or Tumbleweed

## Auto Updates

spotify-easyrpm can create a systemd user timer job which will run daily and 5 minutes after user login.
This will call the script to do a light check against the Spotify debian repo for a new release.
If a new release is found, a build process is kicked off in the background and the final RPM will
be placed on your machine in a local filesystem repo (/var/cache/spotify-easyrpm).
The next time you run the system updater or zypper up you will see spotify-client appear as an
update alongside regular updates.

If you want to modify the update check timer, the file is at $HOME/.local/share/systemd/user/spotify-easyrpm.timer
Please see the systemd documentation for more information

To see a brief summary of the last run do

```bash
systemctl --user status spotify-easyrpm
```

If you want to see the full output of the last run you can do

```bash
journalctl --user-unit spotify-easyrpm
```

### How to install

* openSUSE : `zypper install spotify-easyrpm`
"
405,alexanderwallin/react-spotify-player,JavaScript,"# react-spotify-player

[![view on npm](http://img.shields.io/npm/v/react-spotify-player.svg)](https://www.npmjs.org/package/react-spotify-player)

Spotify player widget in React.

![](react-spotify-player.png)

### Installation

`npm install react-spotify-player`

### Usage

```javascript
import SpotifyPlayer from 'react-spotify-player';

// size may also be a plain string using the presets 'large' or 'compact'
const size = {
  width: '100%',
  height: 300,
};
const view = 'list'; // or 'coverart'
const theme = 'black'; // or 'white'

<SpotifyPlayer
  uri=""spotify:album:1TIUsv8qmYLpBEhvmBmyBk""
  size={size}
  view={view}
  theme={theme}
/>
```

Read more details about the player widget at the [Spotify Play Button docs](https://developer.spotify.com/technologies/widgets/spotify-play-button/).

### Developing

To build and build+watch source component:

```bash
npm run build
npm run dev
```

To build and build+watch examples files:

```bash
npm run build:examples
npm run dev:examples
```
"
406,KevinLage/Spotify-Account-Creator,Python,"# Spotify-Account-Creator

Python Setup: 
1. Download and install the latest python version from https://www.python.org/
2. Download all files from the repo.
3. Open your terminal and enter ""pip install -r requirements.txt"" and ""pip install -U requests[socks]""
4. Start the python file and enter the amount of accounts you need and how many threads you want.

If you dont want to install python simply download the .exe from [Releases](https://github.com/KevinLage/Spotify-Account-Creator/releases)
"
407,anthonyli358/spotify-recommender-systems,Jupyter Notebook,"# spotify-recommender-systems
Exploration implementing [recommender systems](https://en.wikipedia.org/wiki/Recommender_system) using 
[Spotify data](https://developer.spotify.com/documentation/web-api/).

<p align=""left"">
    <img src=""results/final_playlist.png"" alt=""final_playlist"" width=""650""/>  
</p>

## Results

In [recommender_playlists.ipynb](recommender_playlists.ipynb), traditional machine learning (ML) methods 
are applied to yield recommendations based on a set of favourite playlists. In this classification the 
[sci-kit learn](https://scikit-learn.org/stable/) implementations of 
[logistic regression](https://scikit-learn.org/stable/modules/generated/sklearn.linear_model.LogisticRegression.html) and 
[random forest](https://en.wikipedia.org/wiki/Random_forest) are used alongside [xgboost](https://xgboost.readthedocs.io/en/latest/)
to classify if a track should be considered to be added to the set of favourite playlists.

Although the traditional approach can yield good recommendations, it is heavily reliant on both feature engineering 
and there being enough features which cover user tastes (which is unlikely for subjective items such as movies and songs).
As this approach reliant on users define their favourites (classification) or to accurately score songs 
(regression), it suffers from both mislabelling inaccuracies and the cold-start problem when a user has a fresh account 
or doesn't provide any ratings. Hence recommender system approaches are applied in [recommender_systems.ipynb](recommender_systems.ipynb).

### Model Evaluation Metric

Here we use the Top-N accuracy metric (in this case Top-100), which applies a recommender system to a dataset of 1 user 
interacted item and 100 uninteracted items. The perfect recommender system will rank the user interacted item first 
(highest recommendation strength). This is computed for each item for each user, and then the weighted mean is taken
across all users to get a global metric. The metric 'recall@5' for each user is the number of times the interacted item
was in the Top-5 items / the number of times it wasn't.

### Popularity Recommender

A popularity recommender recommends songs ranked by their popularity regardless of user's preferences. This is of course
dependent upon the methodology used to determine the popularity metric (usually some function of time, user interactions,
and user ratings).

```'recall@5': 0.09318497913769123, 'recall@10': 0.17385257301808066```

<p align=""left"">
    <img src=""results/popularity.png"" alt=""popularity"" width=""500""/>  
</p>

As it doesn't take user activity into account, solely recommending by popularity is a poor way to 
recommend tracks. However, as we will see later it is a good method to mix in for variety and to avoid the cold-start problem.

### Content-based Recommender

A content-based recommender leverages attributes from items the user has interacted with to recommend similar items. 
Here the popular [TF-IDF](https://en.wikipedia.org/wiki/Tf%E2%80%93idf) method is used to convert unstructured text 
(unigrams and bigrams of genres and song/artist/album/playlist name) into a sparse matrix , 
which is then summed and normalized across users to give a vector structure, where each word is represented
by a position in the vector and the value measures its relevance. The cosine similarity between the 
user vector and the initial matrix (all users) then gives a metric to recommend new tracks.

<p align=""left"">
    <img src=""results/tfidf_tokens.png"" alt=""tfidf_tokens"" width=""150""/>  
</p>

```'recall@5': 0.9123783031988874, 'recall@10': 0.972183588317107```

<p align=""left"">
    <img src=""results/content.png"" alt=""content"" width=""500""/>  
</p>

A very high recall is observed as the dataset used considers each playlist (which tend to be heavily genre/mood based)
as a user. Hence the content-based recommender performs exceedingly well by the Top-N metric but fails to give much variety.

### Collaborative Recommender

A collaborative recommender can be either memory-based (based on past user interactions) or model-based (e.g. clustering).
Here [matrix factorisation](https://en.wikipedia.org/wiki/Matrix_factorization_(recommender_systems)) implemented
via [singular value decomposition (SVD)](https://en.wikipedia.org/wiki/Singular_value_decomposition) is used to compress
a user-item matrix into a low-dimensional representation. This yields better scalability and better generalisation.
The items x users matrix is then used to recommend items to users based on similar user interactions.

<p align=""left"">
    <img src=""results/matrix_factorisation.png"" alt=""matrix_factorisation"" width=""400""/>  
</p>

```'recall@5': 0.23783031988873435, 'recall@10': 0.30737134909596664```

<p align=""left"">
    <img src=""results/collaborative.png"" alt=""collaborative"" width=""500""/>  
</p>

The collaborative approach outperforms the popularity approach but is not a good as the content-based approach. It can 
suffer from the sparsity problem if the user set is too small or the number of interactions is too low.

### Hybrid Recommender

A hybrid recommender combines the content-based and collaborative approaches and has been shown to perform better in 
many studies. It avoids high variance and enables variety and weighting (e.g. genre weighting). As the content-based
approach performs better by the Top-N metric is is weighed more strongly here.

```'recall@5': 0.9068150208623088, 'recall@10': 0.9666203059805285```

<p align=""left"">
    <img src=""results/hybrid.png"" alt=""hybrid"" width=""500""/>  
</p>

This weighting approach has the same issue as the content-based recommender - too much weighting on genre and not
enough variety. Here the popularity approach is also now incorporated with a weighting to give a hybrid + popularity recommender. 

```'recall@5': 0.6244784422809457, 'recall@10': 0.7343532684283728```

<p align=""left"">
    <img src=""results/hybrid_popularity.png"" alt=""hybrid_popularity"" width=""500""/>  
</p>

Even though it has a lower recall, subjectively this recommender appears to give the best recommendations in practice.
It may therefore be better to incorporate other evaluation metrics such as one that measures variety, 
or increase the scope of this dataset as its current playlist based approach means that pure genre-based 
recommendations perform the best.

### Future Work

- Expand the dataset to include other users (rather than proxying playlists as users)
- Develop other evaluation metrics (although this is somewhat solved by expanding the dataset)

## Getting Started

1. Access the [Spotify API](https://developer.spotify.com/)
2. Setup your project including the project settings (I used http://localhost:9001/callback as the redirect URI)
3. Create the [spotify/spotify_details.yml]([spotify/spotify_details.yml]) yaml with the Spotify APi client_id, 
client_secret, and redirect_uri
4. Run [music_data.py](music_data.py) to pull Spotify data to local pandas dataframes
5. Explore the traditional ML implementations in [recommender_playlists.ipynb](recommender_playlists.ipynb) and recommender system
implementations in [recommender_systems.ipynb](recommender_systems.ipynb)
6. Enjoy the resulting playlists!

## Development

Modules:
- [music_data.py](music_data.py): Script file for pulling Spotify music data
- [data_functions.py](data_functions.py): Helper functions for pulling Spotify music data
- [recommender_playlists.ipynb](recommender_playlists.ipynb): Jupyter notebook to recommend tracks based on traditional
ML techniques
- [recommender_systems.ipynb](recommender_systems.ipynb): Jupyter notebook to recommend tracks using implementation and evaluation
 of popularity, content-based, collaborative, and hybrid recommendation system approaches. Made with reference to
 [recommender-systems-in-python-101 on Kaggle](https://www.kaggle.com/gspmoreira/recommender-systems-in-python-101/notebook)

The gitignore'd 'spotify' folder contains locally saved pandas dataframes from [music_data.py](music_data.py) as well as 
Spotify API details [spotify/spotify_details.yml]([spotify/spotify_details.yml]) and playlist ids 
[spotify/playlists.yml]([spotify/playlists.yml]) 

## Resources

- [spotipy](https://spotipy.readthedocs.io/) has a repo of examples [available on GitHub](https://github.com/plamere/spotipy/tree/master/examples)
- [Spotify for Developers](https://developer.spotify.com/) has a [dashboard](https://developer.spotify.com/dashboard/applications)
to manage your project as well as [development guides](https://developer.spotify.com/documentation/general/guides/)
and an [API reference guide](https://developer.spotify.com/documentation/web-api/reference/)
"
408,spotifymaps/spotifymaps.github.com,CSS,"# Spotify Maps

Spotify Maps live here. 
"
409,jameelsocorro/spotify_ui_clone,Dart,"# spotify_ui_clone

This repository is based on converting this mockup into a flutter app.

![app](assets/images/thumbnail.png?raw=true)

## Youtube
You may watch it here: https://youtu.be/JBI78K7G5sg
>Make sure to like + subscribe my [youtube](https://www.youtube.com/c/jameelsocorro) for more!


## Support Me

**BTC**: 33K7ie7b5vHzypAV3VZZLf9JY5Zahm5zt9

**ETH**: 0x451e22d4ef070eedbb5a7eec3bf62f7d0fee9b54

**BCH**: prv7c2juzp5yrwej0mkmuq7z42ccxc3crvase72jcn 

Enjoy!
"
410,JL978/spotify-clone-server,JavaScript,"# Spotify Clone App Authenication Server
This repository is the code to run an authorization/authentication server to connect to the Spotify API. The server is to be used in conjunction with the front-end code of the cloned app found [here](https://github.com/JL978/spotify-clone-client)

## Motivation
When working with the [Spotify API](https://developer.spotify.com/documentation/web-api/), you must follow this authorization [guide](https://developer.spotify.com/documentation/general/guides/authorization-guide/) provided on the API documentation. The basis of this authorization flow involve using a client id and client secret provided by signing up on the Spotify Developer dash board. These keys must be sent with every single request made to the Spotify server. 

When working with a client secret, one must keep it... well secret. Therefore, the solution to this is to keep the requests to the Spotify API on the server-side so that the client-side app can't expose the secret key to potential attackers - making the app more secure. Authenitcation of users are also done through this server for the same purpose and a refresh_token is sent back as a cookie while an access token is sent back to be stored in memory. This authorization flow was built to avoid the most common types of cyber attack - Cross Site Scripting and Cross Site Request Forgery.

## Tech/Framework Used
* Node.js
* Express.js
* axios

## Installation
This project requires [node](http://nodejs.org) and [npm](https://npmjs.com) installed globally. 

Clone the repository to a directory of your choosing

```sh
$ git clone https://github.com/JL978/spotify-clone-server.git
```
Navigate into spotify-clone-server and install the necessary packages

```sh
$ npm install 
```
To run the server

```sh
$ npm start
```
To run the dev server

```sh
$ npm run dev
```

### **Other requirements**
[The Spotify Developer Dashboard](https://developer.spotify.com/dashboard/login)

Create a new .env file in the root folder and add the following key value pairs to the file

```sh
CLIENT_ID = [client id optained from the Spotify Developer Dashboard]
CLIENT_SECRET = [client secret optained from the Spotify Developer Dashboard]
FRONT_URI = http://localhost:3000
RE_URI = http://localhost:4000/callback
REXP = /\.localhost:3000/
```

## Usage

This server is to be consumed by a front-end application - namely the Spotify clone at this [repo](https://github.com/JL978/spotify-clone-client)

The following endpoints are available

|Endpoint|Method|Body|Response|
|:---|:---|:---|:---|
|/|POST|{endpoint}|200 with the returned data from the endpoint|
|/login|GET|none|redirect to the Spotify authentication page|
|/refresh_token|GET|none|if a valid refresh token is available in the cookie, an access_token is sent back as data|
|/logout|GET|none|clear the refresh token and effectively log the user out off the app|

## The architecture
### Client Credential Flow (un-authorized requests)

![client credential flow](demo/unauthed.png)

The advantage of doing request this way instead of using the implicit grant flow as outlined in the Spotify API document is that you have a higher rate limit. It also doesn't prompt the user to login, which would be a bad experience for users who don't have a Spotify account but just want to browse their selections. 

An improvement to this process would be to store the access_token in memory after the first request and use that for subsequent requests instead of requesting for a new access token on every request.

### Authorization code flow 

The majority of code flow is very similar to the authorization code flow as outlined in the API [documentation](https://developer.spotify.com/documentation/general/guides/authorization-guide/), a diagram of which is shown bellow

![spotify authorization flow](demo/spotify-auth.png)

The only difference with this server is that the sent back data at step 2 is the access_token as JSON so that the client can store that in memory (the client will now show the logged in version of the app) and set the refresh token in a cookie. At this point the client is free to make requests for personal data as outlined in step 3-4 however an issue would arise if the user refreshed the page. Since the access_token is stored in memory, the user would be logged out during page refresh and provide a bad user experience. To solve this issue, a /refresh_token endpoint is also provided. During any initial loading, the client checks for if their is a refresh_token stored in a cookie, if there is then it makes a request to the /refresh_token endpoint which uses the refresh_token to obtain a new access_key from the Spotify API. 

![refresh token flow](demo/refresh.png)

### Logging out

Since ""logged in"" just means that there is a refresh_token stored in cookies, to log the user out it is simply deleting the cookie and refresh the client.
"
411,rweyant/spotifyr,R,"# spotifyr: a wrapper for Spotify's API for R users

**spotifyr** is currently undergoing active testing and improvement.  

It currently launches [Firefox](https://www.mozilla.org/en-US/firefox/new/) through [RSelenium](https://github.com/ropensci/RSelenium) for the full [authorization code flow](https://developer.spotify.com/web-api/authorization-guide/#authorization_code_flow).  Chrome and IE will eventually be supported, but are not yet.  All data from endpoints is converted to lists.  If you just want access to the public endpoints, this is not necessary.  

Some of the objects (artists, albums, playlists) have helper functions to conver to `data.frame`, but not all yet, and this is the next major development plan.

## Installation

Requires [Firefox](https://www.mozilla.org/en-US/firefox/new/) for initial authentication for any of the endpoints that operate on user data.

```{r}
devtools::install_github('rweyant/spotifyr')
```

## Authentication

For any usage below, you'll need to have proper credentials from Spotify.  Sign up for an account [here](https://developer.spotify.com/) and [create an app](https://developer.spotify.com/my-applications/#!/applications).

```{r}
# First Step: make client_id and client_secret available to other function
set_credentials(client_id=YOUR_CLIENT_ID,client_secret=YOUR_CLIENT_SECRET)
```

### Authenticate with [Client Credentials](https://developer.spotify.com/web-api/authorization-guide/#client_credentials_flow)

```{r}
client_tokens <- get_tokens()
```

### Authenticate with [Authorization Code](https://developer.spotify.com/web-api/authorization-guide/#authorization_code_flow)

```{r}
# Opens Browser window asking for permission to access data
# Requires Spotify account and for user to login
user_code <- get_user_code()

# Assigns tokens for later use.
# This creates a variable access_token in the Global Environment 
# that all future functions will access.
user_tokens <- get_user_token(user_code)

# If your access_token expires and you need to refresh your tokens 
# With no parameters specified, looks for refresh_token in the Global Environment
refresh_tokens <- refresh_user_token()

# If you want, you can explicitly specify the refresh token
refresh_tokens <- refresh_user_token(user_tokens$refresh_token)
```

## Basic Usage

### Search for Data

Get information, identifiers, images, etc. for artists, albums, songs or playlists that match the query text. 
No authentication is required for this function.

```{r, eval=FALSE}

# Search for an artist
search('slayer',type='artist')

# Get top search result
search('slayer',type='artist',limit=1)

# Search for an album
search('South Of Heaven',type='album')

```

### Get Information About Artist
Search for an artist by Spotify ID and get information about band, genre, images, etc.
No authentication is required for this function.

```{r,eval=FALSE}
get_artist('1IQ2e1buppatiN1bxUVkrk')

# Get all albums by Slayer on Spotify
get_artist_albums('1IQ2e1buppatiN1bxUVkrk')

# Get top tracks of Slayer in the US. Country code required.
get_artist_toptracks('1IQ2e1buppatiN1bxUVkrk','US')

# Get related artists according to Spotify in list 
get_artist_relatedartists('1IQ2e1buppatiN1bxUVkrk')

# Get related artists according to Spotify and simplify to a data.frame
simplify_result(get_artist_relatedartists('1IQ2e1buppatiN1bxUVkrk'),type='artists')
```

### Access Library information

There are endpoints to access and modify data in user's library
```{r,eval=FALSE}
# Get the last 2 tracks saved by the user.
get_saved_tracks(limit=2)
```

### Followers

Get information about what artists a user is following, add/remove followers from user, check if a user is following someone

```{r}
# Get list of all artists a user is following
get_user_followed_artists()

# Check if my account is being followed.
following('rweyant',type='user')

# Follow my account
follow('rweyant',type='user')

# Check if Slayer is being followed.  Use Spotify Artist ID
following('1IQ2e1buppatiN1bxUVkrk',type='artist')

# Follow Slayer
follow('1IQ2e1buppatiN1bxUVkrk',type='artist')

```

### User Profile Data
```{r,eval=FALSE}
# Specific user's data
get_user_profile('rweyant')

# Get the user who is using the application
get_current_user_profile()
```


### More Resources

- [Spotify API Endpoints](https://developer.spotify.com/web-api/endpoint-reference/)
- [Source on GitHub](https://github.com/rweyant/spotifyr)
"
412,poliarush/Java-Sikuli-Demo,Java,"Java-Sikuli-Demo
================

Java Sikuli Demo on Spotify desktop application 


Main sense of this code to show basic approach how Sikuli can handle test automation of desktop applicaitons.

ScreenObject pattern is used to make code more elegant and nice to write and rewrite if you needed.


Class diagram looks like this http://yuml.me/5abe1e71

If you need more help please come back with comments, suggestions 


Mykhailo Poliarush

http://poliarush.com

http://automated-testing.info

http://lessons2.ru
"
413,samadritsarkar2/spotifyDown,JavaScript,"<div align=""center"">
<img src='src/assets/homeLogo.png' width='100'>
<h1><strong>Downify</strong></h1>
<h2 >
    Downify let's you enjoy music on-the-go, even when you are offline.
    </h2>
</div>

<div align='center' >
<a href=""https://play.google.com/store/apps/details?id=com.sam.downify"" >
Get it on Playstore
</a>
 </div>
<br>

# 🎯 Goal

<h3>
Downify wants to make sure that, no one is deprived of music on that long road trip or airplane when there is no Internet Connection.
You can download your Spotify playlists/albums in advance and enjoy music everywhere. And that too without annoying ads.
</h3>

# Screenshots

<div>
    <img src=""screenshots/1.png"" width=""200"" />
    <img src=""screenshots/2.png"" width=""200"" />
    <img src=""screenshots/3.png"" width=""200"" />
    <img src=""screenshots/4.png"" width=""200"" />
    <img src=""screenshots/5.png"" width=""200"" />
</div>
<br>

# Changelog

- [**1.80**](https://github.com/samadritsarkar2/spotifyDown/tree/version1.80)

  - Removed the Google AdMob Package
  - Added ironSource Ads
  - Removed Donations
  - Fixed bugs arising out of updated sdk version

- [**1.75**](https://github.com/samadritsarkar2/spotifyDown/tree/version1.75)

  - Shuffle Play 🔀
  - Tracks can now be deleted within the app 🚮
  - Tracks are now arranged according to the playlist
  - Tracks downloaded in previous versions will be categorized in 'Unorganized'
  - Minor Banner Ads may be there
  - Downloading optimized and etc.

- [**v1.5**](https://github.com/samadritsarkar2/spotifyDown/tree/version1.5)
  - Added Music Player
  - Added Notification Bar Music controller
  - Supports Spotify Albums now, alongside Playlists
  - Added Downloads Page
  - Added a Mini player component ( Will add more features to it via OTA Updates )
  - Support for OTA Updates
  - UI Changes
  - For more, see [CHANGELOG](/CHANGELOG.MD)
    <br>
    <br>
- [**v1**](https://github.com/samadritsarkar2/spotifyDown/tree/version1) (Intial Release)
  - Supports Spotify Playlist
  - Playing a downloaded a song, launches Music player Intent.
  - Download All functionality
  - Save the playlist for later

# How it works?

It uses <a href=""https://developer.spotify.com/"">Spotify offical API</a> to fetch the tracks and Youtube(youtube-dl) to download the tracks. All that happens in server side and the app just downloads the mp3 file for later.

P.S:- ~~I have written a lot of Bad code, I will start improving the app and code soon.~~
I improved the code a little bit and the overall code structure. Will work on it soon.

# Tech Stack

- React Native
- Node Js (Backend Server) ~~[Will make the backend code public soon]~~
- Firebase (For Analytics)

# Known Issues

- With the latest update, a song can be downloaded only once and hence it can be present in only one playlist. This will be solved in the upcoming version as we go into more complicated database system.
- ~~While a track(/s) is getting downloaded from a particular playlist, if user exists the screen or another playlist is loaded, then the download gets cancelled.~~
- Few playlist may give error unexpectedly.
- Due to youtube policies, few songs are not downloadable. This is because some videos are regionally restriced or so. [See these limitations](https://github.com/fent/node-ytdl-core#limitations)
- Youtube server gives `429 error`.
- Downloads wrong tracks
- If you encounter anything else, feel free to report an issue or DM me. I will definetly work on it.

# Upcoming Features

- [x] In-app Music Player
- [x] Support for Spotify Albums. ([#2](https://github.com/samadritsarkar2/spotifyDown/issues/2))
- [ ] In-app music controller such as, queue, seek bar etc.
- [ ] Optimized Download functionality
- [ ] Spotify Login to fetch playlists
- [x] Suggestions are always welcome.

# For Legal Purposes

    You can mail me at **samadrit.sarkar2@gmail.com** or DM me.
"
414,I2rys/opengen-bot,JavaScript,"# opengen-bot
Generate Netflix, Spotify, NordVPN & Disney plus accounts.

## Installation
Github:
```
git clone https://github.com/I2rys/opengen-bot
```

NpmJS:
```
npm i axios fs
```

## Usage
```
node index.js <account_type> <amount> <output>
```
+ accountType - The type of the account to generate.
+ amount - The amount of accounts to generate.
+ output - The output of the generated accounts.

## License
MIT © I2rys
"
415,thanh109/Spotify-Account-Checker,C#,"Spotify Account Checker
=====================
Written in C#, using selenium webdriver to help, this tool checks spotify accounts.


![screenshot](https://github.com/mclarence01/Spotify-Account-Checker/raw/master/Capture.PNG)

Requirements
--------------
* NET Framework > 4.0
* Windows Computer
* Google Chrome

Usage
-------------
1. Open the application ""Spotify Account Checker.exe"".
2. Import combo list by click button at top left.
3. (Optional) Check ""Check premium status"" to verify if account is free or premium.
4. Click ""Start check"" to being checking accounts.
5. Once completed click ""save working accounts to text file""

Troubleshooting
--------------
|Symptom|Resolution|
|----|----|
|`Index out of bounds error`, when importing the combo list.|Make sure the combo list is formatted like the following, email:pass.|
|Checker fails to validate any account (eg ""Cannot determine"" or ""Assumming account is invalid"")|The spotify page is most likely in a different language. Please contact me on leakforums to add translation or change language to english.|





"
416,DangerCove/reign-for-spotify,Objective-C,"# Overview

Reign for Spotify is a remote for friends, colleagues, housemates and yourself that works in any browser.
It's available for download on the [Mac App Store](https://itunes.apple.com/en/app/reign-for-spotify/id553794498?mt=12).

What makes Reign unique is that it uses a web page to feed commands to Spotify. Making any device with a web browser a potential remote; iPhone/Android phones, tablets, but also Playstation Vita's, e-Readers etc.

![Reign for Spotify](https://fbcdn-sphotos-e-a.akamaihd.net/hphotos-ak-prn1/66291_454088921295852_55691272_n.jpg)

Reign works on 64bit Macs running OS X 10.7 and up.

# Cloning

Reign relies on the [LaunchAtLoginHelper](https://github.com/kgn/LaunchAtLoginHelper) git submodule, so clone Reign as follows:

    $ git clone --recursive https://github.com/DangerCove/reign-for-spotify.git

# Compiling

## Opening the project

* Double click the `SpotifyRemoteWorkspace.xcworkspace` to open the project in Xcode.

## Quick look around

* The workspace consists of two projects: Reign and a Helper. The Helper is used to launch Reign on startup;
* There are build schemes for App Store and Non App Store distribution;
* Some code (like the preferences window) differs between App Store and Non App Store (mainly because of Sparkle);
* The Server opens a http socket using CocoaHTTPServer, broadcasts it using Bonjour and feeds commands to Spotify using AppleScript;
* The Client uses CocoAsyncSocket looks around for other Reign servers;
* Comments are minimal, sorry, might fix that later.

## Things you need to add

* The App Store build uses [Receigen](http://receigen.etiemble.com/) for receipt validation, remove the build step and code in main.m if you don't have it;
* Related to Receigen, this repo relies on a statically linked OpenSSL library. Clear the `User Header Search Path` to remove it.
* The dsa_pub.pem file for Sparkle is obviously missing.

# Purpose and pull-requests

* For me, this is a pet project, but we'll try our best to merge additions to our code;
* Bug-fixes and other stuff I can learn from are awesome;
* New features are great.

# Credits

Robbie Hanson - [CocoaAsyncSocket](https://github.com/robbiehanson/CocoaAsyncSocket)

Robbie Hanson - [CocoaHTTPServer](https://github.com/robbiehanson/CocoaHTTPServer)

Robbie Hanson - [CocoaLumberjack](https://github.com/robbiehanson/CocoaLumberjack)

Ahmet Ardal - [DisableSubviews](https://github.com/ardalahmet/DisableSubviews)

Vadim Shpakovski - [MASPreferences](https://github.com/shpakovski/MASPreferences)

David Keegan - [LaunchAtLoginHelper](https://github.com/kgn/LaunchAtLoginHelper)

Andy Matuschak - [Sparkle](http://sparkle.andymatuschak.org/)

# Contributors

Boy van Amstel - [boyvanamstel](https://github.com/boyvanamstel)

Dan Gilbert - [daentech](https://github.com/daentech)

# License for the rest of it

New BSD License, see `LICENSE` for details.
"
417,hedwiggggg/spotify-ripper-web,Vue,"# spotify-ripper-web
## Introduction

This repository aimed to create an easy-to-use web interface for the spotify-ripper. Archiving this goal I had the following point in the back of my head:

- Parallel downloads of multiple users

So I decided on the following project structure:

spotify-ripper-docker:
- This is just a dockerized version of the spotify-ripper, including some adjustments to better handle the standard data streams and bring them to the web interface.

spotify-ripper-web-backend:
- This is a node.js application which communicates with the frontend via websockets.
- It creates and starts new containers and forwards the standard data streams to the UI via Websocket.

spotify-ripper-web-frontend:
- This is a vue.js spa, communicating with the node.js backend; Here you can also finally download the music.

## Things that aren't so beautiful:

- The project actually consists of three projects, which would probably have been much more intelligent to separate.
- No TDD; not even the vue.js project
- Implemented the spotify-ripper as a zip file; this would also be a separate project...
- Not as much use of environment vars as I should have; there are some things hardcoded, like the websocket port
- Not the worst and ugliest code; but alsonot the cleanest one..

## Installation

The installation should be quite simple by dockerization.

### Prequesites

1. Installing docker and docker-compose
2. rename `.env.example` to `.env` and change the path according tr environment.
3. add your `spotify_appkey.key` to the `spotify-ripper-docker` folder
4. (adjust `docker-compose.yml` to mount your docker.sock)

### Run the application

To do this you can simply run `docker-compose up --build` (Depending on how you configured Docker, sudo may be required)
    
FYI: This whole repo is optimized and tested on Ubuntu 18.04.
    
If all went well, it should look something like this: (remember that port 3000 is in the container and mapped outside by your adjustments in the `docker-compose.yml`)
    
![Console](/screenshots/screenshot_1.png ""Console"")
    
Then you should be able to access it by `http://localhost:<your_port>/web/`

## Screenshots

![spotify-ripper web-ui](/screenshots/screenshot_2.png ""spotify-ripper web-ui"")
![spotify-ripper web-ui](/screenshots/screenshot_3.png ""spotify-ripper web-ui"")
![spotify-ripper web-ui](/screenshots/screenshot_4.png ""spotify-ripper web-ui"")
![spotify-ripper web-ui](/screenshots/screenshot_5.png ""spotify-ripper web-ui"")
"
418,TomerAberbach/spotify-true-random,JavaScript,"# True Random For Spotify

> An application for unbiased truly random playlist and library shuffling with Spotify.

See it in action [here](https://tomeraberba.ch/spotify-true-random).

## Contributing

Stars are always welcome!

For bugs and feature requests, [please create an issue](https://github.com/TomerAberbach/spotify-true-random/issues/new).

## License

[MIT](https://github.com/TomerAberbach/spotify-true-random/blob/main/license) © [Tomer Aberbach](https://github.com/TomerAberbach)
"
419,nations/spoticord,JavaScript,"# **Deprecated**
**In favor of [Discord's Spotify Connection](https://support.discordapp.com/hc/en-us/articles/360000167212).**

# spoticord `0.0.4` [![discordxd](https://discordapp.com/api/guilds/297142682894073856/embed.png)](https://discord.gg/nations)
**Display your current Spotify song on Discord using the RPC API:**
![N|Solid](https://s.phineas.io/share/68747470733acx.png)

## Dependencies
  - NodeJS >=8
  - npm (>=5) or Yarn (>=1.2)
  - Discord Canary (preferred)
  - Spotify >= 1.0
  - Git

## Setup

  - Clone the repo `git clone https://github.com/nations/spoticord.git`
  - Install the modules `npm i` or `yarn`
  - Open Discord & Spotify
  - Start the RPC app `node app.js`
  
## How to run in the background

  - Install pm2 `npm i pm2 -g`
  - Start the app `pm2 start app.js --name=""spoticord""`
  - Use `pm2 log spoticord` to view the logs
  - Restart the app using `pm2 restart spoticord`

## Updating
  - To update SpotiCord, enter the ""spoticord"" directory and run `git fetch` in your terminal.

## FAQ
  Q: Can I get banned or punished by Discord for using this?  
  A: **No. The RPC was made by Discord themselves and Spoticord has been recommended by Discord staff**

  Q: I don't see the progress bar, where's it gone?  
  A: **Make sure you're using Discord Canary. Even still, Discord might remove this feature from time to time to update it since canary is a development version of Discord.**

  Q: Can I host this on an external server?  
  A: **No, the Discord RPC api runs on your local Discord client, and unless you want to port forward a few things and create necessary firewall rules to do it, it's not worth it. You'd have to repeat that with the Spotify web helper api, too.**

  Q: I'm not experienced with this scope of programming, are there any tutorials?  
  A: **Yes! I found a few on YouTube:**  
        - https://www.youtube.com/watch?v=9Gsop2h64Uo  
        - https://www.youtube.com/watch?v=bTP2t6VgAv8  
        - https://www.youtube.com/watch?v=KhQtXUH4jlU  
        - https://www.youtube.com/watch?v=Rntn6Jg8cHk


  Q: I found an obscure error not mentioned in the troubleshooting section, what should I do?  
  A: **First, check the closed (and open) issues on this repo, we might have answered it there already. If not, create a new one with the WHOLE error and when it occurred (during start, runtime, etc). Thank you!**

## Useful links

* [RPC API Documentation](https://discordapp.com/developers/docs/topics/rpc)
* [Rich Presence Documentation](https://discordapp.com/developers/docs/rich-presence/how-to)

## Troubleshooting
### It says the song is being updated but it isn't being displayed on my profile?
  - Go to Discord settings
  - Go to ""Games""
  - Make sure ""Display currently running game as a status message"" is ticked

### Invalid token function (or something similar)
  - Make sure your node is updated, you need at LEAST version 8.0.0!

### `stdout maxBuffer exceeded` or some XML/CSV parse error
  - This is due to an outdated library which tries to help with Windows support
  - Go to node_modules, go to wintools, go to lib
  - Open ps.js
  - On line 11, replace the whole line with:
  `exec('wmic process list /format:csv', {maxBuffer: 2000*1024}, function (err, stdout, stderr) {`
"
420,rapito/go-spotify,Go,"go-spotify
==========

[![GoDoc](https://godoc.org/github.com/rapito/go-spotify/spotify?status.svg)](https://godoc.org/github.com/rapito/go-spotify/spotify)  [![baby-gopher](https://raw.github.com/drnic/babygopher-site/gh-pages/images/babygopher-logo-small.png)](http://www.babygopher.org)

Simple Go library for the Spotify Web API


Installation
------------
```
go get github.com/rapito/go-spotify/spotify
```

How-to-use
----------

- Get Requests

```
    import ""fmt""
    import ""github.com/rapito/go-spotify/spotify""
    ...
    
    spot := spotify.New(clientID,clientSecret)
    result, _ := spot.Get(""albums/%s"", nil, ""0sNOF9WDwhWunNAHPD3Baj"")
    
    fmt.Println(string(result))
```

- Check out the *examples* folder for simple usage.
- Read some of the tests at *spotify_test.go* for more examples.

Contribution
------------
 
 - You may fork this library and modify it as you please.
 - You can make a pull request and I will be happy to check it out and merge it.
 - If you find a bug, create an issue and I will do my best to fix it (someday). 

Constraints
-------------

Right now this API version can only make successful GET requests since 
it just authenticates the application and not an specific user. 
This means you can use limited endpoints of spotify WEB API, as 
documented on their web page:

```
The access token allows you to make requests to the Spotify Web 
API endpoints that do not require user authorization such as the Get a 
track endpoint...
```

To see which endpoints you have access to, check out spotify web-api 
[documentation.](https://developer.spotify.com/web-api/)

Buy me a Drink
-------------
[![Donate](https://img.shields.io/badge/Donate-PayPal-green.svg)](https://www.paypal.com/donate?hosted_button_id=FFC6KNAX9SKZU)

Links
-----

While I was on my *go-trip* to create this api, I found some awesome libs/links which made 
my life easier.
Check them out, hopefully they'll do the same for you:
 
 - http://github.com/parnurzeal/gorequest
 - http://github.com/bmizerany/assert
 - http://github.com/bitly/go-simplejson
 - http://github.com/avelino/awesome-go
 
 Other APIs
 ----------
 
 - http://github.com/rapito/go-shopify
 
 
"
421,pesaventofilippo/spotipybot,Python,"# SpotiPyBot
A Python-written bot that can generate automatic listens to a given playlist.\
It now supports multi-account, multithreading and headless Chrome!

## Usage
* First, clone this repo on your local machine with\
```$ git clone https://github.com/pesaventofilippo/spotifybot.git```

* Then, download the right **chromedriver** for your Chrome version from [here](http://chromedriver.chromium.org/downloads) and put it under the ```drivers``` subfolder

* Create a list of Spotify profiles for this program to use and write it in ```data/profiles.json```.\
Example:\
```{```\
```    ""credentials"": [```\
```        {""username"": ""firstprofile@example.com"",```\
```            ""password"": ""first_password""},```\
```        {""username"": ""secondprofile@example.com"",```\
```            ""password"": ""second_password""}```\
```        {""username"": ""thirdprofile@example.com"",```\
```            ""password"": ""third_password""}```\
```    ]```\
```}```

* Done! You can now simply run the bot with\
```$ python3.6 main.py [options]```

## Run options
These are optionals parameters, they are not mandatory to run the program.

* ```--headless``` puts Chrome in headless mode, useful if you do not have a DE
"
422,volsahin/bottomify-navigation-view,Kotlin,"# bottomify-navigation-view
A nice looking Spotify like bottom navigation view

![alt tag](https://github.com/volsahin/bottomify-navigation-view/blob/develop/assets/bottomify.gif)
![alt tag](https://github.com/volsahin/bottomify-navigation-view/blob/develop/assets/spotify_bottom.png)

## Usage

### Create Menu File

Create a menu file below resource folder. Right click to res then New > Android Resource File, type a file name and make sure you choose ResourceType as Menu. Here is a sample menu file. You can add android:checked=""true"" if you want that menu item active at the begin

```xml

<?xml version=""1.0"" encoding=""utf-8""?>
<menu xmlns:android=""http://schemas.android.com/apk/res/android"">
    <item
        android:id=""@+id/action_home""
        android:icon=""@drawable/ic_home_black_24dp""
        android:checked=""true""
        android:title=""@string/home"" />
    <item
        android:id=""@+id/action_browse""
        android:icon=""@drawable/ic_speaker_group_black_24dp""
        android:title=""@string/browse"" />
    <item
        android:id=""@+id/action_search""
        android:icon=""@drawable/ic_search_black_24dp""
        android:title=""@string/search"" />
    <item
        android:id=""@+id/action_radio""
        android:icon=""@drawable/ic_radio_black_24dp""
        android:title=""@string/radio"" />
    <item
        android:id=""@+id/action_library""
        android:icon=""@drawable/ic_library_music_black_24dp""
        android:title=""@string/your_library"" />
</menu>

```

### Bottomify to Layout

Add Bottomify in your layout xml

```xml
    <com.volcaniccoder.bottomify.BottomifyNavigationView
        android:id=""@+id/bottomify_nav""
        android:layout_width=""match_parent""
        android:layout_height=""wrap_content""
        android:background=""@color/bottomifyBackgroundColor""
        android:orientation=""horizontal""
        app:menu=""@menu/navigation_items""
        app:active_color=""@color/bottomifyActiveColor""
        app:passive_color=""@color/bottomifyPassiveColor""
        app:pressed_color=""@color/bottomifyPressedColor""
        app:item_text_size=""10sp""
        app:item_padding=""4dp""
        app:animation_duration=""300""
        app:scale_percent=""5"" />
}

```

Here are some comments about what xml attributes do

```kotlin

       /**
         * app:menu -> Provide a menu for bottom view items
         * app:active_color -> The color of the active and choosen menu item
         * app:passive_color -> The color of non active menu items
         * app:pressed_color -> The color when you press on menu item
         * app:item_text_size -> The size of the menu item text
         * app:item_padding -> The padding of the menu item
         * app:animation_duration=""300"" -> The amount of time of the click animation
         * app:scale_percent=""5"" -> The percent of downsizing animation. If its 50 view will downsize to half and full again
         */

```
    
### Code Side

If you want to be notified about the change of navigation item you can implement OnNavigationItemChangeListener

```kotlin

        val bottomify = findViewById<BottomifyNavigationView>(R.id.bottomify_nav)
        bottomify.setOnNavigationItemChangedListener(object : OnNavigationItemChangeListener {
            override fun onNavigationItemChanged(navigationItem: BottomifyNavigationView.NavigationItem) {
                Toast.makeText(this@MainActivity,
                        ""Selected item at index ${navigationItem.position}"",
                        Toast.LENGTH_SHORT).show()
            }
        })

```
If you want to set active item not by a click but programmatically

```kotlin
        bottomify.setActiveNavigationIndex(2)
```

## Influence

### Spotify

<img src=""https://lh3.googleusercontent.com/UrY7BAZ-XfXGpfkeWg0zCCeo-7ras4DCoRalC_WXXWTK9q5b0Iw7B0YQMsVxZaNB7DM=s360-rw"" 
height=""128"" width=""128"">

This project influenced by Spotify's good looking bottom bar
## Download

### Step 1. Add the JitPack repository to your build file

Add it in your root build.gradle at the end of repositories:

```groovy

	allprojects {
		repositories {
			...
			maven { url 'https://jitpack.io' }
		}
	}
```

### Step 2. Add the dependency

```groovy

  	dependencies {
		implementation 'com.github.volsahin:bottomify-navigation-view:1.0.2'
	}
```

## License

    Copyright 2018 Volkan Şahin

    Licensed under the Apache License, Version 2.0 (the ""License"");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an ""AS IS"" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.



"
423,ThomasBrace/Ubersicht-Spotify-widget,CoffeeScript,"Ubersicht-Spotify-widget
==========================

Using Ubersicht displays current track palying in spotify on you desktop.

Link to Ubersicht http://tracesof.net/uebersicht/#comment-1445259628

Drop SpotifyCurrentTrack.coffee in you Ubersicht widgets folder and away you go!

You may need to adjust the ""top"" and ""left"" position to suite your display


"
424,platzi/ror-musicapp,Ruby,"- Bienvenido a la segunda clase del curso de Ruby on Rails
"
425,m1entus/SpotifyImporter,Objective-C,"# Spotify Playlist Importer to Apple Music

OS X which help you to import your playlist from Spotify to Apple Music. Inspired by [spotify2am](https://github.com/simonschellaert/spotify2am) am which didn't work for me :D

### [Downwload DMG](https://raw.github.com/m1entus/SpotifyImporter/master/SpotifyImporter.dmg)


[![](https://raw.github.com/m1entus/SpotifyImporter/master/Screens/screen1.png)](https://raw.github.com/m1entus/SpotifyImporter/master/Screens/screen1.png)

## Why ?
I created this project before [@maciej's Playlist Importer](https://lupin.rocks/entry/seamlessly-import-your-spotify-playlists-into-itunes) show up, i am iOS developer and i wanted to try OS X development. Disadvantage of @maciej's Playlist Importer is that you have to leave your Mac for a some time and it can't import your songs in background. This project disadvantage it that you have to sniff iTunes packet to get your account identifiers and cookie but it works in background!

# Usage

## 1. Export from Spotify and import to SpotiyImporter

1. Export the Spotify URIs

You can copy as many as you want, but remember - only single track URIs are supported. This is how it should look like:

[![](https://raw.github.com/m1entus/SpotifyImporter/master/Screens/screen2.png)](https://raw.github.com/m1entus/SpotifyImporter/master/Screens/screen2.png)

2. Export the Spotify songs to an CSV File

The first step is getting the songs you want to import into Apple Music into a CSV file. The simplest way to do this is using [Exportify](https://rawgit.com/watsonbox/exportify/master/exportify.html).
If you want to export you whole Spotify library, simply create a new playlist called All and drag your whole library into it using the Spotify desktop app. You can then export the playlist All using Exportify. Save the resulting file as spotify.csv in the same directory as the directory you cloned this repo into.

## 2. Use an intercepting proxy to retrieve the Apple Music request headers

We are going to retrieve cookie data from iTunes using Charles Proxy.

1. From the Menu Proxy go to SSL Proxy Settings

2. Check 'Enable SSL Proxying'

3. Click on add and insert '*itunes.apple.com'

4. In the same Menu check on 'Mac OS X Proxy'

5. Go to iTunes go to an Apple Music playlist but don't do nothing

6. Check you have enabled recording (please refer to image below)

7. When recording is enabled add the playlist to my Music

[![](https://raw.github.com/m1entus/SpotifyImporter/master/Screens/screen3_thumb.png)](https://raw.github.com/m1entus/SpotifyImporter/master/Screens/screen3.png)

Application simply compares the title and artist to find out if a Spotify and Apple Music song match, additionaly if some of this didn't match i am calculating matching score based on title of song. Some songs don't have the exact same title (extraneous spacing for example) in both services.
"
426,areevesman/spotify-wrapped,Jupyter Notebook,"# Spotify Wrapped: Data Visualization and Machine Learning on Your Top Songs

This repository contains the code and data used to accompany the blog post above. It can be accessed [here](https://towardsdatascience.com/spotify-wrapped-data-visualization-and-machine-learning-on-your-top-songs-1d3f837a9b27).
"
427,matpandino/spotify-ui-clone,TypeScript,"## Spotify UI Clone
Simple Spotify UI Clone built using React + Typescript + Electron.

I also built [this template](https://www.figma.com/file/a2pddLAC6Nf3C3UZpxeQct/Spotify?node-id=0%3A1) on Figma if you are interested.

![spotify-clone](./.github/spotify-clone.jpg)

## Installation

Use a package manager of your choice (npm, yarn, etc.) in order to install all dependencies

```bash
npm install
```

```bash
yarn install
```

## Usage
In order to run this project 2 scripts will need to be executed `dev:react` and `dev:electron`, run each one in a different terminal and always run `dev:react` before `dev:electron`, or `dev` to run them in order automatically

```bash
npm run dev:react
```
```bash
npm run dev:electron
```

or

```bash
npm run dev
```

## Packaging
To generate a project package run `package`

```bash
npm run package
```



## Contributing

Pull requests are always welcome 😃.

## License

[MIT](https://choosealicense.com/licenses/mit/)
"
428,Comfy-Themes/Spicetify,CSS,"### ✅ Supported -> Spicetify 2.12.0, Spotify 1.1.92.

---

![Banner](https://comfy-themes.github.io/Spicetify/banner.png)

---

![Preview](https://comfy-themes.github.io/Spicetify/Comfy/preview/preview.png)

### 📥 Automatic Installation

---

Windows -> **PowerShell**:

```powershell
iwr -useb https://raw.githubusercontent.com/NYRI4/Comfy-spicetify/main/install.ps1 | iex
```

macOS and Linux -> **Bash**:

```bash
curl -fsSL https://raw.githubusercontent.com/NYRI4/Comfy-spicetify/main/install.sh | sh
```

### 📥 Manual Installation

---

### Downloading Comfy.

CD into your `Themes` folder in `.spicetify` and run :

```sh
git clone https://github.com/Comfy-Themes/Spicetify
```

Rename the folder to `Comfy` and run these commands to apply :

```powershell
spicetify config current_theme Comfy
spicetify config color_scheme <option>
spicetify config inject_css 1 replace_colors 1 overwrite_assets 1
spicetify apply
```

### Enabling the Comfy extension.

Windows -> **Powershell**:

```powershell
cd ""$(spicetify -c | Split-Path)\Themes\Comfy""
Copy-Item comfy.js ..\..\Extensions
spicetify config extensions comfy.js
spicetify apply
```

macOS and Linux -> **Bash**:

```bash
cd ""$(dirname ""$(spicetify -c)"")/Themes/Comfy""
mkdir -p ../../Extensions
cp comfy.js ../../Extensions/.
spicetify config extensions comfy.js
spicetify apply
```

### ⚠️️ Warning

---

The theme automatically updates for users using the version of Spicetify equals or greater than `2.8.2`, however, for the users that don't want to update Spicetify to the newest version:

1. Go [here](https://comfy-themes.github.io/Spicetify/Comfy/comfy.script.js)
2. Copy the whole code (sorry for the flashbang)
3. Go into the Spicetify extension folder
4. Open the `comfy.js` file, paste the code and **save it**
5. Afterwards, in a terminal, run `spicetify apply`
6. Enjoy !

For the users that don't want to update Spicetify to the newest version, do the same with [this](https://comfy-themes.github.io/Spicetify/Comfy/app.css) and paste it in the `user.css` replacing the `@import`.

### 🖌️ Customization

---

Go into your theme folder and open either :

`color.ini` for the colors

`user.css` to modify the code
"
429,JulienMaille/dribbblish-dynamic-theme,JavaScript,"# ❗Dribbblish Dynamic development is on hold❗
**Due to the many changes made by Spotify, Spicetify's functionality is regularly compromised.
And when it is restored, this theme requires updates and complete rewrites of certain portions of the code.
Since I don't have time to do weekly maintenance, I prefer to put this repository on pause.
If you have the will and the skills to contribute to the patches, you can contact me.**

# Dribbblish Dynamic
A theme for [Spicetify](https://github.com/khanhas/spicetify-cli)

<a href=""https://github.com/JulienMaille/dribbblish-dynamic-theme/releases/latest""><img src=""https://img.shields.io/github/release/JulienMaille/dribbblish-dynamic-theme/all.svg""></a>
<a href=""https://github.com/JulienMaille/dribbblish-dynamic-theme/releases""><img src=""https://img.shields.io/github/downloads/JulienMaille/dribbblish-dynamic-theme/total.svg""></a>

### Preview

<img src=""https://raw.githubusercontent.com/JulienMaille/dribbblish-dynamic-theme/main/showcase-images/preview.gif"" alt=""img"" width=""500px""> 

##  Features
### Resizable sidebar

<img src=""https://raw.githubusercontent.com/JulienMaille/dribbblish-dynamic-theme/main/showcase-images/resize-sidebar.png"" alt=""img"" width=""500px""> 

### Customizable sidebar
Rearrange icons positions, stick icons to header or hide unnecessary to save space.
Turn on ""Sidebar config"" mode in Profile menu and hover on icon to show control buttons.
After you finish customizing, turn off Config mode in Profile menu to save.

<img src=""https://raw.githubusercontent.com/JulienMaille/dribbblish-dynamic-theme/main/showcase-images/customize-sidebar.png"" alt=""img"" width=""500px""> 

### Playlist Folder image
Right click at folder and choose images for your playlist folder. Every image formats supported by Chrome can be used, but do keep image size small and in compressed format.

<img src=""https://raw.githubusercontent.com/JulienMaille/dribbblish-dynamic-theme/main/showcase-images/playlist-folders.gif"" alt=""img"" width=""500px""> 

### Left/Right expanded cover
In profile menu, toggle option ""Right expanded cover"" to change expanded current track cover image to left or right side, wherever you prefer.

## Install / Update
Make sure you are using latest releases of Spicetify and Spotify

### Windows (PowerShell)
```powershell
Invoke-WebRequest -UseBasicParsing ""https://raw.githubusercontent.com/JulienMaille/dribbblish-dynamic-theme/master/install.ps1"" | Invoke-Expression
```

### Linux/MacOS (Bash)
```bash
curl -fsSL https://raw.githubusercontent.com/JulienMaille/dribbblish-dynamic-theme/master/install.sh | sh
```

### Manual Install
1. Download the latest [DribbblishDynamic_vX.X.X.zip](https://github.com/JulienMaille/dribbblish-dynamic-theme/releases/latest)
2. Extract the files to your [Spicetify/Themes folder](https://spicetify.app/docs/development/customization#themes)
3. Copy `dribbblish-dynamic.js` to your [Spicetify/Extensions folder](https://spicetify.app/docs/advanced-usage/extensions#installing)
4. Add the 2 lines in `[Patch]` section of the config file (see details below)
5. Run:
     ```
     spicetify config extensions dribbblish-dynamic.js
     spicetify config current_theme DribbblishDynamic
     spicetify config color_scheme base
     spicetify config inject_css 1 replace_colors 1 overwrite_assets 1
     spicetify apply
     ```

## IMPORTANT!
From Spotify > v1.1.62, in sidebar, they use an adaptive render mechanic to actively show and hide items on scroll. It helps reducing number of items to render, hence there is significant performance boost if you have a large playlists collection. But the drawbacks is that item height is hard-coded, it messes up user interaction when we explicitly change, in CSS, playlist item height bigger than original value. So you need to add these 2 lines in Patch section in config file:
```ini
[Patch]
xpui.js_find_8008 = ,(\w+=)32,
xpui.js_repl_8008 = ,${1}58,
```

## Hide Window Controls
Windows user, please edit your Spotify shortcut and add flag `--transparent-window-controls` after the Spotify.exe:
To edit a taskbar shortcut, right click it, then right click Spotify in the list again.

<img src=""https://raw.githubusercontent.com/JulienMaille/dribbblish-dynamic-theme/main/showcase-images/windows-shortcut-instruction.png"" alt=""img""> 

In addition to `--transparent-window-controls` you can set `Windows Top Bars` to `Solid` or `Transparent` to look like this:

<img src=""https://raw.githubusercontent.com/JulienMaille/dribbblish-dynamic-theme/main/showcase-images/top-bars.png"" alt=""img"" width=""500px""> 

## Follow system dark/light theme (Powershell)
Automatic dark mode should work on MacOs and Linux out of the box.
From Spotify > v1.1.70, dark mode is forced in Windows builds. You will need to patch Spotify.exe using this script:
```powershell
Invoke-WebRequest -UseBasicParsing ""https://raw.githubusercontent.com/JulienMaille/dribbblish-dynamic-theme/master/patch-dark-mode.ps1"" | Invoke-Expression
```

## Uninstall
### Windows (PowerShell)
```powershell
Invoke-WebRequest -UseBasicParsing ""https://raw.githubusercontent.com/JulienMaille/dribbblish-dynamic-theme/master/uninstall.ps1"" | Invoke-Expression
```

### Linux/MacOS (Bash)
```bash
curl -fsSL https://raw.githubusercontent.com/JulienMaille/dribbblish-dynamic-theme/master/uninstall.sh | sh
```

### Manual Uninstall
1. Remove Patch lines you added in config file earlier.
2. Run:
    ```
    spicetify config current_theme "" "" extensions dribbblish-dynamic.js-
    spicetify apply
    ```
"
430,bmsimons/dotnet-core-spotify-authentication,C#,"# dotnet-core-spotify-authentication

A web API app built on .NET Core to show how the Spotify authentication flow works.
Almost identical to the 'authorization_code' example from the official [Spotify repo](https://github.com/spotify/web-api-auth-examples), which is written in Node.

Want to learn more about Spotify app authentication flow? Please check [this page of their documentation](https://developer.spotify.com/web-api/authorization-guide/).

# Prerequisites

You just need to have the .NET Core SDK installed. And you need a Spotify account :)

# Installation guide

```
git clone https://github.com/bmsimons/dotnet-core-spotify-authentication.git
cd dotnet-core-spotify-authentication
dotnet run
```

# Configuration guide

Don't forget to replace the client ID and client secret in SpotifyController.cs.
Oh, and please add the callback URL to the whitelist of your app. You can do that on your [Spotify app dashboard](https://beta.developer.spotify.com/dashboard/applications).

# Any questions?

Feel free to contact me :)


"
431,timdorr/spotifeed,Ruby,"<p align=""center"">
  <img src=""https://media.giphy.com/media/f9SyS82mgPi4vYeppV/giphy.gif"">
</p>

<h3 align=""center"">
  Spotifeed
</h3>

<p align=""center"">
  A Spotify Podcast RSS Feed Generator
</p>

---

A simple service to serve up Spotify podcasts as RSS feeds for use in any podcast app. 


Just take the show ID from the end of the Show Link on Spotify and put it at the end of `https://spotifeed.timdorr.com/`, like so:

```
https://open.spotify.com/show/4rOoJ6Egrf8K2IrywzwOMk -> https://spotifeed.timdorr.com/4rOoJ6Egrf8K2IrywzwOMk
```


###### _Spotify® is a trademark of Spotify AB which does not sponsor, authorize, or endorse this project._
"
432,arnaud512/worldify,TypeScript,"[![Build Status](https://travis-ci.com/arnaud512/worldify.svg?branch=master)](https://travis-ci.com/arnaud512/worldify)
[![Quality Gate](https://sonarcloud.io/api/project_badges/measure?project=worldify&metric=alert_status)](https://sonarcloud.io/dashboard/index/worldify)
[![Quality Gate](https://sonarcloud.io/api/project_badges/measure?project=worldify&metric=ncloc)](https://sonarcloud.io/dashboard/index/worldify)

# Worldify

Get the Spotify content based on your favorite country!

## Motivation

Spotify has great playlists prepared for each country, changing according to the time of day.
The problem is that you can’t see playlists featured from other countries.
This is where Worldify comes in.

![Screenshow worldify](https://github.com/arnaud512/worldify/raw/master/src/assets/worldify.png ""Worldify"")


From its web interface, you can access playlists from many countries and open them directly in the spotify app.
With Worldify, you will be able to discover new categories that you would not have discovered with the Spotify app.

## Development server

Run `ng serve` for a dev server. Navigate to `http://localhost:4200/`. The app will automatically reload if you change any of the source files.

## Code scaffolding

Run `ng generate component component-name` to generate a new component. You can also use `ng generate directive|pipe|service|class|guard|interface|enum|module`.

## Build

Run `ng build` to build the project. The build artifacts will be stored in the `dist/` directory. Use the `--prod` flag for a production build.


## Running unit tests

Run `ng test` to execute the unit tests via [Karma](https://karma-runner.github.io).

## Running end-to-end tests

Run `ng e2e` to execute the end-to-end tests via [Protractor](http://www.protractortest.org/).

## Further help

To get more help on the Angular CLI use `ng help` or go check out the [Angular CLI README](https://github.com/angular/angular-cli/blob/master/README.md).

## Build and push to docker
`ng build --prod`
`docker image build -t arnaud512/spotify-featured:latest .`
`docker push arnaud512/spotify-featured:latest`

OR

`npm run push`
"
433,rpotter12/spotify-downloader-music-player,Python,"# spotify-downloader-music-player

- A GUI version of [spotify-downloder](https://github.com/ritiek/spotify-downloader) of [Ritiek Malhotra](https://github.com/ritiek).
- It is one kind of mp3 music player which can download musics.
- It can download music from YouTube in MP3 format and can play them.
- It can download songs directly by typing name or typing the link.
- It can download the whole album by the link.

## Technologies
- python
- tkinter(GUI library) 

Tkinter is a Python binding to the Tk GUI toolkit. It is the standard Python interface to the Tk GUI toolkit, and is Python's de facto standard GUI. Tkinter is included with standard Linux, Microsoft Windows and Mac OS X installs of Python. The name Tkinter comes from Tk interface.

## Requirements installation
- `sudo apt install python3-tk`

## How to install the project into PC
- `pip3 install spotpl`
- `spotpl`

## Contributing
  Check out [CONTRIBUTING.md](https://github.com/rpotter12/spotify-downloader-music-player/blob/master/CONTRIBUTING.md) for more info.

## License 
  [MIT License](https://github.com/rpotter12/spotify-downloader-music-player/blob/master/LICENSE)

(If you like the project, support us by staring the project)
"
434,Raptor123471/DingoLingo,Python,"![](https://repository-images.githubusercontent.com/286907609/eb884086-46d8-44bf-95c1-fc2ed8362122) 

# !!Activity Update!!
### This repository has been inactive since 1/18/22

I am returning after a long absence to find more activity in this repository than I expected. This project is a bot I wrote for a 24 person guild and I started with minimal Python experience. Because of this, there are many mistakes and odd choices in this bot's code.

### Rewrite: For simplicity
I am currently re-writing the bot to be cleaner (attempted), commented, and only support basic useful music needs. I am planning to support discord.py v2.0 and slash commands. There is no timeline on this project. When it is done, I will publish the updates to this repository.

### What now?
I will ensure that the current code functions and has no major breaking issues.

# DingoLingo
A Discord music bot written in Python with support for Youtube, SoundCloud, Spotify, Bandcamp, Twitter, and custom files.

### Keep in mind:
* The Wiki may have the answer you are looking for https://github.com/Raptor123471/DingoLingo/wiki
* Known problems are listed in Issues. If you are interested in this project feel free to submit an Issue.


<h3>What's Coming?</h1>

  - See TODO in Projects tab

## Prerequisites:

#### API Keys
* Discord - https://discord.com/developers
* Spotify (optional) - https://developer.spotify.com/dashboard/
  - Client ID
  - Client Secret
  - Note: Limited to 50 playlist items without API

Obtained keys must be entered into ```config/config.py```

#### Requirements

* Installation of Python 3.7+

Install dependancies:
```
pip install -r requirements.txt
```
* Located in ```/config```

For Linux:
* ffmpeg
* libffi-dev 
* libnacl-dev 

### Installing - Self hosting

1. Download release if available, alternatively download repository zip
2. Complete Prerequisites
3. Start ```run.py``` in project root
4. See configuration options in /config/config.py

Button play plugin:
* Set emoji with the setting command to enable this feature
* Emote must be in same server as bot
* Needs Manage Message permissions

Custom Cookies:
* Extract cookies.txt from you browser using your preferred method
* Overwrite the existing cookies.txt in /config/cookies/
* (Optional) Set a custom cookies.txt location by modifying COOKIE_PATH in config.py

## Commands:

### Music

After the bot has joined your server, use ```$help``` to display help and command information.


```
$p [link/video title/key words/playlist-link/soundcloud link/spotify link/bandcamp link/twitter link]
```

* Plays the audio of supported website
    - A link to the video (https://ww...)
    - The title of a video ex. (Gennifer Flowers - Fever Dolls)
    - A link to a YouTube playlist
* If a song is playing, it will be added to queue

#### Playlist Commands

```
$skip / $s
```

* Skips the current song and plays next in queue.

```
$q
```

* Show the list of songs in queue

```
$shuffle /$sh
```

* Shuffle the queue

```
$l / $loop
```

* Loop the current playing song, toggle on/off

```
$mv / $move
```

* Move song position in queue

#### Audio Commands

```
$pause
```

* Pauses the current song.

```
$resume
```

* Resumes the paused song.

```
$prev
```

* Goes back one song and plays the last song again.

```
$np
```

* Shows more details about the current song.

```
$volume / $vol
```

* Adjust the volume 1-100%
* Pass no arguments for current volume

```
$stop / $st
```
* Stops the current song and clears the playqueue.


### General

```
$settings /$setting/ $set
```
* No Arguments: Lists server settings
* Arguments: (setting) (value)
* Use ""unset"" as an argument to reset a setting
* Example: $setting start_voice_channel ChannelName
* Administrators only

```
$c
```

* Connects the bot to the user's voice channel

```
$cc
```

* Switch the bot to the user's voice channel

```
$dc
```

* Disconnects the bot from the current voice channel

```
$history
```
* Shows you the titles of the X last played songs. Configurable in config.config.py


### Utility

```
$reset / $rs
```

* Disconnect and reconnect to the voice channel

```
$ping
```

* Test bot connectivity

```
$addbot
```

* Displays information on how to add the bot to another server of yours.

## License

This program is free software: you can redistribute it and/or modify
it under the terms of the [GNU General Public License](LICENSE.txt) as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.


## Acknowledgments

https://github.com/adriansteffan/DiscordJockey
"
435,calluswhatyouwant/spotify-web-sdk,TypeScript,"# Spotify Web SDK

A JavaScript SDK for the [Spotify Web API](https://developer.spotify.com/documentation/web-api/).
Note that this project is still a BETA version.

## Table of Contents

-   [Features](#features)
-   [Installation](#installation)
-   [Usage](#usage)
-   [Community](#community)
    -   [Suggest a new feature or report a bug](#suggest-a-new-feature-or-report-a-bug)
    -   [Do it yourself](#do-it-yourself)
    -   [Maintainers](#maintainers)
    -   [Hall of Fame](#hall-of-fame)
-   [License](#license)

## Features

### ""Why should I use this?""

We want to handle the hard work for you.
Even to make simple requests, such as to get information on a track, you'd need to make a bunch of setups.
Here is how you could do the same thing with our aid:

```javascript
import * as spotify from 'spotify-web-sdk';
spotify.init({ token: 'YOUR SPOTIFY TOKEN HERE!' }); // You should only need to run this once.
spotify.getTrack('3LOpHuEpjkL4T1Zcjhko8w'); // Or any other track id.
```

Yes, it's as simple as that!

### ""I still think it's no hard work at all. Therefore, I don't see the point in using this.""

How rude!
As you might have noticed, this is an open source project, which means that you can add or suggest your own features.
Of course, don't expect us to ever have a method such as `getTaylorSwiftBestTracks` pushed into our master branch.
(But if you ever thought on something like that, hey, let's be friends!)

What we really mean is: there's a lot of information that can be extracted from the data retrievable via Spotify's Web API.
If you think of something that could come in handy for you and also other people, that's it! Don't be shy, make it happen.
We'll gladly review your suggestion as soon as possible!

For instance, you can retrieve the duration of a track in milliseconds straight from the API, but know what'd more usual?
If you thought ""displaying it in minutes"", we're on the same page.
To do that, adding the following code to our Track model would do the trick:

```javascript
get formattedDuration() {
    const minutes = Math.floor(this.durationMs / 60000);
    const seconds = Math.floor((this.durationMs % 60000) / 1000);
    return `${minutes}:${seconds < 10 ? '0' : ''}${seconds}`;
}
```

This is already implemented, but do you get our point?
It might be something really simple, but we believe that such little things can save a lot of time in the future.

### ""You convinced me. Let's go!""

Even though I'm not certain you thought that right now, here's how to get started:

## Installation

Using Yarn:

```sh
yarn add spotify-web-sdk
```

Using NPM:

```sh
npm install spotify-web-sdk
```

Using CDN:

```html
<script src=""https://unpkg.com/spotify-web-sdk/build/dist/spotify-web-sdk.min.js""></script>
```

## Usage

First of all, you will need a Spotify authorization token.
For that, check Spotify Web API's [Authorization Guide](https://developer.spotify.com/documentation/general/guides/authorization-guide/).
Please note that you might need some specific authorization scopes depending on the requests you'll be running.

And then you'll only need to import the function that implements the request you want to make.
Remember that you'll need to run the init function passing your authorization token to authorize making the requests.
There's an example of the usage at the [beginning of this README](#features).

## Community

As aforementioned, this project exists because we believe that we can support each other to create a better experience for everyone.
You can contribute in many ways.
Please, note that we have a [Code of Conduct](.github/CODE_OF_CONDUCT.md), which we expect to be strictly respected.

### Suggest a new feature or report a bug

If you notice any other bugs or you have any ideas to improve our SDK, feel free to create an issue. We'll be more than happy to discuss it! Check our [issue templates](.github/ISSUE_TEMPLATE).

### Do it yourself

Check out our [CONTRIBUTING](./CONTRIBUTING.md) file!

### Maintainers

[@JoseRenan](http://github.com/JoseRenan) and [@JRobsonJr](http://github.com/JRobsonJr)

### Hall of Fame

[![](https://sourcerer.io/fame/JRobsonJr/calluswhatyouwant/spotify-web-sdk/images/0)](https://sourcerer.io/fame/JRobsonJr/calluswhatyouwant/spotify-web-sdk/links/0)[![](https://sourcerer.io/fame/JRobsonJr/calluswhatyouwant/spotify-web-sdk/images/1)](https://sourcerer.io/fame/JRobsonJr/calluswhatyouwant/spotify-web-sdk/links/1)[![](https://sourcerer.io/fame/JRobsonJr/calluswhatyouwant/spotify-web-sdk/images/2)](https://sourcerer.io/fame/JRobsonJr/calluswhatyouwant/spotify-web-sdk/links/2)[![](https://sourcerer.io/fame/JRobsonJr/calluswhatyouwant/spotify-web-sdk/images/3)](https://sourcerer.io/fame/JRobsonJr/calluswhatyouwant/spotify-web-sdk/links/3)[![](https://sourcerer.io/fame/JRobsonJr/calluswhatyouwant/spotify-web-sdk/images/4)](https://sourcerer.io/fame/JRobsonJr/calluswhatyouwant/spotify-web-sdk/links/4)[![](https://sourcerer.io/fame/JRobsonJr/calluswhatyouwant/spotify-web-sdk/images/5)](https://sourcerer.io/fame/JRobsonJr/calluswhatyouwant/spotify-web-sdk/links/5)[![](https://sourcerer.io/fame/JRobsonJr/calluswhatyouwant/spotify-web-sdk/images/6)](https://sourcerer.io/fame/JRobsonJr/calluswhatyouwant/spotify-web-sdk/links/6)[![](https://sourcerer.io/fame/JRobsonJr/calluswhatyouwant/spotify-web-sdk/images/7)](https://sourcerer.io/fame/JRobsonJr/calluswhatyouwant/spotify-web-sdk/links/7)

Made with [hall-of-fame](https://github.com/sourcerer-io/hall-of-fame).

## License

[MIT](./LICENSE)
"
436,balenalabs-incubator/boombeastic,JavaScript,"# BoomBeastic

A Raspberry Pi based smart connected speaker that can play music via AirPlay&reg; and Spotify&reg; connect

**this application is compatible with balenaOS 2.12+**

**this application is also compatible with [balenaFin](https://www.balena.io/fin)!**

![BoomBeastic mini veneer walnut](https://pbs.twimg.com/media/DTS_UABX4AEOt_j.jpg:small)

## Background
*__You can read about the making of the boombeastic and see more photos [here](https://balena.io/blog/the-making-of-boombeastic/)__*

## Documentation

Please refer to the [Wiki](https://github.com/balena-io-projects/boombeastic/wiki)

## Pictures

![BoomBeastic mini veneer clear front](https://pbs.twimg.com/media/DTS_VekWAAAOCEZ.jpg:small)

![BoomBeastic stereo orange](https://thingiverse-production-new.s3.amazonaws.com/renders/82/52/1c/87/d6/7d5fabcf053803fd43c398854c3bbfa0_preview_featured.jpg)

![BoomBeastic fleet at Maker Faire Rome 2017](https://i.imgur.com/5E2B6yE.jpg)

## Videos

* [YouTube 1](https://www.youtube.com/watch?v=EnLgmW8kyis)
* [YouTube 2](https://youtu.be/pKvJKaCDQW8)
* [Vine 1](https://vine.co/v/5g71nzHwXvr)

## Press

* https://hackaday.com/2016/12/21/an-eye-catching-raspberry-pi-smart-speaker/
* https://blog.adafruit.com/2017/04/20/boombeastic-raspberry-pi-stereo-by-curcuz/
* https://www.geek.com/tech/anyone-can-make-this-raspberry-pi-powered-speaker-1683679/
* https://lifehacker.com/build-your-own-raspberry-pi-powered-smart-speaker-1790411587

## License

Copyright 2018 balena Ltd.

Licensed under the Apache License, Version 2.0 (the ""License""); you may not use this file except in compliance with the License. You may obtain a copy of the License at

<http://www.apache.org/licenses/LICENSE-2.0>

Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on an ""AS IS"" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the specific language governing permissions and limitations under the License.
"
437,buurro/spotify-now-playing-telegram,Python,"# Now Playing on Spotify Telegram Bot

Simple Telegram bot that lets you share on Telegram what you're listening on Spotify.

Try it now! [@spnpbot](https://t.me/spnpbot)

## Getting Started

### Prerequisites

* Register an application on the Spotify developer dashboard
* Register a bot on Telegram through [BotFather](https://t.me/BotFather) and enable inline mode
* Python 3.6+


### Installation

Install the required Python modules with pip:

```
pip install -r requirements.txt
```
Copy `.env.sample` to `.env` and set your Telegram bot token and Spotify app credentials.

## Running 

Just run:

```
python run.py
```
"
438,carabina/Spotify4Me,Swift,"Spotify4Me
==========

Implements a Widget for Spotify in the Notification Center of OS X 10.10 Yosemite

It uses the AppleScript API for Spotify to get the necesseray information and control it.

Watch Screenshot.tiff for preview.

Download the project, copy the ""SpotifyMain.app"" to your Applications folder and start it. Maybe in ""Today View"" settings the widget still needs to manually added.

If you have already installed one version restart the Mac, replace the old SpofityMain.app with the new one and start it.

Update:
- removed refresh button
- widget listens now to playstate of spotify, no manual refresh needed anymore
- if Spofity is closed or stopped (not paused) the widget will disappear and leaves the space for other widgets to take"
439,machieajones/spotify-ui-reactjs,JavaScript,"## DEMO (Work in progress)

https://machieajones.github.io/spotify-ui-reactjs/#/

## Repo for YT series:

https://www.youtube.com/watch?v=rkZEWuMRY28&list=PLTXFz3WKxvNJq8OFqDnmTmrBO9S2DfS7O

## Background

This project is done purely with respect for Spotify and especially its development team.

Icons/SVGs etc I use in the video are owned by Spotify and I will not be deploying this application anywhere, neither should you.

Use this repository to follow along with me as I educate myself on best React.js practices and improve my UI development skills.

Hope you enjoy and learn something!

Sidenote: If you spot anything that I can improve, please feel free to contribute and I will feature in the YT series.

### `npm install && npm start`

To run the application
"
440,JL978/spotify-clone-server,JavaScript,"# Spotify Clone App Authenication Server
This repository is the code to run an authorization/authentication server to connect to the Spotify API. The server is to be used in conjunction with the front-end code of the cloned app found [here](https://github.com/JL978/spotify-clone-client)

## Motivation
When working with the [Spotify API](https://developer.spotify.com/documentation/web-api/), you must follow this authorization [guide](https://developer.spotify.com/documentation/general/guides/authorization-guide/) provided on the API documentation. The basis of this authorization flow involve using a client id and client secret provided by signing up on the Spotify Developer dash board. These keys must be sent with every single request made to the Spotify server. 

When working with a client secret, one must keep it... well secret. Therefore, the solution to this is to keep the requests to the Spotify API on the server-side so that the client-side app can't expose the secret key to potential attackers - making the app more secure. Authenitcation of users are also done through this server for the same purpose and a refresh_token is sent back as a cookie while an access token is sent back to be stored in memory. This authorization flow was built to avoid the most common types of cyber attack - Cross Site Scripting and Cross Site Request Forgery.

## Tech/Framework Used
* Node.js
* Express.js
* axios

## Installation
This project requires [node](http://nodejs.org) and [npm](https://npmjs.com) installed globally. 

Clone the repository to a directory of your choosing

```sh
$ git clone https://github.com/JL978/spotify-clone-server.git
```
Navigate into spotify-clone-server and install the necessary packages

```sh
$ npm install 
```
To run the server

```sh
$ npm start
```
To run the dev server

```sh
$ npm run dev
```

### **Other requirements**
[The Spotify Developer Dashboard](https://developer.spotify.com/dashboard/login)

Create a new .env file in the root folder and add the following key value pairs to the file

```sh
CLIENT_ID = [client id optained from the Spotify Developer Dashboard]
CLIENT_SECRET = [client secret optained from the Spotify Developer Dashboard]
FRONT_URI = http://localhost:3000
RE_URI = http://localhost:4000/callback
REXP = /\.localhost:3000/
```

## Usage

This server is to be consumed by a front-end application - namely the Spotify clone at this [repo](https://github.com/JL978/spotify-clone-client)

The following endpoints are available

|Endpoint|Method|Body|Response|
|:---|:---|:---|:---|
|/|POST|{endpoint}|200 with the returned data from the endpoint|
|/login|GET|none|redirect to the Spotify authentication page|
|/refresh_token|GET|none|if a valid refresh token is available in the cookie, an access_token is sent back as data|
|/logout|GET|none|clear the refresh token and effectively log the user out off the app|

## The architecture
### Client Credential Flow (un-authorized requests)

![client credential flow](demo/unauthed.png)

The advantage of doing request this way instead of using the implicit grant flow as outlined in the Spotify API document is that you have a higher rate limit. It also doesn't prompt the user to login, which would be a bad experience for users who don't have a Spotify account but just want to browse their selections. 

An improvement to this process would be to store the access_token in memory after the first request and use that for subsequent requests instead of requesting for a new access token on every request.

### Authorization code flow 

The majority of code flow is very similar to the authorization code flow as outlined in the API [documentation](https://developer.spotify.com/documentation/general/guides/authorization-guide/), a diagram of which is shown bellow

![spotify authorization flow](demo/spotify-auth.png)

The only difference with this server is that the sent back data at step 2 is the access_token as JSON so that the client can store that in memory (the client will now show the logged in version of the app) and set the refresh token in a cookie. At this point the client is free to make requests for personal data as outlined in step 3-4 however an issue would arise if the user refreshed the page. Since the access_token is stored in memory, the user would be logged out during page refresh and provide a bad user experience. To solve this issue, a /refresh_token endpoint is also provided. During any initial loading, the client checks for if their is a refresh_token stored in a cookie, if there is then it makes a request to the /refresh_token endpoint which uses the refresh_token to obtain a new access_key from the Spotify API. 

![refresh token flow](demo/refresh.png)

### Logging out

Since ""logged in"" just means that there is a refresh_token stored in cookies, to log the user out it is simply deleting the cookie and refresh the client.
"
441,rweyant/spotifyr,R,"# spotifyr: a wrapper for Spotify's API for R users

**spotifyr** is currently undergoing active testing and improvement.  

It currently launches [Firefox](https://www.mozilla.org/en-US/firefox/new/) through [RSelenium](https://github.com/ropensci/RSelenium) for the full [authorization code flow](https://developer.spotify.com/web-api/authorization-guide/#authorization_code_flow).  Chrome and IE will eventually be supported, but are not yet.  All data from endpoints is converted to lists.  If you just want access to the public endpoints, this is not necessary.  

Some of the objects (artists, albums, playlists) have helper functions to conver to `data.frame`, but not all yet, and this is the next major development plan.

## Installation

Requires [Firefox](https://www.mozilla.org/en-US/firefox/new/) for initial authentication for any of the endpoints that operate on user data.

```{r}
devtools::install_github('rweyant/spotifyr')
```

## Authentication

For any usage below, you'll need to have proper credentials from Spotify.  Sign up for an account [here](https://developer.spotify.com/) and [create an app](https://developer.spotify.com/my-applications/#!/applications).

```{r}
# First Step: make client_id and client_secret available to other function
set_credentials(client_id=YOUR_CLIENT_ID,client_secret=YOUR_CLIENT_SECRET)
```

### Authenticate with [Client Credentials](https://developer.spotify.com/web-api/authorization-guide/#client_credentials_flow)

```{r}
client_tokens <- get_tokens()
```

### Authenticate with [Authorization Code](https://developer.spotify.com/web-api/authorization-guide/#authorization_code_flow)

```{r}
# Opens Browser window asking for permission to access data
# Requires Spotify account and for user to login
user_code <- get_user_code()

# Assigns tokens for later use.
# This creates a variable access_token in the Global Environment 
# that all future functions will access.
user_tokens <- get_user_token(user_code)

# If your access_token expires and you need to refresh your tokens 
# With no parameters specified, looks for refresh_token in the Global Environment
refresh_tokens <- refresh_user_token()

# If you want, you can explicitly specify the refresh token
refresh_tokens <- refresh_user_token(user_tokens$refresh_token)
```

## Basic Usage

### Search for Data

Get information, identifiers, images, etc. for artists, albums, songs or playlists that match the query text. 
No authentication is required for this function.

```{r, eval=FALSE}

# Search for an artist
search('slayer',type='artist')

# Get top search result
search('slayer',type='artist',limit=1)

# Search for an album
search('South Of Heaven',type='album')

```

### Get Information About Artist
Search for an artist by Spotify ID and get information about band, genre, images, etc.
No authentication is required for this function.

```{r,eval=FALSE}
get_artist('1IQ2e1buppatiN1bxUVkrk')

# Get all albums by Slayer on Spotify
get_artist_albums('1IQ2e1buppatiN1bxUVkrk')

# Get top tracks of Slayer in the US. Country code required.
get_artist_toptracks('1IQ2e1buppatiN1bxUVkrk','US')

# Get related artists according to Spotify in list 
get_artist_relatedartists('1IQ2e1buppatiN1bxUVkrk')

# Get related artists according to Spotify and simplify to a data.frame
simplify_result(get_artist_relatedartists('1IQ2e1buppatiN1bxUVkrk'),type='artists')
```

### Access Library information

There are endpoints to access and modify data in user's library
```{r,eval=FALSE}
# Get the last 2 tracks saved by the user.
get_saved_tracks(limit=2)
```

### Followers

Get information about what artists a user is following, add/remove followers from user, check if a user is following someone

```{r}
# Get list of all artists a user is following
get_user_followed_artists()

# Check if my account is being followed.
following('rweyant',type='user')

# Follow my account
follow('rweyant',type='user')

# Check if Slayer is being followed.  Use Spotify Artist ID
following('1IQ2e1buppatiN1bxUVkrk',type='artist')

# Follow Slayer
follow('1IQ2e1buppatiN1bxUVkrk',type='artist')

```

### User Profile Data
```{r,eval=FALSE}
# Specific user's data
get_user_profile('rweyant')

# Get the user who is using the application
get_current_user_profile()
```


### More Resources

- [Spotify API Endpoints](https://developer.spotify.com/web-api/endpoint-reference/)
- [Source on GitHub](https://github.com/rweyant/spotifyr)
"
442,poliarush/Java-Sikuli-Demo,Java,"Java-Sikuli-Demo
================

Java Sikuli Demo on Spotify desktop application 


Main sense of this code to show basic approach how Sikuli can handle test automation of desktop applicaitons.

ScreenObject pattern is used to make code more elegant and nice to write and rewrite if you needed.


Class diagram looks like this http://yuml.me/5abe1e71

If you need more help please come back with comments, suggestions 


Mykhailo Poliarush

http://poliarush.com

http://automated-testing.info

http://lessons2.ru
"
443,samadritsarkar2/spotifyDown,JavaScript,"<div align=""center"">
<img src='src/assets/homeLogo.png' width='100'>
<h1><strong>Downify</strong></h1>
<h2 >
    Downify let's you enjoy music on-the-go, even when you are offline.
    </h2>
</div>

<div align='center' >
<a href=""https://play.google.com/store/apps/details?id=com.sam.downify"" >
Get it on Playstore
</a>
 </div>
<br>

# 🎯 Goal

<h3>
Downify wants to make sure that, no one is deprived of music on that long road trip or airplane when there is no Internet Connection.
You can download your Spotify playlists/albums in advance and enjoy music everywhere. And that too without annoying ads.
</h3>

# Screenshots

<div>
    <img src=""screenshots/1.png"" width=""200"" />
    <img src=""screenshots/2.png"" width=""200"" />
    <img src=""screenshots/3.png"" width=""200"" />
    <img src=""screenshots/4.png"" width=""200"" />
    <img src=""screenshots/5.png"" width=""200"" />
</div>
<br>

# Changelog

- [**1.80**](https://github.com/samadritsarkar2/spotifyDown/tree/version1.80)

  - Removed the Google AdMob Package
  - Added ironSource Ads
  - Removed Donations
  - Fixed bugs arising out of updated sdk version

- [**1.75**](https://github.com/samadritsarkar2/spotifyDown/tree/version1.75)

  - Shuffle Play 🔀
  - Tracks can now be deleted within the app 🚮
  - Tracks are now arranged according to the playlist
  - Tracks downloaded in previous versions will be categorized in 'Unorganized'
  - Minor Banner Ads may be there
  - Downloading optimized and etc.

- [**v1.5**](https://github.com/samadritsarkar2/spotifyDown/tree/version1.5)
  - Added Music Player
  - Added Notification Bar Music controller
  - Supports Spotify Albums now, alongside Playlists
  - Added Downloads Page
  - Added a Mini player component ( Will add more features to it via OTA Updates )
  - Support for OTA Updates
  - UI Changes
  - For more, see [CHANGELOG](/CHANGELOG.MD)
    <br>
    <br>
- [**v1**](https://github.com/samadritsarkar2/spotifyDown/tree/version1) (Intial Release)
  - Supports Spotify Playlist
  - Playing a downloaded a song, launches Music player Intent.
  - Download All functionality
  - Save the playlist for later

# How it works?

It uses <a href=""https://developer.spotify.com/"">Spotify offical API</a> to fetch the tracks and Youtube(youtube-dl) to download the tracks. All that happens in server side and the app just downloads the mp3 file for later.

P.S:- ~~I have written a lot of Bad code, I will start improving the app and code soon.~~
I improved the code a little bit and the overall code structure. Will work on it soon.

# Tech Stack

- React Native
- Node Js (Backend Server) ~~[Will make the backend code public soon]~~
- Firebase (For Analytics)

# Known Issues

- With the latest update, a song can be downloaded only once and hence it can be present in only one playlist. This will be solved in the upcoming version as we go into more complicated database system.
- ~~While a track(/s) is getting downloaded from a particular playlist, if user exists the screen or another playlist is loaded, then the download gets cancelled.~~
- Few playlist may give error unexpectedly.
- Due to youtube policies, few songs are not downloadable. This is because some videos are regionally restriced or so. [See these limitations](https://github.com/fent/node-ytdl-core#limitations)
- Youtube server gives `429 error`.
- Downloads wrong tracks
- If you encounter anything else, feel free to report an issue or DM me. I will definetly work on it.

# Upcoming Features

- [x] In-app Music Player
- [x] Support for Spotify Albums. ([#2](https://github.com/samadritsarkar2/spotifyDown/issues/2))
- [ ] In-app music controller such as, queue, seek bar etc.
- [ ] Optimized Download functionality
- [ ] Spotify Login to fetch playlists
- [x] Suggestions are always welcome.

# For Legal Purposes

    You can mail me at **samadrit.sarkar2@gmail.com** or DM me.
"
444,I2rys/opengen-bot,JavaScript,"# opengen-bot
Generate Netflix, Spotify, NordVPN & Disney plus accounts.

## Installation
Github:
```
git clone https://github.com/I2rys/opengen-bot
```

NpmJS:
```
npm i axios fs
```

## Usage
```
node index.js <account_type> <amount> <output>
```
+ accountType - The type of the account to generate.
+ amount - The amount of accounts to generate.
+ output - The output of the generated accounts.

## License
MIT © I2rys
"
445,thanh109/Spotify-Account-Checker,C#,"Spotify Account Checker
=====================
Written in C#, using selenium webdriver to help, this tool checks spotify accounts.


![screenshot](https://github.com/mclarence01/Spotify-Account-Checker/raw/master/Capture.PNG)

Requirements
--------------
* NET Framework > 4.0
* Windows Computer
* Google Chrome

Usage
-------------
1. Open the application ""Spotify Account Checker.exe"".
2. Import combo list by click button at top left.
3. (Optional) Check ""Check premium status"" to verify if account is free or premium.
4. Click ""Start check"" to being checking accounts.
5. Once completed click ""save working accounts to text file""

Troubleshooting
--------------
|Symptom|Resolution|
|----|----|
|`Index out of bounds error`, when importing the combo list.|Make sure the combo list is formatted like the following, email:pass.|
|Checker fails to validate any account (eg ""Cannot determine"" or ""Assumming account is invalid"")|The spotify page is most likely in a different language. Please contact me on leakforums to add translation or change language to english.|





"
446,DangerCove/reign-for-spotify,Objective-C,"# Overview

Reign for Spotify is a remote for friends, colleagues, housemates and yourself that works in any browser.
It's available for download on the [Mac App Store](https://itunes.apple.com/en/app/reign-for-spotify/id553794498?mt=12).

What makes Reign unique is that it uses a web page to feed commands to Spotify. Making any device with a web browser a potential remote; iPhone/Android phones, tablets, but also Playstation Vita's, e-Readers etc.

![Reign for Spotify](https://fbcdn-sphotos-e-a.akamaihd.net/hphotos-ak-prn1/66291_454088921295852_55691272_n.jpg)

Reign works on 64bit Macs running OS X 10.7 and up.

# Cloning

Reign relies on the [LaunchAtLoginHelper](https://github.com/kgn/LaunchAtLoginHelper) git submodule, so clone Reign as follows:

    $ git clone --recursive https://github.com/DangerCove/reign-for-spotify.git

# Compiling

## Opening the project

* Double click the `SpotifyRemoteWorkspace.xcworkspace` to open the project in Xcode.

## Quick look around

* The workspace consists of two projects: Reign and a Helper. The Helper is used to launch Reign on startup;
* There are build schemes for App Store and Non App Store distribution;
* Some code (like the preferences window) differs between App Store and Non App Store (mainly because of Sparkle);
* The Server opens a http socket using CocoaHTTPServer, broadcasts it using Bonjour and feeds commands to Spotify using AppleScript;
* The Client uses CocoAsyncSocket looks around for other Reign servers;
* Comments are minimal, sorry, might fix that later.

## Things you need to add

* The App Store build uses [Receigen](http://receigen.etiemble.com/) for receipt validation, remove the build step and code in main.m if you don't have it;
* Related to Receigen, this repo relies on a statically linked OpenSSL library. Clear the `User Header Search Path` to remove it.
* The dsa_pub.pem file for Sparkle is obviously missing.

# Purpose and pull-requests

* For me, this is a pet project, but we'll try our best to merge additions to our code;
* Bug-fixes and other stuff I can learn from are awesome;
* New features are great.

# Credits

Robbie Hanson - [CocoaAsyncSocket](https://github.com/robbiehanson/CocoaAsyncSocket)

Robbie Hanson - [CocoaHTTPServer](https://github.com/robbiehanson/CocoaHTTPServer)

Robbie Hanson - [CocoaLumberjack](https://github.com/robbiehanson/CocoaLumberjack)

Ahmet Ardal - [DisableSubviews](https://github.com/ardalahmet/DisableSubviews)

Vadim Shpakovski - [MASPreferences](https://github.com/shpakovski/MASPreferences)

David Keegan - [LaunchAtLoginHelper](https://github.com/kgn/LaunchAtLoginHelper)

Andy Matuschak - [Sparkle](http://sparkle.andymatuschak.org/)

# Contributors

Boy van Amstel - [boyvanamstel](https://github.com/boyvanamstel)

Dan Gilbert - [daentech](https://github.com/daentech)

# License for the rest of it

New BSD License, see `LICENSE` for details.
"
447,hedwiggggg/spotify-ripper-web,Vue,"# spotify-ripper-web
## Introduction

This repository aimed to create an easy-to-use web interface for the spotify-ripper. Archiving this goal I had the following point in the back of my head:

- Parallel downloads of multiple users

So I decided on the following project structure:

spotify-ripper-docker:
- This is just a dockerized version of the spotify-ripper, including some adjustments to better handle the standard data streams and bring them to the web interface.

spotify-ripper-web-backend:
- This is a node.js application which communicates with the frontend via websockets.
- It creates and starts new containers and forwards the standard data streams to the UI via Websocket.

spotify-ripper-web-frontend:
- This is a vue.js spa, communicating with the node.js backend; Here you can also finally download the music.

## Things that aren't so beautiful:

- The project actually consists of three projects, which would probably have been much more intelligent to separate.
- No TDD; not even the vue.js project
- Implemented the spotify-ripper as a zip file; this would also be a separate project...
- Not as much use of environment vars as I should have; there are some things hardcoded, like the websocket port
- Not the worst and ugliest code; but alsonot the cleanest one..

## Installation

The installation should be quite simple by dockerization.

### Prequesites

1. Installing docker and docker-compose
2. rename `.env.example` to `.env` and change the path according tr environment.
3. add your `spotify_appkey.key` to the `spotify-ripper-docker` folder
4. (adjust `docker-compose.yml` to mount your docker.sock)

### Run the application

To do this you can simply run `docker-compose up --build` (Depending on how you configured Docker, sudo may be required)
    
FYI: This whole repo is optimized and tested on Ubuntu 18.04.
    
If all went well, it should look something like this: (remember that port 3000 is in the container and mapped outside by your adjustments in the `docker-compose.yml`)
    
![Console](/screenshots/screenshot_1.png ""Console"")
    
Then you should be able to access it by `http://localhost:<your_port>/web/`

## Screenshots

![spotify-ripper web-ui](/screenshots/screenshot_2.png ""spotify-ripper web-ui"")
![spotify-ripper web-ui](/screenshots/screenshot_3.png ""spotify-ripper web-ui"")
![spotify-ripper web-ui](/screenshots/screenshot_4.png ""spotify-ripper web-ui"")
![spotify-ripper web-ui](/screenshots/screenshot_5.png ""spotify-ripper web-ui"")
"
448,TomerAberbach/spotify-true-random,JavaScript,"# True Random For Spotify

> An application for unbiased truly random playlist and library shuffling with Spotify.

See it in action [here](https://tomeraberba.ch/spotify-true-random).

## Contributing

Stars are always welcome!

For bugs and feature requests, [please create an issue](https://github.com/TomerAberbach/spotify-true-random/issues/new).

## License

[MIT](https://github.com/TomerAberbach/spotify-true-random/blob/main/license) © [Tomer Aberbach](https://github.com/TomerAberbach)
"
449,nations/spoticord,JavaScript,"# **Deprecated**
**In favor of [Discord's Spotify Connection](https://support.discordapp.com/hc/en-us/articles/360000167212).**

# spoticord `0.0.4` [![discordxd](https://discordapp.com/api/guilds/297142682894073856/embed.png)](https://discord.gg/nations)
**Display your current Spotify song on Discord using the RPC API:**
![N|Solid](https://s.phineas.io/share/68747470733acx.png)

## Dependencies
  - NodeJS >=8
  - npm (>=5) or Yarn (>=1.2)
  - Discord Canary (preferred)
  - Spotify >= 1.0
  - Git

## Setup

  - Clone the repo `git clone https://github.com/nations/spoticord.git`
  - Install the modules `npm i` or `yarn`
  - Open Discord & Spotify
  - Start the RPC app `node app.js`
  
## How to run in the background

  - Install pm2 `npm i pm2 -g`
  - Start the app `pm2 start app.js --name=""spoticord""`
  - Use `pm2 log spoticord` to view the logs
  - Restart the app using `pm2 restart spoticord`

## Updating
  - To update SpotiCord, enter the ""spoticord"" directory and run `git fetch` in your terminal.

## FAQ
  Q: Can I get banned or punished by Discord for using this?  
  A: **No. The RPC was made by Discord themselves and Spoticord has been recommended by Discord staff**

  Q: I don't see the progress bar, where's it gone?  
  A: **Make sure you're using Discord Canary. Even still, Discord might remove this feature from time to time to update it since canary is a development version of Discord.**

  Q: Can I host this on an external server?  
  A: **No, the Discord RPC api runs on your local Discord client, and unless you want to port forward a few things and create necessary firewall rules to do it, it's not worth it. You'd have to repeat that with the Spotify web helper api, too.**

  Q: I'm not experienced with this scope of programming, are there any tutorials?  
  A: **Yes! I found a few on YouTube:**  
        - https://www.youtube.com/watch?v=9Gsop2h64Uo  
        - https://www.youtube.com/watch?v=bTP2t6VgAv8  
        - https://www.youtube.com/watch?v=KhQtXUH4jlU  
        - https://www.youtube.com/watch?v=Rntn6Jg8cHk


  Q: I found an obscure error not mentioned in the troubleshooting section, what should I do?  
  A: **First, check the closed (and open) issues on this repo, we might have answered it there already. If not, create a new one with the WHOLE error and when it occurred (during start, runtime, etc). Thank you!**

## Useful links

* [RPC API Documentation](https://discordapp.com/developers/docs/topics/rpc)
* [Rich Presence Documentation](https://discordapp.com/developers/docs/rich-presence/how-to)

## Troubleshooting
### It says the song is being updated but it isn't being displayed on my profile?
  - Go to Discord settings
  - Go to ""Games""
  - Make sure ""Display currently running game as a status message"" is ticked

### Invalid token function (or something similar)
  - Make sure your node is updated, you need at LEAST version 8.0.0!

### `stdout maxBuffer exceeded` or some XML/CSV parse error
  - This is due to an outdated library which tries to help with Windows support
  - Go to node_modules, go to wintools, go to lib
  - Open ps.js
  - On line 11, replace the whole line with:
  `exec('wmic process list /format:csv', {maxBuffer: 2000*1024}, function (err, stdout, stderr) {`
"
450,LegendaryEmoji/Music-Bot,JavaScript,"# **Currently, Bot Is Under Maintainess & Not Working Properly & Too Many Bugs, So Please Use Other Bots.**

## Information

Advanced Music Bot With Many Filters & Play Support (Youtube, Spotify, Etc)

- Filters (Nightcore, Bassboost, Flanger, 8D, Etc)
- Easy & Free To Use

### Setup

- Download / Export This Repository & Make Sure To Install [Node.js (v12 Or Higher)](https://nodejs.org/en/) & [Visual Studio Code (You Can Use Any Code Editor)](https://code.visualstudio.com/)
- Open Project In Visual Studio Code (Editor) & In Visual Studio Code To Open Console / Terminal - **Ctrl + A**
- In Your Project Console / Terminal Type - **npm i**
- And Wait For Bot Packages To Install...
- After Installing Done, Go To Config.js
- Fill Information & Then Type This Command In Your Console / Terminal - **_node ._** Or **_node index.js_**
- When Bot Is Ready, You Will See A Message In Console / Terminal
- Enjoy <3

### Credits

- Special Thanks To [Github](https://github.com), [Stackoverflow](https://stackoverflow.com), [Node Package Manager](https://www.npmjs.com/), [Google](https://google.com)

### Donate

By Donating, You Will Help Me To Maintain This Bot 💙

- [Paypal](https://www.paypal.com/paypalme/legendemoji)
- [Patreon](https://www.patreon.com/LegendaryEmoji)
- [Ko-Fi](https://ko-fi.com/LegendaryEmoji)

### Other

- Author - Legendary Emoji#1742
- Support - [Click Me](https://discord.gg/umMpnqS)
- License - [MIT](https://github.com/LegendaryEmoji/Music-Bot/blob/main/LICENSE)
"
451,gitter-badger/node-spotify-downloader,,"# node-spotify-downloader
A CLI and GUI solution to download music from Spotify
"
452,bhrigu123/Instant-Lyrics,Python,"# Instant-Lyrics

Instantly fetches the lyrics of the currently playing spotify song, or any song, and displays it on a window.

A linux application with a very convinient GUI. Build with Python Gtk+3 (gi).

# Screenshot
![Screenshot](https://cloud.githubusercontent.com/assets/6123105/23824316/3fe58044-069a-11e7-804e-180ea4041002.jpeg)

# Working
### GIF
![working](https://cloud.githubusercontent.com/assets/6123105/23824730/e0e0829e-06a1-11e7-8d57-3235c4266f2c.gif)


# Compatibility

* Python 2/3

* Linux


# Installation

## From Source

### Requirements

* python-gi (PyGObject)

* AppIndicator3

* python-dbus

* requests

* beautifulsoup4

* lxml


First, install the requirements:

### For Ubuntu/Debian based systems:

``` sh
sudo apt install python-gi python-dbus gir1.2-appindicator3-0.1 python-requests python-bs4 python-lxml
```

(requests, lxml and bs4 can be install from `pip` also: `pip install requests lxml beautifiulsoup4`)

### For Arch users

``` sh
sudo pacman -S python2-dbus python2-requests python2-lxml python2-beautifulsoup4 python2-gobject libappindicator-gtk3
```

### Fedora

``` sh
sudo dnf install dbus-python python-gobject libappindicator-gtk3 python2-requests python-beautifulsoup4 python2-lxml
```

## Install from source

After you've installed the dependencies, open terminal and go to the directory where you want to install. Enter the commands:

``` sh
git clone https://github.com/bhrigu123/Instant-Lyrics.git

cd Instant-Lyrics/

python InstantLyrics.py
```

The icon will appear in the system tray (indicator panel). You can start using the application from there.

<br>

# Creating a launcher shortcut

If you have installed from source, you can go to **Preferences** from the menu options, and click on the button `Create Desktop Entry`.

You should be able to see the `Instant Lyrics` application shortcut in your launcher menu.

You can also find several manual ways of doing so from the web.

![Launcher](https://cloud.githubusercontent.com/assets/6123105/23824317/4735e83e-069a-11e7-8b1e-2814632bb3aa.jpeg)


# Contribution
Create an issue to discuss the changes/modifications before sending a PR.

======
## Icon Credits
Icon made by [Freepik](http://www.freepik.com/) from www.flaticon.com

======

## The MIT License
> Copyright (c) 2017 Bhrigu Srivastava http://bhrigu.me

> Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the ""Software""), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

> The above copyright notice and this permission notice shall be included in
all copies or substantial portions of the Software.

> THE SOFTWARE IS PROVIDED ""AS IS"", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
THE SOFTWARE.
The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.

"
453,jakubito/spotify-release-list,JavaScript,"# Spotify Release List

Display list of Spotify releases from artists you follow

**<https://spotifyreleaselist.netlify.app>**

[▶️ Live demo](https://demo--spotifyreleaselist.netlify.app)

[![Netlify Status](https://api.netlify.com/api/v1/badges/5b14f602-d76e-47e0-8c3e-6af38e9d49f6/deploy-status)](https://app.netlify.com/sites/spotifyreleaselist/deploys)

![screenshot.jpg](https://raw.githubusercontent.com/jakubito/spotify-release-list-web/master/public/screenshot.jpg?v=1)

## Features

- Display releases day by day - you won't miss a thing!
- Filter by text search, date range and group type
- Export to playlists
- Installable progressive web application (PWA) with fullscreen and offline support
- All application data stored locally on your device
- Completely free to use with no ads and no tracking

## Keyboard shortcuts

<kbd>R</kbd> Refresh  
<kbd>S</kbd> Show settings  
<kbd>F</kbd> Toggle filters pane  
<kbd>D</kbd> Toggle favorites edit mode  
<kbd>E</kbd> Export  
<kbd>ESC</kbd> Cancel / Close active modal

## Privacy Policy

See [PRIVACY.md](https://github.com/jakubito/spotify-release-list/blob/master/PRIVACY.md)

## Installation

1. Install dependencies with `yarn install`
2. Save app url to `REACT_APP_URL` environment variable
3. Save Spotify app's client ID to `REACT_APP_SPOTIFY_CLIENT_ID` environment variable
4. Set your Spotify app's Redirect URI to the `REACT_APP_URL` + `/auth`
5. Run `yarn start` to run dev server or `yarn build` to build the app

## Bug reporting

If you find a bug, please send me an e-mail to dobes.jakub@gmail.com or open an issue here on github.

## License

ISC
"
454,fbkarsdorp/spotify-chart,Python,"# Spotify Charts

Simple script to get chart data from Spotify via https://spotifycharts.com 

# Examples

## As a module 

To retrieve charts for single dates or weeks, use the `charts.get_chart` function:

``` python
>>> import charts
...
>>> chart = charts.get_chart('2018-01-01', region='nl')
>>> chart.head()
   Position           Track Name          Artist  Streams  \
0         1        Blijf Bij Mij     Ronnie Flex   166369   
1         2  4/5 - From “Patser""     Ronnie Flex   144792   
2         3            Officieel   Broederliefde   121677   
3         4               Havana  Camila Cabello   107151   
4         5             rockstar     Post Malone    95755   

                                                 URL  
0  https://open.spotify.com/track/7EyvmcYx7WzeBi2...  
1  https://open.spotify.com/track/7cAxokBbnclXF6s...  
2  https://open.spotify.com/track/3e0gMtgOOLGPFLz...  
3  https://open.spotify.com/track/0ofbQMrRDsUaVKq...  
4  https://open.spotify.com/track/7wGoVu4Dady5GV0...  
```

To retrieve charts for a date range, use the `charts.get_charts` function:

``` python
>>> import charts
...
>>> chart = charts.get_charts('2018-01-01', '2018-02-01', freq='weekly', region='global')
>>> chart.head()
   Position                Track Name          Artist   Streams  \
0         1                  rockstar     Post Malone  29389063   
1         2                    Havana  Camila Cabello  25726393   
2         3  River (feat. Ed Sheeran)          Eminem  23547146   
3         4                 New Rules        Dua Lipa  20861932   
4         5                    Wolves    Selena Gomez  20579700   

                                                 URL       date  
0  https://open.spotify.com/track/7wGoVu4Dady5GV0... 2018-01-07  
1  https://open.spotify.com/track/0ofbQMrRDsUaVKq... 2018-01-07  
2  https://open.spotify.com/track/5UEnHoDYpsxlfzW... 2018-01-07  
3  https://open.spotify.com/track/2ekn2ttSfGqwhha... 2018-01-07  
4  https://open.spotify.com/track/7EmGUiUaOSGDnUU... 2018-01-07  
```

## From the Commandline

``` shell
usage: charts.py [-h] --start_date START_DATE --outfile OUTFILE
                 [--end_date END_DATE] [--region REGION]
                 [--freq {daily,weekly}] [--chart {top200,viral}]

optional arguments:
  -h, --help            show this help message and exit
  --start_date START_DATE
                        A date defining the start day for the chart.
  --outfile OUTFILE     Save the results in this file.
  --end_date END_DATE   A date defining the end day for the chart.
  --region REGION       A region defined for the chart.
  --freq {daily,weekly}
                        Use timestamps on a weekly or daily frequency.
  --chart {top200,viral}
                        The type of chart to retrieve.
```
"
455,woutervddn/SpotifyScrapeAndDownload,Shell,"SpotifyScrapeAndDownload
========================

General:
This repo contains a perl script that converts a spotify uri to a playlist of tracks and artists
A shell scripts that gives the most likely youtube url for a given query
And a shell script that combines the two and downloads all songs from a spotify uri via youtube

Requirements:
make sure to have perl installed
if not installed: sudo cpan install Web:Scraper
check if spot2mp3.sh, ytlikely.sh and spotify-scrape.pl are in the same folder
install youtube-dl: sudo apt-get install youtube-dl

Example call:
sh ./spot2mp3.sh 'spotify:track:1iNeZGJsoC0D7ZyJTdIbDS' 'DaftPunkTechnoLogic'
sh ./spot2mp3.sh 'spotify-uri' 'foldername'

special thanks to: Jonathan Spruytte - http://twitter.com/spruyttej

Notes:
All scripts can be used seperatly.

Use Policy:
spotify2mp3.sh should only be used in case the mobile version of spotify fails to work on your mobile phone.
Respect the artists you listen to, if you really like the song: buy/download it in spotify.

Legal Notice:
The Author is not responisble for any infringements made by the users of these script
"
456,willamesoares/lyrics-crawler,Python,"# lyrics-crawler
[![Say Thanks!](https://img.shields.io/badge/Say%20Thanks-!-1EAEDB.svg)](https://saythanks.io/to/willamesoares)

Get the lyrics for the song currently playing on Spotify or search for any song passing its title and artist name in the command line.

### Setup
In order to use this script you have to create your own [Genius API](https://docs.genius.com) Access Token and place it into the `constants.py`

like this `TOKEN='YOUR_GENIUS_API_TOKEN'`.

### Default search
`python3 get-lyric.py`

### Custom search
`python3 get-lyric.py [song_title] [artist_name]`
"
457,adhorrig/spodl,JavaScript,"# Spodl

A tool which can be ran from the command line to download a Spotify playlist through Youtube, via youtube-dl.

Note: This is for educational purposes and I am not responsible for those who use the tool.

## Installation

```
git clone https://github.com/adhorrig/spodl.git
```

```
cd spodl
```

```
npm install
```

To install spodl globally, run:

```
npm install -g
```


## What you need

1) Spotify client id and secret from [here.](https://developer.spotify.com/)

2) Spotify account name and playlist id. (Playlist id is the alphanumeric string following /playlist/)

3) Youtube API Key from [here.]( https://console.developers.google.com)

4) Youtube-dl installed on your machine from [here.](https://rg3.github.io/youtube-dl/)

## Running

Open ```config.js``` and substitute in your Spotify client id and client secret, as well as your Youtube API Key. 

You can specify the directory you wish to download the playlist to in ```config.js```. For example, ```directory : '~/Music/'```. If the directory is not specified, spodl will download the playlist to the spodl directory.

After this you can then run ```spodl spotify_account_name spotify_playlist_id```

For example:

```
spodl adam4543 7KLGqYIgcNeoWepuZ2sjXC
```

This will create a new directory using the playlist name and download all songs from the playlist into that directory.

If you would like to also download the music video, rather than just audio you can include ```video``` at the end of the command.

For example:

```
spodl adam4543 7KLGqYIgcNeoWepuZ2sjXC video
```

If ```video``` is not specified, only the audio will be downloaded.

## Contributing

Pull requests are happily accepted so feel free to hack away.
"
458,makispl/Spotify-Data-Analysis,Jupyter Notebook,"# Spotify Manipulation with Python; can a Data Scientist Replace a DJ?

[Originally published on Medium via the Towards Data Science [publication](https://towardsdatascience.com/can-a-data-scientist-replace-a-dj-spotify-manipulation-with-python-fbbd4a45ffd5)]

## Introduction
Data Science is vast and continuously expands into new industries, offering a multitude of valuable (corporate mainly) applications. The music industry is one of them. Should we treat any of those applications like a ""black box"", we would observe an input (data) and an output (product).

## Scope
This project aims to manipulate the Spotify music data with Python, having a twofold scope:

✔️ proving that the existence of an API (Application Programming Interface) is of high importance, in terms of feeding algorithms with extra fine data.

✔️ demonstrating how plain statistics (when properly applied) can encode daily actions, break them down into their fundamental elements and on top of them build valuable products.

## Scenario

Lately, the Data Corp I work for as a data scientist, records remarkable profits from their Youth Marketing segment and in reward for this, it rewards its young customers with a party. In the absence of a DJ, my supervisor asked me to take care of the music and make the party last until the morning! She gave to me a number of Spotify playlists, the PR department had already created, in order to check them out and create the final one. My blindness to the modern music generally, leads me to a tricky alternative:

*How about accessing all the playlists using Python, extracting every single audio feature of each track, reason about them statistically and wrapping  the most suitable (to our party) tracks to a final playlist? Given of course a technicality: I am not going to hear a single beat of any of them!*

## Roadmap

We make requests to the Spotify API for data collection, using the free Python libraries, Spotipy and Requests. We access the user playlists, tracks and perform EDA on their audio features, using Numpy, Pandas & Matplotlib. A number of data visualizations are depicted, to better communicate the results. Finally, we create the final playlist of tracks.

## Authorization Flow Guide

1. Sign up at Spotify for Developers at https://developer.spotify.com/ and select ""Create an app"". Write down your 'Client ID' and 'Client Secret'. While in the ""Dashboard"", select the ""Edit settings"" menu and in the ""Redirect URIs"" field fill the: http://localhost:7777/callback.
2. Open Spotify_Data_Manipulation_Python.ipynb and in the Authorization Flow code block, insert your Spotify username, Client ID, Client Secret and Redirect URI as `cid`, `secret`, `redirect_uri` and `username`, respectively.
3. Execute it. The first time Spotipy will need user authentication and will open a webpage, asking you to log in with your Spotify account and accept the permissions. After doing so, it will redirect you to a link. Copy the 'Redirect URI' and paste in the field that will appear in the Notebook. Hit 'enter'.
4. Now, you are connected to the Spotify API and capable to get your playlists ID, song IDs and use them to extract the features.

## Additional Analysis
There is quite a number of additional analyses to be performed, expanding this one. You are welcome to extend and shape yours in any direction you may prefer. For instance, you can additionally try and remove the tracks that have significantly low `danceability` and `valence` audio features, and boost even more the playlist's `score`. Furthemore, you can apply each approach sequentially (on the dataframe that is produced each time).

## Authors and Acknowledgement
[*It stands as an independent analysis in an effort to enhance my ability to communicate results, reason about data statistically and stay motivated to continuously implement newly aquired skills & capabilities, so as to enrich my portfolio of data science-oriented projects*]
- [@makispl](https://github.com/makispl) for concept & implementation.
- [@MPlegas](https://twitter.com/MPlegas) Twitter
- [@gerasimos_plegas](https://medium.com/@gerasimos_plegas) Medium
"
459,mbul48/spotify,PHP,"# Spotify Account Checker CLI

----

### Features

* Subscription ( Premium, Premium For Family, Free)
* Username Account
* Country
* Expired Date (DD/MM/YYYY)

----

### Installation

```
$ git clone https://github.com/mbul48/spotify.git
$ cd spotify
$ php spotify.php
```

--------

### APIKEY ?

// PLEASE DONATE ME! <a href='http://fb.me/habibul.fzn'>CLICK HERE</a> OR <a href='http://instagram.com/mbul48'>HERE</a>  //
"
460,sopheamen007/app.mobile.spotify-app-ui,Dart,"# Spotify Clone

- [Support me on Patreon](https://www.patreon.com/sopheamenvan?fan_landing=true)
- [Watch on youtube](https://youtu.be/DwuhsESnTBk)

![App UI](https://user-images.githubusercontent.com/16510597/112126923-80dbbf00-8bf7-11eb-9b6c-89cf3180889f.jpg)

A new Flutter project.

## Getting Started

This project is a starting point for a Flutter application.

A few resources to get you started if this is your first Flutter project:

- [Lab: Write your first Flutter app](https://flutter.dev/docs/get-started/codelab)
- [Cookbook: Useful Flutter samples](https://flutter.dev/docs/cookbook)

For help getting started with Flutter, view our
[online documentation](https://flutter.dev/docs), which offers tutorials,
samples, guidance on mobile development, and a full API reference.
"
461,angularcity/spotifyexample,JavaScript,"This project was bootstrapped with [Create React App](https://github.com/facebookincubator/create-react-app).

Below you will find some information on how to perform common tasks.<br>
You can find the most recent version of this guide [here](https://github.com/facebookincubator/create-react-app/blob/master/packages/react-scripts/template/README.md).

## Table of Contents

- [Updating to New Releases](#updating-to-new-releases)
- [Sending Feedback](#sending-feedback)
- [Folder Structure](#folder-structure)
- [Available Scripts](#available-scripts)
  - [npm start](#npm-start)
  - [npm test](#npm-test)
  - [npm run build](#npm-run-build)
  - [npm run eject](#npm-run-eject)
- [Supported Language Features and Polyfills](#supported-language-features-and-polyfills)
- [Syntax Highlighting in the Editor](#syntax-highlighting-in-the-editor)
- [Displaying Lint Output in the Editor](#displaying-lint-output-in-the-editor)
- [Debugging in the Editor](#debugging-in-the-editor)
- [Formatting Code Automatically](#formatting-code-automatically)
- [Changing the Page `<title>`](#changing-the-page-title)
- [Installing a Dependency](#installing-a-dependency)
- [Importing a Component](#importing-a-component)
- [Code Splitting](#code-splitting)
- [Adding a Stylesheet](#adding-a-stylesheet)
- [Post-Processing CSS](#post-processing-css)
- [Adding a CSS Preprocessor (Sass, Less etc.)](#adding-a-css-preprocessor-sass-less-etc)
- [Adding Images, Fonts, and Files](#adding-images-fonts-and-files)
- [Using the `public` Folder](#using-the-public-folder)
  - [Changing the HTML](#changing-the-html)
  - [Adding Assets Outside of the Module System](#adding-assets-outside-of-the-module-system)
  - [When to Use the `public` Folder](#when-to-use-the-public-folder)
- [Using Global Variables](#using-global-variables)
- [Adding Bootstrap](#adding-bootstrap)
  - [Using a Custom Theme](#using-a-custom-theme)
- [Adding Flow](#adding-flow)
- [Adding Custom Environment Variables](#adding-custom-environment-variables)
  - [Referencing Environment Variables in the HTML](#referencing-environment-variables-in-the-html)
  - [Adding Temporary Environment Variables In Your Shell](#adding-temporary-environment-variables-in-your-shell)
  - [Adding Development Environment Variables In `.env`](#adding-development-environment-variables-in-env)
- [Can I Use Decorators?](#can-i-use-decorators)
- [Integrating with an API Backend](#integrating-with-an-api-backend)
  - [Node](#node)
  - [Ruby on Rails](#ruby-on-rails)
- [Proxying API Requests in Development](#proxying-api-requests-in-development)
  - [""Invalid Host Header"" Errors After Configuring Proxy](#invalid-host-header-errors-after-configuring-proxy)
  - [Configuring the Proxy Manually](#configuring-the-proxy-manually)
  - [Configuring a WebSocket Proxy](#configuring-a-websocket-proxy)
- [Using HTTPS in Development](#using-https-in-development)
- [Generating Dynamic `<meta>` Tags on the Server](#generating-dynamic-meta-tags-on-the-server)
- [Pre-Rendering into Static HTML Files](#pre-rendering-into-static-html-files)
- [Injecting Data from the Server into the Page](#injecting-data-from-the-server-into-the-page)
- [Running Tests](#running-tests)
  - [Filename Conventions](#filename-conventions)
  - [Command Line Interface](#command-line-interface)
  - [Version Control Integration](#version-control-integration)
  - [Writing Tests](#writing-tests)
  - [Testing Components](#testing-components)
  - [Using Third Party Assertion Libraries](#using-third-party-assertion-libraries)
  - [Initializing Test Environment](#initializing-test-environment)
  - [Focusing and Excluding Tests](#focusing-and-excluding-tests)
  - [Coverage Reporting](#coverage-reporting)
  - [Continuous Integration](#continuous-integration)
  - [Disabling jsdom](#disabling-jsdom)
  - [Snapshot Testing](#snapshot-testing)
  - [Editor Integration](#editor-integration)
- [Developing Components in Isolation](#developing-components-in-isolation)
  - [Getting Started with Storybook](#getting-started-with-storybook)
  - [Getting Started with Styleguidist](#getting-started-with-styleguidist)
- [Making a Progressive Web App](#making-a-progressive-web-app)
  - [Offline-First Considerations](#offline-first-considerations)
  - [Progressive Web App Metadata](#progressive-web-app-metadata)
- [Analyzing the Bundle Size](#analyzing-the-bundle-size)
- [Deployment](#deployment)
  - [Static Server](#static-server)
  - [Other Solutions](#other-solutions)
  - [Serving Apps with Client-Side Routing](#serving-apps-with-client-side-routing)
  - [Building for Relative Paths](#building-for-relative-paths)
  - [Azure](#azure)
  - [Firebase](#firebase)
  - [GitHub Pages](#github-pages)
  - [Heroku](#heroku)
  - [Modulus](#modulus)
  - [Netlify](#netlify)
  - [Now](#now)
  - [S3 and CloudFront](#s3-and-cloudfront)
  - [Surge](#surge)
- [Advanced Configuration](#advanced-configuration)
- [Troubleshooting](#troubleshooting)
  - [`npm start` doesn’t detect changes](#npm-start-doesnt-detect-changes)
  - [`npm test` hangs on macOS Sierra](#npm-test-hangs-on-macos-sierra)
  - [`npm run build` exits too early](#npm-run-build-exits-too-early)
  - [`npm run build` fails on Heroku](#npm-run-build-fails-on-heroku)
  - [Moment.js locales are missing](#momentjs-locales-are-missing)
- [Something Missing?](#something-missing)

## Updating to New Releases

Create React App is divided into two packages:

* `create-react-app` is a global command-line utility that you use to create new projects.
* `react-scripts` is a development dependency in the generated projects (including this one).

You almost never need to update `create-react-app` itself: it delegates all the setup to `react-scripts`.

When you run `create-react-app`, it always creates the project with the latest version of `react-scripts` so you’ll get all the new features and improvements in newly created apps automatically.

To update an existing project to a new version of `react-scripts`, [open the changelog](https://github.com/facebookincubator/create-react-app/blob/master/CHANGELOG.md), find the version you’re currently on (check `package.json` in this folder if you’re not sure), and apply the migration instructions for the newer versions.

In most cases bumping the `react-scripts` version in `package.json` and running `npm install` in this folder should be enough, but it’s good to consult the [changelog](https://github.com/facebookincubator/create-react-app/blob/master/CHANGELOG.md) for potential breaking changes.

We commit to keeping the breaking changes minimal so you can upgrade `react-scripts` painlessly.

## Sending Feedback

We are always open to [your feedback](https://github.com/facebookincubator/create-react-app/issues).

## Folder Structure

After creation, your project should look like this:

```
my-app/
  README.md
  node_modules/
  package.json
  public/
    index.html
    favicon.ico
  src/
    App.css
    App.js
    App.test.js
    index.css
    index.js
    logo.svg
```

For the project to build, **these files must exist with exact filenames**:

* `public/index.html` is the page template;
* `src/index.js` is the JavaScript entry point.

You can delete or rename the other files.

You may create subdirectories inside `src`. For faster rebuilds, only files inside `src` are processed by Webpack.<br>
You need to **put any JS and CSS files inside `src`**, otherwise Webpack won’t see them.

Only files inside `public` can be used from `public/index.html`.<br>
Read instructions below for using assets from JavaScript and HTML.

You can, however, create more top-level directories.<br>
They will not be included in the production build so you can use them for things like documentation.

## Available Scripts

In the project directory, you can run:

### `npm start`

Runs the app in the development mode.<br>
Open [http://localhost:3000](http://localhost:3000) to view it in the browser.

The page will reload if you make edits.<br>
You will also see any lint errors in the console.

### `npm test`

Launches the test runner in the interactive watch mode.<br>
See the section about [running tests](#running-tests) for more information.

### `npm run build`

Builds the app for production to the `build` folder.<br>
It correctly bundles React in production mode and optimizes the build for the best performance.

The build is minified and the filenames include the hashes.<br>
Your app is ready to be deployed!

See the section about [deployment](#deployment) for more information.

### `npm run eject`

**Note: this is a one-way operation. Once you `eject`, you can’t go back!**

If you aren’t satisfied with the build tool and configuration choices, you can `eject` at any time. This command will remove the single build dependency from your project.

Instead, it will copy all the configuration files and the transitive dependencies (Webpack, Babel, ESLint, etc) right into your project so you have full control over them. All of the commands except `eject` will still work, but they will point to the copied scripts so you can tweak them. At this point you’re on your own.

You don’t have to ever use `eject`. The curated feature set is suitable for small and middle deployments, and you shouldn’t feel obligated to use this feature. However we understand that this tool wouldn’t be useful if you couldn’t customize it when you are ready for it.

## Supported Language Features and Polyfills

This project supports a superset of the latest JavaScript standard.<br>
In addition to [ES6](https://github.com/lukehoban/es6features) syntax features, it also supports:

* [Exponentiation Operator](https://github.com/rwaldron/exponentiation-operator) (ES2016).
* [Async/await](https://github.com/tc39/ecmascript-asyncawait) (ES2017).
* [Object Rest/Spread Properties](https://github.com/sebmarkbage/ecmascript-rest-spread) (stage 3 proposal).
* [Dynamic import()](https://github.com/tc39/proposal-dynamic-import) (stage 3 proposal)
* [Class Fields and Static Properties](https://github.com/tc39/proposal-class-public-fields) (stage 2 proposal).
* [JSX](https://facebook.github.io/react/docs/introducing-jsx.html) and [Flow](https://flowtype.org/) syntax.

Learn more about [different proposal stages](https://babeljs.io/docs/plugins/#presets-stage-x-experimental-presets-).

While we recommend to use experimental proposals with some caution, Facebook heavily uses these features in the product code, so we intend to provide [codemods](https://medium.com/@cpojer/effective-javascript-codemods-5a6686bb46fb) if any of these proposals change in the future.

Note that **the project only includes a few ES6 [polyfills](https://en.wikipedia.org/wiki/Polyfill)**:

* [`Object.assign()`](https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Global_Objects/Object/assign) via [`object-assign`](https://github.com/sindresorhus/object-assign).
* [`Promise`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise) via [`promise`](https://github.com/then/promise).
* [`fetch()`](https://developer.mozilla.org/en/docs/Web/API/Fetch_API) via [`whatwg-fetch`](https://github.com/github/fetch).

If you use any other ES6+ features that need **runtime support** (such as `Array.from()` or `Symbol`), make sure you are including the appropriate polyfills manually, or that the browsers you are targeting already support them.

## Syntax Highlighting in the Editor

To configure the syntax highlighting in your favorite text editor, head to the [relevant Babel documentation page](https://babeljs.io/docs/editors) and follow the instructions. Some of the most popular editors are covered.

## Displaying Lint Output in the Editor

>Note: this feature is available with `react-scripts@0.2.0` and higher.<br>
>It also only works with npm 3 or higher.

Some editors, including Sublime Text, Atom, and Visual Studio Code, provide plugins for ESLint.

They are not required for linting. You should see the linter output right in your terminal as well as the browser console. However, if you prefer the lint results to appear right in your editor, there are some extra steps you can do.

You would need to install an ESLint plugin for your editor first. Then, add a file called `.eslintrc` to the project root:

```js
{
  ""extends"": ""react-app""
}
```

Now your editor should report the linting warnings.

Note that even if you edit your `.eslintrc` file further, these changes will **only affect the editor integration**. They won’t affect the terminal and in-browser lint output. This is because Create React App intentionally provides a minimal set of rules that find common mistakes.

If you want to enforce a coding style for your project, consider using [Prettier](https://github.com/jlongster/prettier) instead of ESLint style rules.

## Debugging in the Editor

**This feature is currently only supported by [Visual Studio Code](https://code.visualstudio.com) editor.**

Visual Studio Code supports debugging out of the box with Create React App. This enables you as a developer to write and debug your React code without leaving the editor, and most importantly it enables you to have a continuous development workflow, where context switching is minimal, as you don’t have to switch between tools.

You would need to have the latest version of [VS Code](https://code.visualstudio.com) and VS Code [Chrome Debugger Extension](https://marketplace.visualstudio.com/items?itemName=msjsdiag.debugger-for-chrome) installed.

Then add the block below to your `launch.json` file and put it inside the `.vscode` folder in your app’s root directory.

```json
{
  ""version"": ""0.2.0"",
  ""configurations"": [{
    ""name"": ""Chrome"",
    ""type"": ""chrome"",
    ""request"": ""launch"",
    ""url"": ""http://localhost:3000"",
    ""webRoot"": ""${workspaceRoot}/src"",
    ""userDataDir"": ""${workspaceRoot}/.vscode/chrome"",
    ""sourceMapPathOverrides"": {
      ""webpack:///src/*"": ""${webRoot}/*""
    }
  }]
}
```

Start your app by running `npm start`, and start debugging in VS Code by pressing `F5` or by clicking the green debug icon. You can now write code, set breakpoints, make changes to the code, and debug your newly modified code—all from your editor.

## Formatting Code Automatically

Prettier is an opinionated code formatter with support for JavaScript, CSS and JSON. With Prettier you can format the code you write automatically to ensure a code style within your project. See the [Prettier's GitHub page](https://github.com/prettier/prettier) for more information, and look at this [page to see it in action](https://prettier.github.io/prettier/).

To format our code whenever we make a commit in git, we need to install the following dependencies:

```sh
npm install --save husky lint-staged prettier
```

Alternatively you may use `yarn`:

```sh
yarn add husky lint-staged prettier
```

* `husky` makes it easy to use githooks as if they are npm scripts.
* `lint-staged` allows us to run scripts on staged files in git. See this [blog post about lint-staged to learn more about it](https://medium.com/@okonetchnikov/make-linting-great-again-f3890e1ad6b8).
* `prettier` is the JavaScript formatter we will run before commits.

Now we can make sure every file is formatted correctly by adding a few lines to the `package.json` in the project root.

Add the following line to `scripts` section:

```diff
  ""scripts"": {
+   ""precommit"": ""lint-staged"",
    ""start"": ""react-scripts start"",
    ""build"": ""react-scripts build"",
```

Next we add a 'lint-staged' field to the `package.json`, for example:

```diff
  ""dependencies"": {
    // ...
  },
+ ""lint-staged"": {
+   ""src/**/*.{js,jsx,json,css}"": [
+     ""prettier --single-quote --write"",
+     ""git add""
+   ]
+ },
  ""scripts"": {
```

Now, whenever you make a commit, Prettier will format the changed files automatically. You can also run `./node_modules/.bin/prettier --single-quote --write ""src/**/*.{js,jsx}""` to format your entire project for the first time.

Next you might want to integrate Prettier in your favorite editor. Read the section on [Editor Integration](https://github.com/prettier/prettier#editor-integration) on the Prettier GitHub page.

## Changing the Page `<title>`

You can find the source HTML file in the `public` folder of the generated project. You may edit the `<title>` tag in it to change the title from “React App” to anything else.

Note that normally you wouldn’t edit files in the `public` folder very often. For example, [adding a stylesheet](#adding-a-stylesheet) is done without touching the HTML.

If you need to dynamically update the page title based on the content, you can use the browser [`document.title`](https://developer.mozilla.org/en-US/docs/Web/API/Document/title) API. For more complex scenarios when you want to change the title from React components, you can use [React Helmet](https://github.com/nfl/react-helmet), a third party library.

If you use a custom server for your app in production and want to modify the title before it gets sent to the browser, you can follow advice in [this section](#generating-dynamic-meta-tags-on-the-server). Alternatively, you can pre-build each page as a static HTML file which then loads the JavaScript bundle, which is covered [here](#pre-rendering-into-static-html-files).

## Installing a Dependency

The generated project includes React and ReactDOM as dependencies. It also includes a set of scripts used by Create React App as a development dependency. You may install other dependencies (for example, React Router) with `npm`:

```sh
npm install --save react-router
```

Alternatively you may use `yarn`:

```sh
yarn add react-router
```

This works for any library, not just `react-router`.

## Importing a Component

This project setup supports ES6 modules thanks to Babel.<br>
While you can still use `require()` and `module.exports`, we encourage you to use [`import` and `export`](http://exploringjs.com/es6/ch_modules.html) instead.

For example:

### `Button.js`

```js
import React, { Component } from 'react';

class Button extends Component {
  render() {
    // ...
  }
}

export default Button; // Don’t forget to use export default!
```

### `DangerButton.js`


```js
import React, { Component } from 'react';
import Button from './Button'; // Import a component from another file

class DangerButton extends Component {
  render() {
    return <Button color=""red"" />;
  }
}

export default DangerButton;
```

Be aware of the [difference between default and named exports](http://stackoverflow.com/questions/36795819/react-native-es-6-when-should-i-use-curly-braces-for-import/36796281#36796281). It is a common source of mistakes.

We suggest that you stick to using default imports and exports when a module only exports a single thing (for example, a component). That’s what you get when you use `export default Button` and `import Button from './Button'`.

Named exports are useful for utility modules that export several functions. A module may have at most one default export and as many named exports as you like.

Learn more about ES6 modules:

* [When to use the curly braces?](http://stackoverflow.com/questions/36795819/react-native-es-6-when-should-i-use-curly-braces-for-import/36796281#36796281)
* [Exploring ES6: Modules](http://exploringjs.com/es6/ch_modules.html)
* [Understanding ES6: Modules](https://leanpub.com/understandinges6/read#leanpub-auto-encapsulating-code-with-modules)

## Code Splitting

Instead of downloading the entire app before users can use it, code splitting allows you to split your code into small chunks which you can then load on demand.

This project setup supports code splitting via [dynamic `import()`](http://2ality.com/2017/01/import-operator.html#loading-code-on-demand). Its [proposal](https://github.com/tc39/proposal-dynamic-import) is in stage 3. The `import()` function-like form takes the module name as an argument and returns a [`Promise`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise) which always resolves to the namespace object of the module.

Here is an example:

### `moduleA.js`

```js
const moduleA = 'Hello';

export { moduleA };
```
### `App.js`

```js
import React, { Component } from 'react';

class App extends Component {
  handleClick = () => {
    import('./moduleA')
      .then(({ moduleA }) => {
        // Use moduleA
      })
      .catch(err => {
        // Handle failure
      });
  };

  render() {
    return (
      <div>
        <button onClick={this.handleClick}>Load</button>
      </div>
    );
  }
}

export default App;
```

This will make `moduleA.js` and all its unique dependencies as a separate chunk that only loads after the user clicks the 'Load' button.

You can also use it with `async` / `await` syntax if you prefer it.

### With React Router

If you are using React Router check out [this tutorial](http://serverless-stack.com/chapters/code-splitting-in-create-react-app.html) on how to use code splitting with it. You can find the companion GitHub repository [here](https://github.com/AnomalyInnovations/serverless-stack-demo-client/tree/code-splitting-in-create-react-app).

## Adding a Stylesheet

This project setup uses [Webpack](https://webpack.js.org/) for handling all assets. Webpack offers a custom way of “extending” the concept of `import` beyond JavaScript. To express that a JavaScript file depends on a CSS file, you need to **import the CSS from the JavaScript file**:

### `Button.css`

```css
.Button {
  padding: 20px;
}
```

### `Button.js`

```js
import React, { Component } from 'react';
import './Button.css'; // Tell Webpack that Button.js uses these styles

class Button extends Component {
  render() {
    // You can use them as regular CSS styles
    return <div className=""Button"" />;
  }
}
```

**This is not required for React** but many people find this feature convenient. You can read about the benefits of this approach [here](https://medium.com/seek-ui-engineering/block-element-modifying-your-javascript-components-d7f99fcab52b). However you should be aware that this makes your code less portable to other build tools and environments than Webpack.

In development, expressing dependencies this way allows your styles to be reloaded on the fly as you edit them. In production, all CSS files will be concatenated into a single minified `.css` file in the build output.

If you are concerned about using Webpack-specific semantics, you can put all your CSS right into `src/index.css`. It would still be imported from `src/index.js`, but you could always remove that import if you later migrate to a different build tool.

## Post-Processing CSS

This project setup minifies your CSS and adds vendor prefixes to it automatically through [Autoprefixer](https://github.com/postcss/autoprefixer) so you don’t need to worry about it.

For example, this:

```css
.App {
  display: flex;
  flex-direction: row;
  align-items: center;
}
```

becomes this:

```css
.App {
  display: -webkit-box;
  display: -ms-flexbox;
  display: flex;
  -webkit-box-orient: horizontal;
  -webkit-box-direction: normal;
      -ms-flex-direction: row;
          flex-direction: row;
  -webkit-box-align: center;
      -ms-flex-align: center;
          align-items: center;
}
```

If you need to disable autoprefixing for some reason, [follow this section](https://github.com/postcss/autoprefixer#disabling).

## Adding a CSS Preprocessor (Sass, Less etc.)

Generally, we recommend that you don’t reuse the same CSS classes across different components. For example, instead of using a `.Button` CSS class in `<AcceptButton>` and `<RejectButton>` components, we recommend creating a `<Button>` component with its own `.Button` styles, that both `<AcceptButton>` and `<RejectButton>` can render (but [not inherit](https://facebook.github.io/react/docs/composition-vs-inheritance.html)).

Following this rule often makes CSS preprocessors less useful, as features like mixins and nesting are replaced by component composition. You can, however, integrate a CSS preprocessor if you find it valuable. In this walkthrough, we will be using Sass, but you can also use Less, or another alternative.

First, let’s install the command-line interface for Sass:

```sh
npm install --save node-sass-chokidar
```

Alternatively you may use `yarn`:

```sh
yarn add node-sass-chokidar
```

Then in `package.json`, add the following lines to `scripts`:

```diff
   ""scripts"": {
+    ""build-css"": ""node-sass-chokidar src/ -o src/"",
+    ""watch-css"": ""npm run build-css && node-sass-chokidar src/ -o src/ --watch --recursive"",
     ""start"": ""react-scripts start"",
     ""build"": ""react-scripts build"",
     ""test"": ""react-scripts test --env=jsdom"",
```

>Note: To use a different preprocessor, replace `build-css` and `watch-css` commands according to your preprocessor’s documentation.

Now you can rename `src/App.css` to `src/App.scss` and run `npm run watch-css`. The watcher will find every Sass file in `src` subdirectories, and create a corresponding CSS file next to it, in our case overwriting `src/App.css`. Since `src/App.js` still imports `src/App.css`, the styles become a part of your application. You can now edit `src/App.scss`, and `src/App.css` will be regenerated.

To share variables between Sass files, you can use Sass imports. For example, `src/App.scss` and other component style files could include `@import ""./shared.scss"";` with variable definitions.

To enable importing files without using relative paths, you can add the  `--include-path` option to the command in `package.json`.

```
""build-css"": ""node-sass-chokidar --include-path ./src --include-path ./node_modules src/ -o src/"",
""watch-css"": ""npm run build-css && node-sass-chokidar --include-path ./src --include-path ./node_modules src/ -o src/ --watch --recursive"",
```

This will allow you to do imports like

```scss
@import 'styles/_colors.scss'; // assuming a styles directory under src/
@import 'nprogress/nprogress'; // importing a css file from the nprogress node module
```

At this point you might want to remove all CSS files from the source control, and add `src/**/*.css` to your `.gitignore` file. It is generally a good practice to keep the build products outside of the source control.

As a final step, you may find it convenient to run `watch-css` automatically with `npm start`, and run `build-css` as a part of `npm run build`. You can use the `&&` operator to execute two scripts sequentially. However, there is no cross-platform way to run two scripts in parallel, so we will install a package for this:

```sh
npm install --save npm-run-all
```

Alternatively you may use `yarn`:

```sh
yarn add npm-run-all
```

Then we can change `start` and `build` scripts to include the CSS preprocessor commands:

```diff
   ""scripts"": {
     ""build-css"": ""node-sass-chokidar src/ -o src/"",
     ""watch-css"": ""npm run build-css && node-sass-chokidar src/ -o src/ --watch --recursive"",
-    ""start"": ""react-scripts start"",
-    ""build"": ""react-scripts build"",
+    ""start-js"": ""react-scripts start"",
+    ""start"": ""npm-run-all -p watch-css start-js"",
+    ""build"": ""npm run build-css && react-scripts build"",
     ""test"": ""react-scripts test --env=jsdom"",
     ""eject"": ""react-scripts eject""
   }
```

Now running `npm start` and `npm run build` also builds Sass files.

**Why `node-sass-chokidar`?**

`node-sass` has been reported as having the following issues:

- `node-sass --watch` has been reported to have *performance issues* in certain conditions when used in a virtual machine or with docker.

- Infinite styles compiling [#1939](https://github.com/facebookincubator/create-react-app/issues/1939)

- `node-sass` has been reported as having issues with detecting new files in a directory [#1891](https://github.com/sass/node-sass/issues/1891)

 `node-sass-chokidar` is used here as it addresses these issues.

## Adding Images, Fonts, and Files

With Webpack, using static assets like images and fonts works similarly to CSS.

You can **`import` a file right in a JavaScript module**. This tells Webpack to include that file in the bundle. Unlike CSS imports, importing a file gives you a string value. This value is the final path you can reference in your code, e.g. as the `src` attribute of an image or the `href` of a link to a PDF.

To reduce the number of requests to the server, importing images that are less than 10,000 bytes returns a [data URI](https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/Data_URIs) instead of a path. This applies to the following file extensions: bmp, gif, jpg, jpeg, and png. SVG files are excluded due to [#1153](https://github.com/facebookincubator/create-react-app/issues/1153).

Here is an example:

```js
import React from 'react';
import logo from './logo.png'; // Tell Webpack this JS file uses this image

console.log(logo); // /logo.84287d09.png

function Header() {
  // Import result is the URL of your image
  return <img src={logo} alt=""Logo"" />;
}

export default Header;
```

This ensures that when the project is built, Webpack will correctly move the images into the build folder, and provide us with correct paths.

This works in CSS too:

```css
.Logo {
  background-image: url(./logo.png);
}
```

Webpack finds all relative module references in CSS (they start with `./`) and replaces them with the final paths from the compiled bundle. If you make a typo or accidentally delete an important file, you will see a compilation error, just like when you import a non-existent JavaScript module. The final filenames in the compiled bundle are generated by Webpack from content hashes. If the file content changes in the future, Webpack will give it a different name in production so you don’t need to worry about long-term caching of assets.

Please be advised that this is also a custom feature of Webpack.

**It is not required for React** but many people enjoy it (and React Native uses a similar mechanism for images).<br>
An alternative way of handling static assets is described in the next section.

## Using the `public` Folder

>Note: this feature is available with `react-scripts@0.5.0` and higher.

### Changing the HTML

The `public` folder contains the HTML file so you can tweak it, for example, to [set the page title](#changing-the-page-title).
The `<script>` tag with the compiled code will be added to it automatically during the build process.

### Adding Assets Outside of the Module System

You can also add other assets to the `public` folder.

Note that we normally encourage you to `import` assets in JavaScript files instead.
For example, see the sections on [adding a stylesheet](#adding-a-stylesheet) and [adding images and fonts](#adding-images-fonts-and-files).
This mechanism provides a number of benefits:

* Scripts and stylesheets get minified and bundled together to avoid extra network requests.
* Missing files cause compilation errors instead of 404 errors for your users.
* Result filenames include content hashes so you don’t need to worry about browsers caching their old versions.

However there is an **escape hatch** that you can use to add an asset outside of the module system.

If you put a file into the `public` folder, it will **not** be processed by Webpack. Instead it will be copied into the build folder untouched.   To reference assets in the `public` folder, you need to use a special variable called `PUBLIC_URL`.

Inside `index.html`, you can use it like this:

```html
<link rel=""shortcut icon"" href=""%PUBLIC_URL%/favicon.ico"">
```

Only files inside the `public` folder will be accessible by `%PUBLIC_URL%` prefix. If you need to use a file from `src` or `node_modules`, you’ll have to copy it there to explicitly specify your intention to make this file a part of the build.

When you run `npm run build`, Create React App will substitute `%PUBLIC_URL%` with a correct absolute path so your project works even if you use client-side routing or host it at a non-root URL.

In JavaScript code, you can use `process.env.PUBLIC_URL` for similar purposes:

```js
render() {
  // Note: this is an escape hatch and should be used sparingly!
  // Normally we recommend using `import` for getting asset URLs
  // as described in “Adding Images and Fonts” above this section.
  return <img src={process.env.PUBLIC_URL + '/img/logo.png'} />;
}
```

Keep in mind the downsides of this approach:

* None of the files in `public` folder get post-processed or minified.
* Missing files will not be called at compilation time, and will cause 404 errors for your users.
* Result filenames won’t include content hashes so you’ll need to add query arguments or rename them every time they change.

### When to Use the `public` Folder

Normally we recommend importing [stylesheets](#adding-a-stylesheet), [images, and fonts](#adding-images-fonts-and-files) from JavaScript.
The `public` folder is useful as a workaround for a number of less common cases:

* You need a file with a specific name in the build output, such as [`manifest.webmanifest`](https://developer.mozilla.org/en-US/docs/Web/Manifest).
* You have thousands of images and need to dynamically reference their paths.
* You want to include a small script like [`pace.js`](http://github.hubspot.com/pace/docs/welcome/) outside of the bundled code.
* Some library may be incompatible with Webpack and you have no other option but to include it as a `<script>` tag.

Note that if you add a `<script>` that declares global variables, you also need to read the next section on using them.

## Using Global Variables

When you include a script in the HTML file that defines global variables and try to use one of these variables in the code, the linter will complain because it cannot see the definition of the variable.

You can avoid this by reading the global variable explicitly from the `window` object, for example:

```js
const $ = window.$;
```

This makes it obvious you are using a global variable intentionally rather than because of a typo.

Alternatively, you can force the linter to ignore any line by adding `// eslint-disable-line` after it.

## Adding Bootstrap

You don’t have to use [React Bootstrap](https://react-bootstrap.github.io) together with React but it is a popular library for integrating Bootstrap with React apps. If you need it, you can integrate it with Create React App by following these steps:

Install React Bootstrap and Bootstrap from npm. React Bootstrap does not include Bootstrap CSS so this needs to be installed as well:

```sh
npm install --save react-bootstrap bootstrap@3
```

Alternatively you may use `yarn`:

```sh
yarn add react-bootstrap bootstrap@3
```

Import Bootstrap CSS and optionally Bootstrap theme CSS in the beginning of your ```src/index.js``` file:

```js
import 'bootstrap/dist/css/bootstrap.css';
import 'bootstrap/dist/css/bootstrap-theme.css';
// Put any other imports below so that CSS from your
// components takes precedence over default styles.
```

Import required React Bootstrap components within ```src/App.js``` file or your custom component files:

```js
import { Navbar, Jumbotron, Button } from 'react-bootstrap';
```

Now you are ready to use the imported React Bootstrap components within your component hierarchy defined in the render method. Here is an example [`App.js`](https://gist.githubusercontent.com/gaearon/85d8c067f6af1e56277c82d19fd4da7b/raw/6158dd991b67284e9fc8d70b9d973efe87659d72/App.js) redone using React Bootstrap.

### Using a Custom Theme

Sometimes you might need to tweak the visual styles of Bootstrap (or equivalent package).<br>
We suggest the following approach:

* Create a new package that depends on the package you wish to customize, e.g. Bootstrap.
* Add the necessary build steps to tweak the theme, and publish your package on npm.
* Install your own theme npm package as a dependency of your app.

Here is an example of adding a [customized Bootstrap](https://medium.com/@tacomanator/customizing-create-react-app-aa9ffb88165) that follows these steps.

## Adding Flow

Flow is a static type checker that helps you write code with fewer bugs. Check out this [introduction to using static types in JavaScript](https://medium.com/@preethikasireddy/why-use-static-types-in-javascript-part-1-8382da1e0adb) if you are new to this concept.

Recent versions of [Flow](http://flowtype.org/) work with Create React App projects out of the box.

To add Flow to a Create React App project, follow these steps:

1. Run `npm install --save flow-bin` (or `yarn add flow-bin`).
2. Add `""flow"": ""flow""` to the `scripts` section of your `package.json`.
3. Run `npm run flow init` (or `yarn flow init`) to create a [`.flowconfig` file](https://flowtype.org/docs/advanced-configuration.html) in the root directory.
4. Add `// @flow` to any files you want to type check (for example, to `src/App.js`).

Now you can run `npm run flow` (or `yarn flow`) to check the files for type errors.
You can optionally use an IDE like [Nuclide](https://nuclide.io/docs/languages/flow/) for a better integrated experience.
In the future we plan to integrate it into Create React App even more closely.

To learn more about Flow, check out [its documentation](https://flowtype.org/).

## Adding Custom Environment Variables

>Note: this feature is available with `react-scripts@0.2.3` and higher.

Your project can consume variables declared in your environment as if they were declared locally in your JS files. By
default you will have `NODE_ENV` defined for you, and any other environment variables starting with
`REACT_APP_`.

**The environment variables are embedded during the build time**. Since Create React App produces a static HTML/CSS/JS bundle, it can’t possibly read them at runtime. To read them at runtime, you would need to load HTML into memory on the server and replace placeholders in runtime, just like [described here](#injecting-data-from-the-server-into-the-page). Alternatively you can rebuild the app on the server anytime you change them.

>Note: You must create custom environment variables beginning with `REACT_APP_`. Any other variables except `NODE_ENV` will be ignored to avoid accidentally [exposing a private key on the machine that could have the same name](https://github.com/facebookincubator/create-react-app/issues/865#issuecomment-252199527). Changing any environment variables will require you to restart the development server if it is running.

These environment variables will be defined for you on `process.env`. For example, having an environment
variable named `REACT_APP_SECRET_CODE` will be exposed in your JS as `process.env.REACT_APP_SECRET_CODE`.

There is also a special built-in environment variable called `NODE_ENV`. You can read it from `process.env.NODE_ENV`. When you run `npm start`, it is always equal to `'development'`, when you run `npm test` it is always equal to `'test'`, and when you run `npm run build` to make a production bundle, it is always equal to `'production'`. **You cannot override `NODE_ENV` manually.** This prevents developers from accidentally deploying a slow development build to production.

These environment variables can be useful for displaying information conditionally based on where the project is
deployed or consuming sensitive data that lives outside of version control.

First, you need to have environment variables defined. For example, let’s say you wanted to consume a secret defined
in the environment inside a `<form>`:

```jsx
render() {
  return (
    <div>
      <small>You are running this application in <b>{process.env.NODE_ENV}</b> mode.</small>
      <form>
        <input type=""hidden"" defaultValue={process.env.REACT_APP_SECRET_CODE} />
      </form>
    </div>
  );
}
```

During the build, `process.env.REACT_APP_SECRET_CODE` will be replaced with the current value of the `REACT_APP_SECRET_CODE` environment variable. Remember that the `NODE_ENV` variable will be set for you automatically.

When you load the app in the browser and inspect the `<input>`, you will see its value set to `abcdef`, and the bold text will show the environment provided when using `npm start`:

```html
<div>
  <small>You are running this application in <b>development</b> mode.</small>
  <form>
    <input type=""hidden"" value=""abcdef"" />
  </form>
</div>
```

The above form is looking for a variable called `REACT_APP_SECRET_CODE` from the environment. In order to consume this
value, we need to have it defined in the environment. This can be done using two ways: either in your shell or in
a `.env` file. Both of these ways are described in the next few sections.

Having access to the `NODE_ENV` is also useful for performing actions conditionally:

```js
if (process.env.NODE_ENV !== 'production') {
  analytics.disable();
}
```

When you compile the app with `npm run build`, the minification step will strip out this condition, and the resulting bundle will be smaller.

### Referencing Environment Variables in the HTML

>Note: this feature is available with `react-scripts@0.9.0` and higher.

You can also access the environment variables starting with `REACT_APP_` in the `public/index.html`. For example:

```html
<title>%REACT_APP_WEBSITE_NAME%</title>
```

Note that the caveats from the above section apply:

* Apart from a few built-in variables (`NODE_ENV` and `PUBLIC_URL`), variable names must start with `REACT_APP_` to work.
* The environment variables are injected at build time. If you need to inject them at runtime, [follow this approach instead](#generating-dynamic-meta-tags-on-the-server).

### Adding Temporary Environment Variables In Your Shell

Defining environment variables can vary between OSes. It’s also important to know that this manner is temporary for the
life of the shell session.

#### Windows (cmd.exe)

```cmd
set REACT_APP_SECRET_CODE=abcdef&&npm start
```

(Note: the lack of whitespace is intentional.)

#### Linux, macOS (Bash)

```bash
REACT_APP_SECRET_CODE=abcdef npm start
```

### Adding Development Environment Variables In `.env`

>Note: this feature is available with `react-scripts@0.5.0` and higher.

To define permanent environment variables, create a file called `.env` in the root of your project:

```
REACT_APP_SECRET_CODE=abcdef
```

`.env` files **should be** checked into source control (with the exclusion of `.env*.local`).

#### What other `.env` files are can be used?

>Note: this feature is **available with `react-scripts@1.0.0` and higher**.

* `.env`: Default.
* `.env.local`: Local overrides. **This file is loaded for all environments except test.**
* `.env.development`, `.env.test`, `.env.production`: Environment-specific settings.
* `.env.development.local`, `.env.test.local`, `.env.production.local`: Local overrides of environment-specific settings.

Files on the left have more priority than files on the right:

* `npm start`: `.env.development.local`, `.env.development`, `.env.local`, `.env`
* `npm run build`: `.env.production.local`, `.env.production`, `.env.local`, `.env`
* `npm test`: `.env.test.local`, `.env.test`, `.env` (note `.env.local` is missing)

These variables will act as the defaults if the machine does not explicitly set them.<br>
Please refer to the [dotenv documentation](https://github.com/motdotla/dotenv) for more details.

>Note: If you are defining environment variables for development, your CI and/or hosting platform will most likely need
these defined as well. Consult their documentation how to do this. For example, see the documentation for [Travis CI](https://docs.travis-ci.com/user/environment-variables/) or [Heroku](https://devcenter.heroku.com/articles/config-vars).

## Can I Use Decorators?

Many popular libraries use [decorators](https://medium.com/google-developers/exploring-es7-decorators-76ecb65fb841) in their documentation.<br>
Create React App doesn’t support decorator syntax at the moment because:

* It is an experimental proposal and is subject to change.
* The current specification version is not officially supported by Babel.
* If the specification changes, we won’t be able to write a codemod because we don’t use them internally at Facebook.

However in many cases you can rewrite decorator-based code without decorators just as fine.<br>
Please refer to these two threads for reference:

* [#214](https://github.com/facebookincubator/create-react-app/issues/214)
* [#411](https://github.com/facebookincubator/create-react-app/issues/411)

Create React App will add decorator support when the specification advances to a stable stage.

## Integrating with an API Backend

These tutorials will help you to integrate your app with an API backend running on another port,
using `fetch()` to access it.

### Node
Check out [this tutorial](https://www.fullstackreact.com/articles/using-create-react-app-with-a-server/).
You can find the companion GitHub repository [here](https://github.com/fullstackreact/food-lookup-demo).

### Ruby on Rails

Check out [this tutorial](https://www.fullstackreact.com/articles/how-to-get-create-react-app-to-work-with-your-rails-api/).
You can find the companion GitHub repository [here](https://github.com/fullstackreact/food-lookup-demo-rails).

## Proxying API Requests in Development

>Note: this feature is available with `react-scripts@0.2.3` and higher.

People often serve the front-end React app from the same host and port as their backend implementation.<br>
For example, a production setup might look like this after the app is deployed:

```
/             - static server returns index.html with React app
/todos        - static server returns index.html with React app
/api/todos    - server handles any /api/* requests using the backend implementation
```

Such setup is **not** required. However, if you **do** have a setup like this, it is convenient to write requests like `fetch('/api/todos')` without worrying about redirecting them to another host or port during development.

To tell the development server to proxy any unknown requests to your API server in development, add a `proxy` field to your `package.json`, for example:

```js
  ""proxy"": ""http://localhost:4000"",
```

This way, when you `fetch('/api/todos')` in development, the development server will recognize that it’s not a static asset, and will proxy your request to `http://localhost:4000/api/todos` as a fallback. The development server will only attempt to send requests without a `text/html` accept header to the proxy.

Conveniently, this avoids [CORS issues](http://stackoverflow.com/questions/21854516/understanding-ajax-cors-and-security-considerations) and error messages like this in development:

```
Fetch API cannot load http://localhost:4000/api/todos. No 'Access-Control-Allow-Origin' header is present on the requested resource. Origin 'http://localhost:3000' is therefore not allowed access. If an opaque response serves your needs, set the request's mode to 'no-cors' to fetch the resource with CORS disabled.
```

Keep in mind that `proxy` only has effect in development (with `npm start`), and it is up to you to ensure that URLs like `/api/todos` point to the right thing in production. You don’t have to use the `/api` prefix. Any unrecognized request without a `text/html` accept header will be redirected to the specified `proxy`.

The `proxy` option supports HTTP, HTTPS and WebSocket connections.<br>
If the `proxy` option is **not** flexible enough for you, alternatively you can:

* [Configure the proxy yourself](#configuring-the-proxy-manually)
* Enable CORS on your server ([here’s how to do it for Express](http://enable-cors.org/server_expressjs.html)).
* Use [environment variables](#adding-custom-environment-variables) to inject the right server host and port into your app.

### ""Invalid Host Header"" Errors After Configuring Proxy

When you enable the `proxy` option, you opt into a more strict set of host checks. This is necessary because leaving the backend open to remote hosts makes your computer vulnerable to DNS rebinding attacks. The issue is explained in [this article](https://medium.com/webpack/webpack-dev-server-middleware-security-issues-1489d950874a) and [this issue](https://github.com/webpack/webpack-dev-server/issues/887).

This shouldn’t affect you when developing on `localhost`, but if you develop remotely like [described here](https://github.com/facebookincubator/create-react-app/issues/2271), you will see this error in the browser after enabling the `proxy` option:

>Invalid Host header

To work around it, you can specify your public development host in a file called `.env.development` in the root of your project:

```
HOST=mypublicdevhost.com
```

If you restart the development server now and load the app from the specified host, it should work.

If you are still having issues or if you’re using a more exotic environment like a cloud editor, you can bypass the host check completely by adding a line to `.env.development.local`. **Note that this is dangerous and exposes your machine to remote code execution from malicious websites:**

```
# NOTE: THIS IS DANGEROUS!
# It exposes your machine to attacks from the websites you visit.
DANGEROUSLY_DISABLE_HOST_CHECK=true
```

We don’t recommend this approach.

### Configuring the Proxy Manually

>Note: this feature is available with `react-scripts@1.0.0` and higher.

If the `proxy` option is **not** flexible enough for you, you can specify an object in the following form (in `package.json`).<br>
You may also specify any configuration value [`http-proxy-middleware`](https://github.com/chimurai/http-proxy-middleware#options) or [`http-proxy`](https://github.com/nodejitsu/node-http-proxy#options) supports.
```js
{
  // ...
  ""proxy"": {
    ""/api"": {
      ""target"": ""<url>"",
      ""ws"": true
      // ...
    }
  }
  // ...
}
```

All requests matching this path will be proxies, no exceptions. This includes requests for `text/html`, which the standard `proxy` option does not proxy.

If you need to specify multiple proxies, you may do so by specifying additional entries.
You may also narrow down matches using `*` and/or `**`, to match the path exactly or any subpath.
```js
{
  // ...
  ""proxy"": {
    // Matches any request starting with /api
    ""/api"": {
      ""target"": ""<url_1>"",
      ""ws"": true
      // ...
    },
    // Matches any request starting with /foo
    ""/foo"": {
      ""target"": ""<url_2>"",
      ""ssl"": true,
      ""pathRewrite"": {
        ""^/foo"": ""/foo/beta""
      }
      // ...
    },
    // Matches /bar/abc.html but not /bar/sub/def.html
    ""/bar/*.html"": {
      ""target"": ""<url_3>"",
      // ...
    },
    // Matches /baz/abc.html and /baz/sub/def.html
    ""/baz/**/*.html"": {
      ""target"": ""<url_4>""
      // ...
    }
  }
  // ...
}
```

### Configuring a WebSocket Proxy

When setting up a WebSocket proxy, there are a some extra considerations to be aware of.

If you’re using a WebSocket engine like [Socket.io](https://socket.io/), you must have a Socket.io server running that you can use as the proxy target. Socket.io will not work with a standard WebSocket server. Specifically, don't expect Socket.io to work with [the websocket.org echo test](http://websocket.org/echo.html).

There’s some good documentation available for [setting up a Socket.io server](https://socket.io/docs/).

Standard WebSockets **will** work with a standard WebSocket server as well as the websocket.org echo test. You can use libraries like [ws](https://github.com/websockets/ws) for the server, with [native WebSockets in the browser](https://developer.mozilla.org/en-US/docs/Web/API/WebSocket).

Either way, you can proxy WebSocket requests manually in `package.json`:

```js
{
  // ...
  ""proxy"": {
    ""/socket"": {
      // Your compatible WebSocket server
      ""target"": ""ws://<socket_url>"",
      // Tell http-proxy-middleware that this is a WebSocket proxy.
      // Also allows you to proxy WebSocket requests without an additional HTTP request
      // https://github.com/chimurai/http-proxy-middleware#external-websocket-upgrade
      ""ws"": true
      // ...
    }
  }
  // ...
}
```

## Using HTTPS in Development

>Note: this feature is available with `react-scripts@0.4.0` and higher.

You may require the dev server to serve pages over HTTPS. One particular case where this could be useful is when using [the ""proxy"" feature](#proxying-api-requests-in-development) to proxy requests to an API server when that API server is itself serving HTTPS.

To do this, set the `HTTPS` environment variable to `true`, then start the dev server as usual with `npm start`:

#### Windows (cmd.exe)

```cmd
set HTTPS=true&&npm start
```

(Note: the lack of whitespace is intentional.)

#### Linux, macOS (Bash)

```bash
HTTPS=true npm start
```

Note that the server will use a self-signed certificate, so your web browser will almost definitely display a warning upon accessing the page.

## Generating Dynamic `<meta>` Tags on the Server

Since Create React App doesn’t support server rendering, you might be wondering how to make `<meta>` tags dynamic and reflect the current URL. To solve this, we recommend to add placeholders into the HTML, like this:

```html
<!doctype html>
<html lang=""en"">
  <head>
    <meta property=""og:title"" content=""__OG_TITLE__"">
    <meta property=""og:description"" content=""__OG_DESCRIPTION__"">
```

Then, on the server, regardless of the backend you use, you can read `index.html` into memory and replace `__OG_TITLE__`, `__OG_DESCRIPTION__`, and any other placeholders with values depending on the current URL. Just make sure to sanitize and escape the interpolated values so that they are safe to embed into HTML!

If you use a Node server, you can even share the route matching logic between the client and the server. However duplicating it also works fine in simple cases.

## Pre-Rendering into Static HTML Files

If you’re hosting your `build` with a static hosting provider you can use [react-snapshot](https://www.npmjs.com/package/react-snapshot) to generate HTML pages for each route, or relative link, in your application. These pages will then seamlessly become active, or “hydrated”, when the JavaScript bundle has loaded.

There are also opportunities to use this outside of static hosting, to take the pressure off the server when generating and caching routes.

The primary benefit of pre-rendering is that you get the core content of each page _with_ the HTML payload—regardless of whether or not your JavaScript bundle successfully downloads. It also increases the likelihood that each route of your application will be picked up by search engines.

You can read more about [zero-configuration pre-rendering (also called snapshotting) here](https://medium.com/superhighfives/an-almost-static-stack-6df0a2791319).

## Injecting Data from the Server into the Page

Similarly to the previous section, you can leave some placeholders in the HTML that inject global variables, for example:

```js
<!doctype html>
<html lang=""en"">
  <head>
    <script>
      window.SERVER_DATA = __SERVER_DATA__;
    </script>
```

Then, on the server, you can replace `__SERVER_DATA__` with a JSON of real data right before sending the response. The client code can then read `window.SERVER_DATA` to use it. **Make sure to [sanitize the JSON before sending it to the client](https://medium.com/node-security/the-most-common-xss-vulnerability-in-react-js-applications-2bdffbcc1fa0) as it makes your app vulnerable to XSS attacks.**

## Running Tests

>Note: this feature is available with `react-scripts@0.3.0` and higher.<br>
>[Read the migration guide to learn how to enable it in older projects!](https://github.com/facebookincubator/create-react-app/blob/master/CHANGELOG.md#migrating-from-023-to-030)

Create React App uses [Jest](https://facebook.github.io/jest/) as its test runner. To prepare for this integration, we did a [major revamp](https://facebook.github.io/jest/blog/2016/09/01/jest-15.html) of Jest so if you heard bad things about it years ago, give it another try.

Jest is a Node-based runner. This means that the tests always run in a Node environment and not in a real browser. This lets us enable fast iteration speed and prevent flakiness.

While Jest provides browser globals such as `window` thanks to [jsdom](https://github.com/tmpvar/jsdom), they are only approximations of the real browser behavior. Jest is intended to be used for unit tests of your logic and your components rather than the DOM quirks.

We recommend that you use a separate tool for browser end-to-end tests if you need them. They are beyond the scope of Create React App.

### Filename Conventions

Jest will look for test files with any of the following popular naming conventions:

* Files with `.js` suffix in `__tests__` folders.
* Files with `.test.js` suffix.
* Files with `.spec.js` suffix.

The `.test.js` / `.spec.js` files (or the `__tests__` folders) can be located at any depth under the `src` top level folder.

We recommend to put the test files (or `__tests__` folders) next to the code they are testing so that relative imports appear shorter. For example, if `App.test.js` and `App.js` are in the same folder, the test just needs to `import App from './App'` instead of a long relative path. Colocation also helps find tests more quickly in larger projects.

### Command Line Interface

When you run `npm test`, Jest will launch in the watch mode. Every time you save a file, it will re-run the tests, just like `npm start` recompiles the code.

The watcher includes an interactive command-line interface with the ability to run all tests, or focus on a search pattern. It is designed this way so that you can keep it open and enjoy fast re-runs. You can learn the commands from the “Watch Usage” note that the watcher prints after every run:

![Jest watch mode](http://facebook.github.io/jest/img/blog/15-watch.gif)

### Version Control Integration

By default, when you run `npm test`, Jest will only run the tests related to files changed since the last commit. This is an optimization designed to make your tests run fast regardless of how many tests you have. However it assumes that you don’t often commit the code that doesn’t pass the tests.

Jest will always explicitly mention that it only ran tests related to the files changed since the last commit. You can also press `a` in the watch mode to force Jest to run all tests.

Jest will always run all tests on a [continuous integration](#continuous-integration) server or if the project is not inside a Git or Mercurial repository.

### Writing Tests

To create tests, add `it()` (or `test()`) blocks with the name of the test and its code. You may optionally wrap them in `describe()` blocks for logical grouping but this is neither required nor recommended.

Jest provides a built-in `expect()` global function for making assertions. A basic test could look like this:

```js
import sum from './sum';

it('sums numbers', () => {
  expect(sum(1, 2)).toEqual(3);
  expect(sum(2, 2)).toEqual(4);
});
```

All `expect()` matchers supported by Jest are [extensively documented here](http://facebook.github.io/jest/docs/expect.html).<br>
You can also use [`jest.fn()` and `expect(fn).toBeCalled()`](http://facebook.github.io/jest/docs/expect.html#tohavebeencalled) to create “spies” or mock functions.

### Testing Components

There is a broad spectrum of component testing techniques. They range from a “smoke test” verifying that a component renders without throwing, to shallow rendering and testing some of the output, to full rendering and testing component lifecycle and state changes.

Different projects choose different testing tradeoffs based on how often components change, and how much logic they contain. If you haven’t decided on a testing strategy yet, we recommend that you start with creating simple smoke tests for your components:

```js
import React from 'react';
import ReactDOM from 'react-dom';
import App from './App';

it('renders without crashing', () => {
  const div = document.createElement('div');
  ReactDOM.render(<App />, div);
});
```

This test mounts a component and makes sure that it didn’t throw during rendering. Tests like this provide a lot value with very little effort so they are great as a starting point, and this is the test you will find in `src/App.test.js`.

When you encounter bugs caused by changing components, you will gain a deeper insight into which parts of them are worth testing in your application. This might be a good time to introduce more specific tests asserting specific expected output or behavior.

If you’d like to test components in isolation from the child components they render, we recommend using [`shallow()` rendering API](http://airbnb.io/enzyme/docs/api/shallow.html) from [Enzyme](http://airbnb.io/enzyme/). To install it, run:

```sh
npm install --save enzyme react-test-renderer
```

Alternatively you may use `yarn`:

```sh
yarn add enzyme react-test-renderer
```

You can write a smoke test with it too:

```js
import React from 'react';
import { shallow } from 'enzyme';
import App from './App';

it('renders without crashing', () => {
  shallow(<App />);
});
```

Unlike the previous smoke test using `ReactDOM.render()`, this test only renders `<App>` and doesn’t go deeper. For example, even if `<App>` itself renders a `<Button>` that throws, this test will pass. Shallow rendering is great for isolated unit tests, but you may still want to create some full rendering tests to ensure the components integrate correctly. Enzyme supports [full rendering with `mount()`](http://airbnb.io/enzyme/docs/api/mount.html), and you can also use it for testing state changes and component lifecycle.

You can read the [Enzyme documentation](http://airbnb.io/enzyme/) for more testing techniques. Enzyme documentation uses Chai and Sinon for assertions but you don’t have to use them because Jest provides built-in `expect()` and `jest.fn()` for spies.

Here is an example from Enzyme documentation that asserts specific output, rewritten to use Jest matchers:

```js
import React from 'react';
import { shallow } from 'enzyme';
import App from './App';

it('renders welcome message', () => {
  const wrapper = shallow(<App />);
  const welcome = <h2>Welcome to React</h2>;
  // expect(wrapper.contains(welcome)).to.equal(true);
  expect(wrapper.contains(welcome)).toEqual(true);
});
```

All Jest matchers are [extensively documented here](http://facebook.github.io/jest/docs/expect.html).<br>
Nevertheless you can use a third-party assertion library like [Chai](http://chaijs.com/) if you want to, as described below.

Additionally, you might find [jest-enzyme](https://github.com/blainekasten/enzyme-matchers) helpful to simplify your tests with readable matchers. The above `contains` code can be written simpler with jest-enzyme.

```js
expect(wrapper).toContainReact(welcome)
```

To enable this, install `jest-enzyme`:

```sh
npm install --save jest-enzyme
```

Alternatively you may use `yarn`:

```sh
yarn add jest-enzyme
```

Import it in [`src/setupTests.js`](#initializing-test-environment) to make its matchers available in every test:

```js
import 'jest-enzyme';
```

### Using Third Party Assertion Libraries

We recommend that you use `expect()` for assertions and `jest.fn()` for spies. If you are having issues with them please [file those against Jest](https://github.com/facebook/jest/issues/new), and we’ll fix them. We intend to keep making them better for React, supporting, for example, [pretty-printing React elements as JSX](https://github.com/facebook/jest/pull/1566).

However, if you are used to other libraries, such as [Chai](http://chaijs.com/) and [Sinon](http://sinonjs.org/), or if you have existing code using them that you’d like to port over, you can import them normally like this:

```js
import sinon from 'sinon';
import { expect } from 'chai';
```

and then use them in your tests like you normally do.

### Initializing Test Environment

>Note: this feature is available with `react-scripts@0.4.0` and higher.

If your app uses a browser API that you need to mock in your tests or if you just need a global setup before running your tests, add a `src/setupTests.js` to your project. It will be automatically executed before running your tests.

For example:

#### `src/setupTests.js`
```js
const localStorageMock = {
  getItem: jest.fn(),
  setItem: jest.fn(),
  clear: jest.fn()
};
global.localStorage = localStorageMock
```

### Focusing and Excluding Tests

You can replace `it()` with `xit()` to temporarily exclude a test from being executed.<br>
Similarly, `fit()` lets you focus on a specific test without running any other tests.

### Coverage Reporting

Jest has an integrated coverage reporter that works well with ES6 and requires no configuration.<br>
Run `npm test -- --coverage` (note extra `--` in the middle) to include a coverage report like this:

![coverage report](http://i.imgur.com/5bFhnTS.png)

Note that tests run much slower with coverage so it is recommended to run it separately from your normal workflow.

### Continuous Integration

By default `npm test` runs the watcher with interactive CLI. However, you can force it to run tests once and finish the process by setting an environment variable called `CI`.

When creating a build of your application with `npm run build` linter warnings are not checked by default. Like `npm test`, you can force the build to perform a linter warning check by setting the environment variable `CI`. If any warnings are encountered then the build fails.

Popular CI servers already set the environment variable `CI` by default but you can do this yourself too:

### On CI servers
#### Travis CI

1. Following the [Travis Getting started](https://docs.travis-ci.com/user/getting-started/) guide for syncing your GitHub repository with Travis.  You may need to initialize some settings manually in your [profile](https://travis-ci.org/profile) page.
1. Add a `.travis.yml` file to your git repository.
```
language: node_js
node_js:
  - 6
cache:
  directories:
    - node_modules
script:
  - npm test
  - npm run build
```
1. Trigger your first build with a git push.
1. [Customize your Travis CI Build](https://docs.travis-ci.com/user/customizing-the-build/) if needed.

#### CircleCI

Follow [this article](https://medium.com/@knowbody/circleci-and-zeits-now-sh-c9b7eebcd3c1) to set up CircleCI with a Create React App project.

### On your own environment
##### Windows (cmd.exe)

```cmd
set CI=true&&npm test
```

```cmd
set CI=true&&npm run build
```

(Note: the lack of whitespace is intentional.)

##### Linux, macOS (Bash)

```bash
CI=true npm test
```

```bash
CI=true npm run build
```

The test command will force Jest to run tests once instead of launching the watcher.

>  If you find yourself doing this often in development, please [file an issue](https://github.com/facebookincubator/create-react-app/issues/new) to tell us about your use case because we want to make watcher the best experience and are open to changing how it works to accommodate more workflows.

The build command will check for linter warnings and fail if any are found.

### Disabling jsdom

By default, the `package.json` of the generated project looks like this:

```js
  ""scripts"": {
    ""start"": ""react-scripts start"",
    ""build"": ""react-scripts build"",
    ""test"": ""react-scripts test --env=jsdom""
```

If you know that none of your tests depend on [jsdom](https://github.com/tmpvar/jsdom), you can safely remove `--env=jsdom`, and your tests will run faster:

```diff
  ""scripts"": {
    ""start"": ""react-scripts start"",
    ""build"": ""react-scripts build"",
-   ""test"": ""react-scripts test --env=jsdom""
+   ""test"": ""react-scripts test""
```

To help you make up your mind, here is a list of APIs that **need jsdom**:

* Any browser globals like `window` and `document`
* [`ReactDOM.render()`](https://facebook.github.io/react/docs/top-level-api.html#reactdom.render)
* [`TestUtils.renderIntoDocument()`](https://facebook.github.io/react/docs/test-utils.html#renderintodocument) ([a shortcut](https://github.com/facebook/react/blob/34761cf9a252964abfaab6faf74d473ad95d1f21/src/test/ReactTestUtils.js#L83-L91) for the above)
* [`mount()`](http://airbnb.io/enzyme/docs/api/mount.html) in [Enzyme](http://airbnb.io/enzyme/index.html)

In contrast, **jsdom is not needed** for the following APIs:

* [`TestUtils.createRenderer()`](https://facebook.github.io/react/docs/test-utils.html#shallow-rendering) (shallow rendering)
* [`shallow()`](http://airbnb.io/enzyme/docs/api/shallow.html) in [Enzyme](http://airbnb.io/enzyme/index.html)

Finally, jsdom is also not needed for [snapshot testing](http://facebook.github.io/jest/blog/2016/07/27/jest-14.html).

### Snapshot Testing

Snapshot testing is a feature of Jest that automatically generates text snapshots of your components and saves them on the disk so if the UI output changes, you get notified without manually writing any assertions on the component output. [Read more about snapshot testing.](http://facebook.github.io/jest/blog/2016/07/27/jest-14.html)

### Editor Integration

If you use [Visual Studio Code](https://code.visualstudio.com), there is a [Jest extension](https://github.com/orta/vscode-jest) which works with Create React App out of the box. This provides a lot of IDE-like features while using a text editor: showing the status of a test run with potential fail messages inline, starting and stopping the watcher automatically, and offering one-click snapshot updates.

![VS Code Jest Preview](https://cloud.githubusercontent.com/assets/49038/20795349/a032308a-b7c8-11e6-9b34-7eeac781003f.png)

## Developing Components in Isolation

Usually, in an app, you have a lot of UI components, and each of them has many different states.
For an example, a simple button component could have following states:

* In a regular state, with a text label.
* In the disabled mode.
* In a loading state.

Usually, it’s hard to see these states without running a sample app or some examples.

Create React App doesn’t include any tools for this by default, but you can easily add [Storybook for React](https://storybook.js.org) ([source](https://github.com/storybooks/storybook)) or [React Styleguidist](https://react-styleguidist.js.org/) ([source](https://github.com/styleguidist/react-styleguidist)) to your project. **These are third-party tools that let you develop components and see all their states in isolation from your app**.

![Storybook for React Demo](http://i.imgur.com/7CIAWpB.gif)

You can also deploy your Storybook or style guide as a static app. This way, everyone in your team can view and review different states of UI components without starting a backend server or creating an account in your app.

### Getting Started with Storybook

Storybook is a development environment for React UI components. It allows you to browse a component library, view the different states of each component, and interactively develop and test components.

First, install the following npm package globally:

```sh
npm install -g @storybook/cli
```

Then, run the following command inside your app’s directory:

```sh
getstorybook
```

After that, follow the instructions on the screen.

Learn more about React Storybook:

* Screencast: [Getting Started with React Storybook](https://egghead.io/lessons/react-getting-started-with-react-storybook)
* [GitHub Repo](https://github.com/storybooks/storybook)
* [Documentation](https://storybook.js.org/basics/introduction/)
* [Snapshot Testing UI](https://github.com/storybooks/storybook/tree/master/addons/storyshots) with Storybook + addon/storyshot

### Getting Started with Styleguidist

Styleguidist combines a style guide, where all your components are presented on a single page with their props documentation and usage examples, with an environment for developing components in isolation, similar to Storybook. In Styleguidist you write examples in Markdown, where each code snippet is rendered as a live editable playground.

First, install Styleguidist:

```sh
npm install --save react-styleguidist
```

Alternatively you may use `yarn`:

```sh
yarn add react-styleguidist
```

Then, add these scripts to your `package.json`:

```diff
   ""scripts"": {
+    ""styleguide"": ""styleguidist server"",
+    ""styleguide:build"": ""styleguidist build"",
     ""start"": ""react-scripts start"",
```

Then, run the following command inside your app’s directory:

```sh
npm run styleguide
```

After that, follow the instructions on the screen.

Learn more about React Styleguidist:

* [GitHub Repo](https://github.com/styleguidist/react-styleguidist)
* [Documentation](https://react-styleguidist.js.org/docs/getting-started.html)

## Making a Progressive Web App

By default, the production build is a fully functional, offline-first
[Progressive Web App](https://developers.google.com/web/progressive-web-apps/).

Progressive Web Apps are faster and more reliable than traditional web pages, and provide an engaging mobile experience:

 * All static site assets are cached so that your page loads fast on subsequent visits, regardless of network connectivity (such as 2G or 3G). Updates are downloaded in the background.
 * Your app will work regardless of network state, even if offline. This means your users will be able to use your app at 10,000 feet and on the Subway.
 * On mobile devices, your app can be added directly to the user's home screen, app icon and all. You can also re-engage users using web **push notifications**. This eliminates the need for the app store.

The [`sw-precache-webpack-plugin`](https://github.com/goldhand/sw-precache-webpack-plugin)
is integrated into production configuration,
and it will take care of generating a service worker file that will automatically
precache all of your local assets and keep them up to date as you deploy updates.
The service worker will use a [cache-first strategy](https://developers.google.com/web/fundamentals/instant-and-offline/offline-cookbook/#cache-falling-back-to-network)
for handling all requests for local assets, including the initial HTML, ensuring
that your web app is reliably fast, even on a slow or unreliable network.

If you would prefer not to enable service workers prior to your initial
production deployment, then remove the call to `serviceWorkerRegistration.register()`
from [`src/index.js`](src/index.js).

If you had previously enabled service workers in your production deployment and
have decided that you would like to disable them for all your existing users,
you can swap out the call to `serviceWorkerRegistration.register()` in
[`src/index.js`](src/index.js) with a call to `serviceWorkerRegistration.unregister()`.
After the user visits a page that has `serviceWorkerRegistration.unregister()`,
the service worker will be uninstalled.

### Offline-First Considerations

1. Service workers [require HTTPS](https://developers.google.com/web/fundamentals/getting-started/primers/service-workers#you_need_https),
although to facilitate local testing, that policy
[does not apply to `localhost`](http://stackoverflow.com/questions/34160509/options-for-testing-service-workers-via-http/34161385#34161385).
If your production web server does not support HTTPS, then the service worker
registration will fail, but the rest of your web app will remain functional.

1. Service workers are [not currently supported](https://jakearchibald.github.io/isserviceworkerready/)
in all web browsers. Service worker registration [won't be attempted](src/registerServiceWorker.js)
on browsers that lack support.

1. The service worker is only enabled in the [production environment](#deployment),
e.g. the output of `npm run build`. It's recommended that you do not enable an
offline-first service worker in a development environment, as it can lead to
frustration when previously cached assets are used and do not include the latest
changes you've made locally.

1. If you *need* to test your offline-first service worker locally, build
the application (using `npm run build`) and run a simple http server from your
build directory. After running the build script, `create-react-app` will give
instructions for one way to test your production build locally and the [deployment instructions](#deployment) have
instructions for using other methods. *Be sure to always use an
incognito window to avoid complications with your browser cache.*

1. If possible, configure your production environment to serve the generated
`service-worker.js` [with HTTP caching disabled](http://stackoverflow.com/questions/38843970/service-worker-javascript-update-frequency-every-24-hours).
If that's not possible—[GitHub Pages](#github-pages), for instance, does not
allow you to change the default 10 minute HTTP cache lifetime—then be aware
that if you visit your production site, and then revisit again before
`service-worker.js` has expired from your HTTP cache, you'll continue to get
the previously cached assets from the service worker. If you have an immediate
need to view your updated production deployment, performing a shift-refresh
will temporarily disable the service worker and retrieve all assets from the
network.

1. Users aren't always familiar with offline-first web apps. It can be useful to
[let the user know](https://developers.google.com/web/fundamentals/instant-and-offline/offline-ux#inform_the_user_when_the_app_is_ready_for_offline_consumption)
when the service worker has finished populating your caches (showing a ""This web
app works offline!"" message) and also let them know when the service worker has
fetched the latest updates that will be available the next time they load the
page (showing a ""New content is available; please refresh."" message). Showing
this messages is currently left as an exercise to the developer, but as a
starting point, you can make use of the logic included in [`src/registerServiceWorker.js`](src/registerServiceWorker.js), which
demonstrates which service worker lifecycle events to listen for to detect each
scenario, and which as a default, just logs appropriate messages to the
JavaScript console.

1. By default, the generated service worker file will not intercept or cache any
cross-origin traffic, like HTTP [API requests](#integrating-with-an-api-backend),
images, or embeds loaded from a different domain. If you would like to use a
runtime caching strategy for those requests, you can [`eject`](#npm-run-eject)
and then configure the
[`runtimeCaching`](https://github.com/GoogleChrome/sw-precache#runtimecaching-arrayobject)
option in the `SWPrecacheWebpackPlugin` section of
[`webpack.config.prod.js`](../config/webpack.config.prod.js).

### Progressive Web App Metadata

The default configuration includes a web app manifest located at
[`public/manifest.json`](public/manifest.json), that you can customize with
details specific to your web application.

When a user adds a web app to their homescreen using Chrome or Firefox on
Android, the metadata in [`manifest.json`](public/manifest.json) determines what
icons, names, and branding colors to use when the web app is displayed.
[The Web App Manifest guide](https://developers.google.com/web/fundamentals/engage-and-retain/web-app-manifest/)
provides more context about what each field means, and how your customizations
will affect your users' experience.

## Analyzing the Bundle Size

[Source map explorer](https://www.npmjs.com/package/source-map-explorer) analyzes
JavaScript bundles using the source maps. This helps you understand where code
bloat is coming from.

To add Source map explorer to a Create React App project, follow these steps:

```sh
npm install --save source-map-explorer
```

Alternatively you may use `yarn`:

```sh
yarn add source-map-explorer
```

Then in `package.json`, add the following line to `scripts`:

```diff
   ""scripts"": {
+    ""analyze"": ""source-map-explorer build/static/js/main.*"",
     ""start"": ""react-scripts start"",
     ""build"": ""react-scripts build"",
     ""test"": ""react-scripts test --env=jsdom"",
```

>**Note:**
>
>This doesn't quite work on Windows because it doesn't automatically expand `*` in the filepath. For now, the workaround is to look at the full hashed filename in `build/static/js` (e.g. `main.89b7e95a.js`) and copy it into `package.json` when you're running the analyzer. For example:
>
>```diff
>+    ""analyze"": ""source-map-explorer build/static/js/main.89b7e95a.js"",
>```
>
>Unfortunately it will be different after every build. You can express support for fixing this on Windows [in this issue](https://github.com/danvk/source-map-explorer/issues/52).

Then to analyze the bundle run the production build then run the analyze
script.

```
npm run build
npm run analyze
```

## Deployment

`npm run build` creates a `build` directory with a production build of your app. Set up your favourite HTTP server so that a visitor to your site is served `index.html`, and requests to static paths like `/static/js/main.<hash>.js` are served with the contents of the `/static/js/main.<hash>.js` file.

### Static Server

For environments using [Node](https://nodejs.org/), the easiest way to handle this would be to install [serve](https://github.com/zeit/serve) and let it handle the rest:

```sh
npm install -g serve
serve -s build
```

The last command shown above will serve your static site on the port **5000**. Like many of [serve](https://github.com/zeit/serve)’s internal settings, the port can be adjusted using the `-p` or `--port` flags.

Run this command to get a full list of the options available:

```sh
serve -h
```

### Other Solutions

You don’t necessarily need a static server in order to run a Create React App project in production. It works just as fine integrated into an existing dynamic one.

Here’s a programmatic example using [Node](https://nodejs.org/) and [Express](http://expressjs.com/):

```javascript
const express = require('express');
const path = require('path');
const app = express();

app.use(express.static(path.join(__dirname, 'build')));

app.get('/', function (req, res) {
  res.sendFile(path.join(__dirname, 'build', 'index.html'));
});

app.listen(9000);
```

The choice of your server software isn’t important either. Since Create React App is completely platform-agnostic, there’s no need to explicitly use Node.

The `build` folder with static assets is the only output produced by Create React App.

However this is not quite enough if you use client-side routing. Read the next section if you want to support URLs like `/todos/42` in your single-page app.

### Serving Apps with Client-Side Routing

If you use routers that use the HTML5 [`pushState` history API](https://developer.mozilla.org/en-US/docs/Web/API/History_API#Adding_and_modifying_history_entries) under the hood (for example, [React Router](https://github.com/ReactTraining/react-router) with `browserHistory`), many static file servers will fail. For example, if you used React Router with a route for `/todos/42`, the development server will respond to `localhost:3000/todos/42` properly, but an Express serving a production build as above will not.

This is because when there is a fresh page load for a `/todos/42`, the server looks for the file `build/todos/42` and does not find it. The server needs to be configured to respond to a request to `/todos/42` by serving `index.html`. For example, we can amend our Express example above to serve `index.html` for any unknown paths:

```diff
 app.use(express.static(path.join(__dirname, 'build')));

-app.get('/', function (req, res) {
+app.get('/*', function (req, res) {
   res.sendFile(path.join(__dirname, 'build', 'index.html'));
 });
```

If you’re using [Apache HTTP Server](https://httpd.apache.org/), you need to create a `.htaccess` file in the `public` folder that looks like this:

```
    Options -MultiViews
    RewriteEngine On
    RewriteCond %{REQUEST_FILENAME} !-f
    RewriteRule ^ index.html [QSA,L]
```

It will get copied to the `build` folder when you run `npm run build`. 

If you’re using [Apache Tomcat](http://tomcat.apache.org/), you need to follow [this Stack Overflow answer](https://stackoverflow.com/a/41249464/4878474).

Now requests to `/todos/42` will be handled correctly both in development and in production.

On a production build, and in a browser that supports [service workers](https://developers.google.com/web/fundamentals/getting-started/primers/service-workers),
the service worker will automatically handle all navigation requests, like for
`/todos/42`, by serving the cached copy of your `index.html`. This
service worker navigation routing can be configured or disabled by
[`eject`ing](#npm-run-eject) and then modifying the
[`navigateFallback`](https://github.com/GoogleChrome/sw-precache#navigatefallback-string)
and [`navigateFallbackWhitelist`](https://github.com/GoogleChrome/sw-precache#navigatefallbackwhitelist-arrayregexp)
options of the `SWPreachePlugin` [configuration](../config/webpack.config.prod.js).

### Building for Relative Paths

By default, Create React App produces a build assuming your app is hosted at the server root.<br>
To override this, specify the `homepage` in your `package.json`, for example:

```js
  ""homepage"": ""http://mywebsite.com/relativepath"",
```

This will let Create React App correctly infer the root path to use in the generated HTML file.

#### Serving the Same Build from Different Paths

>Note: this feature is available with `react-scripts@0.9.0` and higher.

If you are not using the HTML5 `pushState` history API or not using client-side routing at all, it is unnecessary to specify the URL from which your app will be served. Instead, you can put this in your `package.json`:

```js
  ""homepage"": ""."",
```

This will make sure that all the asset paths are relative to `index.html`. You will then be able to move your app from `http://mywebsite.com` to `http://mywebsite.com/relativepath` or even `http://mywebsite.com/relative/path` without having to rebuild it.

### Azure

See [this](https://medium.com/@to_pe/deploying-create-react-app-on-microsoft-azure-c0f6686a4321) blog post on how to deploy your React app to [Microsoft Azure](https://azure.microsoft.com/).

### Firebase

Install the Firebase CLI if you haven’t already by running `npm install -g firebase-tools`. Sign up for a [Firebase account](https://console.firebase.google.com/) and create a new project. Run `firebase login` and login with your previous created Firebase account.

Then run the `firebase init` command from your project’s root. You need to choose the **Hosting: Configure and deploy Firebase Hosting sites** and choose the Firebase project you created in the previous step. You will need to agree with `database.rules.json` being created, choose `build` as the public directory, and also agree to **Configure as a single-page app** by replying with `y`.

```sh
    === Project Setup

    First, let's associate this project directory with a Firebase project.
    You can create multiple project aliases by running firebase use --add,
    but for now we'll just set up a default project.

    ? What Firebase project do you want to associate as default? Example app (example-app-fd690)

    === Database Setup

    Firebase Realtime Database Rules allow you to define how your data should be
    structured and when your data can be read from and written to.

    ? What file should be used for Database Rules? database.rules.json
    ✔  Database Rules for example-app-fd690 have been downloaded to database.rules.json.
    Future modifications to database.rules.json will update Database Rules when you run
    firebase deploy.

    === Hosting Setup

    Your public directory is the folder (relative to your project directory) that
    will contain Hosting assets to uploaded with firebase deploy. If you
    have a build process for your assets, use your build's output directory.

    ? What do you want to use as your public directory? build
    ? Configure as a single-page app (rewrite all urls to /index.html)? Yes
    ✔  Wrote build/index.html

    i  Writing configuration info to firebase.json...
    i  Writing project information to .firebaserc...

    ✔  Firebase initialization complete!
```

Now, after you create a production build with `npm run build`, you can deploy it by running `firebase deploy`.

```sh
    === Deploying to 'example-app-fd690'...

    i  deploying database, hosting
    ✔  database: rules ready to deploy.
    i  hosting: preparing build directory for upload...
    Uploading: [==============================          ] 75%✔  hosting: build folder uploaded successfully
    ✔  hosting: 8 files uploaded successfully
    i  starting release process (may take several minutes)...

    ✔  Deploy complete!

    Project Console: https://console.firebase.google.com/project/example-app-fd690/overview
    Hosting URL: https://example-app-fd690.firebaseapp.com
```

For more information see [Add Firebase to your JavaScript Project](https://firebase.google.com/docs/web/setup).

### GitHub Pages

>Note: this feature is available with `react-scripts@0.2.0` and higher.

#### Step 1: Add `homepage` to `package.json`

**The step below is important!**<br>
**If you skip it, your app will not deploy correctly.**

Open your `package.json` and add a `homepage` field:

```js
  ""homepage"": ""https://myusername.github.io/my-app"",
```

Create React App uses the `homepage` field to determine the root URL in the built HTML file.

#### Step 2: Install `gh-pages` and add `deploy` to `scripts` in `package.json`

Now, whenever you run `npm run build`, you will see a cheat sheet with instructions on how to deploy to GitHub Pages.

To publish it at [https://myusername.github.io/my-app](https://myusername.github.io/my-app), run:

```sh
npm install --save gh-pages
```

Alternatively you may use `yarn`:

```sh
yarn add gh-pages
```

Add the following scripts in your `package.json`:

```diff
  ""scripts"": {
+   ""predeploy"": ""npm run build"",
+   ""deploy"": ""gh-pages -d build"",
    ""start"": ""react-scripts start"",
    ""build"": ""react-scripts build"",
```

The `predeploy` script will run automatically before `deploy` is run.

#### Step 3: Deploy the site by running `npm run deploy`

Then run:

```sh
npm run deploy
```

#### Step 4: Ensure your project’s settings use `gh-pages`

Finally, make sure **GitHub Pages** option in your GitHub project settings is set to use the `gh-pages` branch:

<img src=""http://i.imgur.com/HUjEr9l.png"" width=""500"" alt=""gh-pages branch setting"">

#### Step 5: Optionally, configure the domain

You can configure a custom domain with GitHub Pages by adding a `CNAME` file to the `public/` folder.

#### Notes on client-side routing

GitHub Pages doesn’t support routers that use the HTML5 `pushState` history API under the hood (for example, React Router using `browserHistory`). This is because when there is a fresh page load for a url like `http://user.github.io/todomvc/todos/42`, where `/todos/42` is a frontend route, the GitHub Pages server returns 404 because it knows nothing of `/todos/42`. If you want to add a router to a project hosted on GitHub Pages, here are a couple of solutions:

* You could switch from using HTML5 history API to routing with hashes. If you use React Router, you can switch to `hashHistory` for this effect, but the URL will be longer and more verbose (for example, `http://user.github.io/todomvc/#/todos/42?_k=yknaj`). [Read more](https://reacttraining.com/react-router/web/api/Router) about different history implementations in React Router.
* Alternatively, you can use a trick to teach GitHub Pages to handle 404 by redirecting to your `index.html` page with a special redirect parameter. You would need to add a `404.html` file with the redirection code to the `build` folder before deploying your project, and you’ll need to add code handling the redirect parameter to `index.html`. You can find a detailed explanation of this technique [in this guide](https://github.com/rafrex/spa-github-pages).

### Heroku

Use the [Heroku Buildpack for Create React App](https://github.com/mars/create-react-app-buildpack).<br>
You can find instructions in [Deploying React with Zero Configuration](https://blog.heroku.com/deploying-react-with-zero-configuration).

#### Resolving Heroku Deployment Errors

Sometimes `npm run build` works locally but fails during deploy via Heroku. Following are the most common cases.

##### ""Module not found: Error: Cannot resolve 'file' or 'directory'""

If you get something like this:

```
remote: Failed to create a production build. Reason:
remote: Module not found: Error: Cannot resolve 'file' or 'directory'
MyDirectory in /tmp/build_1234/src
```

It means you need to ensure that the lettercase of the file or directory you `import` matches the one you see on your filesystem or on GitHub.

This is important because Linux (the operating system used by Heroku) is case sensitive. So `MyDirectory` and `mydirectory` are two distinct directories and thus, even though the project builds locally, the difference in case breaks the `import` statements on Heroku remotes.

##### ""Could not find a required file.""

If you exclude or ignore necessary files from the package you will see a error similar this one:

```
remote: Could not find a required file.
remote:   Name: `index.html`
remote:   Searched in: /tmp/build_a2875fc163b209225122d68916f1d4df/public
remote:
remote: npm ERR! Linux 3.13.0-105-generic
remote: npm ERR! argv ""/tmp/build_a2875fc163b209225122d68916f1d4df/.heroku/node/bin/node"" ""/tmp/build_a2875fc163b209225122d68916f1d4df/.heroku/node/bin/npm"" ""run"" ""build""
```

In this case, ensure that the file is there with the proper lettercase and that’s not ignored on your local `.gitignore` or `~/.gitignore_global`.

### Modulus

See the [Modulus blog post](http://blog.modulus.io/deploying-react-apps-on-modulus) on how to deploy your react app to Modulus.

### Netlify

**To do a manual deploy to Netlify’s CDN:**

```sh
npm install netlify-cli
netlify deploy
```

Choose `build` as the path to deploy.

**To setup continuous delivery:**

With this setup Netlify will build and deploy when you push to git or open a pull request:

1. [Start a new netlify project](https://app.netlify.com/signup)
2. Pick your Git hosting service and select your repository
3. Click `Build your site`

**Support for client-side routing:**

To support `pushState`, make sure to create a `public/_redirects` file with the following rewrite rules:

```
/*  /index.html  200
```

When you build the project, Create React App will place the `public` folder contents into the build output.

### Now

[now](https://zeit.co/now) offers a zero-configuration single-command deployment. You can use `now` to deploy your app for free.

1. Install the `now` command-line tool either via the recommended [desktop tool](https://zeit.co/download) or via node with `npm install -g now`.

2. Build your app by running `npm run build`.

3. Move into the build directory by running `cd build`.

4. Run `now --name your-project-name` from within the build directory. You will see a **now.sh** URL in your output like this:

    ```
    > Ready! https://your-project-name-tpspyhtdtk.now.sh (copied to clipboard)
    ```

    Paste that URL into your browser when the build is complete, and you will see your deployed app.

Details are available in [this article.](https://zeit.co/blog/unlimited-static)

### S3 and CloudFront

See this [blog post](https://medium.com/@omgwtfmarc/deploying-create-react-app-to-s3-or-cloudfront-48dae4ce0af) on how to deploy your React app to Amazon Web Services [S3](https://aws.amazon.com/s3) and [CloudFront](https://aws.amazon.com/cloudfront/).

### Surge

Install the Surge CLI if you haven’t already by running `npm install -g surge`. Run the `surge` command and log in you or create a new account.

When asked about the project path, make sure to specify the `build` folder, for example:

```sh
       project path: /path/to/project/build
```

Note that in order to support routers that use HTML5 `pushState` API, you may want to rename the `index.html` in your build folder to `200.html` before deploying to Surge. This [ensures that every URL falls back to that file](https://surge.sh/help/adding-a-200-page-for-client-side-routing).

## Advanced Configuration

You can adjust various development and production settings by setting environment variables in your shell or with [.env](#adding-development-environment-variables-in-env).

Variable | Development | Production | Usage
:--- | :---: | :---: | :---
BROWSER | :white_check_mark: | :x: | By default, Create React App will open the default system browser, favoring Chrome on macOS. Specify a [browser](https://github.com/sindresorhus/opn#app) to override this behavior, or set it to `none` to disable it completely. If you need to customize the way the browser is launched, you can specify a node script instead. Any arguments passed to `npm start` will also be passed to this script, and the url where your app is served will be the last argument. Your script's file name must have the `.js` extension.
HOST | :white_check_mark: | :x: | By default, the development web server binds to `localhost`. You may use this variable to specify a different host.
PORT | :white_check_mark: | :x: | By default, the development web server will attempt to listen on port 3000 or prompt you to attempt the next available port. You may use this variable to specify a different port.
HTTPS | :white_check_mark: | :x: | When set to `true`, Create React App will run the development server in `https` mode.
PUBLIC_URL | :x: | :white_check_mark: | Create React App assumes your application is hosted at the serving web server's root or a subpath as specified in [`package.json` (`homepage`)](#building-for-relative-paths). Normally, Create React App ignores the hostname. You may use this variable to force assets to be referenced verbatim to the url you provide (hostname included). This may be particularly useful when using a CDN to host your application.
CI | :large_orange_diamond: | :white_check_mark: | When set to `true`, Create React App treats warnings as failures in the build. It also makes the test runner non-watching. Most CIs set this flag by default.
REACT_EDITOR | :white_check_mark: | :x: | When an app crashes in development, you will see an error overlay with clickable stack trace. When you click on it, Create React App will try to determine the editor you are using based on currently running processes, and open the relevant source file. You can [send a pull request to detect your editor of choice](https://github.com/facebookincubator/create-react-app/issues/2636). Setting this environment variable overrides the automatic detection. If you do it, make sure your systems [PATH](https://en.wikipedia.org/wiki/PATH_(variable)) environment variable points to your editor’s bin folder.

## Troubleshooting

### `npm start` doesn’t detect changes

When you save a file while `npm start` is running, the browser should refresh with the updated code.<br>
If this doesn’t happen, try one of the following workarounds:

* If your project is in a Dropbox folder, try moving it out.
* If the watcher doesn’t see a file called `index.js` and you’re referencing it by the folder name, you [need to restart the watcher](https://github.com/facebookincubator/create-react-app/issues/1164) due to a Webpack bug.
* Some editors like Vim and IntelliJ have a “safe write” feature that currently breaks the watcher. You will need to disable it. Follow the instructions in [“Adjusting Your Text Editor”](https://webpack.js.org/guides/development/#adjusting-your-text-editor).
* If your project path contains parentheses, try moving the project to a path without them. This is caused by a [Webpack watcher bug](https://github.com/webpack/watchpack/issues/42).
* On Linux and macOS, you might need to [tweak system settings](https://webpack.github.io/docs/troubleshooting.html#not-enough-watchers) to allow more watchers.
* If the project runs inside a virtual machine such as (a Vagrant provisioned) VirtualBox, create an `.env` file in your project directory if it doesn’t exist, and add `CHOKIDAR_USEPOLLING=true` to it. This ensures that the next time you run `npm start`, the watcher uses the polling mode, as necessary inside a VM.

If none of these solutions help please leave a comment [in this thread](https://github.com/facebookincubator/create-react-app/issues/659).

### `npm test` hangs on macOS Sierra

If you run `npm test` and the console gets stuck after printing `react-scripts test --env=jsdom` to the console there might be a problem with your [Watchman](https://facebook.github.io/watchman/) installation as described in [facebookincubator/create-react-app#713](https://github.com/facebookincubator/create-react-app/issues/713).

We recommend deleting `node_modules` in your project and running `npm install` (or `yarn` if you use it) first. If it doesn't help, you can try one of the numerous workarounds mentioned in these issues:

* [facebook/jest#1767](https://github.com/facebook/jest/issues/1767)
* [facebook/watchman#358](https://github.com/facebook/watchman/issues/358)
* [ember-cli/ember-cli#6259](https://github.com/ember-cli/ember-cli/issues/6259)

It is reported that installing Watchman 4.7.0 or newer fixes the issue. If you use [Homebrew](http://brew.sh/), you can run these commands to update it:

```
watchman shutdown-server
brew update
brew reinstall watchman
```

You can find [other installation methods](https://facebook.github.io/watchman/docs/install.html#build-install) on the Watchman documentation page.

If this still doesn’t help, try running `launchctl unload -F ~/Library/LaunchAgents/com.github.facebook.watchman.plist`.

There are also reports that *uninstalling* Watchman fixes the issue. So if nothing else helps, remove it from your system and try again.

### `npm run build` exits too early

It is reported that `npm run build` can fail on machines with limited memory and no swap space, which is common in cloud environments. Even with small projects this command can increase RAM usage in your system by hundreds of megabytes, so if you have less than 1 GB of available memory your build is likely to fail with the following message:

>  The build failed because the process exited too early. This probably means the system ran out of memory or someone called `kill -9` on the process.

If you are completely sure that you didn't terminate the process, consider [adding some swap space](https://www.digitalocean.com/community/tutorials/how-to-add-swap-on-ubuntu-14-04) to the machine you’re building on, or build the project locally.

### `npm run build` fails on Heroku

This may be a problem with case sensitive filenames.
Please refer to [this section](#resolving-heroku-deployment-errors).

### Moment.js locales are missing

If you use a [Moment.js](https://momentjs.com/), you might notice that only the English locale is available by default. This is because the locale files are large, and you probably only need a subset of [all the locales provided by Moment.js](https://momentjs.com/#multiple-locale-support).

To add a specific Moment.js locale to your bundle, you need to import it explicitly.<br>
For example:

```js
import moment from 'moment';
import 'moment/locale/fr';
```

If import multiple locales this way, you can later switch between them by calling `moment.locale()` with the locale name:

```js
import moment from 'moment';
import 'moment/locale/fr';
import 'moment/locale/es';

// ...

moment.locale('fr');
```

This will only work for locales that have been explicitly imported before.

## Something Missing?

If you have ideas for more “How To” recipes that should be on this page, [let us know](https://github.com/facebookincubator/create-react-app/issues) or [contribute some!](https://github.com/facebookincubator/create-react-app/edit/master/packages/react-scripts/template/README.md)
"
462,matiassingers/spotify-crawler,JavaScript,"# spotify-crawler [![Build Status](http://img.shields.io/travis/matiassingers/spotify-crawler.svg?style=flat-square)](https://travis-ci.org/matiassingers/spotify-crawler) [![Dependency Status](http://img.shields.io/gemnasium/matiassingers/spotify-crawler.svg?style=flat-square)](https://gemnasium.com/matiassingers/spotify-crawler) [![Gitter](http://img.shields.io/badge/gitter-join%20chat%20%E2%86%92-brightgreen.svg?style=flat-square)](https://gitter.im/matiassingers/spotify-crawler?utm_source=badge&utm_medium=badge&utm_campaign=pr-badge)
> Returns pricing data for all available Spotify countries

Crawls the [list](https://www.spotify.com/select-your-country/) of countries where Spotify is available.
Fetches the listed premium price for each country and finally converts the price into USD.

Thanks to [restcoutries.eu](http://restcountries.eu/) and [Open Exchange Rates](https://openexchangerates.org/).

## Installation

```shell
$ npm install spotify-crawler
```

## Usage

**Methods:**
- `fetch` - returns `array` with all the countries.
- `getCatalogSize` - takes the two-letter country code, returns `number` of total tracks.

##### Example:
```js
var spotify = require('spotify-crawler');

spotify.fetch()
  .then(saveCountries)
  .catch(console.log);

function saveCountries(countries){
  console.log('Inserting {0} countries in DB'.format(countries.length));

  var save = Country.create(countries);
}
```


##### Output
The `country` object consists of:
- `link` - Spotify href
- `title` - the country title, localized version(*Österreich*)
- `originalRel` - the rel directly from Spotify
- `rel` - stripped the `originalRel` of the language(*be-fr*)
- `currency` - the currency code from [restcoutries.eu](http://restcountries.eu/), but corrected for the countries that doesn't display price in their own currency on the website.
- `originalCurrency` - the raw currency code from [restcoutries.eu](http://restcountries.eu/).
- `countryCode` - the [`alpha3Code`](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-3) from [restcoutries.eu](http://restcountries.eu/).
- `internationalName` - the international name from  [restcoutries.eu](http://restcountries.eu/).
- `region` - the region from [restcoutries.eu](http://restcountries.eu/).
- `subRegion` - the subregion from [restcoutries.eu](http://restcountries.eu/).
- `demonym` - the demonym from [restcoutries.eu](http://restcountries.eu/).
- `originalPrice` - the whole text from the HTML element
- `price` - strip all text from `originalPrice`
- `convertedPrice` - local price converted into USD with rate from [Open Exchange Rates](https://openexchangerates.org/)
- `catalogSize` - amount of tracks available in the country

#### Output data example for a single country:
```json
{
    ""link"": ""/au/"",
    ""title"": ""Australia"",
    ""originalRel"": ""au"",
    ""rel"": ""au"",
    ""currency"": ""AUD"",
    ""originalCurrency"": ""AUD"",
    ""countryCode"": ""AUS"",
    ""internationalName"": ""Australia"",
    ""region"": ""Oceania"",
    ""subRegion"": ""Australia and New Zealand"",
    ""demonym"": ""Australian"",
    ""originalPrice"": ""$11.99 per month"",
    ""price"": ""11.99"",
    ""convertedPrice"": 11.25280616267109,
    ""catalogSize"": 30695608
}
```

## todo
- Multiple methods
    - *getCountries*
    - *getRawPrices*
    - ~~*getCatalogSize*~~
    - *etc.*
- Split up index.js into modules
- Tests
- CLI support
- Supply own `app_id` for [Open Exchange Rates](https://openexchangerates.org/)
"
463,sgl0v/SpotifyPlayer,Swift,"# <p align=""center"">SpotifyPlayer</p>

This is the demo project of the article written in [my blog](https://onswiftwings.com/posts/interactive-animations/). It shows how to create interactive animations using UIViewPropertyAnimator.

<p align=""center"">
  <img src=""screenshots/demo.gif"">
</p>
"
464,jonas-lundqvist/vlc-spotify,C,"Status
======
The development of this project has been put on hold due to show stopping issues with libspotify that I don't have the energy to try to work around.
I wrote a rant about it in a [blog post](https://jonaslundqvist.net/2015/05/06/do-not-use-libspotify/) with a follow-up [here](https://jonaslundqvist.net/2015/05/07/do-use-libspotify-later-this-year/).

As Spotify says they plan to release a new library sometime later this year and then I might resume development.

If someone still would like some feature or such please go ahead and create an issue and/or pull request here on GitHub and I'll see what I can do.

About
=====
This plugin adds support for playing spotify tracks in VLC media player.
The code should be seen as a prototype and I can't claim that it is ""work in progress"" since I don't really know if I will further develop it into something useful. Please fork! :)

Why?
====
I did this to play around with libspotify and VLC.

Prerequisites
=============
 * Spotify Preemium account
 * libspotify (https://developer.spotify.com/technologies/libspotify/)
 * libspotify application key (https://devaccount.spotify.com/my-account/keys/)
 * VLC headers and libraries

Installation
============
Get an appkey from spotify and copy it to *src/appkey.c*.
View and edit the Makefile in the *src/* directory if necessary.

For linux
---------
Type *make*.
Copy the *src/libspotify_plugin.so* to the vlc access plugins folder, possibly */usr/lib/vlc/plugins/access*

For win32
---------
The plugin is cross-compiled using mingw. Please note that the win32 version of VLC is needed and it will not work with the 64 bit version due to Spotify not providing a 64 bit library for Windows.

Unzip the libspotify zip file (from spotify) somewhere and set the *$LIBSPOTIFY_WIN32_DIR* to that base path.
Copy *extras/libspotify.def* to the same directory as the *libspotify.dll*, ie *$LIBSPOTIFY_WIN32_DIR/lib* and cd to that directory. Run *i686-w64-mingw32-dlltool -U -d libspotify.def -l libspotify.a*

Back in the *src/* directory run *make OS=win32*.
Copy the *libspotify_plugin.dll* to the windows systems *vlc/plugins/access/* folder

Usage
=====
Start VLC and find the spotify preferences and set the option(s) accordingly.

Start from gui:
File -> Open Network Stream -> spotify://spotify:track:6wNTqBF2Y69KG9EPyj9YJD -> Play

Or from command line:
vlc spotify://spotify:track:6wNTqBF2Y69KG9EPyj9YJD

vlc-spotify also supports https://open.spotify.com/ URLs.

License
=======
GNU LGPL 2.1. See the file *LICENSE*.
"
465,ashthespy/Volumio-SpotifyConnect,JavaScript,"#	Volumio Spotify Connect

This Volumio plugin utilises [`vollibrespot`](https://github.com/ashthespy/vollibrespot)
to provide better integration of Spotify Connect in Volumio.

As always, it is being actively developed - some features are still WIP.

![Alt text](volspotconnect2.jpg?raw=true ""Spotify/volumio playing through volspotconnect2"")

Tested on :
- RPI 0
- RPI B
- RPI B+
- RPI2
- RPI3
- SPARKY
- PINE64
- x86 laptop
- OrangePiLite

This repo splits the old `volspotconnect2` plugin into a new separate repository, making it easier to maintain.

## IMPORTANT

- Requires a Premium or Family account

## To install
Before installing the dev version, REMOVE the old plugin from your system using the webUI plugins page.

Due to a [Volumio decision](https://volumio.org/forum/require-plugins-uploaded-plugins-repo-t8116-10.html), developer plugins can only be install through SSH. Here is how:

### 1. Enable SSH and connect to Volumio

Follow the [Volumio guide](https://volumio.github.io/docs/User_Manual/SSH.html) to enable and access your device via ssh.

### 2. Download and install the plugin

Type the following commands to download and install plugin:

```
wget https://github.com/balbuze/volumio-plugins/raw/master/plugins/music_service/volspotconnect2/volspotconnect2.zip
mkdir ./volspotconnect2
miniunzip volspotconnect2.zip -d ./volspotconnect2
cd ./volspotconnect2
volumio plugin install
```

### 3.Enable the plugin

In Volumio webUI, go in plugin section > installed plugin. You should see volspotconnect2 now! Enable it and play! You can go in the plugin settings to tweak some details.
Enjoy !


## Issues

- `librespot` doesn't handle disconnections gracefully
"
466,sailfish-spotify/hutspot,QML,"# Hutspot

Hutspot is a Spotify 'controller' for  Sailfish OS. You can browse/search albums, artists, playlists and tracks. Playing the music is done on an 'connect' device. It requires a premium Spotify account.

Documentation can be found at [sailfish-spotify.github.io/hutspot](https://sailfish-spotify.github.io/hutspot/)"
467,Zenithar/go-spotigraph,Go,"# go-spotigraph

[![Go Report Card](https://goreportcard.com/badge/github.com/Zenithar/go-spotigraph)](https://goreportcard.com/report/github.com/Zenithar/go-spotigraph)
[![CircleCI](https://circleci.com/gh/Zenithar/go-spotigraph.svg?style=svg)](https://circleci.com/gh/Zenithar/go-spotigraph)
[![LICENSE](https://img.shields.io/github/license/Zenithar/go-spotigraph.svg)](https://github.com/Zenithar/go-spotigraph/blob/master/LICENSE)
[![FOSSA Status](https://app.fossa.com/api/projects/git%2Bgithub.com%2FZenithar%2Fgo-spotigraph.svg?type=shield)](https://app.fossa.com/projects/git%2Bgithub.com%2FZenithar%2Fgo-spotigraph?ref=badge_shield)

Spotify Agile model mapping microservice

## Build

```sh
> go run .circleci/mage.go
```

## Todo

### Project

- [x] Golang project best practice
- [x] Go modules
- [x] Go tools vendoring
- [x] Magefile migration
- [x] Feature flags support
- [x] Wire code generation
- [x] CircleCI integration
- [ ] Documentation

### Services

- [x] Identity management
- [x] Squad management
- [x] Chapter management
- [x] Guild management
- [x] Tribe management
- [ ] Graph query
- [ ] External identity resolver (LDAP, etc.)

### Code generation

- [x] Protocol Validator generation
- [x] gRpc Client code generation
- [x] Decorator generation
- [x] CLI command generation from protobuf
- [x] Local or Remote service abstraction (direct vs gRPC call)

### Database

- [x] RethinkDB support
- [x] MongoDB support
- [x] PostgreSQL support
- [x] PostgreSQL json column support
- [ ] BoltDB backend study
- [ ] DGraph backend study
- [ ] DynamoDB backend study

### Dispatchers

- [x] gRPC Server
- [x] GraphQL Server
- [x] REST Api

### Decorators

- [x] Code generation
- [x] Cache support
- [x] Logger support
- [x] Tracing support
- [x] Metric support
- [x] OpenCensus support
- [x] Instrumented service providers for wire
- [x] Circuit breaker
- [ ] Authorization

### Tests

- [x] Unit tests template
- [ ] Integration tests
- [ ] E2E tests

### Deployment

- [x] Multi Stage Build for Docker
- [ ] Kubernetes manifest
- [ ] Test on K3S
"
468,Allvaa/lava-spotify,TypeScript,"# lavasfy [![npm](https://img.shields.io/npm/v/lavasfy)](https://npmjs.com/package/lavasfy ""lavasfy"")
Spotify album, playlist, and track resolver for Lavalink.

## Installing
```sh
# npm
npm i lavasfy

# yarn
yarn add lavasfy
```

## Example Usage
```js
const { LavasfyClient } = require(""lavasfy"");

const lavasfy = new LavasfyClient({
    clientID: ""a client id"",
    clientSecret: ""a client secret""
}, [
    {
        id: ""main"",
        host: ""localhost"",
        port: 2333,
        password: ""youshallnotpass"",
        secure: false
    }
]);

(async () => {
    // We need to call this to get the Spotify API access token (only needs once after the LavasfyClient instantiated).
    await lavasfy.requestToken();

    // Select node to use with its id.
    const node = lavasfy.getNode(""main"");

    // Use Node#load to load album, playlist, and track
    const album = await node.load(""https://open.spotify.com/album/4sZni6V6NvVYhfUFGqKuR3"");
    console.log(album);

    const playlist = await node.load(""https://open.spotify.com/playlist/2NdDBIGHUCu977yW5iKWQY"");
    console.log(playlist);

    const track = await node.load(""https://open.spotify.com/track/4zsxBgPkUFYEoOGDncGIBd"");
    console.log(track);

    // Response object: https://github.com/Allvaa/lava-spotify/blob/master/src/typings/Lavalink/index.ts#L22
})();
```
[Documentation](https://allvaa.github.io/lava-spotify ""Documentaion"")
"
469,AmreshSinha/Spotify-Cards-API,JavaScript,"<p align=""center"">
<img src=""https://spotify-cards.up.railway.app/api?id=05iALOptaNoV3EmXnxz1IJ&color=A0C3D2"" />
</p>

An unofficial open-source Spotify PromoCards API built to serve Song Cards. For more information on using this API, see <a href=""https://spotify-cards.up.railway.app/"">Docs</a>

# Table of contents

* [Usage](#usage)
* [Support](#support)
* [Release Versions](#release-versions)
* [Hosting your own](#host-your-own)
* [Run Locally](#run-locally)
* [Contributing](#contributing)
* [License](#license)

## Usage

### By Song Track Name*
*Results can differ as there can be another song with the Same Name
```
https://spotify-cards.up.railway.app/api?name={song name}&color={color hex without #}
```

**Example**
```
https://spotify-cards.up.railway.app/api?name=Silver%20Lining&color=A0C3D2
```

### By Song Track ID {Recommended}
```
https://spotify-cards.up.railway.app/api?id={song id}&color={color hex without #}
```

**Example**
```
https://spotify-cards.up.railway.app/api?id=05iALOptaNoV3EmXnxz1IJ&color=A0C3D2
```

### Orientation

**Landscape**{Default} or **Square**

**Example**
```
https://spotify-cards.up.railway.app/api?id={song id}&color={color hex without #}&orientation={landscape/square}
```

### How to get Spotify Song Track ID?

* Go to your song
* Right Click >> Share (Keep Ctrl Pressed) >> Copy Spotify URI
* The ID after ```spotify:``` is the Spotify Song Track ID


## Support

To log any issue or help in any issue, check out
[Issues Section](https://github.com/AmreshSinha/Spotify-Cards-API/issues).

## Release Versions

* **1.0.0**: Supports only Song Tracks. Can take input from user as name or id only currently.

## Host Your Own

See [HOSTING](https://github.com/AmreshSinha/Spotify-Cards-API/blob/master/HOSTING.md) for instructions on how to host your own service

## Run Locally

1. Clone the Repository
```
git clone https://github.com/AmreshSinha/Spotify-Cards-API.git
```
2. Get into project folder and install node modules
```
npm i
```
3. Go to Spotify Developer Dashboard and Create a New Application with no scopes
Make a .env and add
- `Client_ID` var with your Spotify Dev Application Details
- `Client_Secret` var with your Spotify Dev Application Details
4. Start and Run the Project
```
node index.js
```
Server will start on port 3000

## Contributing

### Help Needed

* Text Wrap: If the Song Name is too long then text size should decrease and wrap into 2 lines. Spacing between ""SONG"" and Song Name, and Song Name and Artist name should change accordingly.
* <strike>Theme Color Extraction from image instead of Black as Default Color.</strike> Done Thanks to <a href=""https://github.com/delivey"">@delivey</a>
* <strike>Adding Portrait Orientation.</strike> Done Thanks to <a href=""https://github.com/delivey"">@delivey</a>

All the Issues are in <a href=""https://github.com/AmreshSinha/Spotify-Cards-API/issues"">ISSUES</a> section.

Also, before making a PR checkout <a href=""https://github.com/AmreshSinha/Spotify-Cards-API/blob/master/CODE_OF_CONDUCT.md"">Code of Conduct</a>

## License

Spotify Cards API is available under the
[MIT license](https://opensource.org/licenses/MIT). Spotify Cards API also includes external libraries that are available under a variety of licenses. See [LICENSE](https://github.com/AmreshSinha/Spotify-Cards-API/blob/master/LICENSE) for the full license text.
"
470,ActivityWatch/aw-watcher-spotify,Python,"aw-watcher-spotify
==================

Watches your currently playing Spotify track. This is on a per-user basis since it uses the Spotify Web API, so you don't need to run it on all your machines if you don't want the redundancy.

This watcher is currently in a early stage of development, please submit PRs if you find bugs!


## Usage

### Step 0: Create Spotify Web API token

Go to [Spotify Developer Dashboard](https://developer.spotify.com/dashboard/applications) and create a new application.

In the app settings, add `http://localhost:8088` in the Redirect URIs section.

### Step 1: Install package (using poetry)

Requirements: Requires that you have poetry installed.

First install the package and its dependencies:

```sh
poetry install
```

First run (generates empty config that you need to fill out):

```sh
poetry run aw-watcher-spotify
```
### Step 1: Install package (without poetry, using only pip)

Install the requirements:

```sh
pip install .
```

First run (generates empty config that you need to fill out):
```sh
python aw-watcher-spotify/main.py
```

### Step 2: Enter credentials

If this is the first time you run it on your machine, it will give you an error, this is normal.
Just fill in the config file (the directory is referenced in the error).

Run the script again and...
You're done! Try playing a song on Spotify on any of your devices and it should start logging (provided they are not in offline mode).


## Note

Even without using this watcher, you can get a full export of the last year of listening history by requesting an export directly from Spotify here: https://www.spotify.com/us/account/privacy/

The export contains, among other things:

- **Streaming history for the past year**
- Playlists
- Search queries
- A list of items saved in your library
- User data
- Inferences

(thanks [@oreHGA](https://github.com/oreHGA) for the tip!)
"
471,gSchool/js-spotify-ajax,HTML,"## JS Spotify AJAX

* Use the Spotify API to display albums by an artist, supplied through a input form.


First we need to grab the users input:

```javascript
// event handler for search form submission
$(""form"").on('submit', function (event){

  // prevent browser default behavior
  event.preventDefault();

  // grab tag from input
  var searchTerm = $(""#search-term"").val().trim();
  //The $.trim() function removes all newlines, spaces (including non-breaking spaces), and tabs from the beginning and end of the supplied string. If these whitespace characters occur in the middle of the string, they are preserved.

  console.log(searchTerm);
});
```

Next we need to make an AJAX request. The ajax() method is used to perform an AJAX (asynchronous HTTP) request. Reference the Spotify developers documentation

```javascript
function getAlbums(searchTerm) {
  var request = $.ajax({
    // where we are request data from
    url: ""https://api.spotify.com/v1/search"",
    // the http method to use for the request. we are asking(getting) for data. anytime you visit a website, you are making a GET request
    method: ""GET"",
    // data to be sent to the server
    data: {
      q: ""artist:""+searchTerm,
      type: ""album"",
      limit: 18
    },
    // the type of data you are expecting back from the server
    dataType: ""json"",
  });
  request.done(function(response){
    console.log(response);
  });
};
```

Now we need to iterate through the returned data(JSON) and append the data to the dom.

```javascript
request.done(function(response){
  var albums = response.albums.items;
  var print = """";
  $.each(albums, function(i, album) {
    var albumName = album.name;
    var albumImage = album.images[1].url;
    var spotifyLink = album.external_urls.spotify;
    print += ""<li class='result'><a href='"" + spotifyLink + ""' targer='_blank'><img src='"" + albumImage +""' alt='"" + albumName + ""'><p class='caption'>""+ albumName +""</p></a></li>"";
  });
  $("".results"").html(print);
});
```
"
472,BharatKalluri/spotifydl,Go," 
<h1 align=""center"">Spotifydl</h1>
<h4 align=""center"">A Music Downloader for Spotify</h4>

----

![Spotifydl Demo](spotifydl.gif)

Spotifydl is a spotify media downloader.

It uses Youtube as the audio source and Spotify API for playlist/album/track details.

## Installation

### From Source

#### Prerequisites

- [youtube-dl](http://ytdl-org.github.io/youtube-dl/download.html)
- [ffmpeg](https://ffmpeg.org/download.html)

Make sure you have golang, youtube-dl and ffmpeg installed.
```bash
go install github.com/BharatKalluri/spotifydl@latest
```


## Usage

```bash
spotifydl https://open.spotify.com/album/2qCVT6sEqkS7xxYqIEY9fK?si=9QGOHnUrQb27Fb3dNY_Rlw
# The album has been downloaded, tagged and converted to mp3!
```

If there are any Improvements or corrections that can be made, feel free to open an issue.

Note: This project was only done for as a learning experience for academic purposes. Usage of this product is up to the user and no responsibility will be taken for the user's action using this software.
"
473,djmaze/librespot-snapserver,Dockerfile,"# librespot-snapserver

Run a [Snapcast](https://github.com/badaix/snapcast) server with [Spotify support](https://github.com/librespot-org/librespot) as a Docker container.

This is a multi-arch image currently working on the `amd64` and `armhf` platforms. This means you can use the same image regardless of platform.

_Note: You need a Spotify premium account._

## Usage

Run it like this (on your PC or ARM-based device):

    docker run -d --name snapserver --net host -e DEVICE_NAME=Snapcast mazzolino/librespot-snapserver

That will make the device available to all Spotify clients in your network. Add your Spotify credentials in order to limit control to clients logged in with your account:

    docker run -d --name snapserver --net host -e DEVICE_NAME=Snapcast -e USERNAME=my-spotify-username -e PASSWORD=my-spotify-password mazzolino/librespot-snapserver

Now you can connect your snapclient to your host's ip. The receiver should show up in Spotify under the `DEVICE_NAME` given above (e.g. `Snapcast`). Have fun playing music!

## Building the images

In order to build images for the non-amd64 architectures, you need to build on amd64 machine and enable qemu binfmt support. The easiest way for this is to run:

```bash
docker run --privileged --rm tonistiigi/binfmt --install all
```

The following command will build the images for all supported architectures. Replace `my/image` with your own image name:

```bash
docker buildx build --platform=linux/amd64,linux/arm/v7,linux/arm64 -t my/image --load .
```

To build only an image for the current architecture, run:

```bash
docker buildx build -t my/image --load .
```
"
474,Quaggie/Quaggify,Swift,"# Quaggify
A Spotify clone made in Swift 3 and consuming the Spotify API.
![overview](./assets/overview1.png)

![overview2](./assets/overview2.png)

## What can the app do?

- Login with your Spotify account
- Home tab lists all new releases
- Search for an album/artist/track/playlist
- Create new playlist
- Modify your current playlists
- Add/Remove tracks from your playlists
- Infinite scroll everything!

## Dependencies
Cocoapods was the chosen dependency manager

- [Alamofire](https://github.com/Alamofire/Alamofire) Networking
- [ObjectMapper](https://github.com/Hearst-DD/ObjectMapper) JSON mapping
- [AlamofireObjectMapper](https://github.com/tristanhimmelman/AlamofireObjectMapper) Simplifying the model layer
- [ReachabilitySwift](https://github.com/ashleymills/Reachability.swift) Internet connection verification
- [Kingfisher](https://github.com/onevcat/Kingfisher) Loading images from the server

## Building

### Clone the repository
```
$ git clone https://github.com/Quaggie/Quaggify.git
```

### Build the dependencies
```
$ pod install
```

### Setup your spotify CLIENT_ID and CLIENT_SECRET in SpotifyService.swift
``` swift
...
class SpotifyService: NSObject {
  let CLIENT_ID = ""{ INSERT CLIENT_ID HERE }""
  let CLIENT_SECRET = ""{ INSERT CLIENT_SECRET HERE }""
  let REDIRECT_URI = ""quaggify://authorization""
...
```

Now just run `Quaggify.xcworkspace` (:
"
475,sveint/spotify-notify,Python,"spotify-notify
==============

### Note: Spotify for Linux now supports notifications and media keys natively, making this script redundant.


Spotify-notify is a __notifier for currently playing song__ in Spotify on a linux system, using the notify-osd notifier (found in e.g. Ubuntu). It also includess __support for media keys__. It is intended for use on Ubuntu systems - current dependency is notify-osd.

![Example image](https://dl.dropbox.com/u/100344/spotifynotify2.png)


Getting started
---------------
### Installation

If you want to install spotify-notify permanently, it's recommended to follow these instructions. They apply to Ubuntu only but may work on other Debian-based distros as well.

Just execute the following terminal commands to install spotify-notify:
```bash
sudo mkdir /opt/spotify-notify/     # Create new directory to install spotify-notify
cd /opt/spotify-notify/             # Change current directory to this folder
# Download current version of spotify-notify
sudo wget https://raw.githubusercontent.com/sveint/spotify-notify/master/spotify-notify.py
sudo chmod a+x spotify-notify.py    # Mark spotify-notify.py as an executable
python spotify-notify.py -s &       # Start spotify-notify in background
```

### Adding spotify-notify to autostart
In Ubuntu you can easily add spotify-notify to the autostart. You only need to open the startup-programmes dialog. More details can be found in the [Ubuntu Wiki](https://help.ubuntu.com/community/AddingProgramToSessionStartup#Startup_Programs). As the name you can choose something like ""Spotify Notify"" and as the command to be executed, choose

`python spotify-notify.py -s`

The comment field can be left empty.

Advanced
--------
### Running spotify-notify (general information)
To get it running, you first need to clone this repository or download the file `spotify-notify.py`. Afterwards you can run spotify-notify by

`python spotify-notify.py`

It will launch Spotify for you if not already running. Please see options below to change default behavior.

If you want to launch the file directly you can first add execution rights to it:

`chmod a+x spotify-notify.py`

then launch by

`./spotify-notify.py`

### Command line options

Available options are:

| Option                        | Description                                                |
| ------------------------------|:----------------------------------------------------------:|
| `-h, --help`                  | Show help message and exit                                 |
| `-a ACTION, --action=ACTION`  | Music player actions (playPause/play/pause/next/previous). |
| `-n, --skip_notify`           | Song change notifications will be turned off.              |
| `-m, --skip_media_keys`       | Multimedia keys will not interact with spotify.            |
| `-s, --skip_spotify`          | Spotify will not be opened if it is not running and spotify notify will not close when spotify is closed. |
| `-d, --debug`                 | Debug messages will be displayed.                          |



### FAQ


#### Q: How can I launch the script at startup?

Just add a new entry to the startup applications, using the following as the ""Command""-string;

`/<path>/<to>/spotify-notify/spotify-notify.py -s`

- Make sure that ""spotify-notify.py"" is executable
- Make note of the ""-s"" parameter at the end, as this makes sure that spotify-notify doesn't start Spotify, and that it doesn't quit when you quit Spotify.


#### Q: I want to use the script just for the media key support. How can I do this?

Launch with -n as parameter.


#### Q: Do I need Ubuntu to use this script? Will others distros work?

A: Other distros supporting the same messaging system might work, please report any success stories!


Spotify-notify is in no way affiliated with Spotify. Spotify is the registered trade mark of the Spotify Group.
"
476,vsvinav/spotify-adblock-linux,Python,"# spotify-adblock-linux ![Language](https://img.shields.io/github/languages/top/vsvinav/spotify-adblock-linux?style=flat)

**A Spotify adblocker for Linux**

Installation   
------------
```
$ git clone https://github.com/vsvinav/spotify-adblock-linux.git
$ cd spotify-adblock-linux
$ pip3 install -r requirements.txt
```

Usage   
-----
Open Spotify before running the script

`$ python3 adspotter` (keep it running)

Troubleshooting
-----
If in case you're not able to install dbus-python, run `# apt-get install libdbus-1-dev libdbus-glib-1-dev` to fix.
And then run `$ pip3 install -r requirements.txt` again.
"
477,streambinder/spotitube,Go,
478,teekamsuthar/Mutify,Java,"
# <img alt=""Logo"" src=""https://drive.google.com/u/1/uc?id=1Y5WXSdqaS4bruYLRibYg_N5GEQbkXYBf&export=download"" align=""center"" height=""60""></a>Mutify - mute annoying ads 

A powerful, light-weight & permission-free Spotify Ad silencing app built using Java for Android.

### 💖Love this app? Buy me a [Coffee.](https://paypal.me/teekamsuthar) ☕ 


[<img alt=""Buy me a Coffee Button"" width=200 src=""https://cdn.buymeacoffee.com/buttons/v2/default-yellow.png"">](https://www.buymeacoffee.com/teekamsuthar)
&nbsp; [![paypal](https://www.paypalobjects.com/en_US/i/btn/btn_donateCC_LG.gif)](https://paypal.me/teekamsuthar)
</br>

<img alt=""Mutify Banner"" src=""https://drive.google.com/uc?id=1lCmutBK5hDG9YG9H-qDdwJYE3wBG_Epr&export=download"" align=""center"" height=""360""></a>

Whenever Mutify detects an ad is playing on Spotify, it helps you turn down the volume of the ads automatically, so that you can sit back and enjoy listening to your favorite music without worrying about those annoyingly loud ads.

## 📑Instructions </br>

- **You MUST enable 'Device Broadcast Status' in Spotify settings for Mutify to work.**
- Please add Mutify to battery saving exceptions list to make sure it works uninterruptedly in the background (optional) 

## ✅Features </br>

- Simple and Clean User interface
- Option to enable Dark-Only mode
- Manual mute/unmute buttons
- Controls media without leaving the app

### ℹ Disclaimer

Mutify does NOT block ads, it just mutes the device's music volume whenever an ad is detected playing. So it does not interfere with your Spotify app or asks for any unnecessary permissions to work.

- **_Spotify Lite is NOT supported!_**

If you love Mutify, feel free to fork the repo and contribute on [github](https://github.com/teekamsuthar/Mutify). (or [sponsor](https://paypal.me/teekamsuthar) this project if you feel like being generous ;)

### ⬇ Download it on [Play Store](https://play.google.com/store/apps/details?id=live.teekamsuthar.mutify)

<!-- [![Get it on Google Play](https://play.google.com/intl/en_us/badges/static/images/badges/en_badge_web_generic.png)](https://play.google.com/store/apps/details?id=live.teekamsuthar.mutify) -->

<a href=""https://play.google.com/store/apps/details?id=live.teekamsuthar.mutify""> <img alt=""Get it on Google Play"" src=""https://play.google.com/intl/en_us/badges/static/images/badges/en_badge_web_generic.png"" align=""center"" height=""120""></a>
<br>

If there is an issue or feature request, please email me at teekam.suthar1@gmail.com or create an issue on [github](https://github.com/teekamsuthar/Mutify/issues).

_Please don't forget to leave your valuable reviews and suggestions. It helps me to improve this app further._

### 📜LICENSE

```MIT License

Copyright (c) 2020 Teekam Suthar

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the ""Software""), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in all
copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED ""AS IS"", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
SOFTWARE.
"
479,deepjyoti30/ytmdl,Python,"<div align=""center"">
  <img src="".github/ytmdl.png"">
</div>

<div align=""center"">
<h1>YouTube Music Downloader</h1>
<h4>Download songs from YouTube by getting the audio from YouTube and the metadata from sources like Itunes, Spotify, Gaana etc.</h4>
</div>

<div align=""center"" width=""60%"" height=""auto"">
  <br>
    <img src="".github/ytmdl.gif"">
</div>

<div align=""center"">

<br/>

[![forthebadge made-with-python](http://ForTheBadge.com/images/badges/made-with-python.svg)](https://www.python.org/)<br/><br/>
<img src=""https://img.shields.io/badge/Maintained%3F-Yes-blueviolet?style=for-the-badge"">
![Travis (.org)](https://img.shields.io/travis/deepjyoti30/ytmdl?style=for-the-badge) ![[RepoStatus](https://repostatus.deepjyoti30.dev)](https://apis.deepjyoti30.dev/repostatus/badge?repo=deepjyoti30%2Fytmdl&style=for-the-badge) [![License](https://img.shields.io/badge/License-MIT-pink.svg?style=for-the-badge)](LICENSE.md) ![PyPI](https://img.shields.io/pypi/v/ytmdl?style=for-the-badge) ![AUR](https://img.shields.io/aur/version/ytmdl?color=red&style=for-the-badge) [![Downloads](https://img.shields.io/badge/dynamic/json?style=for-the-badge&maxAge=86400&label=downloads&query=%24.total_downloads&url=https%3A%2F%2Fapi.pepy.tech%2Fapi%2Fprojects%2Fytmdl)](https://img.shields.io/badge/dynamic/json?style=for-the-badge&maxAge=86400&label=downloads&query=%24.total_downloads&url=https%3A%2F%2Fapi.pepy.tech%2Fapi%2Fprojects%2Fytmdl) [![PRs Welcome](https://img.shields.io/badge/PRs-welcome-lightblue.svg?style=for-the-badge)](http://makeapullrequest.com) [![Telegram](https://img.shields.io/badge/Telegram-YTMDL-blue.svg?style=for-the-badge)](https://t.me/ytmdl)

<p>
<a href=""https://ko-fi.com/deepjyoti30""><img src=""https://raw.githubusercontent.com/adi1090x/files/master/other/kofi.png"" alt=""Support me on ko-fi""></a>
</p>

<br/>

### \[[Web App](#web-app)] \[[Why This?](#why-this)] \[[Support the Project](#support-the-project)] \[[Installation](#installation)] \[[Configuration](#configuration)] \[[WiKi](https://github.com/deepjyoti30/ytmdl/wiki/)]

<br/>
</div>

## Web App

Ytmdl also has an web app, you can try it out [here](https://ytmdl.deepjyoti30.dev/)

## Why this?

This app downloads a song by getting the audio from Youtube sources **using** youtube-dl and then adds song information like
artist name, album name, release date, thumbnail etc by fetching it from sources like Itunes, Spotify, Gaana and other sources.

**NO**. YoutubeDL doesn't do that. All youtube-dl does is lets you download audio from a video that you specify.
**This app is not yet another youtube-dl clone.**

## Support the Project?

Help the development of this project by becoming a backer or a sponsor.

### [Become a Backer](https://opencollective.com/ytmdl#backer)

### [Become a sponsor](https://opencollective.com/ytmdl#sponsor)

If you like my work, consider buying me a coffee or donating. In case you want to become a patron, join my [Pateron](https://www.patreon.com/deepjyoti30)

<p align=""left"">
<a href=""https://www.paypal.me/deepjyoti30"" target=""_blank""><img alt=""undefined"" src=""https://img.shields.io/badge/paypal-deepjyoti30-blue?style=for-the-badge&logo=paypal""></a>
<a href=""https://www.patreon.com/deepjyoti30"" target=""_blank""><img alt=""undefined"" src=""https://img.shields.io/badge/Patreon-deepjyoti30-orange?style=for-the-badge&logo=patreon""></a>
<a href=""https://ko-fi.com/deepjyoti30"" target=""_blank""><img alt=""undefined"" src=""https://img.shields.io/badge/KoFi-deepjyoti30-red?style=for-the-badge&logo=ko-fi""></a>
</p>

## Requirements

- Python 3.6.1
- ffmpeg

## Installation

- [PyPi](#pypi)
- [Arch Linux](#arch-linux)
- [Gentoo](#gentoo)
- [NixOS](#nixos)
- [Windows](#windows)
- [Manual](#manual)

### PyPI

```console
pip install ytmdl
```

> NOTE: System wide installation requires `sudo`

### Arch Linux

`ytmdl` is available in AUR as `ytmdl`. It can be found [here](https://aur.archlinux.org/packages/ytmdl/)

> NOTE: The git version is availble as `ytmdl-git` in AUR.

### Gentoo

`ytmdl` can be installed in Gentoo by the following commands

```console
# First set up src_prepare-overlay (as root)
emerge -av --noreplace app-eselect/eselect-repository
eselect repository enable src_prepare-overlay
emaint sync -r src_prepare-overlay
# Finally emerge ytmdl (as root)
emerge -av --autounmask net-misc/ytmdl
```

Available in **src_prepare-overlay** [here](https://gitlab.com/src_prepare/src_prepare-overlay)

### NixOS

`ytmdl` can be installed using Nix with the command

```console
nix-env -iA nixos.ytmdl
```

### Windows

You need to install `ffmpeg` in order for `ytmdl` to work properly. This can be done by downloading the `ffmpeg` binary from [here](https://ffmpeg.org/download.html). Once downloaded, extract the file and find the `ffmpeg.exe` file. Copy the directory's path and add it to PATH in the following way.

```console
setx path ""%path%;C:\your\path\here\""
```

Once `ffmpeg` is installed, install `ytmdl` using the following command

```console
pip install ytmdl --upgrade
```

> NOTE: You'll need to have Python 3.6.1 or more installed.

Optionally, also install the latest version of `downloader-cli` and `simber` using the following command:

```console
pip install simber downloader-cli --upgrade
```

### Manual

You can manually install `ytmdl` by cloning this repository and running the `setup.py` script.

1. Install `setuptools` if it isn't already:

   ```console
    pip install setuptools
   ```

1. Clone this repo:

   ```console
   git clone https://github.com/deepjyoti30/ytmdl
   ```

1. Move into the `ytmdl` directory and run the `setup.py` script:

   ```console
   cd ytmdl
   sudo python setup.py install
   ```

## Usage

```console
usage: ytmdl [-h] [-q] [-o OUTPUT_DIR] [--song SONG-METADATA]
             [--choice CHOICE] [--artist ARTIST] [--album ALBUM]
             [--disable-metaadd] [--skip-meta] [-m] [--itunes-id ITUNES_ID]
             [--spotify-id SPOTIFY_ID] [--disable-sort] [--ask-meta-name]
             [--on-meta-error ON_META_ERROR] [--proxy URL] [--url URL]
             [--list PATH TO LIST] [--nolocal] [--format FORMAT] [--trim]
             [--version] [--keep-chapter-name] [--download-archive FILE]
             [--ignore-chapters] [--ytdl-config PATH] [--pl-start NUMBER]
             [--pl-end NUMBER] [--pl-items ITEM_SPEC] [--ignore-errors]
             [--title-as-name] [--level LEVEL] [--disable-file] [--list-level]
             [SONG_NAME ...]

positional arguments:
  SONG_NAME             Name of the song to download. Can be an URL to a
                        playlist as well. It will be automatically recognized.

options:
  -h, --help            show this help message and exit
  -q, --quiet           Don't ask the user to select songs if more than one
                        search result. The first result in each case will be
                        considered.
  -o OUTPUT_DIR, --output-dir OUTPUT_DIR
                        The location for the song to be downloaded to. When no
                        argument is passed, the default locations of SONG_DIR
                        or XDG_MUSIC_DIR are used.
  --proxy URL           Use the specified HTTP/HTTPS/SOCKS proxy. To enable
                        SOCKS proxy, specify a proper scheme. For example
                        socks5://127.0.0.1:1080/. Pass in an empty string
                        (--proxy """") for direct connection
  --url URL             Youtube song link.
  --list PATH TO LIST   Download list of songs. The list should have one song
                        name in every line.
  --nolocal             Don't search locally for the song before downloading.
  --format FORMAT       The format in which the song should be downloaded.
                        Default is mp3, but can be set in config. Available
                        options are ['mp3', 'm4a', 'opus']
  --trim, -t            Trim out the audio from the song. Use underlying
                        speech and music segmentation engine to determine and
                        keep only the music in the file. Useful in songs where
                        there are speeches, noise etc before/after the start
                        of the song. Default is false.
  --version             show the program version number and exit
  --keep-chapter-name   Keep the title extracted from the chapter in order to
                        search for the metadata. If not passed, the user will
                        be asked if they'd like to change the title with which
                        the metadata will be searched.
  --download-archive FILE
                        Skip downloading songs that are present in the passed
                        file. The songs are matched by using the videoId. All
                        downloaded song Id's are automatically added to the
                        file.
  --ignore-chapters     Ignore chapters if available in the video and treat it
                        like one video
  --ytdl-config PATH    Path to the youtube-dl config location or the
                        directory

Metadata:
  --song SONG-METADATA  The song to search in Metadata. Particularly useful
                        for songs that have the names in a different language
                        in YouTube. For Example, greek songs.
  --choice CHOICE       The choice that the user wants to go for. Usefull to
                        pass along with --quiet. Choices start at 1
  --artist ARTIST       The name of the song's artist. Pass it with a song
                        name.
  --album ALBUM         The name of the song's album. Pass it with a song
                        name.
  --disable-metaadd     Disable addition of passed artist and album keyword to
                        the youtube search in order to get a more accurate
                        result. (Default: false)
  --skip-meta           Skip setting the metadata and just copy the converted
                        song to the destination directory. '--manual-meta'
                        will override this option, pass only one of them.
  -m, --manual-meta     Manually enter song details.
  --itunes-id ITUNES_ID
                        Direct lookup from itunes. If passed, metadata will be
                        automatically added.
  --spotify-id SPOTIFY_ID
                        Direct lookup for Spotify tracks using the ID. If
                        passed, metadata will be automatically added.
  --disable-sort        Disable sorting of the metadata before asking for
                        input. Useful if the song is in some other language
                        and/or just a few providers are used.
  --ask-meta-name       Ask the user to enter a separate name for searching
                        the metadata (Default: false)
  --on-meta-error ON_META_ERROR
                        What to do if adding the metadata fails for some
                        reasong like lack of metadata or perhaps a network
                        issue. Options are ['exit', 'skip', 'manual']

Playlist:
  --pl-start NUMBER     Playlist video to start at (default is 1)
  --pl-end NUMBER       Playlist video to end at (default is last)
  --pl-items ITEM_SPEC  Playlist video items to download. Specify indices of
                        the videos present in the playlist separated by commas
                        like: '--playlist-items 1, 2, 4, 6' if you want to
                        download videos indexed 1, 2, 4 and 6. Range can also
                        be passed like: '--playlist-items 1-3, 5-7' to
                        download the videos indexed at 1, 2, 3, 5, 6, 7.
  --ignore-errors       Ignore if downloading any video fails in a playlist.
                        If passed, the execution will move to the next video
                        in the passed playlist.
  --title-as-name       Use the title of the video as the name of the song to
                        search for metadata. If not passed, user will be asked
                        if they want to use a different name and continue
                        accordingly.

Logger:
  --level LEVEL         The level of the logger that will be used while
                        verbosing. Use `--list-level` to check available
                        options.
  --disable-file        Disable logging to files
  --list-level          List all the available logger levels.

```

## Configuration

### Setup

The defaults can be changed by editing the config file in ytmdl folder in your .config folder

The config will be created automatically the first time you run `ytmdl` and will be present in ~/.config/ytmdl/config

However, it can be created manually by the following command

```console
mkdir -p ~/.config/ytmdl; curl https://raw.githubusercontent.com/deepjyoti30/ytmdl/master/examples/config > ~/.config/ytmdl/config
```

Above command will download the config from the repo and save it in the `~/.config/ytmdl/` directory.

### Supported Options

As of the latest development branch, the following options can be changed from the config

|         Name         | Description                                      | Default                        |
| :------------------: | ------------------------------------------------ | ------------------------------ |
|      `SONG_DIR`      | Directory to save the songs in after editing     | Current directory              |
|    `SONG_QUALITY`    | Quality of the song                              | 320kbps                        |
| `METADATA_PROVIDERS` | Which API providers to use for metadata          | all supported options are used |
|   `DEFAULT_FORMAT`   | Default format of the song                       | mp3                            |
|   `ON_META_ERROR`    | What to do if error occurs while writing meta    | exit                           |
|   `ITUNES_COUNTRY`   | Which region to use while searching from Itunes  | US                             |
|  `SPOTIFY_COUNTRY`   | Which market to use while searching from Spotify | US                             |

### Advanced Configuration

#### Dynamically storing songs

`SONG_DIR` field also takes values that are extracted from the song being downloaded

The `SONG_DIR` field needs to be passed some special values in order to achieve that. The string is scanned and when a `$` sign occurs, the special string will start and each directory can be separated by using an `->` sign.

To save the song in the `/dir/<album_name>/<artist_name>/<title>/<song_name>.mp3` format, the following needs to be added in the `SONG_DIR` field.

```
SONG_DIR=""/dir$Album->Artist->Title""
```

Above will extract to the following directory structure when a song named `Cradles` by artist `Sub Urban` from the album `Cradles - Single`

```
|--dir
   |--Cradles - Single
      |--Sub Urban
         |--Cradles
            |--Cradles.mp3
```

In order to pass the name with which the song should be saved, the last attribute can be passed between `[]`.

If the `SONG_DIR` field is `/dir$Album->[Artist]` will extract to the following directory structure

```
|--dir
   |--Cradles - Single
      |--Sub Urban.mp3
```

#### Supported options for dynamic storing

As of the latest source, the following options can be passed to the special string in order to create dynamic directories

|     Name      |                         |
| :-----------: | ----------------------- |
|   `Artist`    | Artist Of the Song      |
|    `Album`    | Album Of the Song       |
|    `Title`    | Title Of the Song       |
|    `Genre`    | Genre Of the Song       |
| `TrackNumber` | TrackNumber Of the Song |
| `ReleaseDate` | ReleaseDate Of the Song |
"
480,dlrudie/Snip,C#,"SNIP
====
Copyright 2012-2021 David Rudie <d.rudie@gmail.com>\
Project Page: [Snip](https://github.com/dlrudie/Snip)

ABOUT
=====
This small application sits in the system tray and updates a text
file with the currently playing audio track.

It supports the following media players:
* [Spotify](https://www.spotify.com/)
* [iTunes](https://www.apple.com/itunes/)

If you choose to use iTunes, Snip will automatically launch it. (This
is the behavior of the COM API and there's nothing I can do about it.) If you
only use Spotify, you don't have to worry about it.

To switch between players just right-click on the icon in the system tray.

Snip will write a generic format output to a file called `Snip.txt` within the
same folder as `Snip.exe`.  If you choose to save information to separate files, 
the files will be called `Snip_Artist.txt`, `Snip_Track.txt`, `Snip_Album.txt`, 
and `Snip_History.txt` (track history).

VARIABLES
=========
There are a handful of variables you can use within the Output Settings.

These variables only affect the output of Snip.txt itself.

* $$t = Track Title
* $$ut = TRACK TITLE
* $$lt = track title
* $$a = Track Artist
* $$ua = TRACK ARTIST
* $$la = track artist
* $$l = Track Album
* $$ul = TRACK ALBUM
* $$ll = track album
* $$i = Spotify track ID
* $$n = New line

HOTKEYS
=======
* **Next Track:** Ctrl, Alt, ]
* **Previous Track:** Ctrl, Alt, [
* **Volume Up:** Ctrl, Alt, + (iTunes Only)
* **Volume Down:** Ctrl, Alt, - (iTunes Only)
* **Mute Track:** Ctrl, Alt, M (iTunes Only)
* **Pause Track:** Ctrl, Alt, P
* **Play/Pause Track:** Ctrl, Alt, Enter (Pause iTunes Only)
* **Stop Track:** Ctrl, Alt, Backspace (iTunes Only)

DONATIONS
=========
Snip is free and always will be. However, if you'd like to support Snip
donations are always greatly appreciated and all donations will go right
back into making Snip even better. Thank you!
* [PayPal](https://paypal.me/thedopefish)
* ETH: 0x9f65813778F8Cc0fc1579923b64115998961A127
* CRO: cro1950wnv6fv3xzsk5xlsud7peru9lhlcpwsuhhxp
* BTC: bc1q38htzqlz7w42am8846mvxdza9nl45z3np8p7uv
* Want to send a different coin? Let me know.
"
481,WaduOfficial/Spotify-Inviter,Python,"# Spotify-Inviter
Discord py Bot to invite people to spotify premium plan

## Remember to check out my spotify private account creator which create private premium accounts!
https://www.nulled.to/topic/646038-unlimited-private-accounts-spotify-fresh-premium-account-creator/

https://shoppy.gg/product/2xwOfHz

## How does this bot work? 
Grabs a random account from txt file and then uses it to send a inv to your email.

## Faq
2 lazy. Just figure it out.
I mean the source code is legit right there.

## Credits
Wadu
"
482,sf-wdi-24/spotify-search,HTML,"# Spotify Search

**Objective:** Make a music search app using jQuery, AJAX, and the Spotify API. You'll be using Spotify's search endpoint to search for tracks (songs).

## Minimum Requirements

1. Your app must have a form to search for tracks (songs). The form needs an input field for the search keyword.
2. When a user submits the form, use jQuery to get the search keyword from the form input.
3. Use AJAX to call Spotify's search endpoint with the search keyword from the form.
4. On success of the AJAX call, render the search results on the page. You should include at least the track name and artist name.
5. Each time the user submits the form, clear the previous search results from the view.

## Bonus

1. Display a track's album artwork next to each search result in the view. **Hint:** You'll notice if you try to access the album artwork but none is available, your app will break. Prevent this from happening with a check to see if any artwork is available first.
2. Spotify gives us a `preview_url` for each track. Create a play button for each track in your view that opens the `preview_url` in a new tab (it will start playing the song!).
3. It would be nice to let the user know something is happening in the few milliseconds between submitting the form and getting data on the page. Show `loading.gif` when the form submits, and hide it when you get data back from Spotify.
4. Handle the case where no data comes back from Spotify. You'll want to let the user know that there are no results, rather than just showing a blank page.

## Getting Started

1. Fork this repo, and clone it into your `develop` folder on your local machine.
2. Practice querying Spotify's search endpoint using Postman with a couple different search keywords. You'll want to set `type=track` in your request URL. Look at the response data, and figure out how you would access the track name and artist name for a particular track (this will involve accessing values from nested objects and arrays).
3. Once you feel comfortable with the structure of the response data, work on using AJAX to make the API call to Spotify when the user submits the form.
4. Start by `console.log`-ing the response data. Once you have that working, access the data you need (track name and artist name), and use jQuery to `append` it to the page. **Hint:** You'll need to use <a href=""https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/forEach"" target=""_blank"">Array#forEach</a> to iterate through all the tracks Spotify returns in the response data.

## Submission

* As you make code changes, frequently commit and push to GitHub.
* Once you've finished the assignment and pushed your work to GitHub, make a pull request from your fork to the original repo.

## Resources

* <a href=""https://api.jquery.com/jquery.get"" target=""_blank"">jQuery.get()</a>
* <a href=""https://developer.spotify.com/web-api/search-item"" target=""_blank"">Spotify Search Endpoint</a>"
483,Lolincolc/gmusic_wrapped,Python,"# GMusic Year Wrapper V1 Beta
A spotify year wrap like for Google Play Music

Note : This project is not endorsed by Google

![alt text](https://raw.githubusercontent.com/Lolincolc/gmusic_wrapped/master/example_report.jpg)

## To use GMusic Year Wrapper
`git clone https://github.com/Lolincolc/gmusic_wrapped.git`
<br>
`sudo pip install requests`
<br>
<br>
Then download a history file from Google My Activity containing your Play Music History.
<br>
To download a history file <a href=""https://takeout.google.com/u/0/?hl=fr&utm_source=google-account&utm_medium=web&pageId=none""> go here</a>. Detailled instructions are avaialble <a href=""https://raw.githubusercontent.com/Lolincolc/gmusic_wrapped/master/howto/help.jpg""> here</a>
<br><br>
You can now launch the script with the following options :
<br>
`python main.py [path/to/your/json/history_file]`
<br>
`-v` to enable a full detailed log in log.dat
<br>
`-d [LastFm API key]` to enable duration calculation with LastFM API
<br>
<br>
Your report will be available in report.html and report.dat. Note that it usually takes less than 1 minute to complete a report. However `-d` option can add several hours to the process depending on LastFM API speed.
"
484,masroorhasan/spotifycli,Go,"# Spotifycli

[![CircleCI](https://circleci.com/gh/masroorhasan/spotifycli/tree/master.svg?style=svg)](https://circleci.com/gh/masroorhasan/spotifycli/tree/master)

A command line interface to manage Spotify playlists.

## Install

To use `spotifycli` you have to register the application on Spotify's developer platform. Sign up or login available [here](https://beta.developer.spotify.com/dashboard/login). Set the following environment variables with the client Id and secret.

```
export SPOTIFY_ID=xxx
export SPOTIFY_SECRET=xxx
```

## Usage

### Commands
List of available commands:
```
$ ./spotifycli --help
A command line interface to manage Spotify playlists.

Usage:
  spotifycli [command]

Available Commands:
  add         Add track by name to playlist
  aid         Add track by ID to playlist
  ato         Add currently playing track to playlist
  del         Delete a playlist
  help        Help about any command
  list        List tracks in playlist
  login       Login to authenticate Spotify account
  logout      Logout from Spotify account
  new         Create new playlist
  now         Displays the currently playing track
  playlists   Show all playlists
  rm          Remove track from playlist
  search      search tracks, albums, artists, playlists by name
  show        Display information about a track by ID

Flags:
  -h, --help   help for spotifycli

Use ""spotifycli [command] --help"" for more information about a command.
```

### Search
Search using query terms on top of tracks (`tr`), albums (`al`), artists (`ar`) or playlists (`pl`) by name.

```
./spotifycli search --help
search tracks, albums, artists, playlists by name

Usage:
  spotifycli search --t [SEARCH_TYPE] --q [SEARCH_QUERY] [flags]

Flags:
  -h, --help       help for search
      --q string   The search query term.
      --t string   The search type (tr, al, ar, pl).
```

Sample search for type `tr` (track).
```
./spotifycli search --t ""tr"" --q ""one step closer - live""
```
"
485,NBS-LLC/ng-spotify-importer,TypeScript,"# NgSlackerToSpotify

This project was generated with [Angular CLI](https://github.com/angular/angular-cli) version 9.1.7 and upgraded to version 13.

## Prerequisites

* Node 14 / npm 7 - not compatible with newer versions
* Chrome or Chromium - ensure CHROME_BIN env var is exported

Note: Chrom* must match the [version](https://www.chromium.org/getting-involved/download-chromium) of the ChromeDriver. Firewall warnings on macOS can be fixed by [signing](https://github.com/puppeteer/puppeteer/issues/4752#issuecomment-586599843) the app.

## Development server

Run `npm run start` for a dev server. Navigate to `http://localhost:4200/`. The app will automatically reload if you change any of the source files.

## Code scaffolding

Run `npx ng generate component component-name` to generate a new component. You can also use `npx ng generate directive|pipe|service|class|guard|interface|enum|module`.

## Build

Run `npm run build` to build the project. The build artifacts will be stored in the `dist/` directory.

## Running unit tests

Run `npm run test` to execute the unit tests via [Karma](https://karma-runner.github.io).

## Running end-to-end tests

Run `npm run e2e` to execute the end-to-end tests via [WDIO](http://webdriver.io).

Test configuration is based on the following environment variables:

* CHROME_BIN
* SPOTIFY_AUTH_TOKEN_PRIMARY
* SPOTIFY_CLIENT_ID
* SPOTIFY_CLIENT_SECRET

To get a Spotify Auth Token do the following:

1. Log into Spotify
1. Examine the site's cookies
1. The value of `sp_dc` is your auth token

## Deploy

To build and upload (aka deploy) the project:

```shell
npm run deploy
```

Deployment configuration is based on the following environment variables:

* ENVIRONMENT
* NG_SPOTIFY_IMPORTER__DEPLOYMENT_HOST
* NG_SPOTIFY_IMPORTER__DEPLOYMENT_USERNAME
* NG_SPOTIFY_IMPORTER__DEPLOYMENT_PASSWORD
* NG_SPOTIFY_IMPORTER__DEPLOYMENT_PORT
* NG_SPOTIFY_IMPORTER__DEPLOYMENT_HOME_PATH
* NG_SPOTIFY_IMPORTER__DEPLOYMENT_PROJECT_PATH

## Further help

To get more help on the Angular CLI use `npx ng help` or go check out the [Angular CLI README](https://github.com/angular/angular-cli/blob/master/README.md).
"
486,sander10/spotifyvkdownloader,JavaScript,
487,MinusTwenty9/SpotifyAdKiller,C#,"# SpotifyAdKiller
SpotifyKiller is a simple ad blocker for Spotify  that automatically removes all visual and audible Ad's from the free Spotify application on Windows.
"
488,Kibakus/SpotifyBlockNewUI,Python,"# START

RUN SpotifyBlockNewUI.bat

# Before

<p align=""center"">
  <img src=""https://raw.githubusercontent.com/Kibakus/SpotifyBlockNewUI/main/screenshots/before.png"" />
</p>

# After

<p align=""center"">
  <img src=""https://raw.githubusercontent.com/Kibakus/SpotifyBlockNewUI/29cc616ab50ebb4a5086510a49410a75eee6efe9/screenshots/after.png"" />
</p>
"
489,mopidy/libspotify-archive,,"# libspotify archive

This is an unofficial archive of the latest libspotify releases from Spotify,
as Spotify as of May 2018 no longer hosts these files themselves.


## Deprecation

Note that as of May 2015 libspotify is officially deprecated by Spotify and is
no longer actively maintained.

Spotify has published newer libraries intended for Android and iOS development,
as well as web APIs to access track metadata and manage playlists. Though, for
making apps with Spotify playback capabilities, on any other platform than
Android and iOS, there is currently no alternative to libspotify.

libspotify has been the main way of integrating with Spotify since 2009, and is
today a part of numerous open source projects and commercial applications,
including many receivers and even cars. There's no guarantees, but one can hope
that the large deployment of libspotify means that the library will continue to
work with the Spotify service for a long time into the future.


## Downloads

These are the latest available releases for each CPU architecture, all released
around 2012.

| OS      | Architecture | Version                                                   | SHA256 checksum                                                    |
| ------- | ------------ | --------------------------------------------------------: | ------------------------------------------------------------------ |
| iOS     | ARM/i386     | [12.1.64](libspotify-12.1.64-iOS-universal.zip)           | `b32e9183e552c99bb4149e71181fadb26694553cab37a92311be16c286e0736a` |
| Android | ARM          | [12.1.51](libspotify-12.1.51-Android-arm-release.tar.gz)  | `754957de2648e7235e6ead323c22c111282adfc889535a2684c13067d2099505` |
| Win32   | x86          | [12.1.51](libspotify-12.1.51-win32-release.zip)           | `7c08475997461c077f79130d3cd1002111448c0ad321025748ffade7a37dda30` |
| macOS   | Universal    | [12.1.51](libspotify-12.1.51-Darwin-universal.zip)        | `80053f0779f6192a8052732904d88b91acc62a350831f6b585a3c6ac10cb8fbd` |
| Linux   | amd64        | [12.1.51](libspotify-12.1.51-Linux-x86_64-release.tar.gz) | `43a14e0732ba6ae30078fac105d0e2998d04d5f5c396a4968386bc4e22491058` |
| Linux   | armv5t       | [12.1.51](libspotify-12.1.51-Linux-armv5-release.tar.gz)  | `4d96efcb1423864683917f40fb4df481491250a76cb29be3a235b3732a64fefc` |
| Linux   | armv6t       | [12.1.51](libspotify-12.1.51-Linux-armv6-release.tar.gz)  | `4fb888eeb486578fa3a08e15f5aa2101632e60b56a068553d05d5d4ee0a080cc` |
| Linux   | armv6hf      | [12.1.103](libspotify-12.1.103-Linux-armv6-bcm2708hardfp-release.tar.gz) | `d658e6c1978fb46cf33376eb8367a51d024f4014f21beac1dd264532bcc54b24` |
| Linux   | armv7        | [12.1.51](libspotify-12.1.51-Linux-armv7-release.tar.gz)  | `ad27b6c5aee5382b66b39bfea3b1752076b7abcc445979ce25c1ec9d7ff3aeda` |
| Linux   | i686         | [12.1.51](libspotify-12.1.51-Linux-i686-release.tar.gz)   | `941ab4ba10bcd6ec4e96127afd095a39e11bc955de0882734c97e4f588b155ae` |


## Documentation

- API reference: See `share/doc/libspotify/html/index.html` in the Linux
  releases above.
- Examples: See `share/doc/libspotify/examples/` in the Linux releases above.
- [libspotify FAQ](faq.md)
"
490,streetturtle/awesome-wm-widgets,Lua,"<p align=""center"">
 <img src=""https://github.com/streetturtle/awesome-wm-widgets/raw/master/awesome-o.png"" alt=""logo"" style=""max-width:100%;"">
</p>

<p align=""center"">
  <img src=""https://img.shields.io/github/stars/streetturtle/awesome-wm-widgets.svg"">
  <img src=""https://img.shields.io/github/forks/streetturtle/awesome-wm-widgets.svg"">
  <img alt=""GitHub repo size"" src=""https://img.shields.io/github/repo-size/streetturtle/awesome-wm-widgets"">
  <img alt=""GitHub Workflow Status"" src=""https://img.shields.io/github/workflow/status/streetturtle/awesome-wm-widgets/luacheck"">
  <a href=""https://www.buymeacoffee.com/streetturtle""><img src=""https://img.shields.io/badge/-buy%20me%20a%20coffee-3B4252?style=flat&logo=Buy-Me-A-Coffee""></a>
  <a href=""https://twitter.com/intent/tweet?text=Check%20out%20these%20awesome%20widgets%20for%20Awesome Window Manager%20&url=https://github.com/streetturtle/awesome-wm-widgets"">
 <img src=""https://img.shields.io/twitter/url/http/shields.io.svg?style=social"">
   </a>
</p>

Set of widgets compatible with Awesome Window Manager v.4.3+.

## Screenshots

Spotify, CPU, RAM, brightness-arc, volume-arc and battery-arc widgets:

<p align=""center"">
 <img src=""https://github.com/streetturtle/awesome-wm-widgets/raw/master/Screenshot%20from%202019-03-01%2014-28-18.png"">
</p>

Brightness, volume and battery widgets:

<p align=""center"">
 <img src=""https://github.com/streetturtle/awesome-wm-widgets/raw/master/widgets-icons.png"">
</p>

![screenshot](./screenshot.png)

Some more screenshots in this reddit [post](https://www.reddit.com/r/unixporn/comments/8qijmx/awesomewm_dark_theme/)

# Installation

Clone the repo under **~/.config/awesome/**, then follow an Installation section of widget's readme file.

# Stargazers

[![Stargazers over time](https://starchart.cc/streetturtle/awesome-wm-widgets.svg)](https://starchart.cc/streetturtle/awesome-wm-widgets)

# Troubleshooting

In case of any doubts/questions/problems:
 - create an [issue](https://github.com/streetturtle/awesome-wm-widgets/issues/new/choose)
 - raise a question on [Discussions](https://github.com/streetturtle/awesome-wm-widgets/discussions)!
 - ping me on AwesomeWM's discord, here's an [invite](https://discord.gg/BPat4F87dg)

# Support

If you find anything useful here, you can:
 - star a repo - this really motivates me to work on this project
 - or <a class=""social-link"" href=""https://www.buymeacoffee.com/streetturtle""><img style=""display:inline"" src=""https://img.shields.io/badge/-buy%20me%20a%20coffee-3B4252?style=flat&logo=Buy-Me-A-Coffee""></a>
 - or even become a [sponsor](https://github.com/sponsors/streetturtle)

# Contributors

<a href=""https://github.com/streetturtle/awesome-wm-widgets/graphs/contributors"">
  <img src=""https://contrib.rocks/image?repo=streetturtle/awesome-wm-widgets"" />
</a>

"
491,alberti42/iTunes-Volume-Control,Objective-C,"iTunes-Volume-Control
=====================

:warning: The app moved to *[Volume Control](https://github.com/alberti42/Volume-Control)*
-------------------------------------------

The app has changed from *iTunes Volume Control* to simply *Volume Control*. The reason is that iTunes does no longer exist in recent macOS versions. Also, the app is not restricted to Music, since it also works for Spotify. Please check the new app *[Volume Control](https://github.com/alberti42/Volume-Control)*. 

Description
-----------

* This app allows you to directly control the volume of Apple Music as well as of Spotify using ``volume-up`` and ``volume-down`` hotkeys from your keyboard.
* <s>It also allows you to control the same Music volume by means of your Apple Remote control.</s>
* In general, the app is useful to control the volume of AirPlay devices.
* You can adjust the finesse by which you change the volume.
* You can disable the heads-up display showing the volume status; this is useful when you are watching movies and you do not want to be distracted by the overlay volume display.
* Using the volume keys, the volume of the currently playing application (either Music or Spotify) is controlled. If neither Music nor Spotify are playing music. Then the global volume will be affected by the volume keys.
* With command key (⌘), you can change the behavior whether you control the volume of the system or of the music player.

![alt tag](https://raw.github.com/alberti42/iTunes-Volume-Control/master/iTunes%20Volume%20Control/Images/screenshot.png)

Why do you need this app?
-------------------------

* The volume of Apple Music (previously iTunes) cannot be directly controlled from the keyboard. Volume keys only affect the global system volume.
* However, you might desire to directly control Apple Music's volume. This is especially relevant when listening to musing on external speakers like AirPlay devices. The volume level of AirPlay devices depends on Music volume, and not on the global volume, which as a standard behavior, you can set using the volume keys.
* <s>Music does not respond to volume change from your Apple Remote. Again, Apple Remote would only change the system volume settings, leaving unaffected the volume of your AirPlay devices.</s>
* Sometimes you might desire to hide the volume heads-up overlay from your screen, especially when watching movies. This app can be configured to hide it.

How to get it installed?
------------------------

It is simple. There is no need of any installation.

* Just download either this [zip file](https://raw.githubusercontent.com/alberti42/Volume-Control/main/Volume%20Control.zip).
* Decompress it.
* Drag the *iTunes Volume Control* app into your *Application* folder, or any other folder of your choice.
* Run the *iTunes Volume Control* app and a ""music note"" symbol will appear in your status bar.
* The first time you launch the app, you should authorize it through the *General* panel of *Security & Privacy* of the *System Preferences*.
* If you experience problems with permissions, especially if you upgrade from an old version, go to *Accessibility* panel of *Privacy* of the *System Preferences* (see screenshot below), and try to remove the entry ""iTunes Volume Control"". Make sure to close the app before you remove any permissions, or else you might prevent controlling the keyboard until you reboot the machine. Once you open the app again, you will then be asked to authorize the application again.
* Enjoy listening to your favorite music with better volume control.

![alt tag](https://raw.github.com/alberti42/iTunes-Volume-Control/master/iTunes%20Volume%20Control/Images/SecurityPrivacyMojave.png)
	
Enabling control of iTunes and Spotify
--------------------------------------

The System Integrity Protection under Mojave requires you to grant *iTunes Volume Control* access to iTunes and Spotify. The first time the application attempts to control their volume, you will be asked with a dialog window to grant access.

If the application is running, but it is not able to read nor control the volume of the music player, you should then check that you have correctly granted access. You can change this in the *Automator* panel of *Security & Privacy* of the *System Preferences* (see screenshot below).

![alt tag](https://raw.github.com/alberti42/iTunes-Volume-Control/master/iTunes%20Volume%20Control/Images/AutomationScreenshotDark.png)

Requirements
------------

Mac OS X Mojave or Catalina.

Credits
-------

This app has been inspired by *Volume for iTunes* by Yogi Patel. The icon has been designed by Alexandro Rei. The apple remote control has been adapted from iremotepipe by Steven Wittens. The utilization of MacOS native HUD is based on code written by Benno Krauss and on reverse engineering of */System/Library/CoreServices/OSDUIHelper.app/Contents/MacOS/OSDUIHelper*.

Contacts
--------

If you have any questions, you can contact me at a.alberti82@gmail.com. If you want to know what I do in the real life, visit [http://quantum-technologies.iap.uni-bonn.de/alberti/](http://quantum-technologies.iap.uni-bonn.de/alberti/).


Versions
--------
* [1.7.2](http://quantum-technologies.iap.uni-bonn.de/alberti/iTunesVolumeControl/iTunesVolumeControl-v1.7.2.zip): Fixed appearance of icon according to Monterey MacOS style.
* [1.7.0](http://quantum-technologies.iap.uni-bonn.de/alberti/iTunesVolumeControl/iTunesVolumeControl-v1.7.0.zip): Changed name to Volume Control; compatibility with Big Sur; compiled for universal bundle for Apple M1 and Intel.
* [1.6.8](http://quantum-technologies.iap.uni-bonn.de/alberti/iTunesVolumeControl/iTunesVolumeControl-v1.6.8.zip): Fixed a bug when switching appearance to dark mode; improved volume control with apple key modifier.
* [1.6.7](http://quantum-technologies.iap.uni-bonn.de/alberti/iTunesVolumeControl/iTunesVolumeControl-v1.6.7.zip): Improved compatibility with Catalina and new Music app.
* [1.6.6](http://quantum-technologies.iap.uni-bonn.de/alberti/iTunesVolumeControl/iTunesVolumeControl-v1.6.6.zip): Restored compatibility with MacOS High Sierra and subsequent versions.
* [1.6.5](http://quantum-technologies.iap.uni-bonn.de/alberti/iTunesVolumeControl/iTunesVolumeControl-v1.6.5.zip): Fixed a bug to avoid launching Spotify and iTunes at start of the app, if these program are not already running.
* [1.6.4](http://quantum-technologies.iap.uni-bonn.de/alberti/iTunesVolumeControl/iTunesVolumeControl-v1.6.4.zip): Fixed crash on start due to failed permissions for AppleEvents.
* [1.6.3](http://quantum-technologies.iap.uni-bonn.de/alberti/iTunesVolumeControl/iTunesVolumeControl-v1.6.3.zip): Removed codesigning that was causing the app to crash when starting.
* [1.6.2](http://quantum-technologies.iap.uni-bonn.de/alberti/iTunesVolumeControl/iTunesVolumeControl-v1.6.2.zip): Fixed bug preventing Spotify's volume to be controlled.
* [1.6.1](http://quantum-technologies.iap.uni-bonn.de/alberti/iTunesVolumeControl/iTunesVolumeControl-v1.6.1.zip): Improved visualization of volume status using even marks.
* [1.6.0](http://quantum-technologies.iap.uni-bonn.de/alberti/iTunesVolumeControl/iTunesVolumeControl-v1.6.0.zip): Able to control Spotify, iTunes, and main volume.
* [1.5.3](http://quantum-technologies.iap.uni-bonn.de/alberti/iTunesVolumeControl/iTunesVolumeControl-v1.5.3.zip): Made use of Mojave's native heads-up display to show the volume status.
* [1.5.2](http://quantum-technologies.iap.uni-bonn.de/alberti/iTunesVolumeControl/iTunesVolumeControl-v1.5.2.zip): Fixed compatibility with Mojave. Prior versions are no longer supported. Fixed small bug on displaying the volume level when controlling it with the Apple Remote.
* [1.5.1](http://quantum-technologies.iap.uni-bonn.de/alberti/iTunesVolumeControl/iTunesVolumeControl-v1.5.1.zip): Added the compatibility with Mac OS X versions greater than OS X 10.7 (Lion).
* [1.5](http://quantum-technologies.iap.uni-bonn.de/alberti/iTunesVolumeControl/iTunesVolumeControl-v1.5.zip): Added the possibility to change the increment step on the volume. Backward compatible with Mavericks and Yosemite.
* [1.4.10](http://quantum-technologies.iap.uni-bonn.de/alberti/iTunesVolumeControl/iTunesVolumeControl-v1.4.10.zip): Corrected bug on repositioning the volume indicator on right position.
* [1.4.9](http://quantum-technologies.iap.uni-bonn.de/alberti/iTunesVolumeControl/iTunesVolumeControl-v1.4.9.zip): Started to prepare the transition to Yosemite look.
* [1.4.8](http://quantum-technologies.iap.uni-bonn.de/alberti/iTunesVolumeControl/iTunesVolumeControl-v1.4.8.zip): Updates are now signed with DSA. This improves the security, e.g., preventing man-in-the-middle attacks.
* [1.4.7](http://quantum-technologies.iap.uni-bonn.de/alberti/iTunesVolumeControl/iTunesVolumeControl-v1.4.7.zip): Changed icons and graphics to be compatible with retina display.
* [1.4.6](http://quantum-technologies.iap.uni-bonn.de/alberti/iTunesVolumeControl/iTunesVolumeControl-v1.4.6.zip): Added the option to hide the icon from status bar. The icon reappears temporarily (for 10 seconds) by simply restarting the application. This gives the time to change the hide behavior as desired.
* [1.4.5](http://quantum-technologies.iap.uni-bonn.de/alberti/iTunesVolumeControl/iTunesVolumeControl-v1.4.5.zip): Added the option to enable/disable automatic updates occurring once a week
* [1.4.4](http://quantum-technologies.iap.uni-bonn.de/alberti/iTunesVolumeControl/iTunesVolumeControl-v1.4.4.zip): Corrected two bugs: the focus remains correctly on the selected application after changing the volume; cap lock does not prevent anymore the volume to be changed.
* [1.4.3](http://quantum-technologies.iap.uni-bonn.de/alberti/iTunesVolumeControl/iTunesVolumeControl-v1.4.3.zip): Corrected bug: properly hide transparent panels when animations are completed (thanks to Justin Kerr Sheckler)
* [1.4.2](http://quantum-technologies.iap.uni-bonn.de/alberti/iTunesVolumeControl/iTunesVolumeControl-v1.4.2.zip): Added iTunes icon to volume indicator. Corrected bug when iTunes is busy.
* [1.4.1](http://quantum-technologies.iap.uni-bonn.de/alberti/iTunesVolumeControl/iTunesVolumeControl-v1.4.1.zip): Added automatic upgrade capability.
* 1.4: Added ""mute"" control.
* 1.3: Added graphic overlay panel indicating the volume level.
* 1.2: Added options, load at login, use CMD modifier.
* 1.1: Controlling iTunes volume using Apple Remote.
* 1.0: Controlling iTunes volume using keyboard ""volume up""/""volume down"".

Note: you can download old versions by clicking on the links which appear above here.

Requirements
------------

It is required Mac OS X 10.7 (Lion). The app has been tested with Mac OS X 10.7, 10.8.
"
492,lmuntaner/spotifyPlayerSkeleton,CSS,"# Spotify Player

This is the skeleton to start implementing the Spotify Player!

Happy coding!"
493,imdadahad/automate-spotify-python,Python,"# Automate Spotify with Python

Pulls music videos from your YouTube playlists and adds them to Spotify

## Getting Started

For this project, you will need Python installed on your system.

### Prerequisites

1. YouTube Data API credentials (named as `client_secret.json`). These must be placed in the creds/ directory.
2. Spotify Web API OAuth Token. Must be sourced in your environment as `SPOTIFY_AUTH_TOKEN`

### Installing

```
pip install -r requirements.txt
```

## Running the app

```
python run.py
```

## Common issues

Song and artist fields sometimes come back as None in json response. This can be resolved by setting the youtube_dl User-Agent to Facebook's web crawler:
```
youtube_dl.utils.std_headers['User-Agent'] = ""facebookexternalhit/1.1 (+http://www.facebook.com/externalhit_uatext.php)""
```

## License

This project is licensed under the MIT License - see the [LICENSE.md](LICENSE.md) file for details

## YouTube Video Tutorial


![Image description](https://i.imgur.com/9PhXtCd.jpg)

Link: https://youtu.be/R3XgZ__jQxw
"
494,aauren/SpotifyToaster,C#,"SpotifyToaster
==============

Presents toast notifications (system tray popups) when Spotify changes songs.

![toast notification example](https://raw.githubusercontent.com/aauren/SpotifyToaster/master/images/toastNotificationExample.png)

## Background
I'm an avid Spotify user, but I've always felt that it was missing a way to identify the songs as they changed. Other applications like Windows Media Player or Winamp had the option of displaying toast notifications which I always referred to as ""System Tray Popups."" These popups would be displayed when a new song started and would appear near the clock on the Windows Menu Bar to give you the name of the artist, album, track number, and track title along with the album art.

So with this project I've attempted to recreate those notifications for Windows Spotify users. If you're like me and you miss those popups as well, feel free to use this application.

## Pre-requisites
A Windows based operating system. I've only tested it with Windows 7, but it **should run on any system that is installed with .NET 4.0 or higher**. I would be grateful for any testing others are willing to do.

**Disclaimer** - This project, to my knowledge, has only been tested on my own system so far. If you do end up testing it, please let me know how it works for you so that I can remove this section. = )

## Installation
Currently, the application is only a simple .exe file so you need only copy it to your computer and double-click it to get it going.

The compiled application lives in the bin folder, to make it easier though, you can:

**[Download The Application Here](https://github.com/aauren/SpotifyToaster/blob/master/bin/Release/SpotifyToaster.exe?raw=true)**

You don't need to have Spotify running in order to start the application. If everything went well, you should see something similar to [this](https://github.com/aauren/SpotifyToaster/blob/master/images/toastStartupNotificationExample.png) after double-clicking the exe. The next time you start Spotify and begin playing music, the application will begin notifying you of the songs being played. When you want to close the application just find the toast icon in your system tray (area near your clock), right-click it, and then click ""Exit"".

## Known Issues
If you have any questions about how this application works, or any problems please check the [issues](https://github.com/aauren/SpotifyToaster/issues) section first to see if your problem is already mentioned there. Please also use the search box as a question or issue that you have may already have been answered and closed. If not, feel free to add an issue that describes the problem you're experiencing.

1. [Windows ClearType Font Problems](https://github.com/aauren/SpotifyToaster/wiki/Windows-ClearType-Font-Problem)

## Contribution
I welcome any help people are willing to give just submit a pull request. In the future, I'll put more information here on how to build this application, but for right now if you're familiar with Visual Studio you should be fine.

One thing that you will need to do (if you want to see album artwork in your builds) will be to go to [LastFM's API Page](http://www.last.fm/api) and get your API keys. Once you have those, you need to create a resource within Visual Studio by doing the following:

1. Right-Click project name (SpotifyToaster) > Add > New Item...
2. Search or browse for an item named ""Resources File""
3. Change it's name in the box at the bottom of the screen to: ""ProtectedResources.resx""
4. In the Solution Explorer, drag this resource into the ""Properties"" folder
5. Double-Click ProtectedResources.resx and add a key value pair for lastFmAPIKey and add the key that you got from LastFm
 
## Credits
##### Ranveer Raghuwanshi ([GitHub](https://github.com/ranveer5289) [StackOverflow](http://stackoverflow.com/users/776084/ranrag)) and Matthew Javellana ([Gmail](mmjavellana@gmail.com))
When I first started this project, the first thing I did was look around to see if anything like this already existed. In fact, Ranveer and Matthew had already done a great job of producing this same functionality for Growl, Snarl, and Notifu in his application [spotifynotifier](https://code.google.com/p/spotifynotifier/). The only problem is that I had no other need for these notification frameworks and felt that they were a bit heavy for my use case.

So, as the application is now, most of the work of getting the current track, artist, and eventually album art is derrivitive from their original application. My original work mostly comes in with some refactoring that I did and the actual mechanism that displays the toast notification. Thanks Ranveer and Matthew!

##### aku - http://stackoverflow.com/users/1196/aku
My first ideas of how to animate a toast notification came from [aku's post on StackExchange](http://stackoverflow.com/questions/461184/toast-style-popup-for-my-application)
"
495,jerosa/spotify-hotkeys-firefox,JavaScript,"# Spotify Web Player Hotkeys Firefox Extension

This extension adds keyboard shortcuts to Firefox to play, pause, next and previous tracks in [Spotify Web Player](https://open.spotify.com).

![(Screenshot of running extension)](images/Spotify.png)

## Usage

Default Keyboard shortcuts are:
```
- Play/Pause  : Alt + Shift + W
- Next        : Alt + Shift + Right Arrow
- Previous    : Alt + Shift + Left Arrow
- Shuffle     : Alt + Shift + D
- Repeat      : Alt + Shift + R
- Play-Album  : Alt + Shift + G
- Save Track  : Alt + Shift + L
- Mute/Unmute : Alt + Shift + M
- Volume Up   : Alt + Shift + Up Arrow
- Volume Down : Alt + Shift + Down Arrow
```

The `Play Album or PlayGreen` shortcut play also play/pause the songs like the `Play/Pause` shortcut but is useful when Spotify Web Player gets stuck with an ad.

Instead of using the keybord it's possible to click on the icon of the toolbar which will show the keybindings.

## Installation

You can find the signed Firefox Extension at https://addons.mozilla.org/en-US/firefox/addon/spotify-hotkeys/

## [Customizing the shortcuts](https://support.mozilla.org/en-US/kb/manage-extension-shortcuts-firefox)

You can now change your extensions' keyboard shortcuts on the add-ons page.

1. Click the menu button, click `Add-ons` and select `Extensions`.
2. Click the Tools for all add-ons cogwheel.
3. Click `Manage Extension Shortcuts` in the menu.
4. You will see the shortcut options (if available) for your installed add-ons. 

![(Screenshot of managing extension shortcuts 1)](images/ManageExtensions1.png)
![(Screenshot of managing extension shortcuts 2)](images/ManageExtensions2.png)

## Option page

The option page of the extension allows the user to customize the shortcuts and some settings. See the [wiki](https://github.com/TsunDoge/spotify-hotkeys-firefox/wiki/How-to-use-Spotify-Shortcuts) for more information.

### Settings

The following options can be enabled/disabled in the option page.

- Open Spotify with shortcuts: When the user hit a shortcut open spotify if it is not opened yet.
- Create notifications when song changes

### Custom Shorcuts **(legacy)**

It is possible to change the default shortcuts to custom ones in the option page of the addon. See the [wiki](https://github.com/TsunDoge/spotify-hotkeys-firefox/wiki/How-to-use-Spotify-Shortcuts#configure-shortcuts) for more information.

**NOTE:** On Firefox >= 66.0-build3 or Firefox >= 67.0a1 a new interface has been implemented to change the default shortcuts. See the [docs](https://support.mozilla.org/en-US/kb/manage-extension-shortcuts-firefox)
"
496,statsfm/spotify.js,TypeScript,"# spotify.js

[![CI](https://github.com/statsfm/spotify.js/actions/workflows/lint.yml/badge.svg)](https://github.com/statsfm/spotify.js/actions/workflows/lint.yml)

An API wrapper for Spotify, written in Typescript. Made for [Stats.fm (formerly known as Spotistats for Spotify)](https://stats.fm/).

[Documentation](https://spotify.js.org/).

## Features

- Support for both the authorization code flow and the client credentials flow.
- Automatic token refreshing.
- Retries requests when the ratelimit is hit.
- Highly configurable.

## Usage

```bash
# using yarn
yarn add @statsfm/spotify.js
# or with npm
npm install @statsfm/spotify.js
```

```ts
import { SpotifyAPI } from '@statsfm/spotify.js';

const api = new SpotifyAPI({
  clientCredentials: {
    clientId: '',
    clientSecret: '',
  },
  accessToken: '', // optional, required for private user data
  refreshToken: '', // optional, required for private user data and automatic token refreshing
});

const tracks = await api.tracks
  .list([
    '2cc8Sw1OnCuA5bV8nqWqpE',
    '4a8pP5X2lxwU5aprY44jLn',
    '5lIFsEWj9IjNEALbHnPosE',
    '4S4RWAA749dKyJQ5CiKEBJ',
    '4ZtFanR9U6ndgddUvNcjcG',
  ])
  .then((tracks) => {
    tracks.forEach((track) => {
      console.log(`${track.name} - ${track.artists[0].name}`);
    });
  })
  .catch(console.error);
```

## Maintainers

- [@stingalleman](https://github.com/stingalleman)
"
497,L04DB4L4NC3R/spotify-downloader,Go,"# spotify-downloader
Download songs, playlists and albums, or sync in to your favourite tunes

## Core Features

- [X] Track download on a URL basis
- [X] Entire playlist download
- [X] Apply metadata on downloaded songs
- [X] Entire album download
- [X] Independently scale downloader and renderer
- [X] Configurable concurrency

## UI Features

- [ ] Web-UI for downloading
- [X] CLI

## Run using docker compose

* Edit the ./config/secret.env to expose relevent secrets to the containers

* Change script permissions

```sh
chmod +x ./scripts/docker-setup.sh
```

* Run

```sh
./scripts/docker-setup.sh
```

## Run Locally
Installation instructions in wiki

## Endpoints

| Function | Route |
|:--------:|:-----:|
| Check service health | /ping/ |
| Download Song | /song/{id}/ |
| Download Playlist | /playlist/{id}/ |
| Download Album | /album/{id}/ |
| View Song Metadata | /meta/song/{id}/ |
| View Playlist Metadata | /meta/playlist/{id}/ |
| View Album Metadata | /meta/album/{id}/ |
| Bulk View Resource Metadata | /metas/<resource>/{id}/ (where resource can be playlists, albums, shows)|
| Check Song Download Progress | /status/song/{id}/ |
| Check Bulk Song Download Progress | /status/songs/ (array of {""song_ids"": []string} in POST) |
| Check Playlist Download Progress | /status/playlist/{id}/ |
| Check Album Download Progress | /status/album/{id}/ |

Note that the `{id}` mentioned here is the resource ID you get from spotify (from a track, album or playlist URL).

## Disclaimer
Read the [disclaimer](disclaimer.md) before using this software.

## Contibutions Welcome
Note that this repo is just the core backend of the service. **UI contributions are needed**. All contributions are welcome. Just fork and make a PR. If you are making a UI, create a new directory called `src/ui`.
"
498,lim93/DiscogsToSpotify,JavaScript,"# DiscogsToSpotify
A web application that creates a Spotify playlist based on a user's personal collection on Discogs. The application is written in client-side JavaScript with jQuery and Bootstrap. It uses the Web APIs that both Discogs and Spotify offer for Third Party Applications.
"
499,MrPnut/SpotifyWPF,C#,"# SpotifyWPF
An unofficial, simple tools application for Spotify

This application was born out of a community ask to delete multiple playlists at a time (they had thousands of them).  With that said,
that's the only feature this application supports currently.

The idea is for this to be a sort of ""power tools"" application for Spotify.  Stuff that you can't do in the app (but can with the public APIs)
will be considered for addition to this app.  Things that you can do in the Spotify app, but cumbersone to perform, will be considersed as
well.

For example:
* Adding all of an artist's tracks to a playlist
* Mass deletion (technically unfollow) of playlists
* Displaying information from the API that the Spotify client doesn't show

If you have any feature ideas, you can either add it as an issue to this repo, or post it on the Spotify Community.  I'll keep a lookout
for any asks I see that the official app doesn't support.

# Installation

If you want to use the [installer](https://mrpnut.github.io/SpotifyWPF/SpotifyWPF.appinstaller), then you need to install my self signed certificate to your computer's trusted certificate authorities.
To do that easily, run the following in an Administrator PowerShell command prompt.  After that, run the installer.

```
Invoke-WebRequest -Uri ""https://mrpnut.github.io/SpotifyWPF/SpotifyWPF.cer"" -OutFile ""$env:temp\SpotifyWPF.cer""; Import-Certificate -FilePath ""$env:temp\SpotifyWPF.cer"" -CertStoreLocation Cert:\LocalMachine\Root
```

If you don't want to use the installer, you can pick one of the Github releases to extract to a folder and run.
Using the installer will keep SpotifyWPF up to date.

# Running

After installation, you can just search for ""SpotifyWPF"" in your start menu if you used the installer.
"
500,CosmicMac/M5Spot,C++,"# M5Spot
A Spotify Web API client for M5Stack

![M5Spot](./doc/M5Spot.jpg)

- Display song title, artists & JPEG album art
- Play/Pause, Next, Previous with M5Stack buttons
- Easy OAuth2 authorization through browser
- SSE console in browser to look under the hood

### Prerequisite
- Create an App in [Spotify Developper Dashboard](https://developer.spotify.com/dashboard/) and declare http://m5spot.local/callback/ as the Redirect URI
- Insert a SD card in M5Stack (I don't feel comfortable using internal flash for writing JPEG files again & again)
- Rename `config.h.SAMPLE` to `config.h` and complete the settings
- Install external libraries (see `platformio.ini`)
- Compile and upload `src`
- Upload `data` to file system

### Caveat
This is a work in progress and there is still a lot to do:
- Use 8 bits fonts with support for international characters
- Better display of title/artists (currently needs sharp eyes, and long strings are truncated)
- Better error handling
- A bit of refactoring/polishing
- Add a tap interface: Play/Pause with a tap, Next with a double tap (thanks to the gray edition with integrated MP9250)
- Eventually add a gesture interface: use hand swipes to Play/Pause/Next/Previous (via external APDS9960)
- Give option to store album art JPEG files in SPIFFS, instead of SD Card 
- Cache last n JPEG files, to avoid unnecessary traffic & memory write when always playing the same songs :)
- Tests, tests, tests...

I decided to realease it anyway, just before my annual AFK period, in case someone would find it interresting enough
to work on it while I'm lazying under the sun. ;)


 "
501,rpendleton/spotify-rcd,Objective-C,"spotify-rcd
===============

On a standard installation of macOS, pressing the playback control keys on an
Apple keyboard opens iTunes if no other media applications are open. The purpose
of this project is to patch this behavior such that Spotify is opened instead.

## :warning: Compatibility

This is the README for the legacy version of the project. The legacy version is
known to work on a few older versions of macOS, but the exact list of supported
versions is not known.

Based on issues and commit dates, it seems reasonable to expect the legacy
version to support macOS Mavericks (10.9) through Sierra (10.12). It's possible
that some older versions of macOS could be supported as well. Compatibility with
High Sierra (10.13) and newer is known to be broken. (Adding support for a newer
version of macOS is being tracked by #3.)

This tweak has been tested primarily using the internal keyboard of a MacBook
Pro, but the tweak should also work with external keyboards. Compatibility with
the MacBook Pro's Touch Bar is unknown.

## How it works

spotify-rcd works by [injecting][injection] itself into the `com.apple.rcd`
system launch agent, after which it uses [method swizzling][swizzling] to alter
the agent's behavior.

(I'd recommend reading this section so that you know what the patch is actually
doing to your system and what risks it comes with, but you can skip to the
installation section if you're not interested in the technical details.)

### Injection

In order to load spotify-rcd into the system agent, we take advantage of
`DYLD_INSERT_LIBRARIES`, an environment variable that allows us to load custom
images into other processes during launch. (At the moment, this injection vector
works fine for the needs of this project. However, additional restrictions are
placed on DYLD injection as part of each release of macOS, so it's likely only
a matter of time before a new injection vector will be needed.)

For `DYLD_INSERT_LIBRARIES` to work, we have to find some way of setting the
environment variable in the target process before it is launched. Conveniently,
macOS allows you to persistently unload system launch agents and replace them
with your own patched versions as long as the labels are different. As such, all
we need to do for this to work is copy the system launch agent configuration,
alter the label to something unique, add our environment variable, and then use
`launchctl` to persistently disable the system agent and enable our patched
version.

### Swizzling

Now that spotify-rcd has been injected into the system agent, we actually need
to alter the agent's behavior to do what we want. This is where [method
swizzling][swizzling] comes in. By intercepting all AppleScript execution, we
can watch for any requests to launch iTunes and replace those with requests to
launch Spotify instead.

### Caveats

As you can imagine, all of this can be a somewhat fragile process. It's possible
that any release of macOS can break the injection *or* the swizzling. Even so,
this patch tends to be relatively safe.

Unlike other versions of this tweak, installation doesn't require modifying any
system files. The tweak can also be reverted by simply disabling the patched
agent and enabling the unpatched agent. Given that `com.apple.rcd` isn't a
critical system service, this makes the liklihood of serious side-effects very
unlikely.

[injection]: https://knight.sc/malware/2019/03/15/code-injection-on-macos.html
[swizzling]: https://nshipster.com/method-swizzling/

## Installation

- Automated Installation: This project contains an `install.sh` script that will
  executes all of the necessary commands to build, install, and activate the
  tweak. Simply run the script in Terminal to use it:

  ```
  $ git clone https://github.com/rpendleton/spotify-rcd.git
  $ cd spotify-rcd
  $ ./install.sh
  ```

- Manual Installation: If you prefer to install the plugin manually, it is
  possible to do so.

  - Compile the tweak and copy the resulting bundle to
    `/Library/Application Support/Tweaks`
  - Copy `/System/Library/LaunchAgents/com.apple.rcd.plist` to
    `/Library/LaunchAgents/com.apple.rcd.patched.plist`
  - In the copied plist, change the `Label` to `com.apple.rcd.patched`
  - Add the following section to the copied plist:

    ```
    <key>Disabled</key>
    <true/>
    <key>EnvironmentVariables</key>
    <dict>
            <key>DYLD_INSERT_LIBRARIES</key>
            <string>/Library/Application Support/Tweaks/SpotifyRCD.bundle/Contents/MacOS/SpotifyRCD</string>
    </dict>
    ```

  - Unload the system LaunchAgent, and load the modified one:

    ```
    $ launchctl unload -w /System/Library/LaunchAgents/com.apple.rcd.plist
    $ launchctl load -w /Library/LaunchAgents/com.apple.rcd.patched.plist
    ```

## Uninstallation

To disable the tweak, simply unload the modified plist and load the original:

```
$ launchctl unload -w /Library/LaunchAgents/com.apple.rcd.patched.plist
$ launchctl load -w /System/Library/LaunchAgents/com.apple.rcd.plist
```

After the tweak has been disabled, you can completely uninstally it by simply
deleting the tweak bundle:

```
$ rm -rf ""/Library/Application Support/Tweaks/SpotifyRCD.bundle""
```
"
502,barba99/barba_music,Shell,"Instalación 


```

bash <(curl -sL https://acortar.link/barba_music)


```
"
503,DatScreamer/headphones-spotify-import,Python,"Headphones Spotifty Import

---------------------------------------------------------

Notice: Due to the fact that Headphones relies on Musicbrainz to find information (artists, albums) we cannot garuntee that a song will be added to Headphones because of disparities between Spotify and Musicbrainz databases. Such as Spotify may have an album but Musibrainz may not but rather have only 2x songs from that album as singles.

---------------------------------------------------------

Prerequisites:
1. Exportify CSV file named all.csv (https://rawgit.com/watsonbox/exportify/master/exportify.html)
2. Headphones with enabled API (Settings>Web Interface>API>Enable API) (https://github.com/rembo10/headphones)
3. Python (Hasn't been tested on any version lower than 3.62) (https://www.python.org/)
4. Python Requests (May require pip to install on windows, setup is easiest on linux in my opinion.) (http://docs.python-requests.org/en/master/user/install/))
5. Colorama Python package. (pip install colorama) https://pypi.python.org/pypi/colorama

---------------------------------------------------------

Instructions:
1. Open Spotify (I used the desktop client) and create a new playlist with all the music you want to download. I went into ""Songs"" (Spotify>Songs) and selected everything with Ctrl+A then dragged the selection to the playlist in the sidebar.
2. Open your web browser and go to https://rawgit.com/watsonbox/exportify/master/exportify.html. Log in with your Spotify account and click export on your desired playlist.
3. Move the .csv file that you just downloaded to the same folder as importer.py and make sure it's named ""all.csv""
4. Download and install Python, and Python Requests from the links in Prerequisites.
5. Install Headphones on whatever device you like, as long as it's on the same network as you are running the script on. If Headphones seemingly hasnt installed correctly and the webpage won't load you may need to edit the ""config.ini"" and change the host gateway (or whatever it's called.) from ""localhost"" to ""0.0.0.0"". This allows for headphones to run and be accessable on the network rather than just the local machine.
6. Setup Headphones. Go into the settings and configure your download settings, search provider settings, quality settings, etc...
7. Enable the API on Headphones. Go to Settings>Web Interface and enable the API.
8. Generate an API key from above webpage. And set your host and api key below.
9. You may need to use a Mirror domain for Musicbrainz if the musicbrainz searching is taking extended periods of time. If this is the case you can change it via Settings>Advanced Settings. I use the folling settings: Musicbrainz Mirror: Custom | Host: musicbrainz-mirror.eu | Port: 5000 | Required Authentication: No (unchecked) | Sleep Interval: 1
10. Am I missing anything? Lol. Don't think so. Let me know if you need help though.
11. Open terminal/command-line and navigate to the folder where all.csv and inporter.py are located.
12. Run this file. (importer.py)
13. Wait. It may take a really long time to complete the script, depending on your music library size.
"
504,Moosync/Moosync,Vue,"<img align=""left"" width=""130"" height=""130"" src=""extras/banner_logo.png"" alt=""moosync logo"">

# Moosync

[![All Contributors](https://img.shields.io/badge/all_contributors-3-orange.svg?style=flat-square)](#contributors-) ![Release](https://github.com/Moosync/Moosync/actions/workflows/build.yml/badge.svg) [![Discord](https://img.shields.io/badge/Moosync-%237289DA.svg?style=fsocial&logo=discord&logoColor=white)](https://discord.gg/HsbqbRune3)

<br/>

#### Moosync is a customizable desktop music player with a clean interface

## Features

- Play audio files on your desktop.
- Seamlessly integrate your Spotify and Youtube (including [Invidious](https://invidious.io/)) songs.
- Ad-free
- Realtime lyrics
- Scrobble your tracks on LastFM.
- Get music recommendations directly from Spotify, Youtube and LastFM
- Mix and match songs from different providers in a single playlist
- Easy to use interface
- Customizable theme engine
- Develop own apps on top of Moosync Extension API
- Available on Windows and Linux and MacOS

## Links
[Official website](https://moosync.app) |
[Downloads](#releases) |
[Discord](https://discord.gg/HsbqbRune3)

## Releases

You may download the latest release from [Official website](https://moosync.app) or from [GitHub Releases](https://github.com/Moosync/Moosync/releases)

### Windows (Chocolatey)

If you use [Chocolatey](https://community.chocolatey.org/packages/moosync), Moosync can be installed using 
```bash
choco install moosync
```

Otherwise you may download the latest installer from [Releases](https://github.com/Moosync/Moosync/releases)

### Ubuntu / Debian (3rd party repo)

You can install Moosync through our hosted [APT repo]([/Moosync/ppa](https://github.com/Moosync/ppa))
```bash
bash <(wget -O- https://raw.githubusercontent.com/Moosync/Moosync/main/setup_ppa.sh)
```

### Fedora

Moosync can be found on [Fedora COPR](https://copr.fedorainfracloud.org/coprs/ovenoboyo/Moosync/). You can install it using [dnf](https://docs.fedoraproject.org/en-US/quick-docs/dnf/)
```bash
dnf copr enable ovenoboyo/Moosync
dnf install moosync
```

### Archlinux User Repository (AUR)

Moosync can be found on [AUR](https://aur.archlinux.org/packages/moosync). You can install it using an AUR helper such as [Yay](https://github.com/Jguer/yay)

``` bash
yay -S moosync
```

### Flatpak

Moosync can be found on [FlatHub](https://flathub.org/apps/details/app.moosync.moosync) as ```app.moosync.moosync```.
You may install it by
```bash
flatpak install flathub app.moosync.moosync
```

### Snap Store

You can get Moosync from [Snap store](https://snapcraft.io/moosync).
```
sudo snap install moosync
```

## Any questions?

Checkout the [Official Wiki](https://moosync.app/wiki/) on [moosync.app](https://moosync.app/wiki/) or on [GitHub](https://github.com/Moosync/Moosync/wiki).  
  
For any further questions you may join us on [Discord](https://discord.gg/HsbqbRune3)


## Screenshots

![Song view](./extras/screenshot_song_view.png)
![Music info](./extras/screenshot_musicinfo_view.png)
![Lyrics](./extras/screenshot_musicinfo_view_lyrics.png)
![Albums](./extras/screenshot_albums.png)
![Playlists](./extras/screenshot_playlists.png)
![Explore](./extras/Screenshot_explore.png)
![Themes](./extras/screenshot_themes.png)
![Create theme](./extras/screenshot_theme_new.png)
![Extensions](./extras/screenshot_extensions.png)

## Building from source

Read more at our [Wiki](https://moosync.app/wiki/building-from-source)

## Contributors ✨

Thanks goes to these wonderful people ([emoji key](https://allcontributors.org/docs/en/emoji-key)):

<!-- ALL-CONTRIBUTORS-LIST:START - Do not remove or modify this section -->
<!-- prettier-ignore-start -->
<!-- markdownlint-disable -->
<table>
  <tr>
    <td align=""center""><a href=""https://github.com/Mercyssh""><img src=""https://avatars.githubusercontent.com/u/41297391?v=4?s=100"" width=""100px;"" alt=""""/><br /><sub><b>Ohm</b></sub></a><br /><a href=""#design-Mercyssh"" title=""Design"">🎨</a></td>
    <td align=""center""><a href=""http://androbuddy.github.io/studio-wingress""><img src=""https://avatars.githubusercontent.com/u/28799675?v=4?s=100"" width=""100px;"" alt=""""/><br /><sub><b>Anirudh</b></sub></a><br /><a href=""#design-AndroBuddy"" title=""Design"">🎨</a></td>
    <td align=""center""><a href=""https://github.com/Ovenoboyo""><img src=""https://avatars.githubusercontent.com/u/36789504?v=4?s=100"" width=""100px;"" alt=""""/><br /><sub><b>Sahil Gupte</b></sub></a><br /><a href=""https://github.com/Moosync/Moosync/commits?author=Ovenoboyo"" title=""Code"">💻</a></td>
  </tr>
</table>

<!-- markdownlint-restore -->
<!-- prettier-ignore-end -->

<!-- ALL-CONTRIBUTORS-LIST:END -->

This project follows the [all-contributors](https://github.com/all-contributors/all-contributors) specification. Contributions of any kind welcome!
"
505,openopus-org/concertmaster_player,JavaScript,"# concertmaster_player

[Concertmaster](https://getconcertmaster.com) is a classical music front-end for Spotify.

It's splitted in several projects. **This one provides only the HTML/JS interface.** It uses some PHP to deal with the server-side part of OAuth. All data comes from an API which, in its turn, uses the Spotify API. Spotify doesn't allow multiple apps using the same API key, so you can't fork only the player and use the Concertmaster API - you have to fork both.

## Usage

It's a web app, so just [open it](https://concertmaster.app) in your browser! (It doesn't work on the iPhone because the Spotify SDK isn't compatible with it.)

The player itself is full of features, so there is a [wiki](https://getconcertmaster.com/help) explaining them all.

## How to build

1. Fork and clone this git repository to your webserver (for example, in the `/var/www/` folder)
2. Fork the [API repository](https://github.com/openopus-org/concertmaster_api) and clone it as well 
3. Create an `inc.php` file from the example:

```bash
cd /var/www/concertmaster_player/lib/
cp inc-example.php inc.php
vim inc.php
```
4. Change variable values in the `lib/inc.php` accordingly to your webserver and Spotify API params (you can create a Spotify dev account [here](https://developer.spotify.com/))
5. Edit the `html/player/js/lib.js` file and change variable values accordingly to your domains and Spotify API key params
6. It's better to change the Google Analytics tag to your own account. Please check the `html/player/index.html` file

## Domains

There are two public directories in the project and they must have their own virtual hosts on your webserver:
- `html/player` it's the main player. For example, we host it at [concertmaster.app](https://concertmaster.app)
- `html/share` it's the share page. For example, we host it at [cmas.me](https://cmas.me)

The main player *must* have SSL enabled (it's a DRM rule). You can use free [Let's Encrypt](https://letsencrypt.org/)-provided certificates, they're perfectly fine.

### Development environment

We have adopted fake `.local` domains (concertmaster.local, cmas.local) for our dev webserver, but you can change the TLD in the `html/player/js/lib.js` file. 

Please note that you still need the main player to serve with HTTPS, so you'll have to [create self-signed phony SSL certificates](https://medium.com/@tbusser/creating-a-browser-trusted-self-signed-ssl-certificate-2709ce43fd15) for your dev environment.

## Contributing with code
Pull requests are welcome. For major changes, please open an issue first to discuss what you would like to change.

## Contributing with data
Concertmaster composers and works information come from [Open Opus](https://openopus.org), a free, wiki-style, open source database of classical music metadata. You can review existing info or add new entries to the database - any help will be appreciated!

## Contributing with money
Concertmaster is free to use but it runs on web servers that cost us money. You can help us by supporting us on [Patreon](https://www.patreon.com/openopus) - any amount is more than welcome!

## License
[GPL v3.0](https://choosealicense.com/licenses/gpl-3.0/)"
506,wghglory/nextjs-spotify,TypeScript,"# Spotify App by Next.js + Tailwind CSS

Deployed at https://derek-nextjs-spotify.vercel.app/

https://user-images.githubusercontent.com/11544273/149727516-e56d8d61-e08b-4ffd-aeaa-5f99e860f73e.mp4

## Tech Highlights

- Nextjs v12 (middleware, server rendering)
- NextAuth v4
- Spotify Web API for node
- Tailwind v3, custom layout components
- Recoil for managing global state such as current track, isPlay, playlist id

## Setup

```bash
# Create the app
npx create-next-app@latest --typescript -e with-tailwindcss nextjs-spotify

# install heroicons
npm install @heroicons/react

# install next-auth
npm i next-auth
```

## Create Spotify developer app

https://developer.spotify.com/dashboard/applications

I personally login via facebook.

```
app: nextjs-spotify
client id: 0e3eff139050415a9635bc8e4394622a
```

## Resources

- https://next-auth.js.org/getting-started/example
"
507,nhattruongniit/react-spotify,TypeScript,"# React Spotify

A simple React Spotify apps built with React Typescript, Redux and TailwindCSS.

## Working application

Checkout: https://ecstatic-franklin-620529.netlify.app/

![Workspace](public/assets/images/landing.png)

## Tech stack

- [React Typescript](https://reactjs.org/)
- [TailwindCSS](https://tailwindcss.com/)
- [Redux](https://redux.js.org/)
- [Netify](https://www.netlify.com/) for deployment

## Scripts

```bash
# install dependencies
$ yarn install

# run localhosr
$ yarn start

# build
$ yarn run build
```
"
508,university-of-toronto-fsf/rnc-spotify,,"# React Native Creative - Workshop Files

This Repository holds the current Workshop Files needed for the Create React Native Workshop.

This repo URL for reference is - https://github.com/university-of-toronto-fsf/rnc-spotify


## General Information

The files found in this repo are only useful when provided with some ""context"", i.e. learning the theory behind these files is important. The theory will be presented by the instructor, with information / documentation provided in the docs repository [here](https://github.com/university-of-toronto-fsf/rnspotify-docs.git).

## Updates

* The minimal first four steps have been posted in this repository for review. You do not have to do these steps prior to the workshop, but they are here to provide context to how the workshop will run
* Kindly review to the setup instructions found [here](https://github.com/university-of-toronto-fsf/rnspotify-docs.git) and ensure that your laptop is set up appropriately for the React Native Workshop.


## Workflow

1. Each branch represents a particular ""step"" in the development workflow of the exercise.
2. The starting files of a particular branch represent the ""solution"" of the previous branch. For example, branch ""02"" represents the solution for branch ""01"". So you can use the different branches as a guide to see what your end goal should be.
3. Additionally, when working with the exercises, the code found within each file contains instructions in comment form that indicate how you should proceed completing writing the code for that particular file. The steps are in line with the theory that are being presented by your instructor. Hence, this repository only becomes more beneficial with the theory provided by your instructor.









"
509,OtchereDev/django-spotify-clone,CSS,
510,plamere/SpotifyEchoNestPlaylistDemo,CSS,"# SpotifyEchoNestPlaylistDemo

This is a little demo app that shows how to call the Echo Nest API from within a Spotify App. To run this
app create a subdirectory called 'playlister'  in your Spotify directory (on a Mac its ~/Spotify/playlister). 
and copy the project files into that directory.

Load the app by typing:

      spotify:app:playlister

in the search bar. The app will create a list of tracks for the given seed artist.   Press the button to
generate another playlist.

You should use your own Echo Nest API key. Replace the demo key (N6E4NIOVYMTHNDM8J) with your own key to
get full API access.


For more info on creating Spotify Apps see: https://developer.spotify.com/technologies/apps/
For more info on The Echo Nest API see: https://developer.echonest.com/





"
511,JulienMaille/spicetify-dynamic-theme,CSS,"# DefaultDynamic for [Spicetify](https://github.com/khanhas/spicetify-cli)

<a href=""https://github.com/JulienMaille/spicetify-dynamic-theme/releases/latest""><img src=""https://img.shields.io/github/release/JulienMaille/spicetify-dynamic-theme/all.svg""></a>

This is a tweaked version of the Default theme.
The main differences are the light/dark toggle, the background cover and the dynamic highlight color, ie. it will match the current album art.

## Preview

![demo-base](./Dark.gif)

## Install / Update

Make sure you are using latest releases of Spicetify and Spotify

### Windows (PowerShell)

```powershell
Invoke-WebRequest -UseBasicParsing ""https://raw.githubusercontent.com/JulienMaille/spicetify-dynamic-theme/master/install.ps1"" | Invoke-Expression
```

### Linux/MacOS (Bash)

```bash
curl -fsSL https://raw.githubusercontent.com/JulienMaille/spicetify-dynamic-theme/master/install.sh | sh
```

### Manual Install

1. Download the latest [Source code (zip)](https://github.com/JulienMaille/spicetify-dynamic-theme/releases/latest)
2. Extract the files to your [Spicetify/Themes folder](https://spicetify.app/docs/development/customization#themes) (rename the zipped folder to `DefaultDynamic`)
3. Copy `default-dynamic.js` to your [Spicetify/Extensions folder](https://spicetify.app/docs/advanced-usage/extensions#installing)
4. Add the 2 lines in `[Patch]` section of the config file (see details below)
5. Run:
    ```
    spicetify config extensions default-dynamic.js extensions Vibrant.min.js
    spicetify config current_theme DefaultDynamic
    spicetify config color_scheme base
    spicetify config inject_css 1 replace_colors 1
    spicetify apply
    ```

## IMPORTANT!

From Spotify > v1.1.62, in sidebar, they use an adaptive render mechanic to actively show and hide items on scroll. It helps reducing number of items to render, hence there is significant performance boost if you have a large playlists collection. But the drawbacks is that item height is hard-coded, it messes up user interaction when we explicitly change, in CSS, playlist item height bigger than original value. So you need to add these 2 lines in Patch section in config file:

```ini
[Patch]
xpui.js_find_8008 = ,(\w+=)32,
xpui.js_repl_8008 = ,${1}28,
```

## Follow system dark/light theme (PowerShell)

Automatic dark mode should work on MacOs and Linux out of the box.
From Spotify > v1.1.70, dark mode is forced in Windows builds. You will need to patch Spotify.exe using this script:

```powershell
Invoke-WebRequest -UseBasicParsing ""https://raw.githubusercontent.com/JulienMaille/spicetify-dynamic-theme/master/patch-dark-mode.ps1"" | Invoke-Expression
```

## Hide Window Controls:

Windows user, please edit your Spotify shortcut and add flag `--transparent-window-controls` after the Spotify.exe

![hide-controls](./windows-shortcut-instruction.png)

## Uninstall

### Windows (PowerShell)

```powershell
Invoke-WebRequest -UseBasicParsing ""https://raw.githubusercontent.com/JulienMaille/spicetify-dynamic-theme/master/uninstall.ps1"" | Invoke-Expression
```

### Linux/MacOS (Bash)

```bash
curl -fsSL https://raw.githubusercontent.com/JulienMaille/spicetify-dynamic-theme/master/uninstall.sh | sh
```

### Manual Uninstall

1. Remove Patch lines you added in config file earlier.
2. Run:
    ```
    spicetify config current_theme "" "" color_scheme "" "" extensions default-dynamic.js- extensions Vibrant.min.js-
    spicetify apply
    ```
"
512,xinranxiao/meteor-accounts-spotify,JavaScript,"# meteor-accounts-spotify
An updated and maintained meteor package for Spotify's login service.

## Installation
* `meteor add xinranxiao:accounts-spotify`

## Usage

Go to Spotify's website and register an application. For your redirect URL, enter: `<yourhostname>/_oauth/spotify?close`

Configure the Spotify service (server-side):

```javascript
ServiceConfiguration.configurations.update(
  { ""service"": ""spotify"" },
  {
    $set: {
      ""clientId"": ""<your clientId>"",
      ""secret"": ""<your secret>""
    }
  },
  { upsert: true }
);
```

Login on the client:

```javascript
var options = {
  showDialog: true, // Whether or not to force the user to approve the app again if they’ve already done so.
  requestPermissions: ['user-read-email'] // Spotify access scopes.
};
Meteor.loginWithSpotify(options, function(err) {
  console.log(err || ""No error"");
});
```
The user's `services.spotify` and `profile` fields will be populated on success. If you just want the access token without user accounts being involved, check out [xinranxiao:spotify](https://github.com/xinranxiao/meteor-spotify).

## Contribution

If you have any problems with or suggestions for this package, please create a new issue.

TODO
- allow specification of the fields to use for the profile.
"
513,mrmekon/connectr,Rust,"# ![icon](connectr_80px_300dpi.png) Connectr ![icon](connectr_80px_300dpi.png)
[![OSX/Linux Build Status](https://travis-ci.org/mrmekon/connectr.svg?branch=master)](https://travis-ci.org/mrmekon/connectr)
[![Windows Build Status](https://ci.appveyor.com/api/projects/status/4afwy0yj2477f84h/branch/master?svg=true)](https://ci.appveyor.com/project/mrmekon/connectr/branch/master)
[![Crates.io Version](https://img.shields.io/crates/v/connectr.svg)](https://crates.io/crates/connectr)

##
### A super lightweight Spotify controller.
##

Connectr is a tiny application that lets you quickly and easily see – or change – what's playing on your Spotify account.

It's compatible with anything that supports [Spotify Connect](https://www.spotify.com/se/connect/): computers, mobiles, speakers, TVs, Playstations, etc.

***NOTE:*** Spotify Premium is required to use Spotify's remote control features.  Free accounts do not work.

It runs in the Mac menu bar (top right corner) or Windows system tray (bottom right corner...), and the Mac Touch Bar (the fancy touchscreen on new Macbook keyboards).  It's just a little icon that pops up the controls when you need them, and hides away when you don't.  Or just hover over it to see what's currently playing.

What it can do:

* Show what's playing
* Play/pause
* Skip tracks
* Quick-play a saved 'preset'
* Quick-save playing track to a playlist
* Select playback device
* Change volume
* Alarm clock (play on a selected device at a specific time)
* Scrobble to Last.fm

Most importantly, it maintains a tiny memory footprint while running.  ~10MB on a Mac, compared to 300-1000MB for the Spotify desktop app.  You shouldn't need to buy extra RAM just to monitor what's playing on your speakers.

The alarm clock and scrobbling features expect Connectr to run on an always-on server.  If you want to run it on a headless Linux machine, you can configure it on a local machine first and then move the `~/.connectr.ini` to your server.

For developers: the API for communicating with the Spotify backend is provided as a Rust library, available as a Cargo crate. Connectr exposes the official [Spotify 'Player' Web API](https://developer.spotify.com/web-api/web-api-connect-endpoint-reference/) for controlling Spotify Connect devices.

***NOTE:*** Connectr is not an audio playback tool; it's just a remote control.  Spotify has not publicly released a library for implementing audio playback with Spotify Connect support.  There's a reverse engineering effort, coincidentally also in Rust, at [librespot](https://github.com/plietar/librespot).  The librespot + connectr combo gives you a full Spotify playback experience in ~15MB of RAM.  It's the most resource-efficient way to listen to Spotify.

***NOTE:*** Connectr is not developed by Spotify and has nothing to do with their company.

## Download

*Binary releases are provided as a convenience.  Building from source is preferred.*

### Connectr v1.1.2
#### [Mac OS X](https://github.com/mrmekon/connectr/releases/download/v1.1.2/connectr-1.1.2.zip) (64-bit, md5: b1466f9034c6ffed60150d2f206ff38b)

### OLD RELEASE: Connectr v0.2.0
#### [Windows 10](https://github.com/mrmekon/connectr/releases/download/connectr-0.2.0/connectr-0.2.0-win32.zip) (64-bit, md5: 1745ecb67bd5ef0822eeabd96d98dcde)

## Screenshots

##

<table><tr><td valign=""top"">

<center><strong>Mac OS X</strong></center></br>
<center><img src=""https://github.com/mrmekon/connectr/blob/master/docs/screenshot.png?raw=true"" width=""300""></center>

</td><td valign=""top"">

<center><strong>Windows 10</strong></center></br>
<center><img src=""https://github.com/mrmekon/connectr/blob/master/docs/screenshot_windows.png?raw=true"" width=""300""></center>

</td></tr><tr><td colspan=""2"">

<center><strong>Macbook Touch Bar</strong></center></br>
<center><img src=""https://github.com/mrmekon/connectr/blob/master/docs/screenshot_touchbar.png?raw=true""></center>

</td></tr></table>

##


## Build Instructions

You need to [download Rust](https://www.rustup.rs/) to build.

```
$ git clone https://github.com/mrmekon/connectr.git
$ cd connectr
$ cargo run
```

## Usage / Help

On first launch, Connectr will open your web browser to a self-configuration page, and save its configuration to your system home directory.  The configuration page will walk you through creating the necessary Spotify developer application.

### Spotify Developer Application configuration

On the first launch, Connectr will guide you through setting up a Spotify developer application.  If you want to do it manually instead, or if something goes wrong, here are the instructions:

* Go to your [Spotify Applications](https://developer.spotify.com/my-applications/#!/applications/create) page (login with your Spotify credentials)
* Click ""CREATE AN APP"" in the upper-right corner
* Enter a name (perhaps ""Connectr"") and description (""Use Connectr app with my account."")
* Add a Redirect URI: <em>http://127.0.0.1:5432</em>
* Copy your <em>Client ID</em> and <em>Client Secret</em> to `connectr.ini` (see below).

### Mac Touch Bar interface

#### Setup
* Be sure the ""Control Strip"" is enabled in the Keyboard section of System Preferences, under `Touch Bar shows`.
* Press the Connectr icon in the Control Strip to expand it.  It will stay expanded until you press the `x` button on the left side.
* The Control Strip only supports 4 icons, and stacks all new ones on the left-most icon.  If the Connectr icon is missing, it may be hidden ""under"" another icon.  You can keep clicking the left-most icon to open them all.

#### Controls
* Double-tap the track title to rotate through modes:
 * Track and Artist
 * Track
 * Artist
* To quick-save a track, swipe right on track title until a box is drawn around it and release.  Configure quick-save in `connectr.ini` first.

### Configuration file (connectr.ini) format

**Note:** connectr uses `~/.connectr.ini` if it exists.  If it does _not_ exist, connectr will fallback to trying `connectr.ini` in the directory it is run from.  A template is provided in `connectr.ini.in`.

The config file is generated by a graphical web configuration the first time Connectr is launched, and can be reconfigured by selecting `Reconfigure Connectr` from the menu.  It is not necessary to write `connectr.ini` yourself.  The following documentation is just for reference.

connectr's configuration is read from a regular INI file with these sections:

#### [connectr]
* **port** - Port to temporarily run web server on when requesting initial OAuth tokens (integer).  Default is 5432. _ex: `port = 5432`_
* **quicksave_default** - Playlist to save tracks to when 'Quick-Save' is selected

#### [application]
* **client_id** - Spotify web application's Client ID (string). _ex: `client_id = ABCABCABCABC123123123`_
* **secret** - Spotify web application's Client Secret (string). _ex: `secret = DEFDEFDEFDEF456456456`_

#### [presets]

One preset per line, in either format:

* [Preset Name] = [Context URI]
* [Preset Name] = [Context URI],[Quick-save Playlist URI]

Where:

* `Preset Name` is any name you want for the preset
* `Context URI` is the Spotify context (album, playlist, etc) to play when selected
* `Quick-save URI` is (optionally) a playlist to save the current track to if 'Quick-Save' is clicked while this preset is playing.

*Example:*

Make a preset called `Bakesale` that plays a Sebadoh album when selected, and saves my favorite tracks from that album to a private playlist:

`Bakesale = spotify:album:70XjdLKH7HHsFVWoQipP0T,spotify:user:mrmekon:playlist:4aqg0RkXSxknWvIXARV7or`

#### [alarms]
_Note: This can and should be configured through the graphical web interface instead of by editing directly.  Select `Edit Alarms` from the Connectr menu to launch the graphical interface._

Up to five alarm clock entries, which specify a time, device, playlist to play, and which days to repeat the alarm on.

Format:

`alarm<i> = <hour>:<minute>,<repeat>,<Spotify URI>,<Device ID>`

* **`<i>`** - Number between 0 and 4 (inclusive)
* **`<hour>`** - Hour in 24-hour time (0-23)
* **`<minute>`** - Minute (0-59)
* **`<repeat>`** - One of: `daily`, `weekdays`, `weekends`
* **`<Spotify URI>`** - URI of a Spotify context to play.  Same format as presets.
* **`<Device ID>`** - Unique ID of the device to play on.  These are listed on the graphical web interface, or can be found in the `~/.connectr.log` log file.

_note: Connectr must be running and connected to the internet at the scheduled alarm time.  The target device must also be running and logged in with your Spotify account.  This means the alarm functionality is most useful when running on an always-on machine such as a home media server or a VPS.  You can run Connectr on a headless server by configuring it on a desktop machine, and copying the `~/.connectr.ini` config to the server._

#### [lastfm]

Optional configuration to have Connectr scrobble track plays to the Last.fm scrobbling service.  This requires a free Last.fm account and free Last.fm developer API tokens.

_note: This MUST be configured through the graphical web interface.  The web interface requests your Last.fm username and password, and the password is swapped out for a session key before saving to the config file.  It is not possible to specify a password in the config file, so you cannot enable Last.fm scrobbling without the GUI.  Once enabled, a valid Last.fm configuration can be transferred to other machines._

_note: Like the alarm feature, scrobbling requires Connectr to always be running.  This means it should be run from an always-on computer, such as a home media server or a VPS.  You can configure it on a regular machine first, and then copy the ¨`/.connectr.ini` file to your always-on server._

There are options to ignore tracks played on phones/tablets or computers, in case you want to have the official Spotify clients handle scrobbling from those devices.  This is beneficial, especially for mobiles, because Spotify can scrobble tracks played while offline.

* **enabled** - Whether Last.fm scrobbling is enabled
* **key** - Last.fm developer API key
* **secret** - Last.fm developer API secret
* **session_key** - Cached Last.fm authentication token
* **username** - Last.fm username
* **ignore_pc** - Whether Connectr should ignore tracks played on a computer
* **ignore_phone** - Whether Connectr should ignore tracks played on a phone/tablet

#### [tokens]
_note: This section is auto-generated and auto-updated at runtime.  You can leave it empty if you make your own config file._

* **version** - Version of the Connectr authentication format
* **access** - Spotify Web API access token
* **refresh** - Spotify Web API refresh token
* **expire** - Expiration time (UTC) for access token


#### Example connectr.ini
```
[connectr]
port=5432

[application]
secret=xxxxxyyyyyaaaaabbbbbcccccddddd
client_id=xXxXxyYyYynNnNnNmMmMmMpPpPpP

[presets]
Discover Weekly=spotify:user:spotify:playlist:37i9dQZEVXcOmDhsenkuCu
Edge Detector=spotify:user:mrmekon:playlist:4SKkpDbZwNGklpIILmEZAg
Play Today=spotify:user:mrmekon:playlist:4c8eKK6kKrcdt1HToEX7Jc

[tokens]
version=1
access=this-is-autogenerated
refresh=this-is-also-autogenerated
expire=1492766270

[lastfm]
enabled=true
key=aaaaabbbbbbccccccddddddeeeeee
secret=ffffffgggggghhhhhhhiiiiiijjjjjj
session_key=kkkkkkllllllmmmmmmnnnnnooooooppppp
username=MyGloriousUsername
ignore_phone=true
ignore_pc=false

[alarms]
alarm1=08:00,weekdays,spotify:user:mrmekon:playlist:1BayoBGuBA5HhF0ZuYw2sN,1267eba791c19740744eb5c41a5165ce6691fb9b
```

### Feature Progress

| Feature                                | OS X                    | Windows                 | Linux                   |
| ---                                    | ---                     | ---                     | ---                     |
|                                        |
|                                        |
| **API**                                |
| Fetch list of devices                  | <ul><li> [x] </li></ul> | <ul><li> [x] </li></ul> | <ul><li> [x] </li></ul> |
| Fetch current playback information     | <ul><li> [x] </li></ul> | <ul><li> [x] </li></ul> | <ul><li> [x] </li></ul> |
| Transfer playback to device            | <ul><li> [x] </li></ul> | <ul><li> [x] </li></ul> | <ul><li> [x] </li></ul> |
| Start new playback on device           | <ul><li> [x] </li></ul> | <ul><li> [x] </li></ul> | <ul><li> [x] </li></ul> |
| Pause/Resume                           | <ul><li> [x] </li></ul> | <ul><li> [x] </li></ul> | <ul><li> [x] </li></ul> |
| Skip next/previous                     | <ul><li> [x] </li></ul> | <ul><li> [x] </li></ul> | <ul><li> [x] </li></ul> |
| Seek in track                          | <ul><li> [x] </li></ul> | <ul><li> [x] </li></ul> | <ul><li> [x] </li></ul> |
| Change volume                          | <ul><li> [x] </li></ul> | <ul><li> [x] </li></ul> | <ul><li> [x] </li></ul> |
| Change repeat state                    | <ul><li> [x] </li></ul> | <ul><li> [x] </li></ul> | <ul><li> [x] </li></ul> |
| Change shuffle state                   | <ul><li> [x] </li></ul> | <ul><li> [x] </li></ul> | <ul><li> [x] </li></ul> |
| Alarm clock                            | <ul><li> [x] </li></ul> | <ul><li> [x] </li></ul> | <ul><li> [x] </li></ul> |
| Last.fm Scrobbling                     | <ul><li> [x] </li></ul> | <ul><li> [x] </li></ul> | <ul><li> [x] </li></ul> |
| Fetch album art                        | <ul><li> [ ] </li></ul> | <ul><li> [ ] </li></ul> | <ul><li> [ ] </li></ul> |
|                                        |
|                                        |
| **UI**                                 |
| Display current track                  | <ul><li> [x] </li></ul> | <ul><li> [x] </li></ul> | <ul><li> [ ] </li></ul> |
| Current track in tooltip               | <ul><li> [x] </li></ul> | <ul><li> [x] </li></ul> | <ul><li> [ ] </li></ul> |
| Playback controls                      | <ul><li> [x] </li></ul> | <ul><li> [x] </li></ul> | <ul><li> [ ] </li></ul> |
| Device selection                       | <ul><li> [x] </li></ul> | <ul><li> [x] </li></ul> | <ul><li> [ ] </li></ul> |
| Volume control                         | <ul><li> [x] </li></ul> | <ul><li> [x] </li></ul> | <ul><li> [ ] </li></ul> |
| Presets                                | <ul><li> [x] </li></ul> | <ul><li> [x] </li></ul> | <ul><li> [ ] </li></ul> |
| Save current track to playlist         | <ul><li> [x] </li></ul> | <ul><li> [x] </li></ul> | <ul><li> [ ] </li></ul> |
|                                        |
|                                        |
| **System**                             |
| Persistent configuration               | <ul><li> [x] </li></ul> | <ul><li> [x] </li></ul> | <ul><li> [x] </li></ul> |
| System logging                         | <ul><li> [x] </li></ul> | <ul><li> [x] </li></ul> | <ul><li> [x] </li></ul> |


## Notable Dependencies

* [fruitbasket](https://github.com/mrmekon/fruitbasket) - Framework for Mac app lifecycle, written for Connectr.
* [rubrail](https://github.com/mrmekon/rubrail-rs) - Mac Touch Bar library, written for Connectr.
* [objc](https://github.com/SSheldon/rust-objc/) - SSheldon's suite of Objective-C wrappers for Rust.
* [cocoa-rs](https://github.com/servo/cocoa-rs) - Cocoa bindings for Rust, which complement `objc`.
* [systray](https://github.com/qdot/systray-rs) - Windows systray library for Rust.
* [rustfm-scrobble](https://github.com/bobbo/rustfm-scrobble) - Last.fm scrobbling library.
"
514,paoloboschini/SpotifyProgressHUD,Objective-C,"SpotifyProgressHUD
==================

SpotifyProgressHUD - A clone of iOS Spotify Progress HUD

![alt tag](https://raw.github.com/paoloboschini/SpotifyProgressHUD/master/screen.png)"
515,Alexloof/Soundize,JavaScript,"# Soundize

A homemade server side rendering client built with React and Redux, powered by
the Spotify API

Live at: https://soundize.herokuapp.com

The app:
![alt text](https://github.com/Alexloof/Soundize/blob/master/Soundize-screen-one.PNG ""My Music"")

![alt text](https://github.com/Alexloof/Soundize/blob/master/Soundize-screen-two.PNG ""Track Detail"")

Run the app locally:

```
npm install
npm run dev
Visit http://localhost:8080
```
"
516,kywagaha/gemini,JavaScript,"# Gemini
Aesthetic now playing screen for Spotify

![screenshot](https://i.imgur.com/HOda3vb.png)
## Use it as a mini-player!
![screenshot](https://i.imgur.com/SrHmQDl.png)
## or as a full-screen display!
![screenshot](https://i.imgur.com/rBw86rZ.jpg)

# Installation
`yarn install` or `npm install`, but yarn is recommended for building the app.

# Setup
`yarn start` or `npm start`.

If you would like to use your own client credentials, you can fill in your Client ID in `constants.js`. Gemini v4 ID is set by default.

# Usage
While a track is playing, Gemini will update to show the current song and artist. 

Should you need to sign in again, pressing `Ctrl+S` will take you back to that screen.

## Keyboard Controls
- `Space` or `K`: Play/Pause
- `Left arrow key` or `J`: Previous track
- `Right arrow key` or `L`: Next track
- `Esc`: Exit out of fullscreen
- `Ctrl + D`: Reset window to square aspect ratio

# Building
`yarn dist`

Refer to the `electron-builder` arguments for your specific operating system [here](https://www.electron.build/cli).

# To Do
Please check out our [projects page](https://github.com/kywagaha/gemini/projects?type=classic)! Please open an issue if you have any suggestions!

# Font License
We have explicit permission from the creator of the Forma DJR Font, David Jonathan Ross, to use in Gemini. If you want to develop and fork Gemini, please do not install the fonts on your system and use it for your own use. It is against the license and you should buy the [font](https://djr.com/forma/) for your own personal use.

# [Our favorite songs and albums!](https://open.spotify.com/playlist/6ILAg2eGBzvN3loVQLI9O5?si=oXj4PnPgSZyLLTBJU1fQpg)
- [Lose - NIKI](https://open.spotify.com/track/7rgjkzZBhBjObaYsvq8Ej0?si=c2DyCWX_QDyRHToxpOzV5A)
- [Djesse Vol. 3 - Jacob Collier](https://open.spotify.com/album/33cj3kzLqVOg9zvy69Wrc8?si=pCUxII-9Q_mYzyDzvVY3rA)
- [Switchblade - NIKI](https://open.spotify.com/track/6Ve2gwTaMxTgKMuAcHbwcH?si=YcSJi59cQL-aCBRLJw4wfg)
- [7 rings - Ariana Grande](https://open.spotify.com/track/6ocbgoVGwYJhOv1GgI9NsF?si=ULM0YYAqTCyD02T9U2hnyA)
- [urs - NIKI](https://open.spotify.com/track/50oEtTUNlce4TuZXQoJzXW?si=NmvfHvWaQv2IdD_BtC8Twg)
- [Stuck with U - Ariana Grande and Justin Bieber](https://open.spotify.com/track/4HBZA5flZLE435QTztThqH?si=DyRI2hgvQhiOjEphCCPcSw)
- [Trying - Luna Li](https://open.spotify.com/track/6JOcqL8v344EarvtlQZ3km?si=2evfA1cTSsy8W0fFJQlNnw)
- [Indigo - NIKI](https://open.spotify.com/track/1sOr5OXjbukTzBDgmvd6Fa?si=FhkQLdrLRJmal0TDCjGuag)
- [All I Want - Olivia Rodrigo](https://open.spotify.com/track/1v6svH1Fyx9C1nIt1mA2DT?si=RZTjLnkDRHW48UljXYY3sw)
"
517,wuseman/wspotify,Shell,"# WSPOTIFY

Brute-Force spotify accounts...

Notice - 2022-03-29: Works fine until X limits, will check on this in upcomming days (just a notice) 

## HOWTO

#### Please notice database_dump.txt must be sorted like: someone@gmail.com:password

    git clone https://github.com/wuseman/wspotify
    cd wspotify
    chmod +x wspotify
    ./wspotify <database_dump> 

## Requirements (Install those by yourself)

   * Libspotify
   * Sconsify
   * Portaudio

## Authors: 

* **wuseman <wuseman@nr1.nu\>** 

## License

This project is licensed under the GNU General Public License v3.0 - see the [LICENSE.md](LICENSE.md) file for details

### Contact

  If you have problems, questions, ideas or suggestions please contact me on *_wuseman@nr1.nu_  - For faster contact visit freenode irc network or the webchat and type '/msg wuseman hi!' in the input bar and I will reply you ASAP I will see the message.
  Enter Freenodes network via your own client 'chat.freenode.com:+6697 or use their new web client [here](https://webchat.freenode.net/)

### Enjoy another awesome tool from wuseman!

"
518,spotify/code-of-conduct,,"# Code of Conduct

This repository contains the [Code of Conduct](https://github.com/spotify/code-of-conduct/blob/master/code-of-conduct.md) from the [TODO Group](http://todogroup.org/opencodeofconduct/) used in the [Spotify](https://twitter.com/SpotifyEng) FOSS community.

## Applying this Code of Conduct

To apply this Code of Conduct to a Spotify repository, copy the following into either in the `README` or `CONTRIBUTING` file of the project (you may of course adapt the markup language used):

```
This project adheres to the [Open Code of Conduct][code-of-conduct]. By participating, you are expected to honor this code.

[code-of-conduct]: https://github.com/spotify/code-of-conduct/blob/master/code-of-conduct.md
```
"
519,thomasnaudin/spotify-app,Makefile,"This repo contains a working version of the spotify x86-64 linux client packaged as an xdg-app.
Unfortunately there is no redistribution rights for the spotify binaries, so you have to create your own to use it.

The package uses the freedesktop.org runtime, so you first need to install the sdk (so you can build the bundled stuff) and the platform:
```
wget https://sdk.gnome.org/keys/gnome-sdk.gpg
xdg-app --user remote-add --gpg-key=gnome-sdk.gpg gnome http://sdk.gnome.org/repo/
xdg-app --user install gnome org.freedesktop.Sdk 1.4
xdg-app --user install gnome org.freedesktop.Platform 1.4
```


To test this, do:
```
make
xdg-app --user remote-add --no-gpg-verify local-spotify repo
xdg-app --user install local-spotify com.spotify.Client
```
"
520,plamere/SpotifyNoHands,Python,"SpotifyNoHands
==============

A Twilio SMS server that will accept an artist name and look it up using The Echo Nest and Spotify APIs. 
It will respond with a text that contains a URL to a song by the artist.

Details
=======
I like to listen to post-rock. Unfortunately, post-rock bands tend to have very long names like ‘Explosions in the Sky’, ‘God Speed you black
emperor’, and ‘This will Destroy You’.  I have a long commute and I will find that I am frequently risking my life trying to type a long band name
into my music player.  I wish Siri supported non-itunes players like Spotify, but until then I need a way to tell Spotify to play music by bands
with long names. If I don’t, I will die in a fiery crash on Route 3 in Lowell Mass. A horrible way to go.   So this weekend at the Artists Hack I
built something to solve this problem. It lets you play music in Spotify without having to type long artist names. Here’s how it works.

I used Twilio to set up a phone number such that if you text it an artist name, it will respond with a spotify link to a song by that artist.  You
can add the phone number to your contacts as “music player”,  You can then use Siri  in a dialog like so:

    Me: Send a text to Music Player

    Siri: What would you like it to say

    Me: Explosion in the Sky

    Siri: OK, I’ll send it

A few seconds later I get a text message back with a link to a popular track by Explosions in the Sky. I tap the link and Spotify opens and plays
the song.  It is about as simple a hack, but it solves a real problem for me.  
"
521,torshy/torshify,C#,"##About torshify
A C# libspotify wrapper (based on https://github.com/Alxandr/SpotiFire)

torshify implements most of the libspotify features such as:  
* Offline syncing  
* Artist browse  
* Album browse  
* Artist top hits  
* Unseen playlist tracks  
* Toplists  
* Search  
* Playlists  
* Creating Spotify links for various objects (artist, album, album covers, artist portraits etc)  
* Spotify-link->object (artist, album, track, playlists etc)  
* Relogin of previous user  

-------------------------
This product uses SPOTIFY CORE but is not endorsed, certified or otherwise approved in any way by Spotify. Spotify is the registered trade mark of the Spotify Group"
522,ashbakernz/laravel-dashboard-spotify-tile,PHP,"# A tile to display infomation from Spotify

[![Latest Version on Packagist](https://img.shields.io/packagist/v/ashbakernz/laravel-dashboard-spotify-tile.svg?style=flat-square)](https://packagist.org/packages/ashbakernz/laravel-dashboard-spotify-tile)
[![GitHub Tests Action Status](https://img.shields.io/github/workflow/status/ashbakernz/laravel-dashboard-spotify-tile/run-tests?label=tests)](https://github.com/ashbakernz/laravel-dashboard-spotify-tile/actions?query=workflow%3Arun-tests+branch%3Amaster)
[![Total Downloads](https://img.shields.io/packagist/dt/ashbakernz/laravel-dashboard-spotify-tile.svg?style=flat-square)](https://packagist.org/packages/ashbakernz/laravel-dashboard-spotify-tile)

This tile displays ""now playing"" infomation from spotify.

This tile can be used on [the Laravel Dashboard](https://docs.spatie.be/laravel-dashboard).

![laravel dashboard spotify tile](https://ashbaker.dev/assets/packages/laravel-dashboard-spotfiy-tile.png)


## Installation

You can install the package via composer:

```bash
composer require ashbakernz/laravel-dashboard-spotify-tile
```

In the dashboard config file, you must add this configuration in the tiles key.

```php
    'spotify' => [
        'client_id' => env('SPOTIFY_CLIENT_ID'),
        'secret' => env('SPOTIFY_SECRET'),
        'refresh_interval_in_seconds' => 60,
    ]
```
#### Getting `SPOTIFY_CLIENT_ID` and `SPOTIFY_SECRET`
Sign up at https://developer.spotify.com/dashboard and register your application to obtain `SPOTIFY_CLIENT_ID` and `SPOTIFY_SECRET`.

Once you have setup your application please go to the [spotify dashboard](https://developer.spotify.com/dashboard/applications), select your application and click ""EDIT SETTINGS"" in the top right. You will then need to add the following urls based on your environments to the ""Redirect URIs
"" section and then hit save. This will allow us to authenticate correctly in the next step.

Redirect URI example:
```bash
https://yourdomain.com/spotify/callback
```

In your dashboard view you use the `livewire:spotify-tile` component.

```html
<x-dashboard>
    <livewire:spotify-tile position=""a1:a1"" />
</x-dashboard>
```

Once this is complete please head to the `/spotify/authorize` route on your dashboard in a browser and this will allow you to authenicate your spotify account. 

In `app\Console\Kernel.php` you should schedule the following commands.

```php
protected function schedule(Schedule $schedule)
{
    // ...
            $schedule->command(\Ashbakernz\SpotifyTile\FetchDataFromSpotifyCommand::class)->everyMinute();
            $schedule->command(\Ashbakernz\SpotifyTile\RefreshAccessTokenSpotifyCommand::class)->everyFifteenMinutes();
}
```

Setup is complete!

## Bugs
If the tile is displaying incorrectly please head to the `/spotify/refresh` route in a browser to refresh your spotify access token manually. (a command is already setup to do this every 30 mins via scheduler)

## Testing

``` bash
composer test
```

## Changelog

Please see [CHANGELOG](CHANGELOG.md) for more information on what has changed recently.

## Contributing

Please see [CONTRIBUTING](CONTRIBUTING.md) for details.

## Security

If you discover any security related issues, please email ashbakernz@gmail.com instead of using the issue tracker.

## Credits
- [Ash Baker](https://github.com/ashbakernz)
- [Spatie](https://github.com/spatie/) for [laravel-dashboard-skeleton-tile](https://github.com/spatie/laravel-dashboard-skeleton-tile)
- [All Contributors](../../contributors)

## License

The MIT License (MIT). Please see [License File](LICENSE.md) for more information.
"
523,petterl/spotify-playlist-2-slack,JavaScript,"# spotify-playlist-2-slack
========================

[![Code Climate](https://codeclimate.com/github/petterl/spotify-playlist-2-slack/badges/gpa.svg)](https://codeclimate.com/github/petterl/spotify-playlist-2-slack)

Show new playlist entries in slack channel

## Configuration

You need to set these environment variables in heroku or as environ variables for foreman:

```
SLACK_URL=https://hooks.slack.com/services/*/*/*

SPOTIFY_CLIENT_ID=ClientID
SPOTIFY_CLIENT_SECRET=ClientSecret
SPOTIFY_USERNAME=SpotifyUsername
SPOTIFY_PLAYLIST=PlaylistId
VCAP_APP=true
```

If you want to store last fetched datestamp in redistogo (like on heroku) instead of local file set:
```
REDISTOGO_URL=URL
```

If you run on bluemix you can start the webserver by setting:
```
VCAP_APP=true
```

## License

MIT. Copyright &copy; 2015 [Petter Sandholdt](https://github.com/petterl)

## Deploy to Heroku
[![Deploy](https://www.herokucdn.com/deploy/button.png)](https://heroku.com/deploy)

## Deploy to Bluemix
[![Deploy to Bluemix](https://bluemix.net/deploy/button.png)](https://bluemix.net/deploy?repository=https://github.com/petterl/spotify-playlist-2-slack)

## Authors

Main author: Petter Sandholdt

Many thanks for help by: 
petschni
matiassingers
prlakhani"
524,klinker41/tunes-for-tv,Java,"# Tunes for TV #

<img src=""/promo/screenshots/1.png"" width=""500"" height=""300"">

Tunes is a music app for Android TV that is powered by Spotify. Currently, it supports logging in through Spotify's OAuth system, loading all of your playlists and playing them.

Current Issues:

1. Now playing card does not display album artwork
2. Music will sometimes stop playing after a song finishes, many times requiring a restart of the app

Possible future improvements:

1. Search for songs
2. Radio options
3. Explore music
4. Spotify Connect support

(NOTE: I have not looked into Spotify's APIs enough to even know if 2-4 are possible. I do know that there is no official API for Spotify Connect)

Feel free to make improvements and send me a pull request, I'll try and merge them as soon as I have time.

### Screenshots ##

<img src=""/promo/screenshots/2.png"" width=""500"" height=""300"">
<img src=""/promo/screenshots/3.png"" width=""500"" height=""300"">

---

## License

    Copyright (C) 2015 Jacob Klinker

    Licensed under the Apache License, Version 2.0 (the ""License"");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an ""AS IS"" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License."
525,rmehner/spotify-remote,JavaScript,"# spotify-remote — Control Spotify from the browser

[![Build Status](https://travis-ci.org/rmehner/spotify-remote.png?branch=master)](https://travis-ci.org/rmehner/spotify-remote)

## Synopsis

spotify-remote allows you to control Spotify from a browser. Currently it works
by talking to Spotify via its AppleScript interface, so only OS X is supported
at the moment.

![RIP MCA](http://coding-robin.de/images/pictures/spotify-remote.png)

## Aim

spotify-remote tries to be a lightweight client-server solution for controlling
your Spotify, being as battery-friendly and mobile-friendly as possible.

One of the major issues regarding performance at the moment is the usage of
AppleScript to poll the Spotify client. The aim is to either optimize the usage
of AppleScript to shrink its CPU consumption or find a different solution
altogether.

## Installation

1. Install [Node.js](http://nodejs.org/)
2. Install spotify-remote in a shell:

    ```
    $ npm install -g spotify-remote
    ```

## Update

```
$ npm update -g spotify-remote
```

## Starting and using spotify-remote

1. Make sure Spotify is running.
2. Start the spotify-remote server in a shell:

    ```
    $ spotify-remote
    ```
3. Open `http://localhost:3333` in your browser

If you need a different port, just use the PORT environment variable:

```
$ PORT=1337 spotify-remote
```

## Credits

* [Robin Mehner](http://coding-robin.de)
* [Thorsten Ball](http://mrnugget.github.com)
* [Matti Besser](http://mattibesser.com) for the first design
* [André Haveman](https://github.com/andrehaveman) for [spotify-node-applescript](https://github.com/andrehaveman/spotify-node-applescript)
* [Frank Yan](https://github.com/fryn) for [html5slider](https://github.com/fryn/html5slider)

## Todo

This thing is work in progress and the result of a hack day. It's working relatively
well, but of course there's a lot to do. Things that come to mind are:

* Linux support (Spotify is supposed to have a DBUS-Interface)
* Windows support (if anyone is up to it)
* Make it even more battery friendly
* Test & fix on Android devices
* Play arbitrary tracks
* Playlist support (as in: see the current track in the playlist)

## Contributing

To get started with spotify-remote development, install it locally:

```
$ git clone https://github.com/rmehner/spotify-remote.git
$ cd spotify-remote
$ npm install -g grunt-cli
$ npm install
$ npm start
$ open http://localhost:3333
```

To run jshint and the test suite, do the following:

```
$ npm test
```

**Pull requests are very welcome: hack away and contribute!** If you need any
help, don't hesitate to ask!

## License

MIT, see [LICENSE](LICENSE)

[Spotify](http://www.spotify.com) is a registered trademark of Spotify Ltd.
spotify-remote is in no way affiliated with Spotify, we're just a little
tool sitting on top of the Spotify.app and their webservices.

We come in peace.
"
526,rorygilchrist/node-spotify-token-swap,JavaScript,"# Node Spotify Token Swap Service
Spotify Token Swap service for Node.js environments. Used to swap out and refresh tokens for client applications from Spotify SDKs.

![Travis Build](https://travis-ci.org/rorygilchrist/node-spotify-token-swap.svg?branch=master)

## Setting up
To begin using this service, simply clone this repository (`git clone git@github.com:rorygilchrist/node-spotify-token-swap.git`), set your environment variables and run `node app.js`. The required environment variables are as follows:
- `CLIENT_ID` - Your client's ID. This can be found on your app page on [Spotify Developer Portal](https://developer.spotify.com/my-applications/#!/applications).
- `CLIENT_SECRET` - Your client's secret key. This can be found on your app page on [Spotify Developer Portal](https://developer.spotify.com/my-applications/#!/applications).
- `CALLBACK_URL` - Your application's callback url. You should have set this up when you created your app.
- `ENCRYPTION_SECRET` - Secret key used to encrypt and decrypt your refresh tokens. If this is not set, a key will be automatically generated and will change on application restart causing all of your currently logged in users to be logged out on refresh.
- `ACCESS_LOG` - Optional. Any setting other than 'off' is ignored. Used to turn off per-request output logging.

Environment variables can be setup in Linux environments with the command:
` export FOO=bar`, where FOO is the variable name and bar is the value. An example would be `export CLIENT_ID=yourclientid`. This can also be done on Windows, but you're better off asking Google than me (: 

### Deploying to Heroku
This application is built for deployment in a Heroku environment (however it can be deployed anywhere else that Node.js can run). To follow this tutorial, you'll need the [Heroku Toolbelt](https://toolbelt.heroku.com/).

####Deploying your code
1. In your command line, navigate to the cloned repository run `heroku login` and enter your credentials.
2. Create a new application container for your token swap service `heroku create`
3. Set your environment variables by running `heroku config:set KEY=VALUE`, where KEY is a variable name, such as `CLIENT_ID` and VALUE is the value of the variable.
4. Run the command `git push heroku master` to deploy your application.
5. Finally, to fire up your server, run `heroku ps:scale web=1`. This will launch a free instance of your application which will shutdown after 10 minutes of inactivity and will be awoken when it's needed.

####Keeping your app alive
While Heroku is a great, easy to use, platform the fact it shuts your free app down after 10 minutes sucks. There is a way around this and it's super easy.
1. Navigate to the application folder and run the command `heroku addons:add newrelic:wayne`, this will create a New Relic account for you and add your app to it. 
2. Restart your server using the command `heroku ps:restart web`.
3. That's it, the rest has already been done for you. To monitor uptime, dive into the New Relic dashboard & configure pings.

###Using New Relic on a non-Heroku deploy
If you don't want to use Heroku to deploy your application, that's fine. You can still use New Relic to monitor uptime and performance. Simply [sign up](https://newrelic.com/signup), get your licence key and add it as an environment variable called `NEW_RELIC_LICENSE_KEY`. Once you've done this, restart your server and your data should start appearing in your New Relic dashboard.

##Using token swap service
The service has only two endpoints; one for swapping an auth code and the other for refreshing an access token.

####/swap
Takes POSTed `www-form-urlencoded` data, with the parameter `code` which should be the authentication code provided by Spotify post-login. The swap service returns a JSON object similar to that which Spotify would return itself, the only difference being the `refresh_token` is encrypted before being sent.

####/refresh
Takes POSTed `www-form-urlencoded` data, with the parameter `refresh_token` which should be the encrypted refresh token as provided by the `/swap` endpoint. The refresh token is then decrypted and used to get a new access token. The service *may* return a new encrypted refresh token, so your application should be set up to handle and store this.

*Note:* if your `ENCRYPTION_SECRET` has changed between /swap and /refresh requests, the encrypted refresh_token will be invalid for use within the swap service. The encrypted token however will stay active with Spotify until it either expires. It's recommended that when changing your `ENCRYPTION_SECRET`, you also regenerate your `CLIENT_SECRET` within the Spotify Developer Portal.
"
527,mikez/spotify-folders,Python,"Get your Spotify folder hierarchy with playlists into a JSON file.

**Requirements**: Spotify for Mac, Linux, or Windows.

## Installation
```sh
curl -L https://git.io/folders > /usr/local/bin/spotifyfolders
chmod +x /usr/local/bin/spotifyfolders
```

## Get your entire folder hierarchy

Simply run

```sh
$ spotifyfolders
```

## Get a specific folder
![Get a specific folder](tutorial.gif)

## Example
```sh
$ spotifyfolders https://open.spotify.com/user/example/folder/f0dcb1c2b1a98521
```
```yaml
{
  ""name"": ""Seasons"",
  ""type"": ""folder"",
  ""uri"": ""spotify:user:example:folder:f0dcb1c2b1a98521"",
  ""children"": [{
    ""name"": ""Summer"",
    ""type"": ""folder"",
    ""uri"": ""spotify:user:example:folder:8212237ac7347bfe"",
    ""children"": [{
        ""type"": ""playlist"",
        ""uri"": ""spotify:playlist:37i9dQZF1DXdCsscAsbRNz""
     }, {
        ""type"": ""playlist"",
        ""uri"": ""spotify:playlist:37i9dQZF1DWZd79rJ6a7lp""
     }]
  }, {
    ""name"": ""Winter"",
    ""type"": ""folder"",
    ""uri"": ""spotify:user:example:folder:4b254ce1b7f5e23d"",
    ""children"": [{
      ""type"": ""playlist"",
      ""uri"": ""spotify:playlist:37i9dQZF1DWSiZVO2J6WeI""
    }]
  }
}
```

## Learn about more options

```sh
$ spotifyfolders --help
```

## Background
The Spotify Web API does currently not support getting the folder hierarchy. However, one can (as of this writing) find it in the local Spotify cache. This script extracts the data from the cache and returns it in a JSON-formatted way.
"
528,swinton/SpotHub,Shell,"# SpotHub

> Collaborate on Spotify playlists using Pull Requests :headphones: :relaxed:

## How does this even work?

Using [**GitHub Actions**](https://github.com/features/actions) of course!

On every `push` to the `master` branch, [the Action](https://github.com/swinton/SpotHub/blob/bc2d697744a710bce3ce6a56a10d473045c3ea53/.github/actions/spotify-playlist/Dockerfile) will:

1. [Grab a fresh _access token_ from Spotify](https://github.com/swinton/SpotHub/blob/bc2d697744a710bce3ce6a56a10d473045c3ea53/.github/actions/spotify-playlist/get_access_token.sh), using the `SPOTIFY_AUTH` and `SPOTIFY_REFRESH_TOKEN` [secrets](https://developer.github.com/actions/creating-workflows/storing-secrets/).
1. [Generate a JSON payload](https://github.com/swinton/SpotHub/blob/bc2d697744a710bce3ce6a56a10d473045c3ea53/.github/actions/spotify-playlist/process_playlist.sh), from [`playlist.csv`](playlist.csv).
1. [Update a playlist on Spotify](https://github.com/swinton/SpotHub/blob/bc2d697744a710bce3ce6a56a10d473045c3ea53/.github/actions/spotify-playlist/populate_playlist.sh), specified by the `playlist_id` [environment variable](https://developer.github.com/actions/creating-github-actions/accessing-the-runtime-environment/#environment-variables).

## What do I do?

1. Update `playlist.csv`
1. `git commit`
1. `git push`
1. Enjoy your [updated Spotify playlist](https://open.spotify.com/user/stevewinton/playlist/5lNXObovv3WL1Ioyag2FuG) 

## Why was this built?

So we can [collaborate on playlists the right way](https://github.com/swinton/SpotHub/pull/1) :wink:

Also, because I :heart: Spotify and GitHub, and now I can bring 2 of my favorite things together with [GitHub Actions](https://github.com/features/actions).

Sign up for the GitHub Actions beta [here](https://github.com/features/actions) :headphones: :relaxed:
"
529,rozari0/NeedMusicRobot,Python,"
# Telegram Music Downloader
A Simple Music Downloader Bot For Telegram with Youtube Music, Spotify & Deezer Support.

<p align=""center"">
    <a href=""https://python.org"">
        <img src=""http://forthebadge.com/images/badges/made-with-python.svg"" alt=""made-with-python"">
    </a>
    <a href=""https://GitHub.com/rozari0"">
        <img src=""http://ForTheBadge.com/images/badges/built-with-love.svg"" alt=""built-with-love"">
    </a> <br>
    <img src=""https://img.shields.io/github/license/rozari0/MusicDownloader?style=for-the-badge&logo=appveyor"" alt=""LICENSE"">
    <img src=""https://img.shields.io/github/contributors/rozari0/MusicDownloader?style=for-the-badge&logo=appveyor"" alt=""Contributors"">
    <img src=""https://img.shields.io/github/repo-size/rozari0/MusicDownloader?style=for-the-badge&logo=appveyor"" alt=""Repository Size""> <br>
    <img src=""https://img.shields.io/badge/python-3.9-green?style=for-the-badge&logo=appveyor"" alt=""Python Version"">
    <img src=""https://img.shields.io/github/issues/rozari0/MusicDownloader?style=for-the-badge&logo=appveyor"" alt=""Issues"">
    <img src=""https://img.shields.io/github/forks/rozari0/MusicDownloader?style=for-the-badge&logo=appveyor"" alt=""Forks"">
    <img src=""https://img.shields.io/github/stars/rozari0/MusicDownloader?style=for-the-badge&logo=appveyor"" alt=""Stars"">
</p>



## Demo

[You Need Music?](https://t.me/NeedMusicRobot)


## Deployment

To deploy this project run

### Easy Way (Local)
```bash
  cp sample_config.env config.env
  pip3 install -r requirements.txt
  python3 -m mbot
```

### Docker
```bash
  cp sample_config.env config.env
  docker build . -t musicbot
  docker run musicbot
```
### Heroku
[![Deploy](https://www.herokucdn.com/deploy/button.svg)](https://dashboard.heroku.com/new?template=https://github.com/rozari0/MusicDownloader/)

## Environment Variables

To run this project, you will need to add the following environment variables to your config.env file

`API_ID`
`API_HASH`
`BOT_TOKEN`
`SPOTIPY_CLIENT_ID`
`SPOTIPY_CLIENT_SECRET`
`UPDATES_CHANNEL`
`LOG_GROUP`
`DATABASE_URL`
`AUTH_CHATS`



## License

[MIT](https://choosealicense.com/licenses/mit/)

"
530,khanhas/genius-spicetify,CSS,"Abandoned, in favor of [Lyrics Plus](https://github.com/khanhas/spicetify-cli/tree/master/CustomApps/lyrics-plus) for Spicetify v2.
If you wish, you can still download and use genius-spicetify in Spotify v1.1.58 or older with Spicetify v1.2.1. Otherwise, check out Lyrics Plus, it has more Lyrics providers and customisability.
# genius-spicetify
Spotify desktop client app fetches lyrics from Genius and Musixmatch

![demo](https://i.imgur.com/rbqvJVI.png)

![demo2](https://i.imgur.com/dIkxWQ2.gif)

## How to install
0. Make sure [spicetify-cli](https://github.com/khanhas/spicetify-cli) is installed and run `spicetify apply` normally.
1. Run these commands, one by one:

**Linux and MacOS** in Bash:
```bash
cd ""$(dirname ""$(spicetify -c)"")/CustomApps""
git clone https://github.com/khanhas/genius-spicetify genius
```

**Windows** in Powershell:
```powershell
cd ""$(spicetify -c | Split-Path)\CustomApps""
git clone https://github.com/khanhas/genius-spicetify genius
```

Don't have GIT?, **Windows** in Powershell:
```powershell
cd ""$(spicetify -c | Split-Path)\CustomApps""
Invoke-WebRequest -Uri https://github.com/khanhas/genius-spicetify/archive/master.zip -UseBasicParsing -OutFile .\genius.zip
Expand-Archive -Path .\genius.zip -DestinationPath .
Rename-Item ""genius-spicetify-master"" ""genius""
```

3. Finally, run:
```bash
spicetify config custom_apps genius
spicetify apply
```

## How to update
If you already installed before with those steps above, you just need to run these to update:
**Linux and MacOS** in Bash:
```bash
cd ""$(dirname ""$(spicetify -c)"")/CustomApps/genius""
git pull
```

**Windows** in Powershell:
```powershell
cd ""$(spicetify -c | Split-Path)\CustomApps\genius""
git pull
```

## Musicxmatch
I already included a free user token to fetch full and synched lyrics from Musixmatch database. Since Musixmatch has limit rate per token, too many requests with same token will temperory block it from receiving result. Follow these steps to retrieve a personal token:

1. Download and install Musixmatch offical app: https://download-app.musixmatch.com/download
Windows user: install it via Windows Store.

2. **You don't have to log in!**

3. Now in Musixmatch app, hit `Ctrl + Shift + i` to bring up DevTools.

![mxm1](https://i.imgur.com/jMGMgCc.png)

4. Switch to Network tab. Hit `Ctrl + R`. Filter results with ""apic"":

![mxm2](https://i.imgur.com/QdwqtQa.png)

5. Click at any result, it will show up request detail panel. Scroll all the way down. Note down `usertoken`

![mxm3](https://i.imgur.com/ZsGwKG3.png)

For example request above, I should note down:
```
200501593b603a3fdc5c9b4a696389f6589dd988e5a1cf02dfdce1
```

6. In `genius` app folder, open file `manifest.json`. In that file, look for `UserToken`, then just fill it in with yours.

8. Restart Spotify and Enjoy!

## Disclaimer
This app assets were taken from `lyrics` app from Spotify team and modified by me. I do not own any of these code and they should not be reused anywhere else.
"
531,kheldiente/equalizer,Kotlin,"# equalizer
Recreation of Spotify's equalizer. I wrote an article about this. Check it out [here](https://medium.com/@kheldiente/how-to-recreate-spotifys-equalizer-for-android-4c31b2ecd973)!

![alt text](
https://github.com/kheldiente/equalizer/blob/master/screenshots/equalizer.gif)
"
532,davnils/spoty,Haskell,"# Spotify web API in Haskell      [![Build Status](https://travis-ci.org/davnils/spoty.png)](https://travis-ci.org/davnils/spoty)

[Web API](https://developer.spotify.com/web-api/) wrapper powered by lens and pipes, allowing easy access to public endpoints.
It does not have any external dependencies nor requirements regarding app registration.

* Paging is handled transparently using pipes
* All data types are navigated using lenses

All public endpoints, with multi-get versions excluded, are implemented.

## Example (Examples/Search.hs)
    > :set -XOverloadedStrings
    > :m +Control.Lens Utils.Spoty
    > Just artist <- fetchOne (searchArtist ""avicii"")      -- assume at least one match
    > popular <- getArtistTop (view spotifyID artist) ""SE"" -- retrieve the most popular tracks in Sweden
    > mapM_ (print . view name) popular                    -- print the corresponding names
    ""Hey Brother""
    ""Addicted To You""
    ""Wake Me Up""
    ...

## Design
The *Utils.Spoty* module provides access to all of the included endpoints, as listed in the [official documentation](https://developer.spotify.com/web-api/endpoint-reference/).
All of the returned objects are defined in *Utils.Spoty.Types* and have associated lenses.
The names have been preserved to a large extent, but URIs and IDs are prefixed with *spotify*.

Some of the API endpoints return a (potentially long) stream of objects, e.g. when performing a search.
This is handled by using *pipes*. Consider the following signature:

    searchArtist ⩬ T.Text → P.Producer Artist IO ∅

Here the returned value is a producer of artist objects.
If you don't need constant-space streaming, then you can extract the corresponding list by calling `fetchAll ⩬ Monad m ⇒ P.Producer a m ∅ → m [a]`.
When you're only interested in the first result (e.g. when searching for a well-known artist), it's useful to call `fetchOne ⩬ Monad m ⇒ P.Producer a m ∅ → m (Maybe a)`.
In the other cases you will need functions available in the pipes package.

The distinction between full and simple objects has been implemented as details wrapped in an optional Maybe.

Finally, error handling is implemented with exceptions being thrown when HTTP or JSON decoding errors occur.
"
533,osyduck/UnOfficial-Spotify-API,PHP,"<h1 align=""center"">Welcome to UnOfficial-Spotify-API 👋</h1>
<p>
  <img alt=""Version"" src=""https://img.shields.io/badge/version-1.0.0-blue.svg?cacheSeconds=2592000"" />
  <a href=""https://github.com/osyduck/UnOfficial-Spotify-API"" target=""_blank"">
    <img alt=""Documentation"" src=""https://img.shields.io/badge/documentation-yes-brightgreen.svg"" />
  </a>
  <a href=""https://github.com/osyduck/UnOfficial-Spotify-API/blob/master/LICENSE"" target=""_blank"">
    <img alt=""License: MIT"" src=""https://img.shields.io/badge/License-MIT-yellow.svg"" />
  </a>
</p>

> UnOfficial Spotify API Wrapper

### 🏠 [Homepage](https://github.com/osyduck/UnOfficial-Spotify-API)

### ✨ [Demo](https://github.com/osyduck/UnOfficial-Spotify-API)

## Install

```sh
git clone https://github.com/osyduck/UnOfficial-Spotify-API.git
```

## Function status
| Function                	| Status               	|
|-------------------------	|----------------------	|
| `tryLogin`              	| OK                   	|
| `getToken`        	      | OK                   	|
| `followUser`     	        | OK                   	|
| `isFollowUser`            | OK                   	|
| `unfollowUser`         	  | OK                   	|
| `followArtist`         	  | OK                   	|
| `isFollowArtist`    	    | OK 	                  |
| `unfollowArtist`          | OK                   	|
| `followPlaylist` 	        | OK                   	|
| `isFollowPlaylist`  	    | OK                   	|
| `unfollowPlaylist`  	    | OK                   	|
| `createAccount`  	        | OK                   	|

## Usage

```sh
php example.php
```

## Author

👤 **Janu Yoga**

* Website: https://januy.co.id
* Github: [@osyduck](https://github.com/osyduck)

## 🤝 Contributing

Contributions, issues and feature requests are welcome!<br />Feel free to check [issues page](https://github.com/osyduck/UnOfficial-Spotify-API/issues). You can also take a look at the [contributing guide](https://github.com/osyduck/UnOfficial-Spotify-API/issues).

## Show your support

Give a ⭐️ if this project helped you!

## 📝 License

Copyright © 2020 [Janu Yoga](https://github.com/osyduck).<br />
This project is [MIT](https://github.com/osyduck/UnOfficial-Spotify-API/blob/master/LICENSE) licensed.

***
_This README was generated with ❤️ by [readme-md-generator](https://github.com/kefranabg/readme-md-generator)_"
534,aartek/trikatuka2,JavaScript,"# Trikatuka - Spotify migration tool

**Trikatuka** is a tool helping transfer Spotify playlists and saved tracks from one account to another.

- *Collaborative* playlists are followed.
- *Public* and *private* playlists are copied.
- Subscribed playlists are followed.

**Production app is available here:** http://trikatuka.aknakn.eu

How to: http://aknowakowski.blogspot.com/p/trikatuka2.html

## For developers

Project is based on `Node.js` and `AngularJS 1.5`

You need to create an app on https://developer.spotify.com/ and get `clientId` and `clientSecret`. You must also add `http://localhost:<PORT>/user_auth_callback` to the urls whitelist.

**How to run**
- set env variables
  - `CLIENT_ID=<clientId>`
  - `CLIENT_SECRET=<clientSecret>`
  - `TRIKATUKA_PORT=<port>`
  - Optionally set `NODE_ENV=dev` if you want to run app in development mode (for debuggable angular app's sources)
- `npm install`
- `npm run build`
- `node server.js`
- Navigate to `http://localhost:<PORT>`

**Run with docker**

Build image
```
docker build -t trikatuka2 .
```

Run
```
docker run -d --network host --name trikatuka2 --restart unless-stopped \
                         -e CLIENT_ID='xxxx' \
                         -e CLIENT_SECRET=xxxx \
                         -e TRIKATUKA_PORT=<PORT> \
                         trikatuka2
```
(`--net host` is required. Otherwise socket.io won't work correctly.)

## Changelog
### 2.5
- Transfer playlists in the same order

### 2.4
- Added support for transfering albums and playlists.

### 2.3
- Fixed moving playlists. Now requests are made one by one, because posting multiple requests simultaneously caused 500 errors.
- Added ""Help"" page
"
535,gyeongmin-lee/Storify,Dart,"<img align=""left"" width=""80"" height=""80"" src=""https://github.com/gyeongmin-lee/Storify/blob/master/images/logo.png"" alt=""App Icon"">

# Storify

Add captions to songs in your Spotify playlists

## Download
<a href='https://play.google.com/store/apps/details?id=com.minlee.storify'><img alt='Get it on Google Play' src='https://play.google.com/intl/en_us/badges/images/generic/en_badge_web_generic.png' width=""170""/></a>

## Screenshots

<p align=""center"">
  <img alt='Screenshot 1' src='https://github.com/gyeongmin-lee/Storify/blob/master/screenshots/Screenshot_20200822-201717.jpg' width=""250""/>
  <img alt='Screenshot 2' src='https://github.com/gyeongmin-lee/Storify/blob/master/screenshots/Screenshot_20200822-201734.jpg' width=""250""/>
  <img alt='Screenshot 3' src='https://github.com/gyeongmin-lee/Storify/blob/master/screenshots/Screenshot_20200822-201803.jpg' width=""250""/>
  <img alt='Screenshot 4' src='https://github.com/gyeongmin-lee/Storify/blob/master/screenshots/Screenshot_20200822-201811.jpg' width=""250""/>
  <img alt='Screenshot 5' src='https://github.com/gyeongmin-lee/Storify/blob/master/screenshots/Screenshot_20200822-201833.jpg' width=""250""/>
 </p>

## Features
- Sign in using Spotify 
- Load playlists from Spotify
- Add captions to each song in a Spotify playlist
- Share playlist via link
- Browse playlists created by other users
- Save playlists

## Built With
- [Flutter](https://flutter.dev/)
- [Spotify Web API](https://developer.spotify.com/documentation/web-api/)
- [Firebase Cloud Firestore](https://firebase.google.com/)
- [Algolia](https://www.algolia.com/) - search provider

## Changelog

### 1.0.0
- Initial release
"
536,changamanda/spotify-api-todo-ruby-006,Ruby,"---
tags: todo, api, json
language: ruby
resources: 3
---

# Spotify's Chart API Todo

## Objective

Get more familiar with using APIs and their JSON contents in Ruby.

## Introduction

Scraping sites is one way to get data but many times, companies will expose more data through their application programming interfaces, or APIs. For this todo, we're going to focus on [Spotify's chart API](http://charts.spotify.com/docs).

## Instructions
* This is a test-driven lab so just get those specs to pass. Remember to start with the first specs then move to the later ones as they build on each other!
* If you get stuck, refer to the [docs](http://charts.spotify.com/docs), the resources below, and take a look at these urls and try to pattern match: 
  * [http://charts.spotify.com/api/charts/]( http://charts.spotify.com/api/charts/)
  * [http://charts.spotify.com/api/charts/most_shared](http://charts.spotify.com/api/charts/most_shared)

## Bonus
* Make a command line app that interacts with the API.

## Resources
* [StackOverflow](http://stackoverflow.com/) - [JSON.load](http://stackoverflow.com/questions/18581792/ruby-on-rails-and-json-parser-from-url?answertab=votes#tab-top)
* [RubyDocs](http://www.ruby-doc.org/) - [JSON Load Method](http://www.ruby-doc.org/stdlib-2.0.0/libdoc/json/rdoc/JSON.html#method-i-load)
* [Spotify](https://developer.spotify.com/) - [Chart Documentation](http://charts.spotify.com/docs)
"
537,iagolaguna/vscodefy,JavaScript,"# vscodefy

[![GitHub](https://img.shields.io/github/license/mashape/apistatus.svg)](https://github.com/iagolaguna/vscodefy)

## BETA : **Only for Spotify Premium Users**

Use Spotify inside vscode. Provides integration with Spotify Web API and remote-control resources

## Table of contents

* [Usage](#usage)
* [Features](#features)
* [How to contribute](#howtocontribute)
* [Vscodefy Server](https://github.com/iagolaguna/vscodefy-server)
* [Vscodefy OAuth](https://github.com/iagolaguna/vscodefy-oauth)
* [Issues](#issues)
* [License](#license)

## Usage

![How to use](/assets/usage.gif)

## Features

| Feature                      | macOS         | Linux                        | Windows                      |
| ---------------------------- |:-------------:| :--------------------------- | :--------------------------- |
| Show current song            | ✅            | ✅                            | ✅                            |
| Play Next Song               | ✅            | ✅                            | ✅                            |
| Play Previous Song           | ✅            | ✅                            | ✅                            |
| Play                         | ✅            | ✅                            | ✅                            |
| Pause                        | ✅            | ✅                            | ✅                            |
| Play Pause                   | ✅            | ✅                            | ✅                            |
| Available Devices            | ✅            | ✅                            | ✅                            |

## License

This project is under the MIT license.
"
538,fow5040/Wox.Plugin.SpotifyPremium,C#,"Wox.Plugin.SpotifyPremium
==================

Spotify plugin for the [Wox launcher](https://github.com/Wox-launcher/Wox)

### About

Control your Spotify client from Wox. Search for tracks, artists, or albums and launch the results directly to your client.
This plugin requires the use of the Spotify Web API, which is only accessible through Spotify Premium

![image](http://i.imgur.com/AfUkPvd.gif)

### Usage
| Keyword                            | Description                   |
| ---------------------------------- | ----------------------------- |
| `` sp ``                           | Show currently playing track  |
| `` sp {spotify search query} ``    | Search all of Spotify         |
| `` sp track {track name} ``        | Search for a track            |
| `` sp artist {artist name} ``      | Search for an artist          |
| `` sp album {album name} ``        | Search for an album           |
| `` sp playlist {playlist name} ``  | Search personal playlists     |
| `` sp queue {track name} ``        | Search for track and queue it |
| `` sp next ``                      | Play next track               |
| `` sp last ``                      | Play previous track           |
| `` sp play ``                      | Resume currently playing track|
| `` sp pause ``                     | Pause currently playing track |
| `` sp mute ``                      | Toggle Mute                   |
| `` sp volume ``                    | Set Volume (1-100)            |
| `` sp device ``                    | Set Active Device             |
| `` sp shuffle ``                   | Toggle Shuffle Mode           |
| `` sp reconnect ``                 | Force a full reconnection     |

### Notice
- Spotify relies on Web Authentication Calls to Connect to the API remotely - you will need to authorize it to use this plugin
- **You _NEED_ a client secret and client ID to use this plugin!**
    - This app currently hardcodes my personal Client ID and Client Secret to interact with Spotify. If current app usage hits any API limits, naturally you will need to switch out the current Client ID and Secret
    - To use a custom ID/Secret, create a file called security.store in _%localAppData%\Wox\app-1.3.578\Plugins\Wox.Plugin.SpotifyPremium\security.store_ with the following format:
    ```
    {""ClientID"":""yourClientSecret"",""ClientSecret"":""yourClientSecret""}
    ```
    - To generate a key pair, navigate to ``https://developer.spotify.com/dashboard/``, login, and generate your own ID & Key
    - After generating a key pair, under ""edit settings"", add `http://localhost:4002/callback` as a Redirect URI
- This plugin cannot currently search for Podcasts - this is due to a restructure of the Spotify API which enabled support for ""FullEpisode"", among other things. See the [SpotifyAPI-NET Documentation](https://johnnycrazy.github.io/SpotifyAPI-NET/docs/iplayableitem) for more information.
- The Spotify queue API currently only supports adding single tracks to queues, not albums, even though the player can add albums, etc.
- Set Wox Maximum Results Shown to 12 or higher for best results

### Development
- To get started developing:
    - Restore all NuGet dependencies (dotnet restore)
    - Run build script (visual studio code > Run Build Task)

### Third-Party Libraries

- [SpotifyAPI-NET](https://github.com/JohnnyCrazy/SpotifyAPI-NET) : Spotify API wrapper
- [Json.Net](https://github.com/JamesNK/Newtonsoft.Json) : High performance json library

## To Do - Ideas

- Search user content (saved music)
- Configurable default search type
- Add configuration menu
    - Would really like a config menu for people to put their own app ID/Secrets
- Enable full integration with API - including ""Episode"" and podcast control

### Reminder Section - because I'm forgetful
#### _""Release""_ steps
- Bump version number in `plugin.json`
- `dotnet build --configuration Release`
- zip up contents of bin/Release as <something>.wox
- Upload 
"
539,mtricht/gamesense-essentials,Kotlin,"# gamesense-essentials
[![Downloads](https://img.shields.io/github/downloads/mtricht/gamesense-essentials/total.svg)](https://github.com/mtricht/gamesense-essentials/releases)

Essential OLED integrations for SteelSeries Gamesense.

After 2 years I no longer own a steelseries keyboard. If any issues arises from using this I will no longer be able to troubleshoot it.

This programs adds the following to your SteelSeries OLED screen:

- Clock
- Volume slider
- Now playing artist and song for:
  - Spotify
  - iTunes
  - [MusicBee](https://getmusicbee.com/)
  - [AIMP](https://www.aimp.ru/) 
  - [YouTube Music Desktop App](https://ytmdesktop.app/)
  - [foobar2000](https://www.foobar2000.org/) (use this [plugin](https://skipyrich.com/wiki/Foobar2000:Now_Playing_Simple) and point the file to `C:\Users\<YourName>\foobar_np.txt`)

[Download for Windows](https://github.com/mtricht/gamesense-essentials/releases/download/1.9.0/gamesense-essentials-1.9.0.msi)  

## Demo
https://user-images.githubusercontent.com/7511094/122837368-3e0fad00-d2f4-11eb-868e-980b2b29e1c1.mp4

## Run on windows startup
To run after boot, create a shortcut to gamesense-essentials inside the ""Startup"" folder. Follow this [tutorial](https://www.howtogeek.com/208224/how-to-add-programs-files-and-folders-to-system-startup-in-windows-8.1/) if you're having trouble.

## Tick rate
Starting with v1.3.0, the tick rate/delay is now configurable through the system tray icon. This value determines how many times per second the OLED screen is updated.
The default on windows is 50 milliseconds.

This is because the lower the number, the higher the CPU usage will be. For my 8-core gaming desktop, 50 milliseconds is barely noticeable, but for my laptop, 50 milliseconds is way too fast and the CPU fans will go crazy.   
"
540,kmille/deezer-downloader,Python,"## Music Downloader  :notes: :headphones: :dancer: :unicorn:
![tests](https://github.com/kmille/deezer-downloader/workflows/tests/badge.svg) ![push image to dockerhub](https://github.com/kmille/deezer-downloader/workflows/push%20to%20dockerhub/badge.svg) ![docker pulls](https://img.shields.io/docker/pulls/kmille2/deezer-downloader) ![latest tag](https://img.shields.io/github/v/tag/kmille/deezer-downloader?sort=semver) ![Python 3.6](https://img.shields.io/badge/python-%3E=3.6-blue.svg)


### Features

- download songs, albums, public playlists from Deezer.com (account is required, free plan is enough)
- download Spotify playlists (by parsing the Spotify website and download the songs from Deezer)
- download as zip file (including m3u8 playlist file)
- 320 kbit/s mp3s with ID3-Tags and album cover (UPDATE: right now only 128bkit/s mp3 works, see #66)
- download songs via yt-dlp
- KISS front end
- MPD integration (use it on a Raspberry Pi!)
- simple REST api



### How to use it

There is a settings file template called `settings.ini.example`. You can specify the download directory with  `download_dir`. Pressing the download button only downloads the song/album/playlist. If you set `use_mpd=True` in the `settings.ini` the backend will connect to mpd (localhost:6600) and update the music database. Pressing the play button will download the music. If `use_mpd=True`  is set the mpd database will be updated and the song/album/playlist will be added to the playlist. In `settings.ini` `music_dir` should be the music root location of mpd. The `download_dir` must be a subdirectory of `music_dir`. 

As Deezer sometimes requires a captcha to login the auto login features was removed. Instead you have to manually insert a valid Deezer cookie to the `settings.ini`. The relevant cookie is the `arl` cookie. 



### Run it as a service

We use it with nginx and [ympd](https://github.com/notandy/ympd) as mpd frontend

- / goes to ympd
- /d/ goes to the downloader

The deployment directory contains a systemd unit file and a nginx vhost config file. There is also a [patch](https://github.com/kmille/music-ansible/blob/master/roles/ympd/files/fix_header.patch) to add a link to the ympd frontend. The `debug` tab will show you the debug output of the app.



### Try it out

```bash	
vagrant up
vagrant ssh
sudo vim /opt/deezer/app/settings.ini # insert your Deezer cookie
/opt/deezer/app/venv/bin/python /opt/deezer/app/app.py # start the backend

# On the host:
xdg-open http://localhost:5000 # view frontend in the browser
ncmpcpp -h 127.0.0.1 # try the mpd client
```

### Docker

You can use the Docker image hosted on [hub.docker.com](https://hub.docker.com/r/kmille2/deezer-downloader). Login into your free Deezer account and grab the `arl` cookie. Then:

```bash
mkdir downloads
sudo docker run -p 5000:5000 --volume $(pwd)/downloads/:/mnt/deezer-downloader --env DEEZER_COOKIE_ARL=changeme kmille2/deezer-downloader:latest 
xdg-open http://localhost:5000
```

If you want to debug or build it from source: there is a docker-compose file in the docker directory. The `docker/downloads` directory is mounted into the container and will be used as download directory. You have to check the permissions of the `docker/downloads` directory as docker mounts it with the same owner/group/permissions as on the host. The `deezer` user in the docker container has uid 1000. If you also have the uid 1000 then there should be no problem. For debugging: `sudo docker-compose build --force-rm && sudo docker-compose up`

### Manual deployment

```bash
apt-get update -q
apt-get install -qy vim tmux git gcc ffmpeg
apt-get install -qy python3-virtualenv python3-dev
git clone https://github.com/kmille/deezer-downloader.git /opt/deezer
python3 -m virtualenv -p python3 /opt/deezer/app/venv
source /opt/deezer/app/venv/bin/activate
pip install -r /opt/deezer/requirements.txt
pip install -U yt-dlp
cp /opt/deezer/app/settings.ini.example /opt/deezer/app/settings.ini
# Adjust /opt/deezer/app/settings.ini
/opt/deezer/app/venv/bin/python /opt/deezer/app/app.py

# for mpd
apt-get install -yq mpd ncmpcpp
# adjust the file paths in /etc/mpd.conf and settings.ini
systemctl restart mpd
ncmpcpp -h 127.0.0.1
```



### Shortcuts
ctrl-m: focus search bar  
Enter: serach for songs   
Alt+Enter: search for albums  
ctrl-b: go to / (this is where our ympd is)  
ctrl-shift-[1-7] switch tabs    



### Some screenshots

Search for songs. You can listen to a 30 second preview in the browser.  

![](/screenshots/2020-05-13-211356_screenshot.png)  

Search for albums. You can download them as zip file.  

![](/screenshots/2020-05-13-213544_screenshot.png)

List songs of an album.

![](/screenshots/2020-05-13-211528_screenshot.png)

Download songs with youtube-dl  

![](/screenshots/2020-05-13-211622_screenshot.png)

Download a Spotify playlist.   

![](/screenshots/2020-05-13-211629_screenshot.png)  

Download a Deezer playlist.    

![](/screenshots/2020-05-13-211633_screenshot.png)  

ncmpcpp mpd client.  

![](/screenshots/2020-05-13-212025_screenshot.png)  



### Tests

```bash
cd app
source venv/bin/activate
python -m pytest -v tests.py
```



### Deployment with Ansible (including mpd and ympd)
https://github.com/kmille/music-ansible (almost always outdated)



### Changelog

#### Version 1.3.3 (27.12.2021)
- replace youtube-dl by yt-dl
- update third party dependencies

#### Version 1.3.2 (26.11.2021)
- fix broken deezer download functionality (#66, removes the ability to download flac quality)
- update third party dependencies
- update ubuntu base image for the docker container

#### Version 1.3.1 (21.01.2021)
- allow to set download quality (flac|mp3) via environment variable DEEZER_FLAC_QUALITY (#43)

#### Version 1.3 (05.11.2020)

- feature: download your favorite Deezer songs
- automated tests with Github Actions
- push Docker image to [hub.docker.com](https://hub.docker.com/repository/docker/kmille2/deezer-downloader/general) with Github Actions

#### Version 1.2 (01.11.2020)

- **breaking change:** now use the `arl` cookie instead of the `sid` cookie. This cookie does not expire so we don't need the background thread that keeps the session alive
- add support for flac as download format

#### Version 1.1 (13.05.2020)

- thanks to [luelista](https://github.com/luelista) for the contribution!
- play 30 second preview in browser
- add Vagrantfile
- show album cover in search results
- use a threaded queue for download tasks
- list album songs
"
541,linusg/spotifube,JavaScript,"# Spotifube

> A `GUI` for the https://github.com/ritiek/spotify-downloader/ project.

## How this works
`spotify-downloader` is a CLI that uses Spotify tracks/playlists to match youtube videos and download them as mp3, including id3, album art, etc.

This project should provide initially (MVP) a simple UI to drag and drop playlist links, fetch the tracks inside of these playlists and provide a way to the user download these songs into a folder.

## Note

Currently not much is done. This project is maintained by a spotify-downloader collaborator – it aims at providing a complete wrapper of the CLI tool!

I'm kinda busy but work will continue within the next weeks. Unless you know Electron, don't try using this. It's nothing but a mess :)

### Development Scripts

```bash
# run application in development mode
yarn dev

# compile source code and create webpack output
yarn compile

# `yarn compile` & create build with electron-builder
yarn dist

# `yarn compile` & create unpacked build with electron-builder
yarn dist:dir
```
"
542,krmax44/Playify,Vue,"<div align=""center"">
	<img src=""https://i.imgur.com/4y0EiJ3.png"">
	<h3>Playify opens Spotify links in various other streaming services and offers integration with the GPMDP. It can also convert playlists to Google Play Music. <a href=""https://youtu.be/NNu1ZseYMt8"">Watch the video</a></h3>
	<a href=""https://chrome.google.com/webstore/detail/playify/cniimiiflgmmjmcohcgnofcdiifdifef"" title=""Download""><img src=""https://img.shields.io/chrome-web-store/users/cniimiiflgmmjmcohcgnofcdiifdifef.svg?logo=google-chrome&logoColor=white&label=downloads&style=flat""></a>&nbsp;
	<a href=""https://chrome.google.com/webstore/detail/playify/cniimiiflgmmjmcohcgnofcdiifdifef"" title=""Rate""><img src=""https://img.shields.io/chrome-web-store/rating/cniimiiflgmmjmcohcgnofcdiifdifef.svg?logo=google-chrome&logoColor=white&label=rating&style=flat""></a>&nbsp;
	<a href=""https://www.codacy.com/project/krmax44/Playify/dashboard"" title=""for my ego""><img src=""https://img.shields.io/codacy/grade/0c6ed9957cee40ae895671514f865e87.svg?label=code%20quality&style=flat""></a>
</div>

## How it works

It's simple. You click on a Spotify link, and it opens in your streaming service of choice. For the best experience, the [Google Play Music Desktop Player](https://googleplaymusicdesktopplayer.com) is recommended. If you don't want to open a song in Spotify, add `#no-playify` at the end of the URL.

### GPMDP

To use the Google Play Music Desktop Player, click on the Playify icon in the Chrome Toolbar and select `Google Play Music Desktop Player`. The next time you open a Spotify link, Playify will prompt you to enter a four-digit code that will be displayed in GPMDP. Notice that GPMDP must be running in the background and the Playback API (Websocket API) needs to be enabled.

### Transfer playlists

You can find more information about transfering playlists with Playify [here](https://github.com/krmax44/Playify-Transfer/blob/master/README.md#playify-transfer).

## Sub-repos

Parts of Playify have been split up into multiple repos:

 - [Playify Transfer](https://github.com/krmax44/Playify-Transfer)
 - [Playify Backend](https://github.com/krmax44/Playify-Backend)
 - [Boilerplate for Chrome Extensions with Vue.js](https://github.com/krmax44/chrome-extension-vue-boilerplate)

## Disclaimer

Spotify, Google, and other mentioned brands are not affiliated with this project.

## Donate

<a href=""https://www.paypal.com/cgi-bin/webscr?cmd=_s-xclick&hosted_button_id=VRGZY3DW4UALC""><img src=""https://www.paypal.com/en_US/i/btn/btn_donateCC_LG.gif"" align=""right""></a>

If you're feeling generous, I would really appreciate a small donation to keep the extension in development and the servers running. Thank you! [Donate with Paypal](https://www.paypal.com/cgi-bin/webscr?cmd=_s-xclick&hosted_button_id=VRGZY3DW4UALC)
"
543,TimeToogo/spotify-hr,JavaScript,"Spotify HR FitBit App
=====================

This is source code for the Spotify HR on the FitBit Versa.

![Demo](https://image.ibb.co/m4UNqy/image.png)

Features
========

The app is a remote controller for your Spotify account.

 - Remote control music playback
 - Change playlist
 - Volume control
 
Why *HR*?
=========

HR stands for Heart-Rate. Spotify HR implements a unique Heart-Rate based shuffle feature.
When enabled the songs in your current playlist will be shuffled to match your current heart rate during playback.
With faster and higher tempo songs being played as your heart rate increases.
A nice addition to enjoy matching music to any varied workout.

![HR Shuffle](https://image.ibb.co/daFFcd/image.png)


Common Issues
=============

### No active device found

Please ensure that:

 - Your FitBit device is connected to your phone via Bluetooth and FitBit app is running in the background.
 - That Spotify is running and open on your device.
 - That you’ve logged into the same Spotify account on FitBit and on the Spotify app.



### Playback controls are not working

Unfortunately controlling playback requires a Premium Spotify account. This is restriction imposed by the Spotify Web API.


### Lost connection to FitBit app

This usually happens when the Spotify app cannot communicate with the FitBit app on your iOS/Android device.

Please ensure that:

 - Bluetooth is enabled on your phone and the watch is connected via Bluetooth
 - The FitBit app is running and has permission to run in the background

If it's still not working, please open the FitBit app on your phone and sync your FitBit by dragging down on the main screen.


### Logged in to wrong account

1. [Visit Spotify in your browser](https://www.spotify.com/)
2. Click “Log Out” from the menu
3. Open the FitBit app, go to Spotify HR settings and log in again. 
"
544,lttkgp/C-3PO,Python,"<a href=""https://www.deviantart.com/steveargyle/art/C-3PO-578309067""><img align=""right"" alt=""C3PO by SteveArgyle on Deviantart"" width=""150"" src=""https://user-images.githubusercontent.com/10023615/83328359-fb6dd380-a29f-11ea-9f3e-07499b8f0cd2.jpg""/></a>

# C3PO

When he's not flying around with the Solos and Skywalkers on the Millenium Falcon, C-3PO decided to help LTTKGP out with managing the huge amount of songs being posted each day to the group and organising them in a database (such a nice guy!) so we can build cool functionality on top of it.

## Getting started

These instructions will get you a copy of the project up and running on your local machine for development and testing purposes.

### Prerequisites

- Docker & Docker Compose
- <details>
    <summary> Spotify Web API Credentials </summary>

  You will also need Spotify authorization for fetching song metadata. The prodcude is very straightforward. Register a new application here:
  [Spotify for Developers](https://developer.spotify.com/my-applications)

  That will give you a unique **client ID** and **client secret key** to use in authorization flows.
  </details>

- <details>
    <summary>Google Application Credentials</summary>

    Google Application Credentials is an API key that is required to extract YouTube metadata from the Youtube Data API. To get the key, create a new project on the [Google Developer Console](https://console.developers.google.com/), enable the YouTube Data API and proceed to `Credentials` and create a new API key.
  </details>

### Setting up

- Create a `.env` file, using the `.env.template` file as reference.

  ```sh
  cp .env.template .env
  ```

  Fill all the fields using the credentials created as part of the pre-requisites.

### Developing

- Install Development Dependencies

  ```sh
  pip install -e . -r requirements/dev.txt
  ```

- Install pre-commit hooks

  ```sh
  pre-commit install
  ```

### Starting the server

Run the server with:

```sh
docker-compose up
```

The API server should be accessible at http://localhost:8000/.

### Populating the database

Follow the instructions on [R2-D2](https://github.com/lttkgp/R2-D2) and start it.

## Contributing

Contributions are always welcome. Your contributions could either be creating new features, fixing bugs or improving documentation and examples. Find more detailed information in [CONTRIBUTING.md](.github/CONTRIBUTING.md).

## License

[MIT](LICENSE)
"
545,ronnieotieno/JetPack-Compose-Spotify-UI,Kotlin,"# JetPack-Compose-Spotify-UI

Just learning compose while building the Spotify ui.

## Screenshot

<img src=""screenshots/home.jpg"" width=300/>
"
546,neokt/audio-music-mood-classification,Jupyter Notebook,"# Audio Music Mood Classification

Classification using audio features to generate a mood profile for a spotify playlist. Analysis and modeling done with pandas, scikit-learn ensemble methods, and XGBoost. Visualizations created using matplotlib and seaborn. Production in Flask. Data queried from Billboard API, Spotify API and Gracenote API.

* [Blog Post](https://neokt.github.io/projects/audio-music-mood-classification/)
* [Presentation](neokt-audio-music-mood-classification-102816.pdf)
* [App Screenshots](/screenshots)

Please contact me at neo.kaiting@gmail.com if you would like access to the dataset.
"
547,ricardojoserf/spotify-playlist-downloader,Python,"# spotify-playlist-downloader - Downloading Spotify Playlists

From Playlist ID:
```
python3 main.py -p PLAYLIST_SPOTIFY_ID -i CLIENT_ID -s CLIENT_SECRET [-d OUTPUT_DIRECTORY]
```

From Playlist URI:
```
python3 main.py -u PLAYLIST_SPOTIFY_URI -i CLIENT_ID -s CLIENT_SECRET [-d OUTPUT_DIRECTORY]
```


--------------------------------------------------


## Example

```
python3 main.py -p 0AFu117j8WX2auNWDAyMMV -i $CLIENT_ID -s $CLIENT_SECRET -d playlist_id_example_output

python3 main.py -u spotify:playlist:0AFu117j8WX2auNWDAyMMV -i $CLIENT_ID -s $CLIENT_SECRET -d uri_example_output
```

![Screenshot](https://i.imgur.com/6DyO0Tz.jpg)


Result:

![Screenshot](https://i.imgur.com/EzNTbPx.png)


--------------------------------------------------


## Steps & Requirements

#### 1) Get your own CLIENT_ID and SECRET_ID

You can visit the official page (https://developer.spotify.com/documentation/general/guides/authorization-guide/) or follow these instructions:

- Visit and log into: https://developer.spotify.com/dashboard/applications

- Create a test application and get the ""Client ID"" and ""Client Secret"" values. Use them with the paramaters ""-i"" and ""-s""


#### 2.a) Get the Playlist ID if using web client...

![Screenshot](https://i.imgur.com/70VDD4K.png)


#### 2.b) ...or get the Playlist URI if using heavy client

![Screenshot](https://i.imgur.com/YliDKpR.png)


#### 3) Install dependencies

```
apt install ffmpeg

pip3 install -r requirements.txt
```

-----------------------------

## Authors

- [@Javisalva9](https://github.com/Javisalva9)

- [@ricardojoserf](https://github.com/ricardojoserf)

- [@chess7th](https://github.com/chess-seventh)


## Note

Only working with Python 3.x (tested using 3.8.1).
"
548,distubejs/example,JavaScript,"# DisTube Example

DisTube.js.org example music bot with command handler

**Dependencies maybe outdated. You should update them yourself!**

Check out the [official guide](https://distube.js.org/guide) to get your music bot running from scratch.
"
549,guilyx/guilyx,TypeScript,"[![Actions Status](https://github.com/guilyx/guilyx/workflows/wakatime-stats/badge.svg)](https://github.com/guilyx/guilyx/actions)
[![Actions Status](https://github.com/guilyx/guilyx/workflows/update-gh-activity/badge.svg)](https://github.com/guilyx/guilyx/actions)
![](https://visitor-badge.glitch.me/badge?page_id=guilyx.guilyx)

<p align=""center"">
<br/>
<a href=""https://twitter.com/nthofhisname"">
  <img alt=""guilyx | Twitter"" width=""50px"" src=""https://user-images.githubusercontent.com/43545812/144034996-602b144a-16e1-41cc-99e7-c6040b20dcaf.png""/>
</a>
<a href=""https://www.linkedin.com/in/erwinlejeune-lkn"">
  <img alt=""guilyx's LinkdeIN"" width=""50px"" src=""https://user-images.githubusercontent.com/43545812/144035037-0f415fc7-9f96-4517-a370-ccc6e78a714b.png"" />
</a>
<a href=""https://www.instagram.com/nthofhisname"">
  <img alt=""guilyx's Instagram"" width=""50px"" src=""https://user-images.githubusercontent.com/43545812/144035088-0dfb165f-8fe0-4d13-896c-876c29d2b128.png"" />
</a>
<a href=""https://open.spotify.com/user/11147618695?si=zZFn6uAGRLyoU02lsG50GA"">
  <img alt=""guilyx's Spotify"" width=""50px"" src=""https://user-images.githubusercontent.com/43545812/144035120-1ad5169b-91c7-4078-bef9-6a82c733f373.png"" />
</a>
<br>
<img alt=""Code Time"" src=""https://img.shields.io/endpoint?style=flat&url=https://codetime-api.datreks.com/badge/1615?logoColor=white%26project=%26recentMS=0%26showProject=false"" />
</p>

```yaml
name: Erwin Lejeune
located_in: Odense, Denmark
from: Nantes (France)
job: Robotics Software Engineer
education: [""Master's in Robotics"", ""Master's in Embedded Systems"", ""Bachelor's in Electronics""]
company: Coalescent Mobile Robotics
past experiences: 
  - [""Robotics Researcher"", ""Laboratory of Digital Sciences of Nantes (LS2N)"", ""France"", ""2019-2021]
  - [""Backend Software Engineer"", ""Hiventive"", ""Fully Remote"", ""2020-2021""]
  - [""Robotics Intern"", ""Ingeniarius"", ""Portugal"", ""2019""]
  - [""Embedded Systems Engineer"", ""Hiventive"", ""France"", ""2019""]
  - [""Robotics Intern"", ""Laboratory of Digital Sciences of Nantes (LS2N)"", ""France"", ""2019""]

fields_of_interests: [""Path Planning"", ""Trajectory Planning"", ""Path Following"", ""Behaviour Planning"", ""Localization"", ""Sensor Fusion"", ""Embedded Systems""]
technical_background: [""Motion Planning"", ""Optimization"", ""Nonlinear Control"", ""Real-Time Systems"", ""Automated Planning""]
currently_learning: [""Aerial Robotics""]
hobbies: [""Basketball"", ""Cinema"", ""Competitive Gaming"", ""IoT""]
```

<p align=""center"">
  <img alig src=""https://github-profile-trophy.vercel.app/?username=guilyx&column=6&rank=SSS,SS,S,AAA,AA,A,B,C"" />
</p>

<p align=""center"">
  <a href=""https://spotify-github-profile.vercel.app/api/view?uid=11147618695&redirect=true"">
    <img src=""https://spotify-github-profile.vercel.app/api/view?uid=11147618695&cover_image=true&theme=default&bar_color=e3e3e3&bar_color_cover=true"">
  </a>
</p>

<p align=""center"">
  <img src=""https://guilyx.vercel.app/api/top-played"">
</p>
 
```yaml
section: spotify components info
tutorial_path: guilyx/guilyx/how-to.md
original_idea: natemoo-re
improved_by: andyruwruw
note: thanks to both of them!
```


**:zap: Recent Activity:**

<!--START_SECTION:activity-->
1. 🎉 Merged PR [#4](https://github.com/guilyx/pandemic-dataviz/pull/4) in [guilyx/pandemic-dataviz](https://github.com/guilyx/pandemic-dataviz)
2. 🎉 Merged PR [#6](https://github.com/guilyx/airplane-booking/pull/6) in [guilyx/airplane-booking](https://github.com/guilyx/airplane-booking)
3. 🗣 Commented on [#22](https://github.com/guilyx/guilyx/issues/22) in [guilyx/guilyx](https://github.com/guilyx/guilyx)
4. 🗣 Commented on [#20](https://github.com/guilyx/guilyx/issues/20) in [guilyx/guilyx](https://github.com/guilyx/guilyx)
5. 🗣 Commented on [#20](https://github.com/guilyx/guilyx/issues/20) in [guilyx/guilyx](https://github.com/guilyx/guilyx)
<!--END_SECTION:activity-->

[![activity graph](https://activity-graph.herokuapp.com/graph?username=guilyx&custom_title=Erwin's%20activity%20graph&theme=github-light&hide_border=true)](https://github.com/ashutosh00710/github-readme-activity-graph)

<!--START_SECTION:waka-->
![Code Time](http://img.shields.io/badge/Code%20Time-765%20hrs%2031%20mins-blue)

![Lines of code](https://img.shields.io/badge/From%20Hello%20World%20I%27ve%20Written-293%20Thousand%20lines%20of%20code-blue)

**I'm an Early 🐤** 

```text
🌞 Morning    133 commits    ████░░░░░░░░░░░░░░░░░░░░░   15.54% 
🌆 Daytime    488 commits    ██████████████░░░░░░░░░░░   57.01% 
🌃 Evening    161 commits    ████░░░░░░░░░░░░░░░░░░░░░   18.81% 
🌙 Night      74 commits     ██░░░░░░░░░░░░░░░░░░░░░░░   8.64%

```
📅 **I'm Most Productive on Wednesday** 

```text
Monday       161 commits    ████░░░░░░░░░░░░░░░░░░░░░   18.81% 
Tuesday      170 commits    █████░░░░░░░░░░░░░░░░░░░░   19.86% 
Wednesday    175 commits    █████░░░░░░░░░░░░░░░░░░░░   20.44% 
Thursday     149 commits    ████░░░░░░░░░░░░░░░░░░░░░   17.41% 
Friday       111 commits    ███░░░░░░░░░░░░░░░░░░░░░░   12.97% 
Saturday     38 commits     █░░░░░░░░░░░░░░░░░░░░░░░░   4.44% 
Sunday       52 commits     █░░░░░░░░░░░░░░░░░░░░░░░░   6.07%

```


📊 **This Week I Spent My Time On** 

```text
⌚︎ Time Zone: Europe/Paris

💬 Programming Languages: 
C++                      3 hrs 46 mins       ████████████████░░░░░░░░░   65.24% 
Other                    53 mins             ███░░░░░░░░░░░░░░░░░░░░░░   15.28% 
YAML                     38 mins             ██░░░░░░░░░░░░░░░░░░░░░░░   11.15% 
Markdown                 13 mins             █░░░░░░░░░░░░░░░░░░░░░░░░   3.78% 
XML                      7 mins              ░░░░░░░░░░░░░░░░░░░░░░░░░   2.29%

🐱‍💻 Projects: 
navigation2              3 hrs 26 mins       ███████████████░░░░░░░░░░   59.51% 
serena_bringup           52 mins             ███░░░░░░░░░░░░░░░░░░░░░░   15.16% 
serena_setup_playbook    32 mins             ██░░░░░░░░░░░░░░░░░░░░░░░   9.42% 
robot_health_checker     25 mins             █░░░░░░░░░░░░░░░░░░░░░░░░   7.38% 
cmr_tests_utils          24 mins             █░░░░░░░░░░░░░░░░░░░░░░░░   7.06%

```


 Last Updated on 02/09/2022 17:07:28 UTC
<!--END_SECTION:waka-->

<p align=""center"">
  <img src=""https://capsule-render.vercel.app/api?type=waving&color=gradient&height=60&section=footer""/>
</p>
"
